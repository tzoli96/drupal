{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-engine/src/view/placeholder.js", "../../@ckeditor/ckeditor5-engine/src/view/typecheckable.js", "../../@ckeditor/ckeditor5-engine/src/view/node.js", "../../@ckeditor/ckeditor5-engine/src/view/text.js", "../../@ckeditor/ckeditor5-engine/src/view/textproxy.js", "../../@ckeditor/ckeditor5-engine/src/view/matcher.js", "../../@ckeditor/ckeditor5-engine/src/view/stylesmap.js", "../../@ckeditor/ckeditor5-engine/src/view/element.js", "../../@ckeditor/ckeditor5-engine/src/view/containerelement.js", "../../@ckeditor/ckeditor5-engine/src/view/editableelement.js", "../../@ckeditor/ckeditor5-engine/src/view/rooteditableelement.js", "../../@ckeditor/ckeditor5-engine/src/view/treewalker.js", "../../@ckeditor/ckeditor5-engine/src/view/position.js", "../../@ckeditor/ckeditor5-engine/src/view/range.js", "../../@ckeditor/ckeditor5-engine/src/view/selection.js", "../../@ckeditor/ckeditor5-engine/src/view/documentselection.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/bubblingemittermixin.js", "../../@ckeditor/ckeditor5-engine/src/view/document.js", "../../@ckeditor/ckeditor5-engine/src/view/attributeelement.js", "../../@ckeditor/ckeditor5-engine/src/view/emptyelement.js", "../../@ckeditor/ckeditor5-engine/src/view/uielement.js", "../../@ckeditor/ckeditor5-engine/src/view/rawelement.js", "../../@ckeditor/ckeditor5-engine/src/view/documentfragment.js", "../../@ckeditor/ckeditor5-engine/src/view/downcastwriter.js", "../../@ckeditor/ckeditor5-engine/src/view/filler.js", "../../@ckeditor/ckeditor5-engine/src/view/renderer.js", "../../@ckeditor/ckeditor5-engine/src/view/domconverter.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/observer.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/keyobserver.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/fakeselectionobserver.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/mutationobserver.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/focusobserver.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/selectionobserver.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/compositionobserver.js", "../../@ckeditor/ckeditor5-engine/src/view/datatransfer.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/inputobserver.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/arrowkeysobserver.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/tabobserver.js", "../../@ckeditor/ckeditor5-engine/src/view/view.js", "../../@ckeditor/ckeditor5-engine/src/model/typecheckable.js", "../../@ckeditor/ckeditor5-engine/src/model/node.js", "../../@ckeditor/ckeditor5-engine/src/model/nodelist.js", "../../@ckeditor/ckeditor5-engine/src/model/text.js", "../../@ckeditor/ckeditor5-engine/src/model/textproxy.js", "../../@ckeditor/ckeditor5-engine/src/model/element.js", "../../@ckeditor/ckeditor5-engine/src/model/treewalker.js", "../../@ckeditor/ckeditor5-engine/src/model/position.js", "../../@ckeditor/ckeditor5-engine/src/model/range.js", "../../@ckeditor/ckeditor5-engine/src/conversion/mapper.js", "../../@ckeditor/ckeditor5-engine/src/conversion/modelconsumable.js", "../../@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js", "../../@ckeditor/ckeditor5-engine/src/model/selection.js", "../../@ckeditor/ckeditor5-engine/src/model/liverange.js", "../../@ckeditor/ckeditor5-engine/src/model/documentselection.js", "../../@ckeditor/ckeditor5-engine/src/conversion/conversionhelpers.js", "../../@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js", "../../@ckeditor/ckeditor5-engine/src/model/utils/autoparagraphing.js", "../../@ckeditor/ckeditor5-engine/src/conversion/upcasthelpers.js", "../../@ckeditor/ckeditor5-engine/src/model/utils/selection-post-fixer.js", "../../@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js", "../../@ckeditor/ckeditor5-engine/src/conversion/viewconsumable.js", "../../@ckeditor/ckeditor5-engine/src/model/schema.js", "../../@ckeditor/ckeditor5-engine/src/conversion/upcastdispatcher.js", "../../@ckeditor/ckeditor5-engine/src/dataprocessor/basichtmlwriter.js", "../../@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js", "../../@ckeditor/ckeditor5-engine/src/controller/datacontroller.js", "../../@ckeditor/ckeditor5-engine/src/conversion/conversion.js", "../../@ckeditor/ckeditor5-engine/src/dataprocessor/xmldataprocessor.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/operation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/utils.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/nooperation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/rootoperation.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/operationfactory.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/transform.js", "../../@ckeditor/ckeditor5-engine/src/model/liveposition.js", "../../@ckeditor/ckeditor5-engine/src/model/batch.js", "../../@ckeditor/ckeditor5-engine/src/model/differ.js", "../../@ckeditor/ckeditor5-engine/src/model/history.js", "../../@ckeditor/ckeditor5-engine/src/model/rootelement.js", "../../@ckeditor/ckeditor5-engine/src/model/document.js", "../../@ckeditor/ckeditor5-engine/src/model/markercollection.js", "../../@ckeditor/ckeditor5-engine/src/model/operation/detachoperation.js", "../../@ckeditor/ckeditor5-engine/src/model/documentfragment.js", "../../@ckeditor/ckeditor5-engine/src/model/writer.js", "../../@ckeditor/ckeditor5-engine/src/model/utils/deletecontent.js", "../../@ckeditor/ckeditor5-engine/src/model/utils/getselectedcontent.js", "../../@ckeditor/ckeditor5-engine/src/model/utils/insertcontent.js", "../../@ckeditor/ckeditor5-engine/src/model/utils/insertobject.js", "../../@ckeditor/ckeditor5-engine/src/model/utils/modifyselection.js", "../../@ckeditor/ckeditor5-engine/src/model/model.js", "../../@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver.js", "../../@ckeditor/ckeditor5-engine/src/dev-utils/view.js", "../../@ckeditor/ckeditor5-engine/src/dev-utils/model.js", "../../@ckeditor/ckeditor5-watchdog/src/watchdog.js", "../../@ckeditor/ckeditor5-watchdog/src/utils/getsubnodes.js", "../../@ckeditor/ckeditor5-watchdog/src/utils/areconnectedthroughproperties.js", "../../@ckeditor/ckeditor5-watchdog/src/editorwatchdog.js", "../../@ckeditor/ckeditor5-watchdog/src/contextwatchdog.js", "../../@ckeditor/ckeditor5-core/src/plugincollection.js", "../../@ckeditor/ckeditor5-core/src/context.js", "../../@ckeditor/ckeditor5-core/src/commandcollection.js", "../../@ckeditor/ckeditor5-core/src/editingkeystrokehandler.js", "../../@ckeditor/ckeditor5-core/src/accessibility.js", "../../@ckeditor/ckeditor5-core/src/editor/utils/editorusagedata.js", "../../@ckeditor/ckeditor5-core/src/editor/editor.js", "../../@ckeditor/ckeditor5-core/src/editor/utils/attachtoform.js", "../../@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin.js", "../../@ckeditor/ckeditor5-core/src/command.js", "../../@ckeditor/ckeditor5-core/src/contextplugin.js", "../../@ckeditor/ckeditor5-core/src/index.js", "../../@ckeditor/ckeditor5-ui/src/formheader/formheaderview.js", "../../@ckeditor/ckeditor5-ui/src/focuscycler.js", "../../@ckeditor/ckeditor5-ui/src/bindings/draggableviewmixin.js", "../../@ckeditor/ckeditor5-ui/src/dialog/dialogactionsview.js", "../../@ckeditor/ckeditor5-ui/src/dialog/dialogcontentview.js", "../../@ckeditor/ckeditor5-ui/src/dialog/dialogview.js", "../../@ckeditor/ckeditor5-ui/src/dialog/dialog.js", "../../@ckeditor/ckeditor5-ui/src/button/listitembuttonview.js", "../../@ckeditor/ckeditor5-ui/src/menubar/menubarmenulistitembuttonview.js", "../../@ckeditor/ckeditor5-ui/src/label/labelview.js", "../../@ckeditor/ckeditor5-ui/src/editorui/accessibilityhelp/accessibilityhelpcontentview.js", "../../@ckeditor/ckeditor5-ui/src/editorui/accessibilityhelp/accessibilityhelp.js", "../../@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler.js", "../../@ckeditor/ckeditor5-ui/src/editorui/bodycollection.js", "../../@ckeditor/ckeditor5-ui/src/button/switchbuttonview.js", "../../@ckeditor/ckeditor5-ui/src/button/filedialogbuttonview.js", "../../@ckeditor/ckeditor5-ui/src/collapsible/collapsibleview.js", "../../@ckeditor/ckeditor5-ui/src/colorgrid/colortileview.js", "../../@ckeditor/ckeditor5-ui/src/colorgrid/colorgridview.js", "../../@ckeditor/ckeditor5-ui/src/colorpicker/utils.js", "../../@ckeditor/ckeditor5-ui/src/labeledfield/labeledfieldview.js", "../../@ckeditor/ckeditor5-ui/src/input/inputbase.js", "../../@ckeditor/ckeditor5-ui/src/input/inputview.js", "../../@ckeditor/ckeditor5-ui/src/inputtext/inputtextview.js", "../../@ckeditor/ckeditor5-ui/src/textarea/textareaview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/dropdownpanelview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/dropdownview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/menu/dropdownmenulistitembuttonview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/menu/dropdownmenubuttonview.js", "../../@ckeditor/ckeditor5-ui/src/list/listitemview.js", "../../@ckeditor/ckeditor5-ui/src/list/listseparatorview.js", "../../@ckeditor/ckeditor5-ui/src/list/listitemgroupview.js", "../../@ckeditor/ckeditor5-ui/src/list/listview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/menu/dropdownmenulistview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/menu/utils.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/menu/dropdownmenulistitemview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/menu/dropdownmenubehaviors.js", "../../@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/menu/dropdownmenunestedmenupanelview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/menu/dropdownmenunestedmenuview.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/toolbarseparatorview.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/toolbarlinebreakview.js", "../../@ckeditor/ckeditor5-ui/src/bindings/preventdefault.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/button/splitbuttonview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/utils.js", "../../@ckeditor/ckeditor5-ui/src/labeledfield/utils.js", "../../@ckeditor/ckeditor5-ui/src/colorpicker/colorpickerview.js", "../../@ckeditor/ckeditor5-ui/src/colorselector/documentcolorcollection.js", "../../@ckeditor/ckeditor5-ui/src/colorselector/colorselectorview.js", "../../@ckeditor/ckeditor5-ui/src/componentfactory.js", "../../@ckeditor/ckeditor5-ui/src/tooltipmanager.js", "../../@ckeditor/ckeditor5-ui/src/badge/badge.js", "../../@ckeditor/ckeditor5-ui/src/editorui/poweredby.js", "../../@ckeditor/ckeditor5-ui/src/editorui/evaluationbadge.js", "../../@ckeditor/ckeditor5-ui/src/arialiveannouncer.js", "../../@ckeditor/ckeditor5-ui/src/menubar/menubarmenulistitemview.js", "../../@ckeditor/ckeditor5-ui/src/menubar/utils.js", "../../@ckeditor/ckeditor5-ui/src/editorui/editorui.js", "../../@ckeditor/ckeditor5-ui/src/editorui/editoruiview.js", "../../@ckeditor/ckeditor5-ui/src/editorui/boxed/boxededitoruiview.js", "../../@ckeditor/ckeditor5-ui/src/editableui/editableuiview.js", "../../@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview.js", "../../@ckeditor/ckeditor5-ui/src/model.js", "../../@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon.js", "../../@ckeditor/ckeditor5-ui/src/panel/sticky/stickypanelview.js", "../../@ckeditor/ckeditor5-ui/src/search/text/searchtextqueryview.js", "../../@ckeditor/ckeditor5-ui/src/search/searchinfoview.js", "../../@ckeditor/ckeditor5-ui/src/search/searchresultsview.js", "../../@ckeditor/ckeditor5-ui/src/search/text/searchtextview.js", "../../@ckeditor/ckeditor5-ui/src/autocomplete/autocompleteview.js", "../../@ckeditor/ckeditor5-ui/src/highlightedtext/highlightedtextview.js", "../../@ckeditor/ckeditor5-ui/src/spinner/spinnerview.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/balloon/balloontoolbar.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/block/blockbuttonview.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/block/blocktoolbar.js", "../../@ckeditor/ckeditor5-ui/src/menubar/menubarmenubuttonview.js", "../../@ckeditor/ckeditor5-ui/src/menubar/menubarmenupanelview.js", "../../@ckeditor/ckeditor5-ui/src/menubar/menubarmenuview.js", "../../@ckeditor/ckeditor5-ui/src/menubar/menubarmenulistview.js", "../../@ckeditor/ckeditor5-ui/src/menubar/menubarmenulistitemfiledialogbuttonview.js", "../../@ckeditor/ckeditor5-ui/src/menubar/menubarview.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/placeholder\n */\nimport '../../theme/placeholder.css';\nimport { logWarning } from '@ckeditor/ckeditor5-utils';\n// Each document stores information about its placeholder elements and check functions.\nconst documentPlaceholders = new WeakMap();\nlet hasDisplayedPlaceholderDeprecationWarning = false;\n/**\n * A helper that enables a placeholder on the provided view element (also updates its visibility).\n * The placeholder is a CSS pseudo–element (with a text content) attached to the element.\n *\n * To change the placeholder text, change value of the `placeholder` property in the provided `element`.\n *\n * To disable the placeholder, use {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} helper.\n *\n * @param options Configuration options of the placeholder.\n * @param options.view Editing view instance.\n * @param options.element Element that will gain a placeholder. See `options.isDirectHost` to learn more.\n * @param options.isDirectHost If set `false`, the placeholder will not be enabled directly\n * in the passed `element` but in one of its children (selected automatically, i.e. a first empty child element).\n * Useful when attaching placeholders to elements that can host other elements (not just text), for instance,\n * editable root elements.\n * @param options.text Placeholder text. It's **deprecated** and will be removed soon. Use\n * {@link module:engine/view/placeholder~PlaceholderableElement#placeholder `options.element.placeholder`} instead.\n * @param options.keepOnFocus If set `true`, the placeholder stay visible when the host element is focused.\n */\nexport function enablePlaceholder({ view, element, text, isDirectHost = true, keepOnFocus = false }) {\n    const doc = view.document;\n    // Use a single a single post fixer per—document to update all placeholders.\n    if (!documentPlaceholders.has(doc)) {\n        documentPlaceholders.set(doc, new Map());\n        // If a post-fixer callback makes a change, it should return `true` so other post–fixers\n        // can re–evaluate the document again.\n        doc.registerPostFixer(writer => updateDocumentPlaceholders(doc, writer));\n        // Update placeholders on isComposing state change since rendering is disabled while in composition mode.\n        doc.on('change:isComposing', () => {\n            view.change(writer => updateDocumentPlaceholders(doc, writer));\n        }, { priority: 'high' });\n    }\n    if (element.is('editableElement')) {\n        element.on('change:placeholder', (evtInfo, evt, text) => {\n            setPlaceholder(text);\n        });\n    }\n    if (element.placeholder) {\n        setPlaceholder(element.placeholder);\n    }\n    else if (text) {\n        setPlaceholder(text);\n    }\n    if (text) {\n        showPlaceholderTextDeprecationWarning();\n    }\n    function setPlaceholder(text) {\n        // Store information about the element placeholder under its document.\n        documentPlaceholders.get(doc).set(element, {\n            text,\n            isDirectHost,\n            keepOnFocus,\n            hostElement: isDirectHost ? element : null\n        });\n        // Update the placeholders right away.\n        view.change(writer => updateDocumentPlaceholders(doc, writer));\n    }\n}\n/**\n * Disables the placeholder functionality from a given element.\n *\n * See {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} to learn more.\n */\nexport function disablePlaceholder(view, element) {\n    const doc = element.document;\n    if (!documentPlaceholders.has(doc)) {\n        return;\n    }\n    view.change(writer => {\n        const placeholders = documentPlaceholders.get(doc);\n        const config = placeholders.get(element);\n        writer.removeAttribute('data-placeholder', config.hostElement);\n        hidePlaceholder(writer, config.hostElement);\n        placeholders.delete(element);\n    });\n}\n/**\n * Shows a placeholder in the provided element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * **Note**: This helper will blindly show the placeholder directly in the root editable element if\n * one is passed, which could result in a visual clash if the editable element has some children\n * (for instance, an empty paragraph). Use {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n * in that case or make sure the correct element is passed to the helper.\n *\n * @returns `true`, if any changes were made to the `element`.\n */\nexport function showPlaceholder(writer, element) {\n    if (!element.hasClass('ck-placeholder')) {\n        writer.addClass('ck-placeholder', element);\n        return true;\n    }\n    return false;\n}\n/**\n * Hides a placeholder in the element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * @returns `true`, if any changes were made to the `element`.\n */\nexport function hidePlaceholder(writer, element) {\n    if (element.hasClass('ck-placeholder')) {\n        writer.removeClass('ck-placeholder', element);\n        return true;\n    }\n    return false;\n}\n/**\n * Checks if a placeholder should be displayed in the element.\n *\n * **Note**: This helper will blindly check the possibility of showing a placeholder directly in the\n * root editable element if one is passed, which may not be the expected result. If an element can\n * host other elements (not just text), most likely one of its children should be checked instead\n * because it will be the final host for the placeholder. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} in that case or make\n * sure the correct element is passed to the helper.\n *\n * @param element Element that holds the placeholder.\n * @param keepOnFocus Focusing the element will keep the placeholder visible.\n */\nexport function needsPlaceholder(element, keepOnFocus) {\n    if (!element.isAttached()) {\n        return false;\n    }\n    // Anything but uiElement(s) counts as content.\n    const hasContent = Array.from(element.getChildren())\n        .some(element => !element.is('uiElement'));\n    if (hasContent) {\n        return false;\n    }\n    const doc = element.document;\n    const viewSelection = doc.selection;\n    const selectionAnchor = viewSelection.anchor;\n    if (doc.isComposing && selectionAnchor && selectionAnchor.parent === element) {\n        return false;\n    }\n    // Skip the focus check and make the placeholder visible already regardless of document focus state.\n    if (keepOnFocus) {\n        return true;\n    }\n    // If the document is blurred.\n    if (!doc.isFocused) {\n        return true;\n    }\n    // If document is focused and the element is empty but the selection is not anchored inside it.\n    return !!selectionAnchor && selectionAnchor.parent !== element;\n}\n/**\n * Updates all placeholders associated with a document in a post–fixer callback.\n *\n * @returns True if any changes were made to the view document.\n */\nfunction updateDocumentPlaceholders(doc, writer) {\n    const placeholders = documentPlaceholders.get(doc);\n    const directHostElements = [];\n    let wasViewModified = false;\n    // First set placeholders on the direct hosts.\n    for (const [element, config] of placeholders) {\n        if (config.isDirectHost) {\n            directHostElements.push(element);\n            if (updatePlaceholder(writer, element, config)) {\n                wasViewModified = true;\n            }\n        }\n    }\n    // Then set placeholders on the indirect hosts but only on those that does not already have an direct host placeholder.\n    for (const [element, config] of placeholders) {\n        if (config.isDirectHost) {\n            continue;\n        }\n        const hostElement = getChildPlaceholderHostSubstitute(element);\n        // When not a direct host, it could happen that there is no child element\n        // capable of displaying a placeholder.\n        if (!hostElement) {\n            continue;\n        }\n        // Don't override placeholder if the host element already has some direct placeholder.\n        if (directHostElements.includes(hostElement)) {\n            continue;\n        }\n        // Update the host element (used for setting and removing the placeholder).\n        config.hostElement = hostElement;\n        if (updatePlaceholder(writer, element, config)) {\n            wasViewModified = true;\n        }\n    }\n    return wasViewModified;\n}\n/**\n * Updates a single placeholder in a post–fixer callback.\n *\n * @returns True if any changes were made to the view document.\n */\nfunction updatePlaceholder(writer, element, config) {\n    const { text, isDirectHost, hostElement } = config;\n    let wasViewModified = false;\n    // This may be necessary when updating the placeholder text to something else.\n    if (hostElement.getAttribute('data-placeholder') !== text) {\n        writer.setAttribute('data-placeholder', text, hostElement);\n        wasViewModified = true;\n    }\n    // If the host element is not a direct host then placeholder is needed only when there is only one element.\n    const isOnlyChild = isDirectHost || element.childCount == 1;\n    if (isOnlyChild && needsPlaceholder(hostElement, config.keepOnFocus)) {\n        if (showPlaceholder(writer, hostElement)) {\n            wasViewModified = true;\n        }\n    }\n    else if (hidePlaceholder(writer, hostElement)) {\n        wasViewModified = true;\n    }\n    return wasViewModified;\n}\n/**\n * Gets a child element capable of displaying a placeholder if a parent element can host more\n * than just text (for instance, when it is a root editable element). The child element\n * can then be used in other placeholder helpers as a substitute of its parent.\n */\nfunction getChildPlaceholderHostSubstitute(parent) {\n    if (parent.childCount) {\n        const firstChild = parent.getChild(0);\n        if (firstChild.is('element') && !firstChild.is('uiElement') && !firstChild.is('attributeElement')) {\n            return firstChild;\n        }\n    }\n    return null;\n}\n/**\n * Displays a deprecation warning message in the console, but only once per page load.\n */\nfunction showPlaceholderTextDeprecationWarning() {\n    if (!hasDisplayedPlaceholderDeprecationWarning) {\n        /**\n         * The \"text\" option in the {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n         * function is deprecated and will be removed soon.\n         *\n         * See the {@glink updating/guides/update-to-39#view-element-placeholder Migration to v39} guide for\n         * more information on how to apply this change.\n         *\n         * @error enableplaceholder-deprecated-text-option\n         */\n        logWarning('enableplaceholder-deprecated-text-option');\n    }\n    hasDisplayedPlaceholderDeprecationWarning = true;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/typecheckable\n */\nexport default class TypeCheckable {\n    /* istanbul ignore next -- @preserve */\n    is() {\n        // There are a lot of overloads above.\n        // Overriding method in derived classes remove them and only `is( type: string ): boolean` is visible which we don't want.\n        // One option would be to copy them all to all classes, but that's ugly.\n        // It's best when TypeScript compiler doesn't see those overloads, except the one in the top base class.\n        // To overload a method, but not let the compiler see it, do after class definition:\n        // `MyClass.prototype.is = function( type: string ) {...}`\n        throw new Error('is() method is abstract');\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/node\n */\nimport TypeCheckable from './typecheckable.js';\nimport { CKEditorError, EmitterMixin, compareArrays } from '@ckeditor/ckeditor5-utils';\nimport { clone } from 'lodash-es';\n/**\n * Abstract view node class.\n *\n * This is an abstract class. Its constructor should not be used directly.\n * Use the {@link module:engine/view/downcastwriter~DowncastWriter} or {@link module:engine/view/upcastwriter~UpcastWriter}\n * to create new instances of view nodes.\n */\nexport default class Node extends /* #__PURE__ */ EmitterMixin(TypeCheckable) {\n    /**\n     * Creates a tree view node.\n     *\n     * @param document The document instance to which this node belongs.\n     */\n    constructor(document) {\n        super();\n        this.document = document;\n        this.parent = null;\n    }\n    /**\n     * Index of the node in the parent element or null if the node has no parent.\n     *\n     * Accessing this property throws an error if this node's parent element does not contain it.\n     * This means that view tree got broken.\n     */\n    get index() {\n        let pos;\n        if (!this.parent) {\n            return null;\n        }\n        // No parent or child doesn't exist in parent's children.\n        if ((pos = this.parent.getChildIndex(this)) == -1) {\n            /**\n             * The node's parent does not contain this node. It means that the document tree is corrupted.\n             *\n             * @error view-node-not-found-in-parent\n             */\n            throw new CKEditorError('view-node-not-found-in-parent', this);\n        }\n        return pos;\n    }\n    /**\n     * Node's next sibling, or `null` if it is the last child.\n     */\n    get nextSibling() {\n        const index = this.index;\n        return (index !== null && this.parent.getChild(index + 1)) || null;\n    }\n    /**\n     * Node's previous sibling, or `null` if it is the first child.\n     */\n    get previousSibling() {\n        const index = this.index;\n        return (index !== null && this.parent.getChild(index - 1)) || null;\n    }\n    /**\n     * Top-most ancestor of the node. If the node has no parent it is the root itself.\n     */\n    get root() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let root = this;\n        while (root.parent) {\n            root = root.parent;\n        }\n        return root;\n    }\n    /**\n     * Returns true if the node is in a tree rooted in the document (is a descendant of one of its roots).\n     */\n    isAttached() {\n        return this.root.is('rootElement');\n    }\n    /**\n     * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,\n     * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.\n     *\n     * ```ts\n     * const abc = downcastWriter.createText( 'abc' );\n     * const foo = downcastWriter.createText( 'foo' );\n     * const h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );\n     * const p = downcastWriter.createElement( 'p', null, [ abc, foo ] );\n     * const div = downcastWriter.createElement( 'div', null, [ h1, p ] );\n     * foo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n     * h1.getPath(); // Returns [ 0 ].\n     * div.getPath(); // Returns [].\n     * ```\n     *\n     * @returns The path.\n     */\n    getPath() {\n        const path = [];\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let node = this;\n        while (node.parent) {\n            path.unshift(node.index);\n            node = node.parent;\n        }\n        return path;\n    }\n    /**\n     * Returns ancestors array of this node.\n     *\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` this node will be also included in parent's array.\n     * @param options.parentFirst When set to `true`, array will be sorted from node's parent to root element,\n     * otherwise root element will be the first item in the array.\n     * @returns Array with ancestors.\n     */\n    getAncestors(options = {}) {\n        const ancestors = [];\n        let parent = options.includeSelf ? this : this.parent;\n        while (parent) {\n            ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n            parent = parent.parent;\n        }\n        return ancestors;\n    }\n    /**\n     * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n     * which is a common ancestor of both nodes.\n     *\n     * @param node The second node.\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` both nodes will be considered \"ancestors\" too.\n     * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n     */\n    getCommonAncestor(node, options = {}) {\n        const ancestorsA = this.getAncestors(options);\n        const ancestorsB = node.getAncestors(options);\n        let i = 0;\n        while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n            i++;\n        }\n        return i === 0 ? null : ancestorsA[i - 1];\n    }\n    /**\n     * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n     * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n     *\n     * @param node Node to compare with.\n     */\n    isBefore(node) {\n        // Given node is not before this node if they are same.\n        if (this == node) {\n            return false;\n        }\n        // Return `false` if it is impossible to compare nodes.\n        if (this.root !== node.root) {\n            return false;\n        }\n        const thisPath = this.getPath();\n        const nodePath = node.getPath();\n        const result = compareArrays(thisPath, nodePath);\n        switch (result) {\n            case 'prefix':\n                return true;\n            case 'extension':\n                return false;\n            default:\n                return thisPath[result] < nodePath[result];\n        }\n    }\n    /**\n     * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n     * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n     *\n     * @param node Node to compare with.\n     */\n    isAfter(node) {\n        // Given node is not before this node if they are same.\n        if (this == node) {\n            return false;\n        }\n        // Return `false` if it is impossible to compare nodes.\n        if (this.root !== node.root) {\n            return false;\n        }\n        // In other cases, just check if the `node` is before, and return the opposite.\n        return !this.isBefore(node);\n    }\n    /**\n     * Removes node from parent.\n     *\n     * @internal\n     */\n    _remove() {\n        this.parent._removeChildren(this.index);\n    }\n    /**\n     * @internal\n     * @param type Type of the change.\n     * @param node Changed node.\n     * @fires change\n     */\n    _fireChange(type, node) {\n        this.fire(`change:${type}`, node);\n        if (this.parent) {\n            this.parent._fireChange(type, node);\n        }\n    }\n    /**\n     * Custom toJSON method to solve child-parent circular dependencies.\n     *\n     * @returns Clone of this object with the parent property removed.\n     */\n    toJSON() {\n        const json = clone(this);\n        // Due to circular references we need to remove parent reference.\n        delete json.parent;\n        return json;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nNode.prototype.is = function (type) {\n    return type === 'node' || type === 'view:node';\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/text\n */\nimport Node from './node.js';\n/**\n * Tree view text node.\n *\n * The constructor of this class should not be used directly. To create a new text node instance\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n */\nexport default class Text extends Node {\n    /**\n     * Creates a tree view text node.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createText\n     * @internal\n     * @param document The document instance to which this text node belongs.\n     * @param data The text's data.\n     */\n    constructor(document, data) {\n        super(document);\n        this._textData = data;\n    }\n    /**\n     * The text content.\n     */\n    get data() {\n        return this._textData;\n    }\n    /**\n     * The `_data` property is controlled by a getter and a setter.\n     *\n     * The getter is required when using the addition assignment operator on protected property:\n     *\n     * ```ts\n     * const foo = downcastWriter.createText( 'foo' );\n     * const bar = downcastWriter.createText( 'bar' );\n     *\n     * foo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n     * console.log( foo.data ); // prints: 'foobar'\n     * ```\n     *\n     * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n     *\n     * The setter sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n     *\n     * @internal\n     */\n    get _data() {\n        return this.data;\n    }\n    set _data(data) {\n        this._fireChange('text', this);\n        this._textData = data;\n    }\n    /**\n     * Checks if this text node is similar to other text node.\n     * Both nodes should have the same data to be considered as similar.\n     *\n     * @param otherNode Node to check if it is same as this node.\n     */\n    isSimilar(otherNode) {\n        if (!(otherNode instanceof Text)) {\n            return false;\n        }\n        return this === otherNode || this.data === otherNode.data;\n    }\n    /**\n     * Clones this node.\n     *\n     * @internal\n     * @returns Text node that is a clone of this node.\n     */\n    _clone() {\n        return new Text(this.document, this.data);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nText.prototype.is = function (type) {\n    return type === '$text' || type === 'view:$text' ||\n        // This are legacy values kept for backward compatibility.\n        type === 'text' || type === 'view:text' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'node' || type === 'view:node';\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/textproxy\n */\nimport TypeCheckable from './typecheckable.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * TextProxy is a wrapper for substring of {@link module:engine/view/text~Text}. Instance of this class is created by\n * {@link module:engine/view/treewalker~TreeWalker} when only a part of {@link module:engine/view/text~Text} needs to be returned.\n *\n * `TextProxy` has an API similar to {@link module:engine/view/text~Text Text} and allows to do most of the common tasks performed\n * on view nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/view/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is a readonly interface.\n *\n * **Note:** `TextProxy` instances are created on the fly basing on the current state of parent {@link module:engine/view/text~Text}.\n * Because of this it is highly unrecommended to store references to `TextProxy instances because they might get\n * invalidated due to operations on Document. Also TextProxy is not a {@link module:engine/view/node~Node} so it can not be\n * inserted as a child of {@link module:engine/view/element~Element}.\n *\n * `TextProxy` instances are created by {@link module:engine/view/treewalker~TreeWalker view tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy extends TypeCheckable {\n    /**\n     * Creates a text proxy.\n     *\n     * @internal\n     * @param textNode Text node which part is represented by this text proxy.\n     * @param offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}\n     * from which the text proxy starts.\n     * @param length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n     * @constructor\n     */\n    constructor(textNode, offsetInText, length) {\n        super();\n        this.textNode = textNode;\n        if (offsetInText < 0 || offsetInText > textNode.data.length) {\n            /**\n             * Given offsetInText value is incorrect.\n             *\n             * @error view-textproxy-wrong-offsetintext\n             */\n            throw new CKEditorError('view-textproxy-wrong-offsetintext', this);\n        }\n        if (length < 0 || offsetInText + length > textNode.data.length) {\n            /**\n             * Given length value is incorrect.\n             *\n             * @error view-textproxy-wrong-length\n             */\n            throw new CKEditorError('view-textproxy-wrong-length', this);\n        }\n        this.data = textNode.data.substring(offsetInText, offsetInText + length);\n        this.offsetInText = offsetInText;\n    }\n    /**\n     * Offset size of this node.\n     */\n    get offsetSize() {\n        return this.data.length;\n    }\n    /**\n     * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}\n     * (`true`) or the whole text node (`false`).\n     *\n     * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}\n     * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n     * text node size.\n     */\n    get isPartial() {\n        return this.data.length !== this.textNode.data.length;\n    }\n    /**\n     * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n     */\n    get parent() {\n        return this.textNode.parent;\n    }\n    /**\n     * Root of this text proxy, which is same as root of text node represented by this text proxy.\n     */\n    get root() {\n        return this.textNode.root;\n    }\n    /**\n     * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside\n     * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n     */\n    get document() {\n        return this.textNode.document;\n    }\n    /**\n     * Returns ancestors array of this text proxy.\n     *\n     * @param options Options object.\n     * @param options.includeSelf When set to `true`, textNode will be also included in parent's array.\n     * @param options.parentFirst When set to `true`, array will be sorted from text proxy parent to\n     * root element, otherwise root element will be the first item in the array.\n     * @returns Array with ancestors.\n     */\n    getAncestors(options = {}) {\n        const ancestors = [];\n        let parent = options.includeSelf ? this.textNode : this.parent;\n        while (parent !== null) {\n            ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n            parent = parent.parent;\n        }\n        return ancestors;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nTextProxy.prototype.is = function (type) {\n    return type === '$textProxy' || type === 'view:$textProxy' ||\n        // This are legacy values kept for backward compatibility.\n        type === 'textProxy' || type === 'view:textProxy';\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { isPlainObject } from 'lodash-es';\nimport { logWarning } from '@ckeditor/ckeditor5-utils';\n/**\n * View matcher class.\n * Instance of this class can be used to find {@link module:engine/view/element~Element elements} that match given pattern.\n */\nexport default class Matcher {\n    /**\n     * Creates new instance of Matcher.\n     *\n     * @param pattern Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for more information.\n     */\n    constructor(...pattern) {\n        this._patterns = [];\n        this.add(...pattern);\n    }\n    /**\n     * Adds pattern or patterns to matcher instance.\n     *\n     * ```ts\n     * // String.\n     * matcher.add( 'div' );\n     *\n     * // Regular expression.\n     * matcher.add( /^\\w/ );\n     *\n     * // Single class.\n     * matcher.add( {\n     * \tclasses: 'foobar'\n     * } );\n     * ```\n     *\n     * See {@link module:engine/view/matcher~MatcherPattern} for more examples.\n     *\n     * Multiple patterns can be added in one call:\n     *\n     * ```ts\n     * matcher.add( 'div', { classes: 'foobar' } );\n     * ```\n     *\n     * @param pattern Object describing pattern details. If string or regular expression\n     * is provided it will be used to match element's name. Pattern can be also provided in a form\n     * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.\n     * Function's return value will be stored under `match` key of the object returned from\n     * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.\n     */\n    add(...pattern) {\n        for (let item of pattern) {\n            // String or RegExp pattern is used as element's name.\n            if (typeof item == 'string' || item instanceof RegExp) {\n                item = { name: item };\n            }\n            this._patterns.push(item);\n        }\n    }\n    /**\n     * Matches elements for currently stored patterns. Returns match information about first found\n     * {@link module:engine/view/element~Element element}, otherwise returns `null`.\n     *\n     * Example of returned object:\n     *\n     * ```ts\n     * {\n     * \telement: <instance of found element>,\n     * \tpattern: <pattern used to match found element>,\n     * \tmatch: {\n     * \t\tname: true,\n     * \t\tattributes: [ 'title', 'href' ],\n     * \t\tclasses: [ 'foo' ],\n     * \t\tstyles: [ 'color', 'position' ]\n     * \t}\n     * }\n     * ```\n     *\n     * @see module:engine/view/matcher~Matcher#add\n     * @see module:engine/view/matcher~Matcher#matchAll\n     * @param element View element to match against stored patterns.\n     */\n    match(...element) {\n        for (const singleElement of element) {\n            for (const pattern of this._patterns) {\n                const match = isElementMatching(singleElement, pattern);\n                if (match) {\n                    return {\n                        element: singleElement,\n                        pattern,\n                        match\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Matches elements for currently stored patterns. Returns array of match information with all found\n     * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.\n     *\n     * @see module:engine/view/matcher~Matcher#add\n     * @see module:engine/view/matcher~Matcher#match\n     * @param element View element to match against stored patterns.\n     * @returns Array with match information about found elements or `null`. For more information\n     * see {@link module:engine/view/matcher~Matcher#match match method} description.\n     */\n    matchAll(...element) {\n        const results = [];\n        for (const singleElement of element) {\n            for (const pattern of this._patterns) {\n                const match = isElementMatching(singleElement, pattern);\n                if (match) {\n                    results.push({\n                        element: singleElement,\n                        pattern,\n                        match\n                    });\n                }\n            }\n        }\n        return results.length > 0 ? results : null;\n    }\n    /**\n     * Returns the name of the element to match if there is exactly one pattern added to the matcher instance\n     * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.\n     *\n     * @returns Element name trying to match.\n     */\n    getElementName() {\n        if (this._patterns.length !== 1) {\n            return null;\n        }\n        const pattern = this._patterns[0];\n        const name = pattern.name;\n        return (typeof pattern != 'function' && name && !(name instanceof RegExp)) ? name : null;\n    }\n}\n/**\n * Returns match information if {@link module:engine/view/element~Element element} is matching provided pattern.\n * If element cannot be matched to provided pattern - returns `null`.\n *\n * @returns Returns object with match information or null if element is not matching.\n */\nfunction isElementMatching(element, pattern) {\n    // If pattern is provided as function - return result of that function;\n    if (typeof pattern == 'function') {\n        return pattern(element);\n    }\n    const match = {};\n    // Check element's name.\n    if (pattern.name) {\n        match.name = matchName(pattern.name, element.name);\n        if (!match.name) {\n            return null;\n        }\n    }\n    // Check element's attributes.\n    if (pattern.attributes) {\n        match.attributes = matchAttributes(pattern.attributes, element);\n        if (!match.attributes) {\n            return null;\n        }\n    }\n    // Check element's classes.\n    if (pattern.classes) {\n        match.classes = matchClasses(pattern.classes, element);\n        if (!match.classes) {\n            return null;\n        }\n    }\n    // Check element's styles.\n    if (pattern.styles) {\n        match.styles = matchStyles(pattern.styles, element);\n        if (!match.styles) {\n            return null;\n        }\n    }\n    return match;\n}\n/**\n * Checks if name can be matched by provided pattern.\n *\n * @returns Returns `true` if name can be matched, `false` otherwise.\n */\nfunction matchName(pattern, name) {\n    // If pattern is provided as RegExp - test against this regexp.\n    if (pattern instanceof RegExp) {\n        return !!name.match(pattern);\n    }\n    return pattern === name;\n}\n/**\n * Checks if an array of key/value pairs can be matched against provided patterns.\n *\n * Patterns can be provided in a following ways:\n * - a boolean value matches any attribute with any value (or no value):\n *\n * ```ts\n * pattern: true\n * ```\n *\n * - a RegExp expression or object matches any attribute name:\n *\n * ```ts\n * pattern: /h[1-6]/\n * ```\n *\n * - an object matches any attribute that has the same name as the object item's key, where object item's value is:\n * \t- equal to `true`, which matches any attribute value:\n *\n * ```ts\n * pattern: {\n * \trequired: true\n * }\n * ```\n *\n * \t- a string that is equal to attribute value:\n *\n * ```ts\n * pattern: {\n * \trel: 'nofollow'\n * }\n * ```\n *\n * \t- a regular expression that matches attribute value,\n *\n * ```ts\n * pattern: {\n * \tsrc: /^https/\n * }\n * ```\n *\n * - an array with items, where the item is:\n * \t- a string that is equal to attribute value:\n *\n * ```ts\n * pattern: [ 'data-property-1', 'data-property-2' ],\n * ```\n *\n * \t- an object with `key` and `value` property, where `key` is a regular expression matching attribute name and\n * \t\t`value` is either regular expression matching attribute value or a string equal to attribute value:\n *\n * ```ts\n * pattern: [\n * \t{ key: /^data-property-/, value: true },\n * \t// or:\n * \t{ key: /^data-property-/, value: 'foobar' },\n * \t// or:\n * \t{ key: /^data-property-/, value: /^foo/ }\n * ]\n * ```\n *\n * @param patterns Object with information about attributes to match.\n * @param keys Attribute, style or class keys.\n * @param valueGetter A function providing value for a given item key.\n * @returns Returns array with matched attribute names or `null` if no attributes were matched.\n */\nfunction matchPatterns(patterns, keys, valueGetter) {\n    const normalizedPatterns = normalizePatterns(patterns);\n    const normalizedItems = Array.from(keys);\n    const match = [];\n    normalizedPatterns.forEach(([patternKey, patternValue]) => {\n        normalizedItems.forEach(itemKey => {\n            if (isKeyMatched(patternKey, itemKey) &&\n                isValueMatched(patternValue, itemKey, valueGetter)) {\n                match.push(itemKey);\n            }\n        });\n    });\n    // Return matches only if there are at least as many of them as there are patterns.\n    // The RegExp pattern can match more than one item.\n    if (!normalizedPatterns.length || match.length < normalizedPatterns.length) {\n        return undefined;\n    }\n    return match;\n}\n/**\n * Bring all the possible pattern forms to an array of arrays where first item is a key and second is a value.\n *\n * Examples:\n *\n * Boolean pattern value:\n *\n * ```ts\n * true\n * ```\n *\n * to\n *\n * ```ts\n * [ [ true, true ] ]\n * ```\n *\n * Textual pattern value:\n *\n * ```ts\n * 'attribute-name-or-class-or-style'\n * ```\n *\n * to\n *\n * ```ts\n * [ [ 'attribute-name-or-class-or-style', true ] ]\n * ```\n *\n * Regular expression:\n *\n * ```ts\n * /^data-.*$/\n * ```\n *\n * to\n *\n * ```ts\n * [ [ /^data-.*$/, true ] ]\n * ```\n *\n * Objects (plain or with `key` and `value` specified explicitly):\n *\n * ```ts\n * {\n * \tsrc: /^https:.*$/\n * }\n * ```\n *\n * or\n *\n * ```ts\n * [ {\n * \tkey: 'src',\n * \tvalue: /^https:.*$/\n * } ]\n * ```\n *\n * to:\n *\n * ```ts\n * [ [ 'src', /^https:.*$/ ] ]\n * ```\n *\n * @returns Returns an array of objects or null if provided patterns were not in an expected form.\n */\nfunction normalizePatterns(patterns) {\n    if (Array.isArray(patterns)) {\n        return patterns.map((pattern) => {\n            if (isPlainObject(pattern)) {\n                if (pattern.key === undefined || pattern.value === undefined) {\n                    // Documented at the end of matcher.js.\n                    logWarning('matcher-pattern-missing-key-or-value', pattern);\n                }\n                return [pattern.key, pattern.value];\n            }\n            // Assume the pattern is either String or RegExp.\n            return [pattern, true];\n        });\n    }\n    if (isPlainObject(patterns)) {\n        return Object.entries(patterns);\n    }\n    // Other cases (true, string or regexp).\n    return [[patterns, true]];\n}\n/**\n * @param patternKey A pattern representing a key we want to match.\n * @param itemKey An actual item key (e.g. `'src'`, `'background-color'`, `'ck-widget'`) we're testing against pattern.\n */\nfunction isKeyMatched(patternKey, itemKey) {\n    return patternKey === true ||\n        patternKey === itemKey ||\n        patternKey instanceof RegExp && itemKey.match(patternKey);\n}\n/**\n * @param patternValue A pattern representing a value we want to match.\n * @param itemKey An item key, e.g. `background`, `href`, 'rel', etc.\n * @param valueGetter A function used to provide a value for a given `itemKey`.\n */\nfunction isValueMatched(patternValue, itemKey, valueGetter) {\n    if (patternValue === true) {\n        return true;\n    }\n    const itemValue = valueGetter(itemKey);\n    // For now, the reducers are not returning the full tree of properties.\n    // Casting to string preserves the old behavior until the root cause is fixed.\n    // More can be found in https://github.com/ckeditor/ckeditor5/issues/10399.\n    return patternValue === itemValue ||\n        patternValue instanceof RegExp && !!String(itemValue).match(patternValue);\n}\n/**\n * Checks if attributes of provided element can be matched against provided patterns.\n *\n * @param patterns Object with information about attributes to match. Each key of the object will be\n * used as attribute name. Value of each key can be a string or regular expression to match against attribute value.\n * @param  element Element which attributes will be tested.\n * @returns Returns array with matched attribute names or `null` if no attributes were matched.\n */\nfunction matchAttributes(patterns, element) {\n    const attributeKeys = new Set(element.getAttributeKeys());\n    // `style` and `class` attribute keys are deprecated. Only allow them in object pattern\n    // for backward compatibility.\n    if (isPlainObject(patterns)) {\n        if (patterns.style !== undefined) {\n            // Documented at the end of matcher.js.\n            logWarning('matcher-pattern-deprecated-attributes-style-key', patterns);\n        }\n        if (patterns.class !== undefined) {\n            // Documented at the end of matcher.js.\n            logWarning('matcher-pattern-deprecated-attributes-class-key', patterns);\n        }\n    }\n    else {\n        attributeKeys.delete('style');\n        attributeKeys.delete('class');\n    }\n    return matchPatterns(patterns, attributeKeys, key => element.getAttribute(key));\n}\n/**\n * Checks if classes of provided element can be matched against provided patterns.\n *\n * @param patterns Array of strings or regular expressions to match against element's classes.\n * @param element Element which classes will be tested.\n * @returns Returns array with matched class names or `null` if no classes were matched.\n */\nfunction matchClasses(patterns, element) {\n    // We don't need `getter` here because patterns for classes are always normalized to `[ className, true ]`.\n    return matchPatterns(patterns, element.getClassNames(), /* istanbul ignore next -- @preserve */ () => { });\n}\n/**\n * Checks if styles of provided element can be matched against provided patterns.\n *\n * @param patterns Object with information about styles to match. Each key of the object will be\n * used as style name. Value of each key can be a string or regular expression to match against style value.\n * @param element Element which styles will be tested.\n * @returns Returns array with matched style names or `null` if no styles were matched.\n */\nfunction matchStyles(patterns, element) {\n    return matchPatterns(patterns, element.getStyleNames(true), key => element.getStyle(key));\n}\n/**\n * The key-value matcher pattern is missing key or value. Both must be present.\n * Refer the documentation: {@link module:engine/view/matcher~MatcherPattern}.\n *\n * @param pattern Pattern with missing properties.\n * @error matcher-pattern-missing-key-or-value\n */\n/**\n * The key-value matcher pattern for `attributes` option is using deprecated `style` key.\n *\n * Use `styles` matcher pattern option instead:\n *\n * ```ts\n * // Instead of:\n * const pattern = {\n * \tattributes: {\n * \t\tkey1: 'value1',\n * \t\tkey2: 'value2',\n * \t\tstyle: /^border.*$/\n * \t}\n * }\n *\n * // Use:\n * const pattern = {\n * \tattributes: {\n * \t\tkey1: 'value1',\n * \t\tkey2: 'value2'\n * \t},\n * \tstyles: /^border.*$/\n * }\n * ```\n *\n * Refer to the {@glink updating/guides/update-to-29##update-to-ckeditor-5-v2910 Migration to v29.1.0} guide\n * and {@link module:engine/view/matcher~MatcherPattern} documentation.\n *\n * @param pattern Pattern with missing properties.\n * @error matcher-pattern-deprecated-attributes-style-key\n */\n/**\n * The key-value matcher pattern for `attributes` option is using deprecated `class` key.\n *\n * Use `classes` matcher pattern option instead:\n *\n * ```ts\n * // Instead of:\n * const pattern = {\n * \tattributes: {\n * \t\tkey1: 'value1',\n * \t\tkey2: 'value2',\n * \t\tclass: 'foobar'\n * \t}\n * }\n *\n * // Use:\n * const pattern = {\n * \tattributes: {\n * \t\tkey1: 'value1',\n * \t\tkey2: 'value2'\n * \t},\n * \tclasses: 'foobar'\n * }\n * ```\n *\n * Refer to the {@glink updating/guides/update-to-29##update-to-ckeditor-5-v2910 Migration to v29.1.0} guide\n * and the {@link module:engine/view/matcher~MatcherPattern} documentation.\n *\n * @param pattern Pattern with missing properties.\n * @error matcher-pattern-deprecated-attributes-class-key\n */\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/stylesmap\n */\nimport { get, isObject, merge, set, unset } from 'lodash-es';\n/**\n * Styles map. Allows handling (adding, removing, retrieving) a set of style rules (usually, of an element).\n */\nexport default class StylesMap {\n    /**\n     * Creates Styles instance.\n     */\n    constructor(styleProcessor) {\n        this._styles = {};\n        this._styleProcessor = styleProcessor;\n    }\n    /**\n     * Returns true if style map has no styles set.\n     */\n    get isEmpty() {\n        const entries = Object.entries(this._styles);\n        return !entries.length;\n    }\n    /**\n     * Number of styles defined.\n     */\n    get size() {\n        if (this.isEmpty) {\n            return 0;\n        }\n        return this.getStyleNames().length;\n    }\n    /**\n     * Set styles map to a new value.\n     *\n     * ```ts\n     * styles.setTo( 'border:1px solid blue;margin-top:1px;' );\n     * ```\n     */\n    setTo(inlineStyle) {\n        this.clear();\n        const parsedStyles = parseInlineStyles(inlineStyle);\n        for (const [key, value] of parsedStyles) {\n            this._styleProcessor.toNormalizedForm(key, value, this._styles);\n        }\n    }\n    /**\n     * Checks if a given style is set.\n     *\n     * ```ts\n     * styles.setTo( 'margin-left:1px;' );\n     *\n     * styles.has( 'margin-left' );    // -> true\n     * styles.has( 'padding' );        // -> false\n     * ```\n     *\n     * **Note**: This check supports normalized style names.\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * styles.setTo( 'margin:2px;' );\n     *\n     * styles.has( 'margin' );         // -> true\n     * styles.has( 'margin-top' );     // -> true\n     * styles.has( 'margin-left' );    // -> true\n     *\n     * styles.remove( 'margin-top' );\n     *\n     * styles.has( 'margin' );         // -> false\n     * styles.has( 'margin-top' );     // -> false\n     * styles.has( 'margin-left' );    // -> true\n     * ```\n     *\n     * @param name Style name.\n     */\n    has(name) {\n        if (this.isEmpty) {\n            return false;\n        }\n        const styles = this._styleProcessor.getReducedForm(name, this._styles);\n        const propertyDescriptor = styles.find(([property]) => property === name);\n        // Only return a value if it is set;\n        return Array.isArray(propertyDescriptor);\n    }\n    set(nameOrObject, valueOrObject) {\n        if (isObject(nameOrObject)) {\n            for (const [key, value] of Object.entries(nameOrObject)) {\n                this._styleProcessor.toNormalizedForm(key, value, this._styles);\n            }\n        }\n        else {\n            this._styleProcessor.toNormalizedForm(nameOrObject, valueOrObject, this._styles);\n        }\n    }\n    /**\n     * Removes given style.\n     *\n     * ```ts\n     * styles.setTo( 'background:#f00;margin-right:2px;' );\n     *\n     * styles.remove( 'background' );\n     *\n     * styles.toString();   // -> 'margin-right:2px;'\n     * ```\n     *\n     * ***Note**:* This method uses {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules\n     * enabled style processor rules} to normalize passed values.\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * styles.setTo( 'margin:1px' );\n     *\n     * styles.remove( 'margin-top' );\n     * styles.remove( 'margin-right' );\n     *\n     * styles.toString(); // -> 'margin-bottom:1px;margin-left:1px;'\n     * ```\n     *\n     * @param name Style name.\n     */\n    remove(name) {\n        const path = toPath(name);\n        unset(this._styles, path);\n        delete this._styles[name];\n        this._cleanEmptyObjectsOnPath(path);\n    }\n    /**\n     * Returns a normalized style object or a single value.\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * const styles = new Styles();\n     * styles.setTo( 'margin:1px 2px 3em;' );\n     *\n     * styles.getNormalized( 'margin' );\n     * // will log:\n     * // {\n     * //     top: '1px',\n     * //     right: '2px',\n     * //     bottom: '3em',\n     * //     left: '2px'     // normalized value from margin shorthand\n     * // }\n     *\n     * styles.getNormalized( 'margin-left' ); // -> '2px'\n     * ```\n     *\n     * **Note**: This method will only return normalized styles if a style processor was defined.\n     *\n     * @param name Style name.\n     */\n    getNormalized(name) {\n        return this._styleProcessor.getNormalized(name, this._styles);\n    }\n    /**\n     * Returns a normalized style string. Styles are sorted by name.\n     *\n     * ```ts\n     * styles.set( 'margin' , '1px' );\n     * styles.set( 'background', '#f00' );\n     *\n     * styles.toString(); // -> 'background:#f00;margin:1px;'\n     * ```\n     *\n     * **Note**: This method supports normalized styles if defined.\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * styles.set( 'margin' , '1px' );\n     * styles.set( 'background', '#f00' );\n     * styles.remove( 'margin-top' );\n     * styles.remove( 'margin-right' );\n     *\n     * styles.toString(); // -> 'background:#f00;margin-bottom:1px;margin-left:1px;'\n     * ```\n     */\n    toString() {\n        if (this.isEmpty) {\n            return '';\n        }\n        return this.getStylesEntries()\n            .map(arr => arr.join(':'))\n            .sort()\n            .join(';') + ';';\n    }\n    /**\n     * Returns property as a value string or undefined if property is not set.\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * const styles = new Styles();\n     * styles.setTo( 'margin:1px;' );\n     * styles.set( 'margin-bottom', '3em' );\n     *\n     * styles.getAsString( 'margin' ); // -> 'margin: 1px 1px 3em;'\n     * ```\n     *\n     * Note, however, that all sub-values must be set for the longhand property name to return a value:\n     *\n     * ```ts\n     * const styles = new Styles();\n     * styles.setTo( 'margin:1px;' );\n     * styles.remove( 'margin-bottom' );\n     *\n     * styles.getAsString( 'margin' ); // -> undefined\n     * ```\n     *\n     * In the above scenario, it is not possible to return a `margin` value, so `undefined` is returned.\n     * Instead, you should use:\n     *\n     * ```ts\n     * const styles = new Styles();\n     * styles.setTo( 'margin:1px;' );\n     * styles.remove( 'margin-bottom' );\n     *\n     * for ( const styleName of styles.getStyleNames() ) {\n     * \tconsole.log( styleName, styles.getAsString( styleName ) );\n     * }\n     * // 'margin-top', '1px'\n     * // 'margin-right', '1px'\n     * // 'margin-left', '1px'\n     * ```\n     *\n     * In general, it is recommend to iterate over style names like in the example above. This way, you will always get all\n     * the currently set style values. So, if all the 4 margin values would be set\n     * the for-of loop above would yield only `'margin'`, `'1px'`:\n     *\n     * ```ts\n     * const styles = new Styles();\n     * styles.setTo( 'margin:1px;' );\n     *\n     * for ( const styleName of styles.getStyleNames() ) {\n     * \tconsole.log( styleName, styles.getAsString( styleName ) );\n     * }\n     * // 'margin', '1px'\n     * ```\n     *\n     * **Note**: To get a normalized version of a longhand property use the {@link #getNormalized `#getNormalized()`} method.\n     */\n    getAsString(propertyName) {\n        if (this.isEmpty) {\n            return;\n        }\n        if (this._styles[propertyName] && !isObject(this._styles[propertyName])) {\n            // Try return styles set directly - values that are not parsed.\n            return this._styles[propertyName];\n        }\n        const styles = this._styleProcessor.getReducedForm(propertyName, this._styles);\n        const propertyDescriptor = styles.find(([property]) => property === propertyName);\n        // Only return a value if it is set;\n        if (Array.isArray(propertyDescriptor)) {\n            return propertyDescriptor[1];\n        }\n    }\n    /**\n     * Returns all style properties names as they would appear when using {@link #toString `#toString()`}.\n     *\n     * When `expand` is set to true and there's a shorthand style property set, it will also return all equivalent styles:\n     *\n     * ```ts\n     * stylesMap.setTo( 'margin: 1em' )\n     * ```\n     *\n     * will be expanded to:\n     *\n     * ```ts\n     * [ 'margin', 'margin-top', 'margin-right', 'margin-bottom', 'margin-left' ]\n     * ```\n     *\n     * @param expand Expand shorthand style properties and all return equivalent style representations.\n     */\n    getStyleNames(expand = false) {\n        if (this.isEmpty) {\n            return [];\n        }\n        if (expand) {\n            return this._styleProcessor.getStyleNames(this._styles);\n        }\n        const entries = this.getStylesEntries();\n        return entries.map(([key]) => key);\n    }\n    /**\n     * Removes all styles.\n     */\n    clear() {\n        this._styles = {};\n    }\n    /**\n     * Returns normalized styles entries for further processing.\n     */\n    getStylesEntries() {\n        const parsed = [];\n        const keys = Object.keys(this._styles);\n        for (const key of keys) {\n            parsed.push(...this._styleProcessor.getReducedForm(key, this._styles));\n        }\n        return parsed;\n    }\n    /**\n     * Removes empty objects upon removing an entry from internal object.\n     */\n    _cleanEmptyObjectsOnPath(path) {\n        const pathParts = path.split('.');\n        const isChildPath = pathParts.length > 1;\n        if (!isChildPath) {\n            return;\n        }\n        const parentPath = pathParts.splice(0, pathParts.length - 1).join('.');\n        const parentObject = get(this._styles, parentPath);\n        if (!parentObject) {\n            return;\n        }\n        const isParentEmpty = !Object.keys(parentObject).length;\n        if (isParentEmpty) {\n            this.remove(parentPath);\n        }\n    }\n}\n/**\n * Style processor is responsible for writing and reading a normalized styles object.\n */\nexport class StylesProcessor {\n    /**\n     * Creates StylesProcessor instance.\n     *\n     * @internal\n     */\n    constructor() {\n        this._normalizers = new Map();\n        this._extractors = new Map();\n        this._reducers = new Map();\n        this._consumables = new Map();\n    }\n    /**\n     * Parse style string value to a normalized object and appends it to styles object.\n     *\n     * ```ts\n     * const styles = {};\n     *\n     * stylesProcessor.toNormalizedForm( 'margin', '1px', styles );\n     *\n     * // styles will consist: { margin: { top: '1px', right: '1px', bottom: '1px', left: '1px; } }\n     * ```\n     *\n     * **Note**: To define normalizer callbacks use {@link #setNormalizer}.\n     *\n     * @param name Name of style property.\n     * @param propertyValue Value of style property.\n     * @param styles Object holding normalized styles.\n     */\n    toNormalizedForm(name, propertyValue, styles) {\n        if (isObject(propertyValue)) {\n            appendStyleValue(styles, toPath(name), propertyValue);\n            return;\n        }\n        if (this._normalizers.has(name)) {\n            const normalizer = this._normalizers.get(name);\n            const { path, value } = normalizer(propertyValue);\n            appendStyleValue(styles, path, value);\n        }\n        else {\n            appendStyleValue(styles, name, propertyValue);\n        }\n    }\n    /**\n     * Returns a normalized version of a style property.\n     *\n     * ```ts\n     * const styles = {\n     * \tmargin: { top: '1px', right: '1px', bottom: '1px', left: '1px; },\n     * \tbackground: { color: '#f00' }\n     * };\n     *\n     * stylesProcessor.getNormalized( 'background' );\n     * // will return: { color: '#f00' }\n     *\n     * stylesProcessor.getNormalized( 'margin-top' );\n     * // will return: '1px'\n     * ```\n     *\n     * **Note**: In some cases extracting single value requires defining an extractor callback {@link #setExtractor}.\n     *\n     * @param name Name of style property.\n     * @param styles Object holding normalized styles.\n     */\n    getNormalized(name, styles) {\n        if (!name) {\n            return merge({}, styles);\n        }\n        // Might be empty string.\n        if (styles[name] !== undefined) {\n            return styles[name];\n        }\n        if (this._extractors.has(name)) {\n            const extractor = this._extractors.get(name);\n            if (typeof extractor === 'string') {\n                return get(styles, extractor);\n            }\n            const value = extractor(name, styles);\n            if (value) {\n                return value;\n            }\n        }\n        return get(styles, toPath(name));\n    }\n    /**\n     * Returns a reduced form of style property form normalized object.\n     *\n     * For default margin reducer, the below code:\n     *\n     * ```ts\n     * stylesProcessor.getReducedForm( 'margin', {\n     * \tmargin: { top: '1px', right: '1px', bottom: '2px', left: '1px; }\n     * } );\n     * ```\n     *\n     * will return:\n     *\n     * ```ts\n     * [\n     * \t[ 'margin', '1px 1px 2px' ]\n     * ]\n     * ```\n     *\n     * because it might be represented as a shorthand 'margin' value. However if one of margin long hand values is missing it should return:\n     *\n     * ```ts\n     * [\n     * \t[ 'margin-top', '1px' ],\n     * \t[ 'margin-right', '1px' ],\n     * \t[ 'margin-bottom', '2px' ]\n     * \t// the 'left' value is missing - cannot use 'margin' shorthand.\n     * ]\n     * ```\n     *\n     * **Note**: To define reducer callbacks use {@link #setReducer}.\n     *\n     * @param name Name of style property.\n     */\n    getReducedForm(name, styles) {\n        const normalizedValue = this.getNormalized(name, styles);\n        // Might be empty string.\n        if (normalizedValue === undefined) {\n            return [];\n        }\n        if (this._reducers.has(name)) {\n            const reducer = this._reducers.get(name);\n            return reducer(normalizedValue);\n        }\n        return [[name, normalizedValue]];\n    }\n    /**\n     * Return all style properties. Also expand shorthand properties (e.g. `margin`, `background`) if respective extractor is available.\n     *\n     * @param styles Object holding normalized styles.\n     */\n    getStyleNames(styles) {\n        const styleNamesKeysSet = new Set();\n        // Find all extractable styles that have a value.\n        for (const name of this._consumables.keys()) {\n            const style = this.getNormalized(name, styles);\n            if (style && (typeof style != 'object' || Object.keys(style).length)) {\n                styleNamesKeysSet.add(name);\n            }\n        }\n        // For simple styles (for example `color`) we don't have a map of those styles\n        // but they are 1 to 1 with normalized object keys.\n        for (const name of Object.keys(styles)) {\n            styleNamesKeysSet.add(name);\n        }\n        return Array.from(styleNamesKeysSet);\n    }\n    /**\n     * Returns related style names.\n     *\n     * ```ts\n     * stylesProcessor.getRelatedStyles( 'margin' );\n     * // will return: [ 'margin-top', 'margin-right', 'margin-bottom', 'margin-left' ];\n     *\n     * stylesProcessor.getRelatedStyles( 'margin-top' );\n     * // will return: [ 'margin' ];\n     * ```\n     *\n     * **Note**: To define new style relations load an existing style processor or use\n     * {@link module:engine/view/stylesmap~StylesProcessor#setStyleRelation `StylesProcessor.setStyleRelation()`}.\n     */\n    getRelatedStyles(name) {\n        return this._consumables.get(name) || [];\n    }\n    /**\n     * Adds a normalizer method for a style property.\n     *\n     * A normalizer returns describing how the value should be normalized.\n     *\n     * For instance 'margin' style is a shorthand for four margin values:\n     *\n     * - 'margin-top'\n     * - 'margin-right'\n     * - 'margin-bottom'\n     * - 'margin-left'\n     *\n     * and can be written in various ways if some values are equal to others. For instance `'margin: 1px 2em;'` is a shorthand for\n     * `'margin-top: 1px;margin-right: 2em;margin-bottom: 1px;margin-left: 2em'`.\n     *\n     * A normalizer should parse various margin notations as a single object:\n     *\n     * ```ts\n     * const styles = {\n     * \tmargin: {\n     * \t\ttop: '1px',\n     * \t\tright: '2em',\n     * \t\tbottom: '1px',\n     * \t\tleft: '2em'\n     * \t}\n     * };\n     * ```\n     *\n     * Thus a normalizer for 'margin' style should return an object defining style path and value to store:\n     *\n     * ```ts\n     * const returnValue = {\n     * \tpath: 'margin',\n     * \tvalue: {\n     * \t\ttop: '1px',\n     * \t\tright: '2em',\n     * \t\tbottom: '1px',\n     * \t\tleft: '2em'\n     * \t}\n     * };\n     * ```\n     *\n     * Additionally to fully support all margin notations there should be also defined 4 normalizers for longhand margin notations. Below\n     * is an example for 'margin-top' style property normalizer:\n     *\n     * ```ts\n     * stylesProcessor.setNormalizer( 'margin-top', valueString => {\n     * \treturn {\n     * \t\tpath: 'margin.top',\n     * \t\tvalue: valueString\n     * \t}\n     * } );\n     * ```\n     */\n    setNormalizer(name, callback) {\n        this._normalizers.set(name, callback);\n    }\n    /**\n     * Adds a extractor callback for a style property.\n     *\n     * Most normalized style values are stored as one level objects. It is assumed that `'margin-top'` style will be stored as:\n     *\n     * ```ts\n     * const styles = {\n     * \tmargin: {\n     * \t\ttop: 'value'\n     * \t}\n     * }\n     * ```\n     *\n     * However, some styles can have conflicting notations and thus it might be harder to extract a style value from shorthand. For instance\n     * the 'border-top-style' can be defined using `'border-top:solid'`, `'border-style:solid none none none'` or by `'border:solid'`\n     * shorthands. The default border styles processors stores styles as:\n     *\n     * ```ts\n     * const styles = {\n     * \tborder: {\n     * \t\tstyle: {\n     * \t\t\ttop: 'solid'\n     * \t\t}\n     * \t}\n     * }\n     * ```\n     *\n     * as it is better to modify border style independently from other values. On the other part the output of the border might be\n     * desired as `border-top`, `border-left`, etc notation.\n     *\n     * In the above example an extractor should return a side border value that combines style, color and width:\n     *\n     * ```ts\n     * styleProcessor.setExtractor( 'border-top', styles => {\n     * \treturn {\n     * \t\tcolor: styles.border.color.top,\n     * \t\tstyle: styles.border.style.top,\n     * \t\twidth: styles.border.width.top\n     * \t}\n     * } );\n     * ```\n     *\n     * @param callbackOrPath Callback that return a requested value or path string for single values.\n     */\n    setExtractor(name, callbackOrPath) {\n        this._extractors.set(name, callbackOrPath);\n    }\n    /**\n     * Adds a reducer callback for a style property.\n     *\n     * Reducer returns a minimal notation for given style name. For longhand properties it is not required to write a reducer as\n     * by default the direct value from style path is taken.\n     *\n     * For shorthand styles a reducer should return minimal style notation either by returning single name-value tuple or multiple tuples\n     * if a shorthand cannot be used. For instance for a margin shorthand a reducer might return:\n     *\n     * ```ts\n     * const marginShortHandTuple = [\n     * \t[ 'margin', '1px 1px 2px' ]\n     * ];\n     * ```\n     *\n     * or a longhand tuples for defined values:\n     *\n     * ```ts\n     * // Considering margin.bottom and margin.left are undefined.\n     * const marginLonghandsTuples = [\n     * \t[ 'margin-top', '1px' ],\n     * \t[ 'margin-right', '1px' ]\n     * ];\n     * ```\n     *\n     * A reducer obtains a normalized style value:\n     *\n     * ```ts\n     * // Simplified reducer that always outputs 4 values which are always present:\n     * stylesProcessor.setReducer( 'margin', margin => {\n     * \treturn [\n     * \t\t[ 'margin', `${ margin.top } ${ margin.right } ${ margin.bottom } ${ margin.left }` ]\n     * \t]\n     * } );\n     * ```\n     */\n    setReducer(name, callback) {\n        this._reducers.set(name, callback);\n    }\n    /**\n     * Defines a style shorthand relation to other style notations.\n     *\n     * ```ts\n     * stylesProcessor.setStyleRelation( 'margin', [\n     * \t'margin-top',\n     * \t'margin-right',\n     * \t'margin-bottom',\n     * \t'margin-left'\n     * ] );\n     * ```\n     *\n     * This enables expanding of style names for shorthands. For instance, if defined,\n     * {@link module:engine/conversion/viewconsumable~ViewConsumable view consumable} items are automatically created\n     * for long-hand margin style notation alongside the `'margin'` item.\n     *\n     * This means that when an element being converted has a style `margin`, a converter for `margin-left` will work just\n     * fine since the view consumable will contain a consumable `margin-left` item (thanks to the relation) and\n     * `element.getStyle( 'margin-left' )` will work as well assuming that the style processor was correctly configured.\n     * However, once `margin-left` is consumed, `margin` will not be consumable anymore.\n     */\n    setStyleRelation(shorthandName, styleNames) {\n        this._mapStyleNames(shorthandName, styleNames);\n        for (const alsoName of styleNames) {\n            this._mapStyleNames(alsoName, [shorthandName]);\n        }\n    }\n    /**\n     * Set two-way binding of style names.\n     */\n    _mapStyleNames(name, styleNames) {\n        if (!this._consumables.has(name)) {\n            this._consumables.set(name, []);\n        }\n        this._consumables.get(name).push(...styleNames);\n    }\n}\n/**\n * Parses inline styles and puts property - value pairs into styles map.\n *\n * @param stylesString Styles to parse.\n * @returns Map of parsed properties and values.\n */\nfunction parseInlineStyles(stylesString) {\n    // `null` if no quote was found in input string or last found quote was a closing quote. See below.\n    let quoteType = null;\n    let propertyNameStart = 0;\n    let propertyValueStart = 0;\n    let propertyName = null;\n    const stylesMap = new Map();\n    // Do not set anything if input string is empty.\n    if (stylesString === '') {\n        return stylesMap;\n    }\n    // Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n    if (stylesString.charAt(stylesString.length - 1) != ';') {\n        stylesString = stylesString + ';';\n    }\n    // Seek the whole string for \"special characters\".\n    for (let i = 0; i < stylesString.length; i++) {\n        const char = stylesString.charAt(i);\n        if (quoteType === null) {\n            // No quote found yet or last found quote was a closing quote.\n            switch (char) {\n                case ':':\n                    // Most of time colon means that property name just ended.\n                    // Sometimes however `:` is found inside property value (for example in background image url).\n                    if (!propertyName) {\n                        // Treat this as end of property only if property name is not already saved.\n                        // Save property name.\n                        propertyName = stylesString.substr(propertyNameStart, i - propertyNameStart);\n                        // Save this point as the start of property value.\n                        propertyValueStart = i + 1;\n                    }\n                    break;\n                case '\"':\n                case '\\'':\n                    // Opening quote found (this is an opening quote, because `quoteType` is `null`).\n                    quoteType = char;\n                    break;\n                case ';': {\n                    // Property value just ended.\n                    // Use previously stored property value start to obtain property value.\n                    const propertyValue = stylesString.substr(propertyValueStart, i - propertyValueStart);\n                    if (propertyName) {\n                        // Save parsed part.\n                        stylesMap.set(propertyName.trim(), propertyValue.trim());\n                    }\n                    propertyName = null;\n                    // Save this point as property name start. Property name starts immediately after previous property value ends.\n                    propertyNameStart = i + 1;\n                    break;\n                }\n            }\n        }\n        else if (char === quoteType) {\n            // If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n            quoteType = null;\n        }\n    }\n    return stylesMap;\n}\n/**\n * Return lodash compatible path from style name.\n */\nfunction toPath(name) {\n    return name.replace('-', '.');\n}\n/**\n * Appends style definition to the styles object.\n */\nfunction appendStyleValue(stylesObject, nameOrPath, valueOrObject) {\n    let valueToSet = valueOrObject;\n    if (isObject(valueOrObject)) {\n        valueToSet = merge({}, get(stylesObject, nameOrPath), valueOrObject);\n    }\n    set(stylesObject, nameOrPath, valueToSet);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/element\n */\nimport Node from './node.js';\nimport Text from './text.js';\nimport TextProxy from './textproxy.js';\nimport { isIterable, toArray, toMap } from '@ckeditor/ckeditor5-utils';\nimport { default as Matcher } from './matcher.js';\nimport { default as StylesMap } from './stylesmap.js';\n// @if CK_DEBUG_ENGINE // const { convertMapToTags } = require( '../dev-utils/utils' );\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n */\nexport default class Element extends Node {\n    /**\n     * Creates a view element.\n     *\n     * Attributes can be passed in various formats:\n     *\n     * ```ts\n     * new Element( viewDocument, 'div', { class: 'editor', contentEditable: 'true' } ); // object\n     * new Element( viewDocument, 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n     * new Element( viewDocument, 'div', mapOfAttributes ); // map\n     * ```\n     *\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attrs, children) {\n        super(document);\n        /**\n         * A list of attribute names that should be rendered in the editing pipeline even though filtering mechanisms\n         * implemented in the {@link module:engine/view/domconverter~DomConverter} (for instance,\n         * {@link module:engine/view/domconverter~DomConverter#shouldRenderAttribute}) would filter them out.\n         *\n         * These attributes can be specified as an option when the element is created by\n         * the {@link module:engine/view/downcastwriter~DowncastWriter}. To check whether an unsafe an attribute should\n         * be permitted, use the {@link #shouldRenderUnsafeAttribute} method.\n         *\n         * @internal\n         */\n        this._unsafeAttributesToRender = [];\n        /**\n         * Map of custom properties.\n         * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n         */\n        this._customProperties = new Map();\n        this.name = name;\n        this._attrs = parseAttributes(attrs);\n        this._children = [];\n        if (children) {\n            this._insertChild(0, children);\n        }\n        this._classes = new Set();\n        if (this._attrs.has('class')) {\n            // Remove class attribute and handle it by class set.\n            const classString = this._attrs.get('class');\n            parseClasses(this._classes, classString);\n            this._attrs.delete('class');\n        }\n        this._styles = new StylesMap(this.document.stylesProcessor);\n        if (this._attrs.has('style')) {\n            // Remove style attribute and handle it by styles map.\n            this._styles.setTo(this._attrs.get('style'));\n            this._attrs.delete('style');\n        }\n    }\n    /**\n     * Number of element's children.\n     */\n    get childCount() {\n        return this._children.length;\n    }\n    /**\n     * Is `true` if there are no nodes inside this element, `false` otherwise.\n     */\n    get isEmpty() {\n        return this._children.length === 0;\n    }\n    /**\n     * Gets child at the given index.\n     *\n     * @param index Index of child.\n     * @returns Child node.\n     */\n    getChild(index) {\n        return this._children[index];\n    }\n    /**\n     * Gets index of the given child node. Returns `-1` if child node is not found.\n     *\n     * @param node Child node.\n     * @returns Index of the child node.\n     */\n    getChildIndex(node) {\n        return this._children.indexOf(node);\n    }\n    /**\n     * Gets child nodes iterator.\n     *\n     * @returns Child nodes iterator.\n     */\n    getChildren() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n     *\n     * @returns Keys for attributes.\n     */\n    *getAttributeKeys() {\n        if (this._classes.size > 0) {\n            yield 'class';\n        }\n        if (!this._styles.isEmpty) {\n            yield 'style';\n        }\n        yield* this._attrs.keys();\n    }\n    /**\n     * Returns iterator that iterates over this element's attributes.\n     *\n     * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     */\n    *getAttributes() {\n        yield* this._attrs.entries();\n        if (this._classes.size > 0) {\n            yield ['class', this.getAttribute('class')];\n        }\n        if (!this._styles.isEmpty) {\n            yield ['style', this.getAttribute('style')];\n        }\n    }\n    /**\n     * Gets attribute by key. If attribute is not present - returns undefined.\n     *\n     * @param key Attribute key.\n     * @returns Attribute value.\n     */\n    getAttribute(key) {\n        if (key == 'class') {\n            if (this._classes.size > 0) {\n                return [...this._classes].join(' ');\n            }\n            return undefined;\n        }\n        if (key == 'style') {\n            const inlineStyle = this._styles.toString();\n            return inlineStyle == '' ? undefined : inlineStyle;\n        }\n        return this._attrs.get(key);\n    }\n    /**\n     * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n     *\n     * @param key Attribute key.\n     * @returns `true` if attribute with the specified key exists in the element, `false` otherwise.\n     */\n    hasAttribute(key) {\n        if (key == 'class') {\n            return this._classes.size > 0;\n        }\n        if (key == 'style') {\n            return !this._styles.isEmpty;\n        }\n        return this._attrs.has(key);\n    }\n    /**\n     * Checks if this element is similar to other element.\n     * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n     * can contain different set of children nodes.\n     */\n    isSimilar(otherElement) {\n        if (!(otherElement instanceof Element)) {\n            return false;\n        }\n        // If exactly the same Element is provided - return true immediately.\n        if (this === otherElement) {\n            return true;\n        }\n        // Check element name.\n        if (this.name != otherElement.name) {\n            return false;\n        }\n        // Check number of attributes, classes and styles.\n        if (this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\n            this._styles.size !== otherElement._styles.size) {\n            return false;\n        }\n        // Check if attributes are the same.\n        for (const [key, value] of this._attrs) {\n            if (!otherElement._attrs.has(key) || otherElement._attrs.get(key) !== value) {\n                return false;\n            }\n        }\n        // Check if classes are the same.\n        for (const className of this._classes) {\n            if (!otherElement._classes.has(className)) {\n                return false;\n            }\n        }\n        // Check if styles are the same.\n        for (const property of this._styles.getStyleNames()) {\n            if (!otherElement._styles.has(property) ||\n                otherElement._styles.getAsString(property) !== this._styles.getAsString(property)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns true if class is present.\n     * If more then one class is provided - returns true only when all classes are present.\n     *\n     * ```ts\n     * element.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n     * element.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n     * ```\n     */\n    hasClass(...className) {\n        for (const name of className) {\n            if (!this._classes.has(name)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns iterator that contains all class names.\n     */\n    getClassNames() {\n        return this._classes.keys();\n    }\n    /**\n     * Returns style value for the given property mae.\n     * If the style does not exist `undefined` is returned.\n     *\n     * **Note**: This method can work with normalized style names if\n     * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n     * See {@link module:engine/view/stylesmap~StylesMap#getAsString `StylesMap#getAsString()`} for details.\n     *\n     * For an element with style set to `'margin:1px'`:\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * const element = view.change( writer => {\n     * \tconst element = writer.createElement();\n     * \twriter.setStyle( 'margin', '1px' );\n     * \twriter.setStyle( 'margin-bottom', '3em' );\n     *\n     * \treturn element;\n     * } );\n     *\n     * element.getStyle( 'margin' ); // -> 'margin: 1px 1px 3em;'\n     * ```\n     */\n    getStyle(property) {\n        return this._styles.getAsString(property);\n    }\n    /**\n     * Returns a normalized style object or single style value.\n     *\n     * For an element with style set to: margin:1px 2px 3em;\n     *\n     * ```ts\n     * element.getNormalizedStyle( 'margin' ) );\n     * ```\n     *\n     * will return:\n     *\n     * ```ts\n     * {\n     * \ttop: '1px',\n     * \tright: '2px',\n     * \tbottom: '3em',\n     * \tleft: '2px'    // a normalized value from margin shorthand\n     * }\n     * ```\n     *\n     * and reading for single style value:\n     *\n     * ```ts\n     * styles.getNormalizedStyle( 'margin-left' );\n     * ```\n     *\n     * Will return a `2px` string.\n     *\n     * **Note**: This method will return normalized values only if\n     * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n     * See {@link module:engine/view/stylesmap~StylesMap#getNormalized `StylesMap#getNormalized()`} for details.\n     *\n     * @param property Name of CSS property\n     */\n    getNormalizedStyle(property) {\n        return this._styles.getNormalized(property);\n    }\n    /**\n     * Returns iterator that contains all style names.\n     *\n     * @param expand Expand shorthand style properties and return all equivalent style representations.\n     */\n    getStyleNames(expand) {\n        return this._styles.getStyleNames(expand);\n    }\n    /**\n     * Returns true if style keys are present.\n     * If more then one style property is provided - returns true only when all properties are present.\n     *\n     * ```ts\n     * element.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n     * element.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n     * ```\n     */\n    hasStyle(...property) {\n        for (const name of property) {\n            if (!this._styles.has(name)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns ancestor element that match specified pattern.\n     * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n     *\n     * @see module:engine/view/matcher~Matcher\n     * @param patterns Patterns used to match correct ancestor. See {@link module:engine/view/matcher~Matcher}.\n     * @returns Found element or `null` if no matching ancestor was found.\n     */\n    findAncestor(...patterns) {\n        const matcher = new Matcher(...patterns);\n        let parent = this.parent;\n        while (parent && !parent.is('documentFragment')) {\n            if (matcher.match(parent)) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n        return null;\n    }\n    /**\n     * Returns the custom property value for the given key.\n     */\n    getCustomProperty(key) {\n        return this._customProperties.get(key);\n    }\n    /**\n     * Returns an iterator which iterates over this element's custom properties.\n     * Iterator provides `[ key, value ]` pairs for each stored property.\n     */\n    *getCustomProperties() {\n        yield* this._customProperties.entries();\n    }\n    /**\n     * Returns identity string based on element's name, styles, classes and other attributes.\n     * Two elements that {@link #isSimilar are similar} will have same identity string.\n     * It has the following format:\n     *\n     * ```ts\n     * 'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n     * ```\n     *\n     * For example:\n     *\n     * ```ts\n     * const element = writer.createContainerElement( 'foo', {\n     * \tbanana: '10',\n     * \tapple: '20',\n     * \tstyle: 'color: red; border-color: white;',\n     * \tclass: 'baz'\n     * } );\n     *\n     * // returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n     * element.getIdentity();\n     * ```\n     *\n     * **Note**: Classes, styles and other attributes are sorted alphabetically.\n     */\n    getIdentity() {\n        const classes = Array.from(this._classes).sort().join(',');\n        const styles = this._styles.toString();\n        const attributes = Array.from(this._attrs).map(i => `${i[0]}=\"${i[1]}\"`).sort().join(' ');\n        return this.name +\n            (classes == '' ? '' : ` class=\"${classes}\"`) +\n            (!styles ? '' : ` style=\"${styles}\"`) +\n            (attributes == '' ? '' : ` ${attributes}`);\n    }\n    /**\n     * Decides whether an unsafe attribute is whitelisted and should be rendered in the editing pipeline even though filtering mechanisms\n     * like {@link module:engine/view/domconverter~DomConverter#shouldRenderAttribute} say it should not.\n     *\n     * Unsafe attribute names can be specified when creating an element via {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @param attributeName The name of the attribute to be checked.\n     */\n    shouldRenderUnsafeAttribute(attributeName) {\n        return this._unsafeAttributesToRender.includes(attributeName);\n    }\n    /**\n     * Clones provided element.\n     *\n     * @internal\n     * @param deep If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any children.\n     * @returns Clone of this element.\n     */\n    _clone(deep = false) {\n        const childrenClone = [];\n        if (deep) {\n            for (const child of this.getChildren()) {\n                childrenClone.push(child._clone(deep));\n            }\n        }\n        // ContainerElement and AttributeElement should be also cloned properly.\n        const cloned = new this.constructor(this.document, this.name, this._attrs, childrenClone);\n        // Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n        // parse once again in constructor.\n        cloned._classes = new Set(this._classes);\n        cloned._styles.set(this._styles.getNormalized());\n        // Clone custom properties.\n        cloned._customProperties = new Map(this._customProperties);\n        // Clone filler offset method.\n        // We can't define this method in a prototype because it's behavior which\n        // is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n        cloned.getFillerOffset = this.getFillerOffset;\n        // Clone unsafe attributes list.\n        cloned._unsafeAttributesToRender = this._unsafeAttributesToRender;\n        return cloned;\n    }\n    /**\n     * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n     * and sets the parent of these nodes to this element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#insert\n     * @internal\n     * @param items Items to be inserted.\n     * @fires change\n     * @returns Number of appended nodes.\n     */\n    _appendChild(items) {\n        return this._insertChild(this.childCount, items);\n    }\n    /**\n     * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n     * this element.\n     *\n     * @internal\n     * @see module:engine/view/downcastwriter~DowncastWriter#insert\n     * @param index Position where nodes should be inserted.\n     * @param items Items to be inserted.\n     * @fires change\n     * @returns Number of inserted nodes.\n     */\n    _insertChild(index, items) {\n        this._fireChange('children', this);\n        let count = 0;\n        const nodes = normalize(this.document, items);\n        for (const node of nodes) {\n            // If node that is being added to this element is already inside another element, first remove it from the old parent.\n            if (node.parent !== null) {\n                node._remove();\n            }\n            node.parent = this;\n            node.document = this.document;\n            this._children.splice(index, 0, node);\n            index++;\n            count++;\n        }\n        return count;\n    }\n    /**\n     * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#remove\n     * @internal\n     * @param index Number of the first node to remove.\n     * @param howMany Number of nodes to remove.\n     * @fires change\n     * @returns The array of removed nodes.\n     */\n    _removeChildren(index, howMany = 1) {\n        this._fireChange('children', this);\n        for (let i = index; i < index + howMany; i++) {\n            this._children[i].parent = null;\n        }\n        return this._children.splice(index, howMany);\n    }\n    /**\n     * Adds or overwrite attribute with a specified key and value.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n     * @internal\n     * @param key Attribute key.\n     * @param value Attribute value.\n     * @fires change\n     */\n    _setAttribute(key, value) {\n        const stringValue = String(value);\n        this._fireChange('attributes', this);\n        if (key == 'class') {\n            parseClasses(this._classes, stringValue);\n        }\n        else if (key == 'style') {\n            this._styles.setTo(stringValue);\n        }\n        else {\n            this._attrs.set(key, stringValue);\n        }\n    }\n    /**\n     * Removes attribute from the element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n     * @internal\n     * @param key Attribute key.\n     * @returns Returns true if an attribute existed and has been removed.\n     * @fires change\n     */\n    _removeAttribute(key) {\n        this._fireChange('attributes', this);\n        // Remove class attribute.\n        if (key == 'class') {\n            if (this._classes.size > 0) {\n                this._classes.clear();\n                return true;\n            }\n            return false;\n        }\n        // Remove style attribute.\n        if (key == 'style') {\n            if (!this._styles.isEmpty) {\n                this._styles.clear();\n                return true;\n            }\n            return false;\n        }\n        // Remove other attributes.\n        return this._attrs.delete(key);\n    }\n    /**\n     * Adds specified class.\n     *\n     * ```ts\n     * element._addClass( 'foo' ); // Adds 'foo' class.\n     * element._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n     * ```\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n     * @internal\n     * @fires change\n     */\n    _addClass(className) {\n        this._fireChange('attributes', this);\n        for (const name of toArray(className)) {\n            this._classes.add(name);\n        }\n    }\n    /**\n     * Removes specified class.\n     *\n     * ```ts\n     * element._removeClass( 'foo' );  // Removes 'foo' class.\n     * element._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n     * ```\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n     * @internal\n     * @fires change\n     */\n    _removeClass(className) {\n        this._fireChange('attributes', this);\n        for (const name of toArray(className)) {\n            this._classes.delete(name);\n        }\n    }\n    _setStyle(property, value) {\n        this._fireChange('attributes', this);\n        if (typeof property != 'string') {\n            this._styles.set(property);\n        }\n        else {\n            this._styles.set(property, value);\n        }\n    }\n    /**\n     * Removes specified style.\n     *\n     * ```ts\n     * element._removeStyle( 'color' );  // Removes 'color' style.\n     * element._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n     * ```\n     *\n     * **Note**: This method can work with normalized style names if\n     * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n     * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n     * @internal\n     * @fires change\n     */\n    _removeStyle(property) {\n        this._fireChange('attributes', this);\n        for (const name of toArray(property)) {\n            this._styles.remove(name);\n        }\n    }\n    /**\n     * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n     * so they can be used to add special data to elements.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n     * @internal\n     */\n    _setCustomProperty(key, value) {\n        this._customProperties.set(key, value);\n    }\n    /**\n     * Removes the custom property stored under the given key.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n     * @internal\n     * @returns Returns true if property was removed.\n     */\n    _removeCustomProperty(key) {\n        return this._customProperties.delete(key);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'element' || type === 'view:element' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n * as an object (instead of `Iterable`), the object is transformed to the map. Attributes with `null` value are removed.\n * Attributes with non-`String` value are converted to `String`.\n *\n * @param attrs Attributes to parse.\n * @returns Parsed attributes.\n */\nfunction parseAttributes(attrs) {\n    const attrsMap = toMap(attrs);\n    for (const [key, value] of attrsMap) {\n        if (value === null) {\n            attrsMap.delete(key);\n        }\n        else if (typeof value != 'string') {\n            attrsMap.set(key, String(value));\n        }\n    }\n    return attrsMap;\n}\n/**\n * Parses class attribute and puts all classes into classes set.\n * Classes set s cleared before insertion.\n *\n * @param classesSet Set to insert parsed classes.\n * @param classesString String with classes to parse.\n */\nfunction parseClasses(classesSet, classesString) {\n    const classArray = classesString.split(/\\s+/);\n    classesSet.clear();\n    classArray.forEach(name => classesSet.add(name));\n}\n/**\n * Converts strings to Text and non-iterables to arrays.\n */\nfunction normalize(document, nodes) {\n    // Separate condition because string is iterable.\n    if (typeof nodes == 'string') {\n        return [new Text(document, nodes)];\n    }\n    if (!isIterable(nodes)) {\n        nodes = [nodes];\n    }\n    // Array.from to enable .map() on non-arrays.\n    return Array.from(nodes)\n        .map(node => {\n        if (typeof node == 'string') {\n            return new Text(document, node);\n        }\n        if (node instanceof TextProxy) {\n            return new Text(document, node.data);\n        }\n        return node;\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/containerelement\n */\nimport Element from './element.js';\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n */\nexport default class ContainerElement extends Element {\n    /**\n     * Creates a container element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n     * @see module:engine/view/element~Element\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attrs, children) {\n        super(document, name, attrs, children);\n        this.getFillerOffset = getFillerOffset;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nContainerElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'containerElement' || type === 'view:containerElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'containerElement' || type === 'view:containerElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns Block filler offset or `null` if block filler is not needed.\n */\nexport function getFillerOffset() {\n    const children = [...this.getChildren()];\n    const lastChild = children[this.childCount - 1];\n    // Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n    if (lastChild && lastChild.is('element', 'br')) {\n        return this.childCount;\n    }\n    for (const child of children) {\n        // If there's any non-UI element – don't render the bogus.\n        if (!child.is('uiElement')) {\n            return null;\n        }\n    }\n    // If there are only UI elements – render the bogus at the end of the element.\n    return this.childCount;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/editableelement\n */\nimport ContainerElement from './containerelement.js';\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\n * or nested editable area in the editor.\n *\n * Editable is automatically read-only when its {@link module:engine/view/document~Document Document} is read-only.\n *\n * The constructor of this class shouldn't be used directly. To create new `EditableElement` use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`} method.\n */\nexport default class EditableElement extends /* #__PURE__ */ ObservableMixin(ContainerElement) {\n    /**\n     * Creates an editable element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createEditableElement\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attributes, children) {\n        super(document, name, attributes, children);\n        this.set('isReadOnly', false);\n        this.set('isFocused', false);\n        this.set('placeholder', undefined);\n        this.bind('isReadOnly').to(document);\n        this.bind('isFocused').to(document, 'isFocused', isFocused => isFocused && document.selection.editableElement == this);\n        // Update focus state based on selection changes.\n        this.listenTo(document.selection, 'change', () => {\n            this.isFocused = document.isFocused && document.selection.editableElement == this;\n        });\n    }\n    destroy() {\n        this.stopListening();\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nEditableElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'editableElement' || type === 'view:editableElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'containerElement' || type === 'view:containerElement' ||\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'editableElement' || type === 'view:editableElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'containerElement' || type === 'view:containerElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/rooteditableelement\n */\nimport EditableElement from './editableelement.js';\nconst rootNameSymbol = Symbol('rootName');\n/**\n * Class representing a single root in the data view. A root can be either {@link ~RootEditableElement#isReadOnly editable or read-only},\n * but in both cases it is called \"an editable\". Roots can contain other {@link module:engine/view/editableelement~EditableElement\n * editable elements} making them \"nested editables\".\n */\nexport default class RootEditableElement extends EditableElement {\n    /**\n     * Creates root editable element.\n     *\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     */\n    constructor(document, name) {\n        super(document, name);\n        this.rootName = 'main';\n    }\n    /**\n     * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no\n     * other name is set, `main` name is used.\n     *\n     * @readonly\n     */\n    get rootName() {\n        return this.getCustomProperty(rootNameSymbol);\n    }\n    set rootName(rootName) {\n        this._setCustomProperty(rootNameSymbol, rootName);\n    }\n    /**\n     * Overrides old element name and sets new one.\n     * This is needed because view roots are created before they are attached to the DOM.\n     * The name of the root element is temporary at this stage. It has to be changed when the\n     * view root element is attached to the DOM element.\n     *\n     * @internal\n     * @param name The new name of element.\n     */\n    set _name(name) {\n        this.name = name;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nRootEditableElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'rootElement' || type === 'view:rootElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'editableElement' || type === 'view:editableElement' ||\n            type === 'containerElement' || type === 'view:containerElement' ||\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'rootElement' || type === 'view:rootElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'editableElement' || type === 'view:editableElement' ||\n            type === 'containerElement' || type === 'view:containerElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/treewalker\n */\nimport Element from './element.js';\nimport Text from './text.js';\nimport TextProxy from './textproxy.js';\nimport Position from './position.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n    /**\n     * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n     *\n     * @param options Object with configuration.\n     */\n    constructor(options = {}) {\n        if (!options.boundaries && !options.startPosition) {\n            /**\n             * Neither boundaries nor starting position have been defined.\n             *\n             * @error view-tree-walker-no-start-position\n             */\n            throw new CKEditorError('view-tree-walker-no-start-position', null);\n        }\n        if (options.direction && options.direction != 'forward' && options.direction != 'backward') {\n            /**\n             * Only `backward` and `forward` direction allowed.\n             *\n             * @error view-tree-walker-unknown-direction\n             */\n            throw new CKEditorError('view-tree-walker-unknown-direction', options.startPosition, { direction: options.direction });\n        }\n        this.boundaries = options.boundaries || null;\n        if (options.startPosition) {\n            this._position = Position._createAt(options.startPosition);\n        }\n        else {\n            this._position = Position._createAt(options.boundaries[options.direction == 'backward' ? 'end' : 'start']);\n        }\n        this.direction = options.direction || 'forward';\n        this.singleCharacters = !!options.singleCharacters;\n        this.shallow = !!options.shallow;\n        this.ignoreElementEnd = !!options.ignoreElementEnd;\n        this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n        this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n    }\n    /**\n     * Iterable interface.\n     */\n    [Symbol.iterator]() {\n        return this;\n    }\n    /**\n     * Iterator position. If start position is not defined then position depends on {@link #direction}. If direction is\n     * `'forward'` position starts form the beginning, when direction is `'backward'` position starts from the end.\n     */\n    get position() {\n        return this._position;\n    }\n    /**\n     * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n     *\n     * For example:\n     *\n     * ```ts\n     * walker.skip( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n     * walker.skip( value => true ); // Move the position to the end: <p>{}foo</p> -> <p>foo</p>[]\n     * walker.skip( value => false ); // Do not move the position.\n     * ```\n     *\n     * @param skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n     * return `true` if the value should be skipped or `false` if not.\n     */\n    skip(skip) {\n        let nextResult;\n        let prevPosition;\n        do {\n            prevPosition = this.position;\n            nextResult = this.next();\n        } while (!nextResult.done && skip(nextResult.value));\n        if (!nextResult.done) {\n            this._position = prevPosition;\n        }\n    }\n    /**\n     * Gets the next tree walker's value.\n     *\n     * @returns Object implementing iterator interface, returning\n     * information about taken step.\n     */\n    next() {\n        if (this.direction == 'forward') {\n            return this._next();\n        }\n        else {\n            return this._previous();\n        }\n    }\n    /**\n     * Makes a step forward in view. Moves the {@link #position} to the next position and returns the encountered value.\n     */\n    _next() {\n        let position = this.position.clone();\n        const previousPosition = this.position;\n        const parent = position.parent;\n        // We are at the end of the root.\n        if (parent.parent === null && position.offset === parent.childCount) {\n            return { done: true, value: undefined };\n        }\n        // We reached the walker boundary.\n        if (parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset) {\n            return { done: true, value: undefined };\n        }\n        // Get node just after current position.\n        let node;\n        // Text is a specific parent because it contains string instead of child nodes.\n        if (parent instanceof Text) {\n            if (position.isAtEnd) {\n                // Prevent returning \"elementEnd\" for Text node. Skip that value and return the next walker step.\n                this._position = Position._createAfter(parent);\n                return this._next();\n            }\n            node = parent.data[position.offset];\n        }\n        else {\n            node = parent.getChild(position.offset);\n        }\n        if (node instanceof Element) {\n            if (!this.shallow) {\n                position = new Position(node, 0);\n            }\n            else {\n                // We are past the walker boundaries.\n                if (this.boundaries && this.boundaries.end.isBefore(position)) {\n                    return { done: true, value: undefined };\n                }\n                position.offset++;\n            }\n            this._position = position;\n            return this._formatReturnValue('elementStart', node, previousPosition, position, 1);\n        }\n        if (node instanceof Text) {\n            if (this.singleCharacters) {\n                position = new Position(node, 0);\n                this._position = position;\n                return this._next();\n            }\n            let charactersCount = node.data.length;\n            let item;\n            // If text stick out of walker range, we need to cut it and wrap in TextProxy.\n            if (node == this._boundaryEndParent) {\n                charactersCount = this.boundaries.end.offset;\n                item = new TextProxy(node, 0, charactersCount);\n                position = Position._createAfter(item);\n            }\n            else {\n                item = new TextProxy(node, 0, node.data.length);\n                // If not just keep moving forward.\n                position.offset++;\n            }\n            this._position = position;\n            return this._formatReturnValue('text', item, previousPosition, position, charactersCount);\n        }\n        if (typeof node == 'string') {\n            let textLength;\n            if (this.singleCharacters) {\n                textLength = 1;\n            }\n            else {\n                // Check if text stick out of walker range.\n                const endOffset = parent === this._boundaryEndParent ? this.boundaries.end.offset : parent.data.length;\n                textLength = endOffset - position.offset;\n            }\n            const textProxy = new TextProxy(parent, position.offset, textLength);\n            position.offset += textLength;\n            this._position = position;\n            return this._formatReturnValue('text', textProxy, previousPosition, position, textLength);\n        }\n        // `node` is not set, we reached the end of current `parent`.\n        position = Position._createAfter(parent);\n        this._position = position;\n        if (this.ignoreElementEnd) {\n            return this._next();\n        }\n        return this._formatReturnValue('elementEnd', parent, previousPosition, position);\n    }\n    /**\n     * Makes a step backward in view. Moves the {@link #position} to the previous position and returns the encountered value.\n     */\n    _previous() {\n        let position = this.position.clone();\n        const previousPosition = this.position;\n        const parent = position.parent;\n        // We are at the beginning of the root.\n        if (parent.parent === null && position.offset === 0) {\n            return { done: true, value: undefined };\n        }\n        // We reached the walker boundary.\n        if (parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset) {\n            return { done: true, value: undefined };\n        }\n        // Get node just before current position.\n        let node;\n        // Text {@link module:engine/view/text~Text} element is a specific parent because contains string instead of child nodes.\n        if (parent instanceof Text) {\n            if (position.isAtStart) {\n                // Prevent returning \"elementStart\" for Text node. Skip that value and return the next walker step.\n                this._position = Position._createBefore(parent);\n                return this._previous();\n            }\n            node = parent.data[position.offset - 1];\n        }\n        else {\n            node = parent.getChild(position.offset - 1);\n        }\n        if (node instanceof Element) {\n            if (this.shallow) {\n                position.offset--;\n                this._position = position;\n                return this._formatReturnValue('elementStart', node, previousPosition, position, 1);\n            }\n            position = new Position(node, node.childCount);\n            this._position = position;\n            if (this.ignoreElementEnd) {\n                return this._previous();\n            }\n            return this._formatReturnValue('elementEnd', node, previousPosition, position);\n        }\n        if (node instanceof Text) {\n            if (this.singleCharacters) {\n                position = new Position(node, node.data.length);\n                this._position = position;\n                return this._previous();\n            }\n            let charactersCount = node.data.length;\n            let item;\n            // If text stick out of walker range, we need to cut it and wrap in TextProxy.\n            if (node == this._boundaryStartParent) {\n                const offset = this.boundaries.start.offset;\n                item = new TextProxy(node, offset, node.data.length - offset);\n                charactersCount = item.data.length;\n                position = Position._createBefore(item);\n            }\n            else {\n                item = new TextProxy(node, 0, node.data.length);\n                // If not just keep moving backward.\n                position.offset--;\n            }\n            this._position = position;\n            return this._formatReturnValue('text', item, previousPosition, position, charactersCount);\n        }\n        if (typeof node == 'string') {\n            let textLength;\n            if (!this.singleCharacters) {\n                // Check if text stick out of walker range.\n                const startOffset = parent === this._boundaryStartParent ? this.boundaries.start.offset : 0;\n                textLength = position.offset - startOffset;\n            }\n            else {\n                textLength = 1;\n            }\n            position.offset -= textLength;\n            const textProxy = new TextProxy(parent, position.offset, textLength);\n            this._position = position;\n            return this._formatReturnValue('text', textProxy, previousPosition, position, textLength);\n        }\n        // `node` is not set, we reached the beginning of current `parent`.\n        position = Position._createBefore(parent);\n        this._position = position;\n        return this._formatReturnValue('elementStart', parent, previousPosition, position, 1);\n    }\n    /**\n     * Format returned data and adjust `previousPosition` and `nextPosition` if reach the bound of the {@link module:engine/view/text~Text}.\n     *\n     * @param type Type of step.\n     * @param item Item between old and new position.\n     * @param previousPosition Previous position of iterator.\n     * @param nextPosition Next position of iterator.\n     * @param length Length of the item.\n     */\n    _formatReturnValue(type, item, previousPosition, nextPosition, length) {\n        // Text is a specific parent, because contains string instead of children.\n        // Walker doesn't enter to the Text except situations when walker is iterating over every single character,\n        // or the bound starts/ends inside the Text. So when the position is at the beginning or at the end of the Text\n        // we move it just before or just after Text.\n        if (item instanceof TextProxy) {\n            // Position is at the end of Text.\n            if (item.offsetInText + item.data.length == item.textNode.data.length) {\n                if (this.direction == 'forward' && !(this.boundaries && this.boundaries.end.isEqual(this.position))) {\n                    nextPosition = Position._createAfter(item.textNode);\n                    // When we change nextPosition of returned value we need also update walker current position.\n                    this._position = nextPosition;\n                }\n                else {\n                    previousPosition = Position._createAfter(item.textNode);\n                }\n            }\n            // Position is at the begining ot the text.\n            if (item.offsetInText === 0) {\n                if (this.direction == 'backward' && !(this.boundaries && this.boundaries.start.isEqual(this.position))) {\n                    nextPosition = Position._createBefore(item.textNode);\n                    // When we change nextPosition of returned value we need also update walker current position.\n                    this._position = nextPosition;\n                }\n                else {\n                    previousPosition = Position._createBefore(item.textNode);\n                }\n            }\n        }\n        return {\n            done: false,\n            value: {\n                type,\n                item,\n                previousPosition,\n                nextPosition,\n                length\n            }\n        };\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/position\n */\nimport TypeCheckable from './typecheckable.js';\nimport { CKEditorError, compareArrays } from '@ckeditor/ckeditor5-utils';\nimport EditableElement from './editableelement.js';\nimport { default as TreeWalker } from './treewalker.js';\n/**\n * Position in the view tree. Position is represented by its parent node and an offset in this parent.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Position extends TypeCheckable {\n    /**\n     * Creates a position.\n     *\n     * @param parent Position parent.\n     * @param offset Position offset.\n     */\n    constructor(parent, offset) {\n        super();\n        this.parent = parent;\n        this.offset = offset;\n    }\n    /**\n     * Node directly after the position. Equals `null` when there is no node after position or position is located\n     * inside text node.\n     */\n    get nodeAfter() {\n        if (this.parent.is('$text')) {\n            return null;\n        }\n        return this.parent.getChild(this.offset) || null;\n    }\n    /**\n     * Node directly before the position. Equals `null` when there is no node before position or position is located\n     * inside text node.\n     */\n    get nodeBefore() {\n        if (this.parent.is('$text')) {\n            return null;\n        }\n        return this.parent.getChild(this.offset - 1) || null;\n    }\n    /**\n     * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n     */\n    get isAtStart() {\n        return this.offset === 0;\n    }\n    /**\n     * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n     */\n    get isAtEnd() {\n        const endOffset = this.parent.is('$text') ? this.parent.data.length : this.parent.childCount;\n        return this.offset === endOffset;\n    }\n    /**\n     * Position's root, that is the root of the position's parent element.\n     */\n    get root() {\n        return this.parent.root;\n    }\n    /**\n     * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\n     * position is not inside an editable element.\n     */\n    get editableElement() {\n        let editable = this.parent;\n        while (!(editable instanceof EditableElement)) {\n            if (editable.parent) {\n                editable = editable.parent;\n            }\n            else {\n                return null;\n            }\n        }\n        return editable;\n    }\n    /**\n     * Returns a new instance of Position with offset incremented by `shift` value.\n     *\n     * @param shift How position offset should get changed. Accepts negative values.\n     * @returns Shifted position.\n     */\n    getShiftedBy(shift) {\n        const shifted = Position._createAt(this);\n        const offset = shifted.offset + shift;\n        shifted.offset = offset < 0 ? 0 : offset;\n        return shifted;\n    }\n    /**\n     * Gets the farthest position which matches the callback using\n     * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\n     *\n     * For example:\n     *\n     * ```ts\n     * getLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n     * getLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\n     * getLastMatchingPosition( value => false ); // Do not move the position.\n     * ```\n     *\n     * @param skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n     * return `true` if the value should be skipped or `false` if not.\n     * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n     * @returns The position after the last item which matches the `skip` callback test.\n     */\n    getLastMatchingPosition(skip, options = {}) {\n        options.startPosition = this;\n        const treeWalker = new TreeWalker(options);\n        treeWalker.skip(skip);\n        return treeWalker.position;\n    }\n    /**\n     * Returns ancestors array of this position, that is this position's parent and it's ancestors.\n     *\n     * @returns Array with ancestors.\n     */\n    getAncestors() {\n        if (this.parent.is('documentFragment')) {\n            return [this.parent];\n        }\n        else {\n            return this.parent.getAncestors({ includeSelf: true });\n        }\n    }\n    /**\n     * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n     * which is a common ancestor of both positions.\n     */\n    getCommonAncestor(position) {\n        const ancestorsA = this.getAncestors();\n        const ancestorsB = position.getAncestors();\n        let i = 0;\n        while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n            i++;\n        }\n        return i === 0 ? null : ancestorsA[i - 1];\n    }\n    /**\n     * Checks whether this position equals given position.\n     *\n     * @param otherPosition Position to compare with.\n     * @returns True if positions are same.\n     */\n    isEqual(otherPosition) {\n        return (this.parent == otherPosition.parent && this.offset == otherPosition.offset);\n    }\n    /**\n     * Checks whether this position is located before given position. When method returns `false` it does not mean that\n     * this position is after give one. Two positions may be located inside separate roots and in that situation this\n     * method will still return `false`.\n     *\n     * @see module:engine/view/position~Position#isAfter\n     * @see module:engine/view/position~Position#compareWith\n     * @param otherPosition Position to compare with.\n     * @returns Returns `true` if this position is before given position.\n     */\n    isBefore(otherPosition) {\n        return this.compareWith(otherPosition) == 'before';\n    }\n    /**\n     * Checks whether this position is located after given position. When method returns `false` it does not mean that\n     * this position is before give one. Two positions may be located inside separate roots and in that situation this\n     * method will still return `false`.\n     *\n     * @see module:engine/view/position~Position#isBefore\n     * @see module:engine/view/position~Position#compareWith\n     * @param otherPosition Position to compare with.\n     * @returns Returns `true` if this position is after given position.\n     */\n    isAfter(otherPosition) {\n        return this.compareWith(otherPosition) == 'after';\n    }\n    /**\n     * Checks whether this position is before, after or in same position that other position. Two positions may be also\n     * different when they are located in separate roots.\n     *\n     * @param otherPosition Position to compare with.\n     */\n    compareWith(otherPosition) {\n        if (this.root !== otherPosition.root) {\n            return 'different';\n        }\n        if (this.isEqual(otherPosition)) {\n            return 'same';\n        }\n        // Get path from root to position's parent element.\n        const thisPath = this.parent.is('node') ? this.parent.getPath() : [];\n        const otherPath = otherPosition.parent.is('node') ? otherPosition.parent.getPath() : [];\n        // Add the positions' offsets to the parents offsets.\n        thisPath.push(this.offset);\n        otherPath.push(otherPosition.offset);\n        // Compare both path arrays to find common ancestor.\n        const result = compareArrays(thisPath, otherPath);\n        switch (result) {\n            case 'prefix':\n                return 'before';\n            case 'extension':\n                return 'after';\n            default:\n                // Cast to number to avoid having 'same' as a type of `result`.\n                return thisPath[result] < otherPath[result] ? 'before' : 'after';\n        }\n    }\n    /**\n     * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this positions as a start position.\n     *\n     * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}\n     */\n    getWalker(options = {}) {\n        options.startPosition = this;\n        return new TreeWalker(options);\n    }\n    /**\n     * Clones this position.\n     */\n    clone() {\n        return new Position(this.parent, this.offset);\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/view/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n     *\n     * This method is a shortcut to other constructors such as:\n     *\n     * * {@link module:engine/view/position~Position._createBefore},\n     * * {@link module:engine/view/position~Position._createAfter}.\n     *\n     * @internal\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    static _createAt(itemOrPosition, offset) {\n        if (itemOrPosition instanceof Position) {\n            return new this(itemOrPosition.parent, itemOrPosition.offset);\n        }\n        else {\n            const node = itemOrPosition;\n            if (offset == 'end') {\n                offset = node.is('$text') ? node.data.length : node.childCount;\n            }\n            else if (offset == 'before') {\n                return this._createBefore(node);\n            }\n            else if (offset == 'after') {\n                return this._createAfter(node);\n            }\n            else if (offset !== 0 && !offset) {\n                /**\n                 * {@link module:engine/view/view~View#createPositionAt `View#createPositionAt()`}\n                 * requires the offset to be specified when the first parameter is a view item.\n                 *\n                 * @error view-createpositionat-offset-required\n                 */\n                throw new CKEditorError('view-createpositionat-offset-required', node);\n            }\n            return new Position(node, offset);\n        }\n    }\n    /**\n     * Creates a new position after given view item.\n     *\n     * @internal\n     * @param item View item after which the position should be located.\n     */\n    static _createAfter(item) {\n        // TextProxy is not a instance of Node so we need do handle it in specific way.\n        if (item.is('$textProxy')) {\n            return new Position(item.textNode, item.offsetInText + item.data.length);\n        }\n        if (!item.parent) {\n            /**\n             * You can not make a position after a root.\n             *\n             * @error view-position-after-root\n             * @param {module:engine/view/node~Node} root\n             */\n            throw new CKEditorError('view-position-after-root', item, { root: item });\n        }\n        return new Position(item.parent, item.index + 1);\n    }\n    /**\n     * Creates a new position before given view item.\n     *\n     * @internal\n     * @param item View item before which the position should be located.\n     */\n    static _createBefore(item) {\n        // TextProxy is not a instance of Node so we need do handle it in specific way.\n        if (item.is('$textProxy')) {\n            return new Position(item.textNode, item.offsetInText);\n        }\n        if (!item.parent) {\n            /**\n             * You cannot make a position before a root.\n             *\n             * @error view-position-before-root\n             * @param {module:engine/view/node~Node} root\n             */\n            throw new CKEditorError('view-position-before-root', item, { root: item });\n        }\n        return new Position(item.parent, item.index);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nPosition.prototype.is = function (type) {\n    return type === 'position' || type === 'view:position';\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/range\n */\nimport TypeCheckable from './typecheckable.js';\nimport Position from './position.js';\nimport { default as TreeWalker } from './treewalker.js';\n/**\n * Range in the view tree. A range is represented by its start and end {@link module:engine/view/position~Position positions}.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Range extends TypeCheckable {\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n     *\n     * @param start Start position.\n     * @param end End position. If not set, range will be collapsed at the `start` position.\n     */\n    constructor(start, end = null) {\n        super();\n        this.start = start.clone();\n        this.end = end ? end.clone() : start.clone();\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n     * them together with additional information like length or {@link module:engine/view/position~Position positions},\n     * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.\n     *\n     * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and\n     * `ignoreElementEnd` option\n     * set to `true`.\n     */\n    *[Symbol.iterator]() {\n        yield* new TreeWalker({ boundaries: this, ignoreElementEnd: true });\n    }\n    /**\n     * Returns whether the range is collapsed, that is it start and end positions are equal.\n     */\n    get isCollapsed() {\n        return this.start.isEqual(this.end);\n    }\n    /**\n     * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and\n     * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.\n     */\n    get isFlat() {\n        return this.start.parent === this.end.parent;\n    }\n    /**\n     * Range root element.\n     */\n    get root() {\n        return this.start.root;\n    }\n    /**\n     * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning\n     * and at the end).\n     *\n     * For example:\n     *\n     * ```html\n     * <p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>\n     * <p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>\n     * ```\n     *\n     * Note that in the sample above:\n     *\n     * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n     * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n     * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n     *\n     * @returns Enlarged range.\n     */\n    getEnlarged() {\n        let start = this.start.getLastMatchingPosition(enlargeTrimSkip, { direction: 'backward' });\n        let end = this.end.getLastMatchingPosition(enlargeTrimSkip);\n        // Fix positions, in case if they are in Text node.\n        if (start.parent.is('$text') && start.isAtStart) {\n            start = Position._createBefore(start.parent);\n        }\n        if (end.parent.is('$text') && end.isAtEnd) {\n            end = Position._createAfter(end.parent);\n        }\n        return new Range(start, end);\n    }\n    /**\n     * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning\n     * and at the end).\n     *\n     * For example:\n     *\n     * ```html\n     * <p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>\n     * <p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>\n     * ```\n     *\n     * Note that in the sample above:\n     *\n     * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n     * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n     * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n     *\n     * @returns Shrunk range.\n     */\n    getTrimmed() {\n        let start = this.start.getLastMatchingPosition(enlargeTrimSkip);\n        if (start.isAfter(this.end) || start.isEqual(this.end)) {\n            return new Range(start, start);\n        }\n        let end = this.end.getLastMatchingPosition(enlargeTrimSkip, { direction: 'backward' });\n        const nodeAfterStart = start.nodeAfter;\n        const nodeBeforeEnd = end.nodeBefore;\n        // Because TreeWalker prefers positions next to text node, we need to move them manually into these text nodes.\n        if (nodeAfterStart && nodeAfterStart.is('$text')) {\n            start = new Position(nodeAfterStart, 0);\n        }\n        if (nodeBeforeEnd && nodeBeforeEnd.is('$text')) {\n            end = new Position(nodeBeforeEnd, nodeBeforeEnd.data.length);\n        }\n        return new Range(start, end);\n    }\n    /**\n     * Two ranges are equal if their start and end positions are equal.\n     *\n     * @param otherRange Range to compare with.\n     * @returns `true` if ranges are equal, `false` otherwise\n     */\n    isEqual(otherRange) {\n        return this == otherRange || (this.start.isEqual(otherRange.start) && this.end.isEqual(otherRange.end));\n    }\n    /**\n     * Checks whether this range contains given {@link module:engine/view/position~Position position}.\n     *\n     * @param position Position to check.\n     * @returns `true` if given {@link module:engine/view/position~Position position} is contained in this range, `false` otherwise.\n     */\n    containsPosition(position) {\n        return position.isAfter(this.start) && position.isBefore(this.end);\n    }\n    /**\n     * Checks whether this range contains given {@link module:engine/view/range~Range range}.\n     *\n     * @param otherRange Range to check.\n     * @param loose Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n     * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n     * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n     * @returns `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`\n     * otherwise.\n     */\n    containsRange(otherRange, loose = false) {\n        if (otherRange.isCollapsed) {\n            loose = false;\n        }\n        const containsStart = this.containsPosition(otherRange.start) || (loose && this.start.isEqual(otherRange.start));\n        const containsEnd = this.containsPosition(otherRange.end) || (loose && this.end.isEqual(otherRange.end));\n        return containsStart && containsEnd;\n    }\n    /**\n     * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given\n     * {@link module:engine/view/range~Range range}.\n     * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let foo = downcastWriter.createText( 'foo' );\n     * let img = downcastWriter.createContainerElement( 'img' );\n     * let bar = downcastWriter.createText( 'bar' );\n     * let p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n     *\n     * let range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n     * let otherRange = view.createRange( // \"oo\", img, \"ba\" are in range.\n     * \tview.createPositionAt( foo, 1 ),\n     * \tview.createPositionAt( bar, 2 )\n     * );\n     * let transformed = range.getDifference( otherRange );\n     * // transformed array has no ranges because `otherRange` contains `range`\n     *\n     * otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n     * transformed = range.getDifference( otherRange );\n     * // transformed array has one range: from ( p, 2 ) to ( bar, 1 )\n     *\n     * otherRange = view.createRange( view.createPositionAt( p, 1 ), view.createPositionAt( p, 2 ) ); // img is in range.\n     * transformed = range.getDifference( otherRange );\n     * // transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )\n     * ```\n     *\n     * @param otherRange Range to differentiate against.\n     * @returns The difference between ranges.\n     */\n    getDifference(otherRange) {\n        const ranges = [];\n        if (this.isIntersecting(otherRange)) {\n            // Ranges intersect.\n            if (this.containsPosition(otherRange.start)) {\n                // Given range start is inside this range. This means that we have to\n                // add shrunken range - from the start to the middle of this range.\n                ranges.push(new Range(this.start, otherRange.start));\n            }\n            if (this.containsPosition(otherRange.end)) {\n                // Given range end is inside this range. This means that we have to\n                // add shrunken range - from the middle of this range to the end.\n                ranges.push(new Range(otherRange.end, this.end));\n            }\n        }\n        else {\n            // Ranges do not intersect, return the original range.\n            ranges.push(this.clone());\n        }\n        return ranges;\n    }\n    /**\n     * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.\n     * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let foo = downcastWriter.createText( 'foo' );\n     * let img = downcastWriter.createContainerElement( 'img' );\n     * let bar = downcastWriter.createText( 'bar' );\n     * let p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n     *\n     * let range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n     * let otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n     * let transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).\n     *\n     * otherRange = view.createRange( view.createPositionAt( bar, 1 ), view.createPositionAt( bar, 3 ); \"ar\" is in range.\n     * transformed = range.getIntersection( otherRange ); // null - no common part.\n     * ```\n     *\n     * @param otherRange Range to check for intersection.\n     * @returns A common part of given ranges or `null` if ranges have no common part.\n     */\n    getIntersection(otherRange) {\n        if (this.isIntersecting(otherRange)) {\n            // Ranges intersect, so a common range will be returned.\n            // At most, it will be same as this range.\n            let commonRangeStart = this.start;\n            let commonRangeEnd = this.end;\n            if (this.containsPosition(otherRange.start)) {\n                // Given range start is inside this range. This means thaNt we have to\n                // shrink common range to the given range start.\n                commonRangeStart = otherRange.start;\n            }\n            if (this.containsPosition(otherRange.end)) {\n                // Given range end is inside this range. This means that we have to\n                // shrink common range to the given range end.\n                commonRangeEnd = otherRange.end;\n            }\n            return new Range(commonRangeStart, commonRangeEnd);\n        }\n        // Ranges do not intersect, so they do not have common part.\n        return null;\n    }\n    /**\n     * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n     *\n     * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n     */\n    getWalker(options = {}) {\n        options.boundaries = this;\n        return new TreeWalker(options);\n    }\n    /**\n     * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n     * which is a common ancestor of range's both ends (in which the entire range is contained).\n     */\n    getCommonAncestor() {\n        return this.start.getCommonAncestor(this.end);\n    }\n    /**\n     * Returns an {@link module:engine/view/element~Element Element} contained by the range.\n     * The element will be returned when it is the **only** node within the range and **fully–contained**\n     * at the same time.\n     */\n    getContainedElement() {\n        if (this.isCollapsed) {\n            return null;\n        }\n        let nodeAfterStart = this.start.nodeAfter;\n        let nodeBeforeEnd = this.end.nodeBefore;\n        // Handle the situation when the range position is at the beginning / at the end of a text node.\n        // In such situation `.nodeAfter` and `.nodeBefore` are `null` but the range still might be spanning\n        // over one element.\n        //\n        // <p>Foo{<span class=\"widget\"></span>}bar</p> vs <p>Foo[<span class=\"widget\"></span>]bar</p>\n        //\n        // These are basically the same range, only the difference is if the range position is at\n        // at the end/at the beginning of a text node or just before/just after the text node.\n        //\n        if (this.start.parent.is('$text') && this.start.isAtEnd && this.start.parent.nextSibling) {\n            nodeAfterStart = this.start.parent.nextSibling;\n        }\n        if (this.end.parent.is('$text') && this.end.isAtStart && this.end.parent.previousSibling) {\n            nodeBeforeEnd = this.end.parent.previousSibling;\n        }\n        if (nodeAfterStart && nodeAfterStart.is('element') && nodeAfterStart === nodeBeforeEnd) {\n            return nodeAfterStart;\n        }\n        return null;\n    }\n    /**\n     * Clones this range.\n     */\n    clone() {\n        return new Range(this.start, this.end);\n    }\n    /**\n     * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n     * them.\n     *\n     * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n     * set to `true`. However it returns only {@link module:engine/view/item~Item items},\n     * not {@link module:engine/view/treewalker~TreeWalkerValue}.\n     *\n     * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n     * a full list of available options.\n     *\n     * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n     */\n    *getItems(options = {}) {\n        options.boundaries = this;\n        options.ignoreElementEnd = true;\n        const treeWalker = new TreeWalker(options);\n        for (const value of treeWalker) {\n            yield value.item;\n        }\n    }\n    /**\n     * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or\n     * contained in this range.\n     *\n     * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n     * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.\n     *\n     * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n     * a full list of available options.\n     *\n     * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n     */\n    *getPositions(options = {}) {\n        options.boundaries = this;\n        const treeWalker = new TreeWalker(options);\n        yield treeWalker.position;\n        for (const value of treeWalker) {\n            yield value.nextPosition;\n        }\n    }\n    /**\n     * Checks and returns whether this range intersects with the given range.\n     *\n     * @param otherRange Range to compare with.\n     * @returns True if ranges intersect.\n     */\n    isIntersecting(otherRange) {\n        return this.start.isBefore(otherRange.end) && this.end.isAfter(otherRange.start);\n    }\n    /**\n     * Creates a range from the given parents and offsets.\n     *\n     * @internal\n     * @param startElement Start position parent element.\n     * @param startOffset Start position offset.\n     * @param endElement End position parent element.\n     * @param endOffset End position offset.\n     * @returns Created range.\n     */\n    static _createFromParentsAndOffsets(startElement, startOffset, endElement, endOffset) {\n        return new this(new Position(startElement, startOffset), new Position(endElement, endOffset));\n    }\n    /**\n     * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by\n     * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n     *\n     * @internal\n     * @param position Beginning of the range.\n     * @param shift How long the range should be.\n     */\n    static _createFromPositionAndShift(position, shift) {\n        const start = position;\n        const end = position.getShiftedBy(shift);\n        return shift > 0 ? new this(start, end) : new this(end, start);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @internal\n     * @param element Element which is a parent for the range.\n     */\n    static _createIn(element) {\n        return this._createFromParentsAndOffsets(element, 0, element, element.childCount);\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n     *\n     * @internal\n     */\n    static _createOn(item) {\n        const size = item.is('$textProxy') ? item.offsetSize : 1;\n        return this._createFromPositionAndShift(Position._createBefore(item), size);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nRange.prototype.is = function (type) {\n    return type === 'range' || type === 'view:range';\n};\n/**\n * Function used by getEnlarged and getTrimmed methods.\n */\nfunction enlargeTrimSkip(value) {\n    if (value.item.is('attributeElement') || value.item.is('uiElement')) {\n        return true;\n    }\n    return false;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/selection\n */\nimport TypeCheckable from './typecheckable.js';\nimport Range from './range.js';\nimport Position from './position.js';\nimport Node from './node.js';\nimport DocumentSelection from './documentselection.js';\nimport { CKEditorError, EmitterMixin, count, isIterable } from '@ckeditor/ckeditor5-utils';\n/**\n * Class representing an arbirtary selection in the view.\n * See also {@link module:engine/view/documentselection~DocumentSelection}.\n *\n * New selection instances can be created via the constructor or one these methods:\n *\n * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n *\n * A selection can consist of {@link module:engine/view/range~Range ranges} that can be set by using\n * the {@link module:engine/view/selection~Selection#setTo `Selection#setTo()`} method.\n */\nexport default class Selection extends /* #__PURE__ */ EmitterMixin(TypeCheckable) {\n    /**\n     * Creates new selection instance.\n     *\n     * **Note**: The selection constructor is available as a factory method:\n     *\n     * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n     * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n     *\n     * ```ts\n     * // Creates empty selection without ranges.\n     * const selection = writer.createSelection();\n     *\n     * // Creates selection at the given range.\n     * const range = writer.createRange( start, end );\n     * const selection = writer.createSelection( range );\n     *\n     * // Creates selection at the given ranges\n     * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n     * const selection = writer.createSelection( ranges );\n     *\n     * // Creates selection from the other selection.\n     * const otherSelection = writer.createSelection();\n     * const selection = writer.createSelection( otherSelection );\n     *\n     * // Creates selection from the document selection.\n     * const selection = writer.createSelection( editor.editing.view.document.selection );\n     *\n     * // Creates selection at the given position.\n     * const position = writer.createPositionFromPath( root, path );\n     * const selection = writer.createSelection( position );\n     *\n     * // Creates collapsed selection at the position of given item and offset.\n     * const paragraph = writer.createContainerElement( 'paragraph' );\n     * const selection = writer.createSelection( paragraph, offset );\n     *\n     * // Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n     * // first child of that element and ends after the last child of that element.\n     * const selection = writer.createSelection( paragraph, 'in' );\n     *\n     * // Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n     * // just after the item.\n     * const selection = writer.createSelection( paragraph, 'on' );\n     * ```\n     *\n     * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n     *\n     * ```ts\n     * // Creates backward selection.\n     * const selection = writer.createSelection( range, { backward: true } );\n     * ```\n     *\n     * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n     * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n     * represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n     * (and be  properly handled by screen readers).\n     *\n     * ```ts\n     * // Creates fake selection with label.\n     * const selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n     * ```\n     *\n     * @internal\n     */\n    constructor(...args) {\n        super();\n        this._ranges = [];\n        this._lastRangeBackward = false;\n        this._isFake = false;\n        this._fakeSelectionLabel = '';\n        if (args.length) {\n            this.setTo(...args);\n        }\n    }\n    /**\n     * Returns true if selection instance is marked as `fake`.\n     *\n     * @see #setTo\n     */\n    get isFake() {\n        return this._isFake;\n    }\n    /**\n     * Returns fake selection label.\n     *\n     * @see #setTo\n     */\n    get fakeSelectionLabel() {\n        return this._fakeSelectionLabel;\n    }\n    /**\n     * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n     * {@link #focus focus} they define the direction of selection, which is important\n     * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n     * It may be a bit unintuitive when there are multiple ranges in selection.\n     *\n     * @see #focus\n     */\n    get anchor() {\n        if (!this._ranges.length) {\n            return null;\n        }\n        const range = this._ranges[this._ranges.length - 1];\n        const anchor = this._lastRangeBackward ? range.end : range.start;\n        return anchor.clone();\n    }\n    /**\n     * Selection focus. Focus is a position where the selection ends.\n     *\n     * @see #anchor\n     */\n    get focus() {\n        if (!this._ranges.length) {\n            return null;\n        }\n        const range = this._ranges[this._ranges.length - 1];\n        const focus = this._lastRangeBackward ? range.start : range.end;\n        return focus.clone();\n    }\n    /**\n     * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n     * collapsed.\n     */\n    get isCollapsed() {\n        return this.rangeCount === 1 && this._ranges[0].isCollapsed;\n    }\n    /**\n     * Returns number of ranges in selection.\n     */\n    get rangeCount() {\n        return this._ranges.length;\n    }\n    /**\n     * Specifies whether the {@link #focus} precedes {@link #anchor}.\n     */\n    get isBackward() {\n        return !this.isCollapsed && this._lastRangeBackward;\n    }\n    /**\n     * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n     * if the selection is not inside an editable element.\n     */\n    get editableElement() {\n        if (this.anchor) {\n            return this.anchor.editableElement;\n        }\n        return null;\n    }\n    /**\n     * Returns an iterable that contains copies of all ranges added to the selection.\n     */\n    *getRanges() {\n        for (const range of this._ranges) {\n            yield range.clone();\n        }\n    }\n    /**\n     * Returns copy of the first range in the selection. First range is the one which\n     * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n     * position of all other ranges (not to confuse with the first range added to the selection).\n     * Returns `null` if no ranges are added to selection.\n     */\n    getFirstRange() {\n        let first = null;\n        for (const range of this._ranges) {\n            if (!first || range.start.isBefore(first.start)) {\n                first = range;\n            }\n        }\n        return first ? first.clone() : null;\n    }\n    /**\n     * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n     * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n     * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n     */\n    getLastRange() {\n        let last = null;\n        for (const range of this._ranges) {\n            if (!last || range.end.isAfter(last.end)) {\n                last = range;\n            }\n        }\n        return last ? last.clone() : null;\n    }\n    /**\n     * Returns copy of the first position in the selection. First position is the position that\n     * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n     * Returns `null` if no ranges are added to selection.\n     */\n    getFirstPosition() {\n        const firstRange = this.getFirstRange();\n        return firstRange ? firstRange.start.clone() : null;\n    }\n    /**\n     * Returns copy of the last position in the selection. Last position is the position that\n     * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n     * Returns `null` if no ranges are added to selection.\n     */\n    getLastPosition() {\n        const lastRange = this.getLastRange();\n        return lastRange ? lastRange.end.clone() : null;\n    }\n    /**\n     * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n     * same number of ranges and all ranges from one selection equal to a range from other selection.\n     *\n     * @param otherSelection Selection to compare with.\n     * @returns `true` if selections are equal, `false` otherwise.\n     */\n    isEqual(otherSelection) {\n        if (this.isFake != otherSelection.isFake) {\n            return false;\n        }\n        if (this.isFake && this.fakeSelectionLabel != otherSelection.fakeSelectionLabel) {\n            return false;\n        }\n        if (this.rangeCount != otherSelection.rangeCount) {\n            return false;\n        }\n        else if (this.rangeCount === 0) {\n            return true;\n        }\n        if (!this.anchor.isEqual(otherSelection.anchor) || !this.focus.isEqual(otherSelection.focus)) {\n            return false;\n        }\n        for (const thisRange of this._ranges) {\n            let found = false;\n            for (const otherRange of otherSelection._ranges) {\n                if (thisRange.isEqual(otherRange)) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n     * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n     * equal to any trimmed range from other selection.\n     *\n     * @param otherSelection Selection to compare with.\n     * @returns `true` if selections are similar, `false` otherwise.\n     */\n    isSimilar(otherSelection) {\n        if (this.isBackward != otherSelection.isBackward) {\n            return false;\n        }\n        const numOfRangesA = count(this.getRanges());\n        const numOfRangesB = count(otherSelection.getRanges());\n        // If selections have different number of ranges, they cannot be similar.\n        if (numOfRangesA != numOfRangesB) {\n            return false;\n        }\n        // If both selections have no ranges, they are similar.\n        if (numOfRangesA == 0) {\n            return true;\n        }\n        // Check if each range in one selection has a similar range in other selection.\n        for (let rangeA of this.getRanges()) {\n            rangeA = rangeA.getTrimmed();\n            let found = false;\n            for (let rangeB of otherSelection.getRanges()) {\n                rangeB = rangeB.getTrimmed();\n                if (rangeA.start.isEqual(rangeB.start) && rangeA.end.isEqual(rangeB.end)) {\n                    found = true;\n                    break;\n                }\n            }\n            // For `rangeA`, neither range in `otherSelection` was similar. So selections are not similar.\n            if (!found) {\n                return false;\n            }\n        }\n        // There were no ranges that weren't matched. Selections are similar.\n        return true;\n    }\n    /**\n     * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n     * one range in the selection, and that range contains exactly one element.\n     * Returns `null` if there is no selected element.\n     */\n    getSelectedElement() {\n        if (this.rangeCount !== 1) {\n            return null;\n        }\n        return this.getFirstRange().getContainedElement();\n    }\n    /**\n     * Sets this selection's ranges and direction to the specified location based on the given\n     * {@link module:engine/view/selection~Selectable selectable}.\n     *\n     * ```ts\n     * // Sets selection to the given range.\n     * const range = writer.createRange( start, end );\n     * selection.setTo( range );\n     *\n     * // Sets selection to given ranges.\n     * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n     * selection.setTo( range );\n     *\n     * // Sets selection to the other selection.\n     * const otherSelection = writer.createSelection();\n     * selection.setTo( otherSelection );\n     *\n     * // Sets selection to contents of DocumentSelection.\n     * selection.setTo( editor.editing.view.document.selection );\n     *\n     * // Sets collapsed selection at the given position.\n     * const position = writer.createPositionAt( root, path );\n     * selection.setTo( position );\n     *\n     * // Sets collapsed selection at the position of given item and offset.\n     * selection.setTo( paragraph, offset );\n     * ```\n     *\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * ```ts\n     * selection.setTo( paragraph, 'in' );\n     * ```\n     *\n     * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n     *\n     * ```ts\n     * selection.setTo( paragraph, 'on' );\n     *\n     * // Clears selection. Removes all ranges.\n     * selection.setTo( null );\n     * ```\n     *\n     * `Selection#setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n     *\n     * ```ts\n     * // Sets selection as backward.\n     * selection.setTo( range, { backward: true } );\n     * ```\n     *\n     * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n     * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n     * represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n     * (and be  properly handled by screen readers).\n     *\n     * ```ts\n     * // Creates fake selection with label.\n     * selection.setTo( range, { fake: true, label: 'foo' } );\n     * ```\n     *\n     * @fires change\n     */\n    setTo(...args) {\n        let [selectable, placeOrOffset, options] = args;\n        if (typeof placeOrOffset == 'object') {\n            options = placeOrOffset;\n            placeOrOffset = undefined;\n        }\n        if (selectable === null) {\n            this._setRanges([]);\n            this._setFakeOptions(options);\n        }\n        else if (selectable instanceof Selection || selectable instanceof DocumentSelection) {\n            this._setRanges(selectable.getRanges(), selectable.isBackward);\n            this._setFakeOptions({ fake: selectable.isFake, label: selectable.fakeSelectionLabel });\n        }\n        else if (selectable instanceof Range) {\n            this._setRanges([selectable], options && options.backward);\n            this._setFakeOptions(options);\n        }\n        else if (selectable instanceof Position) {\n            this._setRanges([new Range(selectable)]);\n            this._setFakeOptions(options);\n        }\n        else if (selectable instanceof Node) {\n            const backward = !!options && !!options.backward;\n            let range;\n            if (placeOrOffset === undefined) {\n                /**\n                 * selection.setTo requires the second parameter when the first parameter is a node.\n                 *\n                 * @error view-selection-setto-required-second-parameter\n                 */\n                throw new CKEditorError('view-selection-setto-required-second-parameter', this);\n            }\n            else if (placeOrOffset == 'in') {\n                range = Range._createIn(selectable);\n            }\n            else if (placeOrOffset == 'on') {\n                range = Range._createOn(selectable);\n            }\n            else {\n                range = new Range(Position._createAt(selectable, placeOrOffset));\n            }\n            this._setRanges([range], backward);\n            this._setFakeOptions(options);\n        }\n        else if (isIterable(selectable)) {\n            // We assume that the selectable is an iterable of ranges.\n            // Array.from() is used to prevent setting ranges to the old iterable\n            this._setRanges(selectable, options && options.backward);\n            this._setFakeOptions(options);\n        }\n        else {\n            /**\n             * Cannot set selection to given place.\n             *\n             * @error view-selection-setto-not-selectable\n             */\n            throw new CKEditorError('view-selection-setto-not-selectable', this);\n        }\n        this.fire('change');\n    }\n    /**\n     * Moves {@link #focus} to the specified location.\n     *\n     * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n     * parameters.\n     *\n     * @fires change\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    setFocus(itemOrPosition, offset) {\n        if (this.anchor === null) {\n            /**\n             * Cannot set selection focus if there are no ranges in selection.\n             *\n             * @error view-selection-setfocus-no-ranges\n             */\n            throw new CKEditorError('view-selection-setfocus-no-ranges', this);\n        }\n        const newFocus = Position._createAt(itemOrPosition, offset);\n        if (newFocus.compareWith(this.focus) == 'same') {\n            return;\n        }\n        const anchor = this.anchor;\n        this._ranges.pop();\n        if (newFocus.compareWith(anchor) == 'before') {\n            this._addRange(new Range(newFocus, anchor), true);\n        }\n        else {\n            this._addRange(new Range(anchor, newFocus));\n        }\n        this.fire('change');\n    }\n    /**\n     * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n     * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.\n     * Accepts a flag describing in which way the selection is made.\n     *\n     * @param newRanges Iterable object of ranges to set.\n     * @param isLastBackward Flag describing if last added range was selected forward - from start to end\n     * (`false`) or backward - from end to start (`true`). Defaults to `false`.\n     */\n    _setRanges(newRanges, isLastBackward = false) {\n        // New ranges should be copied to prevent removing them by setting them to `[]` first.\n        // Only applies to situations when selection is set to the same selection or same selection's ranges.\n        newRanges = Array.from(newRanges);\n        this._ranges = [];\n        for (const range of newRanges) {\n            this._addRange(range);\n        }\n        this._lastRangeBackward = !!isLastBackward;\n    }\n    /**\n     * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection\n     * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to\n     * the user and selection over elements can be represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\n     * properly handled by screen readers).\n     */\n    _setFakeOptions(options = {}) {\n        this._isFake = !!options.fake;\n        this._fakeSelectionLabel = options.fake ? options.label || '' : '';\n    }\n    /**\n     * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the\n     * selection instance and you can safely operate on it.\n     *\n     * Accepts a flag describing in which way the selection is made - passed range might be selected from\n     * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}\n     * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.\n     * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n     * with ranges already stored in Selection instance.\n     */\n    _addRange(range, isBackward = false) {\n        if (!(range instanceof Range)) {\n            /**\n             * Selection range set to an object that is not an instance of {@link module:engine/view/range~Range}.\n             *\n             * @error view-selection-add-range-not-range\n             */\n            throw new CKEditorError('view-selection-add-range-not-range', this);\n        }\n        this._pushRange(range);\n        this._lastRangeBackward = !!isBackward;\n    }\n    /**\n     * Adds range to selection - creates copy of given range so it can be safely used and modified.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n     * with ranges already stored in selection instance.\n     */\n    _pushRange(range) {\n        for (const storedRange of this._ranges) {\n            if (range.isIntersecting(storedRange)) {\n                /**\n                 * Trying to add a range that intersects with another range from selection.\n                 *\n                 * @error view-selection-range-intersects\n                 * @param {module:engine/view/range~Range} addedRange Range that was added to the selection.\n                 * @param {module:engine/view/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\n                 */\n                throw new CKEditorError('view-selection-range-intersects', this, { addedRange: range, intersectingRange: storedRange });\n            }\n        }\n        this._ranges.push(new Range(range.start, range.end));\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nSelection.prototype.is = function (type) {\n    return type === 'selection' || type === 'view:selection';\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/documentselection\n */\nimport TypeCheckable from './typecheckable.js';\nimport Selection from './selection.js';\nimport { EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Class representing the document selection in the view.\n *\n * Its instance is available in {@link module:engine/view/document~Document#selection `Document#selection`}.\n *\n * It is similar to {@link module:engine/view/selection~Selection} but\n * it has a read-only API and can be modified only by the writer available in\n * the {@link module:engine/view/view~View#change `View#change()`} block\n * (so via {@link module:engine/view/downcastwriter~DowncastWriter#setSelection `DowncastWriter#setSelection()`}).\n */\nexport default class DocumentSelection extends /* #__PURE__ */ EmitterMixin(TypeCheckable) {\n    constructor(...args) {\n        super();\n        this._selection = new Selection();\n        // Delegate change event to be fired on DocumentSelection instance.\n        this._selection.delegate('change').to(this);\n        // Set selection data.\n        if (args.length) {\n            this._selection.setTo(...args);\n        }\n    }\n    /**\n     * Returns true if selection instance is marked as `fake`.\n     *\n     * @see #_setTo\n     */\n    get isFake() {\n        return this._selection.isFake;\n    }\n    /**\n     * Returns fake selection label.\n     *\n     * @see #_setTo\n     */\n    get fakeSelectionLabel() {\n        return this._selection.fakeSelectionLabel;\n    }\n    /**\n     * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n     * {@link #focus focus} they define the direction of selection, which is important\n     * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n     * It may be a bit unintuitive when there are multiple ranges in selection.\n     *\n     * @see #focus\n     */\n    get anchor() {\n        return this._selection.anchor;\n    }\n    /**\n     * Selection focus. Focus is a position where the selection ends.\n     *\n     * @see #anchor\n     */\n    get focus() {\n        return this._selection.focus;\n    }\n    /**\n     * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n     * collapsed.\n     */\n    get isCollapsed() {\n        return this._selection.isCollapsed;\n    }\n    /**\n     * Returns number of ranges in selection.\n     */\n    get rangeCount() {\n        return this._selection.rangeCount;\n    }\n    /**\n     * Specifies whether the {@link #focus} precedes {@link #anchor}.\n     */\n    get isBackward() {\n        return this._selection.isBackward;\n    }\n    /**\n     * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n     * if the selection is not inside an editable element.\n     */\n    get editableElement() {\n        return this._selection.editableElement;\n    }\n    /**\n     * Used for the compatibility with the {@link module:engine/view/selection~Selection#isEqual} method.\n     *\n     * @internal\n     */\n    get _ranges() {\n        return this._selection._ranges;\n    }\n    /**\n     * Returns an iterable that contains copies of all ranges added to the selection.\n     */\n    *getRanges() {\n        yield* this._selection.getRanges();\n    }\n    /**\n     * Returns copy of the first range in the selection. First range is the one which\n     * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n     * position of all other ranges (not to confuse with the first range added to the selection).\n     * Returns `null` if no ranges are added to selection.\n     */\n    getFirstRange() {\n        return this._selection.getFirstRange();\n    }\n    /**\n     * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n     * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n     * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n     */\n    getLastRange() {\n        return this._selection.getLastRange();\n    }\n    /**\n     * Returns copy of the first position in the selection. First position is the position that\n     * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n     * Returns `null` if no ranges are added to selection.\n     */\n    getFirstPosition() {\n        return this._selection.getFirstPosition();\n    }\n    /**\n     * Returns copy of the last position in the selection. Last position is the position that\n     * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n     * Returns `null` if no ranges are added to selection.\n     */\n    getLastPosition() {\n        return this._selection.getLastPosition();\n    }\n    /**\n     * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n     * one range in the selection, and that range contains exactly one element.\n     * Returns `null` if there is no selected element.\n     */\n    getSelectedElement() {\n        return this._selection.getSelectedElement();\n    }\n    /**\n     * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n     * same number of ranges and all ranges from one selection equal to a range from other selection.\n     *\n     * @param otherSelection Selection to compare with.\n     * @returns `true` if selections are equal, `false` otherwise.\n     */\n    isEqual(otherSelection) {\n        return this._selection.isEqual(otherSelection);\n    }\n    /**\n     * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n     * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n     * equal to any trimmed range from other selection.\n     *\n     * @param otherSelection Selection to compare with.\n     * @returns `true` if selections are similar, `false` otherwise.\n     */\n    isSimilar(otherSelection) {\n        return this._selection.isSimilar(otherSelection);\n    }\n    /**\n     * Sets this selection's ranges and direction to the specified location based on the given\n     * {@link module:engine/view/selection~Selectable selectable}.\n     *\n     * ```ts\n     * // Sets selection to the given range.\n     * const range = writer.createRange( start, end );\n     * documentSelection._setTo( range );\n     *\n     * // Sets selection to given ranges.\n     * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n     * documentSelection._setTo( range );\n     *\n     * // Sets selection to the other selection.\n     * const otherSelection = writer.createSelection();\n     * documentSelection._setTo( otherSelection );\n     *\n     * // Sets collapsed selection at the given position.\n     * const position = writer.createPositionAt( root, offset );\n     * documentSelection._setTo( position );\n     *\n     * // Sets collapsed selection at the position of given item and offset.\n     * documentSelection._setTo( paragraph, offset );\n     * ```\n     *\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * ```ts\n     * documentSelection._setTo( paragraph, 'in' );\n     * ```\n     *\n     * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n     *\n     * ```ts\n     * documentSelection._setTo( paragraph, 'on' );\n     *\n     * // Clears selection. Removes all ranges.\n     * documentSelection._setTo( null );\n     * ```\n     *\n     * `Selection#_setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n     *\n     * ```ts\n     * // Sets selection as backward.\n     * documentSelection._setTo( range, { backward: true } );\n     * ```\n     *\n     * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n     * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n     * represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to des cribe fake selection in DOM\n     * (and be  properly handled by screen readers).\n     *\n     * ```ts\n     * // Creates fake selection with label.\n     * documentSelection._setTo( range, { fake: true, label: 'foo' } );\n     * ```\n     *\n     * @internal\n     * @fires change\n     */\n    _setTo(...args) {\n        this._selection.setTo(...args);\n    }\n    /**\n     * Moves {@link #focus} to the specified location.\n     *\n     * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n     * parameters.\n     *\n     * @internal\n     * @fires change\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    _setFocus(itemOrPosition, offset) {\n        this._selection.setFocus(itemOrPosition, offset);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nDocumentSelection.prototype.is = function (type) {\n    return type === 'selection' ||\n        type == 'documentSelection' ||\n        type == 'view:selection' ||\n        type == 'view:documentSelection';\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/bubblingeventinfo\n */\nimport { EventInfo } from '@ckeditor/ckeditor5-utils';\n/**\n * The event object passed to bubbling event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\nexport default class BubblingEventInfo extends EventInfo {\n    /**\n     * @param source The emitter.\n     * @param name The event name.\n     * @param startRange The view range that the bubbling should start from.\n     */\n    constructor(source, name, startRange) {\n        super(source, name);\n        this.startRange = startRange;\n        this._eventPhase = 'none';\n        this._currentTarget = null;\n    }\n    /**\n     * The current event phase.\n     */\n    get eventPhase() {\n        return this._eventPhase;\n    }\n    /**\n     * The current bubbling target.\n     */\n    get currentTarget() {\n        return this._currentTarget;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/bubblingemittermixin\n */\nimport { CKEditorError, EmitterMixin, EventInfo, toArray } from '@ckeditor/ckeditor5-utils';\nimport BubblingEventInfo from './bubblingeventinfo.js';\nconst contextsSymbol = Symbol('bubbling contexts');\n/**\n * Bubbling emitter mixin for the view document as described in the {@link ~BubblingEmitter} interface.\n *\n * This function creates a class that inherits from the provided `base` and implements `Emitter` interface.\n * The base class must implement {@link module:utils/emittermixin~Emitter} interface.\n *\n * ```ts\n * class BaseClass extends EmitterMixin() {\n * \t// ...\n * }\n *\n * class MyClass extends BubblingEmitterMixin( BaseClass ) {\n * \t// This class derives from `BaseClass` and implements the `BubblingEmitter` interface.\n * }\n * ```\n */\nexport default function BubblingEmitterMixin(base) {\n    class Mixin extends base {\n        fire(eventOrInfo, ...eventArgs) {\n            try {\n                const eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo(this, eventOrInfo);\n                const eventContexts = getBubblingContexts(this);\n                if (!eventContexts.size) {\n                    return;\n                }\n                updateEventInfo(eventInfo, 'capturing', this);\n                // The capture phase of the event.\n                if (fireListenerFor(eventContexts, '$capture', eventInfo, ...eventArgs)) {\n                    return eventInfo.return;\n                }\n                const startRange = eventInfo.startRange || this.selection.getFirstRange();\n                const selectedElement = startRange ? startRange.getContainedElement() : null;\n                const isCustomContext = selectedElement ? Boolean(getCustomContext(eventContexts, selectedElement)) : false;\n                let node = selectedElement || getDeeperRangeParent(startRange);\n                updateEventInfo(eventInfo, 'atTarget', node);\n                // For the not yet bubbling event trigger for $text node if selection can be there and it's not a custom context selected.\n                if (!isCustomContext) {\n                    if (fireListenerFor(eventContexts, '$text', eventInfo, ...eventArgs)) {\n                        return eventInfo.return;\n                    }\n                    updateEventInfo(eventInfo, 'bubbling', node);\n                }\n                while (node) {\n                    // Root node handling.\n                    if (node.is('rootElement')) {\n                        if (fireListenerFor(eventContexts, '$root', eventInfo, ...eventArgs)) {\n                            return eventInfo.return;\n                        }\n                    }\n                    // Element node handling.\n                    else if (node.is('element')) {\n                        if (fireListenerFor(eventContexts, node.name, eventInfo, ...eventArgs)) {\n                            return eventInfo.return;\n                        }\n                    }\n                    // Check custom contexts (i.e., a widget).\n                    if (fireListenerFor(eventContexts, node, eventInfo, ...eventArgs)) {\n                        return eventInfo.return;\n                    }\n                    node = node.parent;\n                    updateEventInfo(eventInfo, 'bubbling', node);\n                }\n                updateEventInfo(eventInfo, 'bubbling', this);\n                // Document context.\n                fireListenerFor(eventContexts, '$document', eventInfo, ...eventArgs);\n                return eventInfo.return;\n            }\n            catch (err) {\n                // @if CK_DEBUG // throw err;\n                /* istanbul ignore next -- @preserve */\n                CKEditorError.rethrowUnexpectedError(err, this);\n            }\n        }\n        _addEventListener(event, callback, options) {\n            const contexts = toArray(options.context || '$document');\n            const eventContexts = getBubblingContexts(this);\n            for (const context of contexts) {\n                let emitter = eventContexts.get(context);\n                if (!emitter) {\n                    emitter = new (EmitterMixin())();\n                    eventContexts.set(context, emitter);\n                }\n                this.listenTo(emitter, event, callback, options);\n            }\n        }\n        _removeEventListener(event, callback) {\n            const eventContexts = getBubblingContexts(this);\n            for (const emitter of eventContexts.values()) {\n                this.stopListening(emitter, event, callback);\n            }\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`.\n{\n    const mixin = BubblingEmitterMixin(Object);\n    ['fire', '_addEventListener', '_removeEventListener'].forEach(key => {\n        BubblingEmitterMixin[key] = mixin.prototype[key];\n    });\n}\n/**\n * Update the event info bubbling fields.\n *\n * @param eventInfo The event info object to update.\n * @param eventPhase The current event phase.\n * @param currentTarget The current bubbling target.\n */\nfunction updateEventInfo(eventInfo, eventPhase, currentTarget) {\n    if (eventInfo instanceof BubblingEventInfo) {\n        eventInfo._eventPhase = eventPhase;\n        eventInfo._currentTarget = currentTarget;\n    }\n}\n/**\n * Fires the listener for the specified context. Returns `true` if event was stopped.\n *\n * @param eventInfo The `EventInfo` object.\n * @param eventArgs Additional arguments to be passed to the callbacks.\n * @returns True if event stop was called.\n */\nfunction fireListenerFor(eventContexts, context, eventInfo, ...eventArgs) {\n    const emitter = typeof context == 'string' ? eventContexts.get(context) : getCustomContext(eventContexts, context);\n    if (!emitter) {\n        return false;\n    }\n    emitter.fire(eventInfo, ...eventArgs);\n    return eventInfo.stop.called;\n}\n/**\n * Returns an emitter for a specified view node.\n */\nfunction getCustomContext(eventContexts, node) {\n    for (const [context, emitter] of eventContexts) {\n        if (typeof context == 'function' && context(node)) {\n            return emitter;\n        }\n    }\n    return null;\n}\n/**\n * Returns bubbling contexts map for the source (emitter).\n */\nfunction getBubblingContexts(source) {\n    if (!source[contextsSymbol]) {\n        source[contextsSymbol] = new Map();\n    }\n    return source[contextsSymbol];\n}\n/**\n * Returns the deeper parent element for the range.\n */\nfunction getDeeperRangeParent(range) {\n    if (!range) {\n        return null;\n    }\n    const startParent = range.start.parent;\n    const endParent = range.end.parent;\n    const startPath = startParent.getPath();\n    const endPath = endParent.getPath();\n    return startPath.length > endPath.length ? startParent : endParent;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/document\n */\nimport DocumentSelection from './documentselection.js';\nimport BubblingEmitterMixin from './observer/bubblingemittermixin.js';\nimport { Collection, ObservableMixin } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const { logDocument } = require( '../dev-utils/utils' );\n/**\n * Document class creates an abstract layer over the content editable area, contains a tree of view elements and\n * {@link module:engine/view/documentselection~DocumentSelection view selection} associated with this document.\n */\nexport default class Document extends /* #__PURE__ */ BubblingEmitterMixin(/* #__PURE__ */ ObservableMixin()) {\n    /**\n     * Creates a Document instance.\n     *\n     * @param stylesProcessor The styles processor instance.\n     */\n    constructor(stylesProcessor) {\n        super();\n        /**\n         * Post-fixer callbacks registered to the view document.\n         */\n        this._postFixers = new Set();\n        this.selection = new DocumentSelection();\n        this.roots = new Collection({ idProperty: 'rootName' });\n        this.stylesProcessor = stylesProcessor;\n        this.set('isReadOnly', false);\n        this.set('isFocused', false);\n        this.set('isSelecting', false);\n        this.set('isComposing', false);\n    }\n    /**\n     * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not\n     * specific \"main\" root is returned.\n     *\n     * @param name Name of the root.\n     * @returns The view root element with the specified name or null when there is no root of given name.\n     */\n    getRoot(name = 'main') {\n        return this.roots.get(name);\n    }\n    /**\n     * Allows registering post-fixer callbacks. A post-fixers mechanism allows to update the view tree just before it is rendered\n     * to the DOM.\n     *\n     * Post-fixers are executed right after all changes from the outermost change block were applied but\n     * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made\n     * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n     * not be fixed in the new document tree state.\n     *\n     * View post-fixers are useful when you want to apply some fixes whenever the view structure changes. Keep in mind that\n     * changes executed in a view post-fixer should not break model-view mapping.\n     *\n     * The types of changes which should be safe:\n     *\n     * * adding or removing attribute from elements,\n     * * changes inside of {@link module:engine/view/uielement~UIElement UI elements},\n     * * {@link module:engine/controller/editingcontroller~EditingController#reconvertItem marking some of the model elements to be\n     * re-converted}.\n     *\n     * Try to avoid changes which touch view structure:\n     *\n     * * you should not add or remove nor wrap or unwrap any view elements,\n     * * you should not change the editor data model in a view post-fixer.\n     *\n     * As a parameter, a post-fixer callback receives a {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n     *\n     * Typically, a post-fixer will look like this:\n     *\n     * ```ts\n     * editor.editing.view.document.registerPostFixer( writer => {\n     * \tif ( checkSomeCondition() ) {\n     * \t\twriter.doSomething();\n     *\n     * \t\t// Let other post-fixers know that something changed.\n     * \t\treturn true;\n     * \t}\n     *\n     * \treturn false;\n     * } );\n     * ```\n     *\n     * Note that nothing happens right after you register a post-fixer (e.g. execute such a code in the console).\n     * That is because adding a post-fixer does not execute it.\n     * The post-fixer will be executed as soon as any change in the document needs to cause its rendering.\n     * If you want to re-render the editor's view after registering the post-fixer then you should do it manually by calling\n     * {@link module:engine/view/view~View#forceRender `view.forceRender()`}.\n     *\n     * If you need to register a callback which is executed when DOM elements are already updated,\n     * use {@link module:engine/view/view~View#event:render render event}.\n     */\n    registerPostFixer(postFixer) {\n        this._postFixers.add(postFixer);\n    }\n    /**\n     * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n     */\n    destroy() {\n        this.roots.forEach(root => root.destroy());\n        this.stopListening();\n    }\n    /**\n     * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n     *\n     * @internal\n     */\n    _callPostFixers(writer) {\n        let wasFixed = false;\n        do {\n            for (const callback of this._postFixers) {\n                wasFixed = callback(writer);\n                if (wasFixed) {\n                    break;\n                }\n            }\n        } while (wasFixed);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/attributeelement\n */\nimport Element from './element.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n/**\n * Attribute elements are used to represent formatting elements in the view (think – `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n */\nclass AttributeElement extends Element {\n    /**\n     * Creates an attribute element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n     * @see module:engine/view/element~Element\n     * @protected\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attrs, children) {\n        super(document, name, attrs, children);\n        /**\n         * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n         *\n         * @internal\n         * @readonly\n         */\n        this._priority = DEFAULT_PRIORITY;\n        /**\n         * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n         * and then two elements are considered similar if, and only if they have the same `_id`.\n         *\n         * @internal\n         * @readonly\n         */\n        this._id = null;\n        /**\n         * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n         * and still exist in the view tree.\n         *\n         * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n         */\n        this._clonesGroup = null;\n        this.getFillerOffset = getFillerOffset;\n    }\n    /**\n     * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     */\n    get priority() {\n        return this._priority;\n    }\n    /**\n     * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n     * and then two elements are considered similar if, and only if they have the same `id`.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n     * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n     *\n     * Note: If this element has been removed from the tree, returned set will not include it.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n     * if this element has no `id`.\n     *\n     * @returns Set containing all the attribute elements\n     * with the same `id` that were added and not removed from the view tree.\n     */\n    getElementsWithSameId() {\n        if (this.id === null) {\n            /**\n             * Cannot get elements with the same id for an attribute element without id.\n             *\n             * @error attribute-element-get-elements-with-same-id-no-id\n             */\n            throw new CKEditorError('attribute-element-get-elements-with-same-id-no-id', this);\n        }\n        return new Set(this._clonesGroup);\n    }\n    /**\n     * Checks if this element is similar to other element.\n     *\n     * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n     * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n     * different set of children nodes.\n     *\n     * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n     * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n     * considered similar.\n     *\n     * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n     *\n     * * two following similar elements can be merged together into one, longer element,\n     * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n     * decide whether processed element should be unwrapped,\n     * * etc.\n     */\n    isSimilar(otherElement) {\n        // If any element has an `id` set, just compare the ids.\n        if (this.id !== null || otherElement.id !== null) {\n            return this.id === otherElement.id;\n        }\n        return super.isSimilar(otherElement) && this.priority == otherElement.priority;\n    }\n    /**\n     * Clones provided element with priority.\n     *\n     * @internal\n     * @param deep If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any children.\n     * @returns Clone of this element.\n     */\n    _clone(deep = false) {\n        const cloned = super._clone(deep);\n        // Clone priority too.\n        cloned._priority = this._priority;\n        // And id too.\n        cloned._id = this._id;\n        return cloned;\n    }\n}\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\nexport default AttributeElement;\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nAttributeElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'attributeElement' || type === 'view:attributeElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'attributeElement' || type === 'view:attributeElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n *\n * @returns Block filler offset or `null` if block filler is not needed.\n */\nfunction getFillerOffset() {\n    // <b>foo</b> does not need filler.\n    if (nonUiChildrenCount(this)) {\n        return null;\n    }\n    let element = this.parent;\n    // <p><b></b></p> needs filler -> <p><b><br></b></p>\n    while (element && element.is('attributeElement')) {\n        if (nonUiChildrenCount(element) > 1) {\n            return null;\n        }\n        element = element.parent;\n    }\n    if (!element || nonUiChildrenCount(element) > 1) {\n        return null;\n    }\n    // Render block filler at the end of element (after all ui elements).\n    return this.childCount;\n}\n/**\n * Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n */\nfunction nonUiChildrenCount(element) {\n    return Array.from(element.getChildren()).filter(element => !element.is('uiElement')).length;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/emptyelement\n */\nimport Element from './element.js';\nimport Node from './node.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n */\nexport default class EmptyElement extends Element {\n    /**\n     * Creates new instance of EmptyElement.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n     * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attributes, children) {\n        super(document, name, attributes, children);\n        this.getFillerOffset = getFillerOffset;\n    }\n    /**\n     * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n     * adding any child nodes to EmptyElement.\n     *\n     * @internal\n     */\n    _insertChild(index, items) {\n        if (items && (items instanceof Node || Array.from(items).length > 0)) {\n            /**\n             * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n             *\n             * @error view-emptyelement-cannot-add\n             */\n            throw new CKEditorError('view-emptyelement-cannot-add', [this, items]);\n        }\n        return 0;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nEmptyElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'emptyElement' || type === 'view:emptyElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'emptyElement' || type === 'view:emptyElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Returns `null` because block filler is not needed for EmptyElements.\n */\nfunction getFillerOffset() {\n    return null;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/uielement\n */\nimport Element from './element.js';\nimport Node from './node.js';\nimport { CKEditorError, keyCodes } from '@ckeditor/ckeditor5-utils';\n/**\n * UI element class. It should be used to represent editing UI which needs to be injected into the editing view\n * If possible, you should keep your UI outside the editing view. However, if that is not possible,\n * UI elements can be used.\n *\n * How a UI element is rendered is in your control (you pass a callback to\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}).\n * The editor will ignore your UI element – the selection cannot be placed in it, it is skipped (invisible) when\n * the user modifies the selection by using arrow keys and the editor does not listen to any mutations which\n * happen inside your UI elements.\n *\n * The limitation is that you cannot convert a model element to a UI element. UI elements need to be\n * created for {@link module:engine/model/markercollection~Marker markers} or as additinal elements\n * inside normal {@link module:engine/view/containerelement~ContainerElement container elements}.\n *\n * To create a new UI element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`} method.\n */\nexport default class UIElement extends Element {\n    /**\n     * Creates new instance of UIElement.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` when third parameter is passed,\n     * to inform that usage of UIElement is incorrect (adding child nodes to UIElement is forbidden).\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createUIElement\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attrs, children) {\n        super(document, name, attrs, children);\n        this.getFillerOffset = getFillerOffset;\n    }\n    /**\n     * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` to prevent adding any child nodes\n     * to UIElement.\n     *\n     * @internal\n     */\n    _insertChild(index, items) {\n        if (items && (items instanceof Node || Array.from(items).length > 0)) {\n            /**\n             * Cannot add children to {@link module:engine/view/uielement~UIElement}.\n             *\n             * @error view-uielement-cannot-add\n             */\n            throw new CKEditorError('view-uielement-cannot-add', [this, items]);\n        }\n        return 0;\n    }\n    /**\n     * Renders this {@link module:engine/view/uielement~UIElement} to DOM. This method is called by\n     * {@link module:engine/view/domconverter~DomConverter}.\n     * Do not use inheritance to create custom rendering method, replace `render()` method instead:\n     *\n     * ```ts\n     * const myUIElement = downcastWriter.createUIElement( 'span' );\n     * myUIElement.render = function( domDocument, domConverter ) {\n     * \tconst domElement = this.toDomElement( domDocument );\n     *\n     * \tdomConverter.setContentOf( domElement, '<b>this is ui element</b>' );\n     *\n     * \treturn domElement;\n     * };\n     * ```\n     *\n     * If changes in your UI element should trigger some editor UI update you should call\n     * the {@link module:ui/editorui/editorui~EditorUI#update `editor.ui.update()`} method\n     * after rendering your UI element.\n     *\n     * @param domConverter Instance of the DomConverter used to optimize the output.\n     */\n    render(domDocument, domConverter // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        // Provide basic, default output.\n        return this.toDomElement(domDocument);\n    }\n    /**\n     * Creates DOM element based on this view UIElement.\n     * Note that each time this method is called new DOM element is created.\n     */\n    toDomElement(domDocument) {\n        const domElement = domDocument.createElement(this.name);\n        for (const key of this.getAttributeKeys()) {\n            domElement.setAttribute(key, this.getAttribute(key));\n        }\n        return domElement;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nUIElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'uiElement' || type === 'view:uiElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'uiElement' || type === 'view:uiElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * This function injects UI element handling to the given {@link module:engine/view/document~Document document}.\n *\n * A callback is added to {@link module:engine/view/document~Document#event:keydown document keydown event}.\n * The callback handles the situation when right arrow key is pressed and selection is collapsed before a UI element.\n * Without this handler, it would be impossible to \"jump over\" UI element using right arrow key.\n *\n * @param view View controller to which the quirks handling will be injected.\n */\nexport function injectUiElementHandling(view) {\n    view.document.on('arrowKey', (evt, data) => jumpOverUiElement(evt, data, view.domConverter), { priority: 'low' });\n}\n/**\n * Returns `null` because block filler is not needed for UIElements.\n */\nfunction getFillerOffset() {\n    return null;\n}\n/**\n * Selection cannot be placed in a `UIElement`. Whenever it is placed there, it is moved before it. This\n * causes a situation when it is impossible to jump over `UIElement` using right arrow key, because the selection\n * ends up in ui element (in DOM) and is moved back to the left. This handler fixes this situation.\n */\nfunction jumpOverUiElement(evt, data, domConverter) {\n    if (data.keyCode == keyCodes.arrowright) {\n        const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n        const domSelectionCollapsed = domSelection.rangeCount == 1 && domSelection.getRangeAt(0).collapsed;\n        // Jump over UI element if selection is collapsed or shift key is pressed. These are the cases when selection would extend.\n        if (domSelectionCollapsed || data.shiftKey) {\n            const domParent = domSelection.focusNode;\n            const domOffset = domSelection.focusOffset;\n            const viewPosition = domConverter.domPositionToView(domParent, domOffset);\n            // In case if dom element is not converted to view or is not mapped or something. Happens for example in some tests.\n            if (viewPosition === null) {\n                return;\n            }\n            // Skip all following ui elements.\n            let jumpedOverAnyUiElement = false;\n            const nextViewPosition = viewPosition.getLastMatchingPosition(value => {\n                if (value.item.is('uiElement')) {\n                    // Remember that there was at least one ui element.\n                    jumpedOverAnyUiElement = true;\n                }\n                // Jump over ui elements, jump over empty attribute elements, move up from inside of attribute element.\n                if (value.item.is('uiElement') || value.item.is('attributeElement')) {\n                    return true;\n                }\n                // Don't jump over text or don't get out of container element.\n                return false;\n            });\n            // If anything has been skipped, fix position.\n            // This `if` could be possibly omitted but maybe it is better not to mess with DOM selection if not needed.\n            if (jumpedOverAnyUiElement) {\n                const newDomPosition = domConverter.viewPositionToDom(nextViewPosition);\n                if (domSelectionCollapsed) {\n                    // Selection was collapsed, so collapse it at further position.\n                    domSelection.collapse(newDomPosition.parent, newDomPosition.offset);\n                }\n                else {\n                    // Selection was not collapse, so extend it instead of collapsing.\n                    domSelection.extend(newDomPosition.parent, newDomPosition.offset);\n                }\n            }\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * @module engine/view/rawelement\n */\nimport Element from './element.js';\nimport Node from './node.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * The raw element class.\n *\n * The raw elements work as data containers (\"wrappers\", \"sandboxes\") but their children are not managed or\n * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures\n * in the editor content without, for instance, worrying about compatibility with other editor features.\n * Raw elements are a perfect tool for integration with external frameworks and data sources.\n *\n * Unlike {@link module:engine/view/uielement~UIElement UI elements}, raw elements act like real editor\n * content (similar to {@link module:engine/view/containerelement~ContainerElement} or\n * {@link module:engine/view/emptyelement~EmptyElement}), they are considered by the editor selection and\n * {@link module:widget/utils~toWidget they can work as widgets}.\n *\n * To create a new raw element, use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createRawElement `downcastWriter#createRawElement()`} method.\n */\nexport default class RawElement extends Element {\n    /**\n     * Creates a new instance of a raw element.\n     *\n     * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} when the `children`\n     * parameter is passed to inform that the usage of `RawElement` is incorrect (adding child nodes to `RawElement` is forbidden).\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createRawElement\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attrs, children) {\n        super(document, name, attrs, children);\n        // Returns `null` because filler is not needed for raw elements.\n        this.getFillerOffset = getFillerOffset;\n    }\n    /**\n     * Overrides the {@link module:engine/view/element~Element#_insertChild} method.\n     * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} to prevent\n     * adding any child nodes to a raw element.\n     *\n     * @internal\n     */\n    _insertChild(index, items) {\n        if (items && (items instanceof Node || Array.from(items).length > 0)) {\n            /**\n             * Cannot add children to a {@link module:engine/view/rawelement~RawElement} instance.\n             *\n             * @error view-rawelement-cannot-add\n             */\n            throw new CKEditorError('view-rawelement-cannot-add', [this, items]);\n        }\n        return 0;\n    }\n    /**\n     * This allows rendering the children of a {@link module:engine/view/rawelement~RawElement} on the DOM level.\n     * This method is called by the {@link module:engine/view/domconverter~DomConverter} with the raw DOM element\n     * passed as an argument, leaving the number and shape of the children up to the integrator.\n     *\n     * This method **must be defined** for the raw element to work:\n     *\n     * ```ts\n     * const myRawElement = downcastWriter.createRawElement( 'div' );\n     *\n     * myRawElement.render = function( domElement, domConverter ) {\n     * \tdomConverter.setContentOf( domElement, '<b>This is the raw content of myRawElement.</b>' );\n     * };\n     * ```\n     *\n     * @param domElement The native DOM element representing the raw view element.\n     * @param domConverter Instance of the DomConverter used to optimize the output.\n     */\n    render(domElement, domConverter) { }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nRawElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'rawElement' || type === 'view:rawElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === this.name || type === 'view:' + this.name ||\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'rawElement' || type === 'view:rawElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Returns `null` because block filler is not needed for raw elements.\n */\nfunction getFillerOffset() {\n    return null;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/documentfragment\n */\nimport TypeCheckable from './typecheckable.js';\nimport Text from './text.js';\nimport TextProxy from './textproxy.js';\nimport { EmitterMixin, isIterable } from '@ckeditor/ckeditor5-utils';\n/**\n * Document fragment.\n *\n * To create a new document fragment instance use the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createDocumentFragment `UpcastWriter#createDocumentFragment()`}\n * method.\n */\nexport default class DocumentFragment extends /* #__PURE__ */ EmitterMixin(TypeCheckable) {\n    /**\n     * Creates new DocumentFragment instance.\n     *\n     * @internal\n     * @param document The document to which this document fragment belongs.\n     * @param children A list of nodes to be inserted into the created document fragment.\n     */\n    constructor(document, children) {\n        super();\n        /**\n         * Array of child nodes.\n         */\n        this._children = [];\n        /**\n         * Map of custom properties.\n         * Custom properties can be added to document fragment instance.\n         */\n        this._customProperties = new Map();\n        this.document = document;\n        if (children) {\n            this._insertChild(0, children);\n        }\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over nodes added to this document fragment.\n     */\n    [Symbol.iterator]() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Number of child nodes in this document fragment.\n     */\n    get childCount() {\n        return this._children.length;\n    }\n    /**\n     * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n     */\n    get isEmpty() {\n        return this.childCount === 0;\n    }\n    /**\n     * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n     */\n    get root() {\n        return this;\n    }\n    /**\n     * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n     */\n    get parent() {\n        return null;\n    }\n    /**\n     * Artificial element name. Returns `undefined`. Added for compatibility reasons.\n     */\n    get name() {\n        return undefined;\n    }\n    /**\n     * Artificial element getFillerOffset. Returns `undefined`. Added for compatibility reasons.\n     */\n    get getFillerOffset() {\n        return undefined;\n    }\n    /**\n     * Returns the custom property value for the given key.\n     */\n    getCustomProperty(key) {\n        return this._customProperties.get(key);\n    }\n    /**\n     * Returns an iterator which iterates over this document fragment's custom properties.\n     * Iterator provides `[ key, value ]` pairs for each stored property.\n     */\n    *getCustomProperties() {\n        yield* this._customProperties.entries();\n    }\n    /**\n     * {@link module:engine/view/documentfragment~DocumentFragment#_insertChild Insert} a child node or a list of child nodes at the end\n     * and sets the parent of these nodes to this fragment.\n     *\n     * @internal\n     * @param items Items to be inserted.\n     * @returns Number of appended nodes.\n     */\n    _appendChild(items) {\n        return this._insertChild(this.childCount, items);\n    }\n    /**\n     * Gets child at the given index.\n     *\n     * @param index Index of child.\n     * @returns Child node.\n     */\n    getChild(index) {\n        return this._children[index];\n    }\n    /**\n     * Gets index of the given child node. Returns `-1` if child node is not found.\n     *\n     * @param node Child node.\n     * @returns Index of the child node.\n     */\n    getChildIndex(node) {\n        return this._children.indexOf(node);\n    }\n    /**\n     * Gets child nodes iterator.\n     *\n     * @returns Child nodes iterator.\n     */\n    getChildren() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n     * this fragment.\n     *\n     * @internal\n     * @param index Position where nodes should be inserted.\n     * @param items Items to be inserted.\n     * @returns Number of inserted nodes.\n     */\n    _insertChild(index, items) {\n        this._fireChange('children', this);\n        let count = 0;\n        const nodes = normalize(this.document, items);\n        for (const node of nodes) {\n            // If node that is being added to this element is already inside another element, first remove it from the old parent.\n            if (node.parent !== null) {\n                node._remove();\n            }\n            node.parent = this;\n            this._children.splice(index, 0, node);\n            index++;\n            count++;\n        }\n        return count;\n    }\n    /**\n     * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n     *\n     * @internal\n     * @param index Number of the first node to remove.\n     * @param howMany Number of nodes to remove.\n     * @returns The array of removed nodes.\n     */\n    _removeChildren(index, howMany = 1) {\n        this._fireChange('children', this);\n        for (let i = index; i < index + howMany; i++) {\n            this._children[i].parent = null;\n        }\n        return this._children.splice(index, howMany);\n    }\n    /**\n     * Fires `change` event with given type of the change.\n     *\n     * @internal\n     * @param type Type of the change.\n     * @param node Changed node.\n     */\n    _fireChange(type, node) {\n        this.fire('change:' + type, node);\n    }\n    /**\n     * Sets a custom property. They can be used to add special data to elements.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n     * @internal\n     */\n    _setCustomProperty(key, value) {\n        this._customProperties.set(key, value);\n    }\n    /**\n     * Removes the custom property stored under the given key.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n     * @internal\n     * @returns Returns true if property was removed.\n     */\n    _removeCustomProperty(key) {\n        return this._customProperties.delete(key);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nDocumentFragment.prototype.is = function (type) {\n    return type === 'documentFragment' || type === 'view:documentFragment';\n};\n/**\n * Converts strings to Text and non-iterables to arrays.\n */\nfunction normalize(document, nodes) {\n    // Separate condition because string is iterable.\n    if (typeof nodes == 'string') {\n        return [new Text(document, nodes)];\n    }\n    if (!isIterable(nodes)) {\n        nodes = [nodes];\n    }\n    // Array.from to enable .map() on non-arrays.\n    return Array.from(nodes)\n        .map(node => {\n        if (typeof node == 'string') {\n            return new Text(document, node);\n        }\n        if (node instanceof TextProxy) {\n            return new Text(document, node.data);\n        }\n        return node;\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/downcastwriter\n */\nimport Position from './position.js';\nimport Range from './range.js';\nimport Selection from './selection.js';\nimport ContainerElement from './containerelement.js';\nimport AttributeElement from './attributeelement.js';\nimport EmptyElement from './emptyelement.js';\nimport UIElement from './uielement.js';\nimport RawElement from './rawelement.js';\nimport { CKEditorError, isIterable } from '@ckeditor/ckeditor5-utils';\nimport DocumentFragment from './documentfragment.js';\nimport Text from './text.js';\nimport EditableElement from './editableelement.js';\nimport { isPlainObject } from 'lodash-es';\n/**\n * View downcast writer.\n *\n * It provides a set of methods used to manipulate view nodes.\n *\n * Do not create an instance of this writer manually. To modify a view structure, use\n * the {@link module:engine/view/view~View#change `View#change()`} block.\n *\n * The `DowncastWriter` is designed to work with semantic views which are the views that were/are being downcasted from the model.\n * To work with ordinary views (e.g. parsed from a pasted content) use the\n * {@link module:engine/view/upcastwriter~UpcastWriter upcast writer}.\n *\n * Read more about changing the view in the {@glink framework/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/architecture/editing-engine Editing engine architecture} guide.\n */\nexport default class DowncastWriter {\n    /**\n     * @param document The view document instance.\n     */\n    constructor(document) {\n        /**\n         * Holds references to the attribute groups that share the same {@link module:engine/view/attributeelement~AttributeElement#id id}.\n         * The keys are `id`s, the values are `Set`s holding {@link module:engine/view/attributeelement~AttributeElement}s.\n         */\n        this._cloneGroups = new Map();\n        /**\n         * The slot factory used by the `elementToStructure` downcast helper.\n         */\n        this._slotFactory = null;\n        this.document = document;\n    }\n    setSelection(...args) {\n        this.document.selection._setTo(...args);\n    }\n    /**\n     * Moves {@link module:engine/view/documentselection~DocumentSelection#focus selection's focus} to the specified location.\n     *\n     * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n     * parameters.\n     *\n     * @param Offset or one of the flags. Used only when the first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    setSelectionFocus(itemOrPosition, offset) {\n        this.document.selection._setFocus(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.\n     *\n     * @param children A list of nodes to be inserted into the created document fragment.\n     * @returns The created document fragment.\n     */\n    createDocumentFragment(children) {\n        return new DocumentFragment(this.document, children);\n    }\n    /**\n     * Creates a new {@link module:engine/view/text~Text text node}.\n     *\n     * ```ts\n     * writer.createText( 'foo' );\n     * ```\n     *\n     * @param data The text's data.\n     * @returns The created text node.\n     */\n    createText(data) {\n        return new Text(this.document, data);\n    }\n    /**\n     * Creates a new {@link module:engine/view/attributeelement~AttributeElement}.\n     *\n     * ```ts\n     * writer.createAttributeElement( 'strong' );\n     * writer.createAttributeElement( 'a', { href: 'foo.bar' } );\n     *\n     * // Make `<a>` element contain other attributes element so the `<a>` element is not broken.\n     * writer.createAttributeElement( 'a', { href: 'foo.bar' }, { priority: 5 } );\n     *\n     * // Set `id` of a marker element so it is not joined or merged with \"normal\" elements.\n     * writer.createAttributeElement( 'span', { class: 'my-marker' }, { id: 'marker:my' } );\n     * ```\n     *\n     * @param name Name of the element.\n     * @param attributes Element's attributes.\n     * @param options Element's options.\n     * @param options.priority Element's {@link module:engine/view/attributeelement~AttributeElement#priority priority}.\n     * @param options.id Element's {@link module:engine/view/attributeelement~AttributeElement#id id}.\n     * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing\n     * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.\n     * @returns Created element.\n     */\n    createAttributeElement(name, attributes, options = {}) {\n        const attributeElement = new AttributeElement(this.document, name, attributes);\n        if (typeof options.priority === 'number') {\n            attributeElement._priority = options.priority;\n        }\n        if (options.id) {\n            attributeElement._id = options.id;\n        }\n        if (options.renderUnsafeAttributes) {\n            attributeElement._unsafeAttributesToRender.push(...options.renderUnsafeAttributes);\n        }\n        return attributeElement;\n    }\n    createContainerElement(name, attributes, childrenOrOptions = {}, options = {}) {\n        let children = null;\n        if (isPlainObject(childrenOrOptions)) {\n            options = childrenOrOptions;\n        }\n        else {\n            children = childrenOrOptions;\n        }\n        const containerElement = new ContainerElement(this.document, name, attributes, children);\n        if (options.renderUnsafeAttributes) {\n            containerElement._unsafeAttributesToRender.push(...options.renderUnsafeAttributes);\n        }\n        return containerElement;\n    }\n    /**\n     * Creates a new {@link module:engine/view/editableelement~EditableElement}.\n     *\n     * ```ts\n     * writer.createEditableElement( 'div' );\n     * writer.createEditableElement( 'div', { id: 'foo-1234' } );\n     * ```\n     *\n     * Note: The editable element is to be used in the editing pipeline. Usually, together with\n     * {@link module:widget/utils~toWidgetEditable `toWidgetEditable()`}.\n     *\n     * @param name Name of the element.\n     * @param attributes Elements attributes.\n     * @param options Element's options.\n     * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing\n     * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.\n     * @returns Created element.\n     */\n    createEditableElement(name, attributes, options = {}) {\n        const editableElement = new EditableElement(this.document, name, attributes);\n        if (options.renderUnsafeAttributes) {\n            editableElement._unsafeAttributesToRender.push(...options.renderUnsafeAttributes);\n        }\n        return editableElement;\n    }\n    /**\n     * Creates a new {@link module:engine/view/emptyelement~EmptyElement}.\n     *\n     * ```ts\n     * writer.createEmptyElement( 'img' );\n     * writer.createEmptyElement( 'img', { id: 'foo-1234' } );\n     * ```\n     *\n     * @param name Name of the element.\n     * @param attributes Elements attributes.\n     * @param options Element's options.\n     * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing\n     * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.\n     * @returns Created element.\n     */\n    createEmptyElement(name, attributes, options = {}) {\n        const emptyElement = new EmptyElement(this.document, name, attributes);\n        if (options.renderUnsafeAttributes) {\n            emptyElement._unsafeAttributesToRender.push(...options.renderUnsafeAttributes);\n        }\n        return emptyElement;\n    }\n    /**\n     * Creates a new {@link module:engine/view/uielement~UIElement}.\n     *\n     * ```ts\n     * writer.createUIElement( 'span' );\n     * writer.createUIElement( 'span', { id: 'foo-1234' } );\n     * ```\n     *\n     * A custom render function can be provided as the third parameter:\n     *\n     * ```ts\n     * writer.createUIElement( 'span', null, function( domDocument ) {\n     * \tconst domElement = this.toDomElement( domDocument );\n     * \tdomElement.innerHTML = '<b>this is ui element</b>';\n     *\n     * \treturn domElement;\n     * } );\n     * ```\n     *\n     * Unlike {@link #createRawElement raw elements}, UI elements are by no means editor content, for instance,\n     * they are ignored by the editor selection system.\n     *\n     * You should not use UI elements as data containers. Check out {@link #createRawElement} instead.\n     *\n     * @param name The name of the element.\n     * @param attributes Element attributes.\n     * @param renderFunction A custom render function.\n     * @returns The created element.\n     */\n    createUIElement(name, attributes, renderFunction) {\n        const uiElement = new UIElement(this.document, name, attributes);\n        if (renderFunction) {\n            uiElement.render = renderFunction;\n        }\n        return uiElement;\n    }\n    /**\n     * Creates a new {@link module:engine/view/rawelement~RawElement}.\n     *\n     * ```ts\n     * writer.createRawElement( 'span', { id: 'foo-1234' }, function( domElement ) {\n     * \tdomElement.innerHTML = '<b>This is the raw content of the raw element.</b>';\n     * } );\n     * ```\n     *\n     * Raw elements work as data containers (\"wrappers\", \"sandboxes\") but their children are not managed or\n     * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures\n     * in the editor content without, for instance, worrying about compatibility with other editor features.\n     * Raw elements are a perfect tool for integration with external frameworks and data sources.\n     *\n     * Unlike {@link #createUIElement UI elements}, raw elements act like \"real\" editor content (similar to\n     * {@link module:engine/view/containerelement~ContainerElement} or {@link module:engine/view/emptyelement~EmptyElement}),\n     * and they are considered by the editor selection.\n     *\n     * You should not use raw elements to render the UI in the editor content. Check out {@link #createUIElement `#createUIElement()`}\n     * instead.\n     *\n     * @param name The name of the element.\n     * @param attributes Element attributes.\n     * @param renderFunction A custom render function.\n     * @param options Element's options.\n     * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing\n     * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.\n     * @returns The created element.\n     */\n    createRawElement(name, attributes, renderFunction, options = {}) {\n        const rawElement = new RawElement(this.document, name, attributes);\n        if (renderFunction) {\n            rawElement.render = renderFunction;\n        }\n        if (options.renderUnsafeAttributes) {\n            rawElement._unsafeAttributesToRender.push(...options.renderUnsafeAttributes);\n        }\n        return rawElement;\n    }\n    /**\n     * Adds or overwrites the element's attribute with a specified key and value.\n     *\n     * ```ts\n     * writer.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n     * ```\n     *\n     * @param key The attribute key.\n     * @param value The attribute value.\n     */\n    setAttribute(key, value, element) {\n        element._setAttribute(key, value);\n    }\n    /**\n     * Removes attribute from the element.\n     *\n     * ```ts\n     * writer.removeAttribute( 'href', linkElement );\n     * ```\n     *\n     * @param key Attribute key.\n     */\n    removeAttribute(key, element) {\n        element._removeAttribute(key);\n    }\n    /**\n     * Adds specified class to the element.\n     *\n     * ```ts\n     * writer.addClass( 'foo', linkElement );\n     * writer.addClass( [ 'foo', 'bar' ], linkElement );\n     * ```\n     */\n    addClass(className, element) {\n        element._addClass(className);\n    }\n    /**\n     * Removes specified class from the element.\n     *\n     * ```ts\n     * writer.removeClass( 'foo', linkElement );\n     * writer.removeClass( [ 'foo', 'bar' ], linkElement );\n     * ```\n     */\n    removeClass(className, element) {\n        element._removeClass(className);\n    }\n    setStyle(property, value, element) {\n        if (isPlainObject(property) && element === undefined) {\n            value._setStyle(property);\n        }\n        else {\n            element._setStyle(property, value);\n        }\n    }\n    /**\n     * Removes specified style from the element.\n     *\n     * ```ts\n     * writer.removeStyle( 'color', element ); // Removes 'color' style.\n     * writer.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n     * ```\n     *\n     * **Note**: This method can work with normalized style names if\n     * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n     * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n     */\n    removeStyle(property, element) {\n        element._removeStyle(property);\n    }\n    /**\n     * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n     * so they can be used to add special data to elements.\n     */\n    setCustomProperty(key, value, element) {\n        element._setCustomProperty(key, value);\n    }\n    /**\n     * Removes a custom property stored under the given key.\n     *\n     * @returns Returns true if property was removed.\n     */\n    removeCustomProperty(key, element) {\n        return element._removeCustomProperty(key);\n    }\n    /**\n     * Breaks attribute elements at the provided position or at the boundaries of a provided range. It breaks attribute elements\n     * up to their first ancestor that is a container element.\n     *\n     * In following examples `<p>` is a container, `<b>` and `<u>` are attribute elements:\n     *\n     * ```html\n     * <p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\n     * <p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\n     * <p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n     * <p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\n     * ```\n     *\n     * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n     *\n     * **Note:** The difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes()} and\n     * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer()} is that `breakAttributes()` breaks all\n     * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of a given `position`,\n     * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n     * `breakContainer()` assumes that a given `position` is directly in the container element and breaks that container element.\n     *\n     * Throws the `view-writer-invalid-range-container` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n     * when the {@link module:engine/view/range~Range#start start}\n     * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\n     *\n     * Throws the `view-writer-cannot-break-empty-element` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n     * when trying to break attributes inside an {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n     *\n     * Throws the `view-writer-cannot-break-ui-element` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n     * when trying to break attributes inside a {@link module:engine/view/uielement~UIElement UIElement}.\n     *\n     * @see module:engine/view/attributeelement~AttributeElement\n     * @see module:engine/view/containerelement~ContainerElement\n     * @see module:engine/view/downcastwriter~DowncastWriter#breakContainer\n     * @param positionOrRange The position where to break attribute elements.\n     * @returns The new position or range, after breaking the attribute elements.\n     */\n    breakAttributes(positionOrRange) {\n        if (positionOrRange instanceof Position) {\n            return this._breakAttributes(positionOrRange);\n        }\n        else {\n            return this._breakAttributesRange(positionOrRange);\n        }\n    }\n    /**\n     * Breaks a {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position.\n     * The position has to be directly inside the container element and cannot be in the root. It does not break the conrainer view element\n     * if the position is at the beginning or at the end of its parent element.\n     *\n     * ```html\n     * <p>foo^bar</p> -> <p>foo</p><p>bar</p>\n     * <div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\n     * <p>^foobar</p> -> ^<p>foobar</p>\n     * <p>foobar^</p> -> <p>foobar</p>^\n     * ```\n     *\n     * **Note:** The difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes()} and\n     * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer()} is that `breakAttributes()` breaks all\n     * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of a given `position`,\n     * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n     * `breakContainer()` assumes that the given `position` is directly in the container element and breaks that container element.\n     *\n     * @see module:engine/view/attributeelement~AttributeElement\n     * @see module:engine/view/containerelement~ContainerElement\n     * @see module:engine/view/downcastwriter~DowncastWriter#breakAttributes\n     * @param position The position where to break the element.\n     * @returns The position between broken elements. If an element has not been broken,\n     * the returned position is placed either before or after it.\n     */\n    breakContainer(position) {\n        const element = position.parent;\n        if (!(element.is('containerElement'))) {\n            /**\n             * Trying to break an element which is not a container element.\n             *\n             * @error view-writer-break-non-container-element\n             */\n            throw new CKEditorError('view-writer-break-non-container-element', this.document);\n        }\n        if (!element.parent) {\n            /**\n             * Trying to break root element.\n             *\n             * @error view-writer-break-root\n             */\n            throw new CKEditorError('view-writer-break-root', this.document);\n        }\n        if (position.isAtStart) {\n            return Position._createBefore(element);\n        }\n        else if (!position.isAtEnd) {\n            const newElement = element._clone(false);\n            this.insert(Position._createAfter(element), newElement);\n            const sourceRange = new Range(position, Position._createAt(element, 'end'));\n            const targetPosition = new Position(newElement, 0);\n            this.move(sourceRange, targetPosition);\n        }\n        return Position._createAfter(element);\n    }\n    /**\n     * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\n     * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\n     *\n     * In following examples `<p>` is a container and `<b>` is an attribute element:\n     *\n     * ```html\n     * <p>foo[]bar</p> -> <p>foo{}bar</p>\n     * <p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\n     * <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p> -> <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p>\n     * ```\n     *\n     * It will also take care about empty attributes when merging:\n     *\n     * ```html\n     * <p><b>[]</b></p> -> <p>[]</p>\n     * <p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\n     * ```\n     *\n     * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n     * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n     * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n     * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n     *\n     * @see module:engine/view/attributeelement~AttributeElement\n     * @see module:engine/view/containerelement~ContainerElement\n     * @see module:engine/view/downcastwriter~DowncastWriter#mergeContainers\n     * @param position Merge position.\n     * @returns Position after merge.\n     */\n    mergeAttributes(position) {\n        const positionOffset = position.offset;\n        const positionParent = position.parent;\n        // When inside text node - nothing to merge.\n        if (positionParent.is('$text')) {\n            return position;\n        }\n        // When inside empty attribute - remove it.\n        if (positionParent.is('attributeElement') && positionParent.childCount === 0) {\n            const parent = positionParent.parent;\n            const offset = positionParent.index;\n            positionParent._remove();\n            this._removeFromClonedElementsGroup(positionParent);\n            return this.mergeAttributes(new Position(parent, offset));\n        }\n        const nodeBefore = positionParent.getChild(positionOffset - 1);\n        const nodeAfter = positionParent.getChild(positionOffset);\n        // Position should be placed between two nodes.\n        if (!nodeBefore || !nodeAfter) {\n            return position;\n        }\n        // When position is between two text nodes.\n        if (nodeBefore.is('$text') && nodeAfter.is('$text')) {\n            return mergeTextNodes(nodeBefore, nodeAfter);\n        }\n        // When position is between two same attribute elements.\n        else if (nodeBefore.is('attributeElement') && nodeAfter.is('attributeElement') && nodeBefore.isSimilar(nodeAfter)) {\n            // Move all children nodes from node placed after selection and remove that node.\n            const count = nodeBefore.childCount;\n            nodeBefore._appendChild(nodeAfter.getChildren());\n            nodeAfter._remove();\n            this._removeFromClonedElementsGroup(nodeAfter);\n            // New position is located inside the first node, before new nodes.\n            // Call this method recursively to merge again if needed.\n            return this.mergeAttributes(new Position(nodeBefore, count));\n        }\n        return position;\n    }\n    /**\n     * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\n     * Precisely, the element after the position is removed and it's contents are moved to element before the position.\n     *\n     * ```html\n     * <p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\n     * <div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\n     * ```\n     *\n     * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n     * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n     * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n     * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n     *\n     * @see module:engine/view/attributeelement~AttributeElement\n     * @see module:engine/view/containerelement~ContainerElement\n     * @see module:engine/view/downcastwriter~DowncastWriter#mergeAttributes\n     * @param position Merge position.\n     * @returns Position after merge.\n     */\n    mergeContainers(position) {\n        const prev = position.nodeBefore;\n        const next = position.nodeAfter;\n        if (!prev || !next || !prev.is('containerElement') || !next.is('containerElement')) {\n            /**\n             * Element before and after given position cannot be merged.\n             *\n             * @error view-writer-merge-containers-invalid-position\n             */\n            throw new CKEditorError('view-writer-merge-containers-invalid-position', this.document);\n        }\n        const lastChild = prev.getChild(prev.childCount - 1);\n        const newPosition = lastChild instanceof Text ? Position._createAt(lastChild, 'end') : Position._createAt(prev, 'end');\n        this.move(Range._createIn(next), Position._createAt(prev, 'end'));\n        this.remove(Range._createOn(next));\n        return newPosition;\n    }\n    /**\n     * Inserts a node or nodes at specified position. Takes care about breaking attributes before insertion\n     * and merging them afterwards.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n     * contains instances that are not {@link module:engine/view/text~Text Texts},\n     * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\n     * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\n     * {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\n     * {@link module:engine/view/rawelement~RawElement RawElements} or\n     * {@link module:engine/view/uielement~UIElement UIElements}.\n     *\n     * @param position Insertion position.\n     * @param nodes Node or nodes to insert.\n     * @returns Range around inserted nodes.\n     */\n    insert(position, nodes) {\n        nodes = isIterable(nodes) ? [...nodes] : [nodes];\n        // Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\n        validateNodesToInsert(nodes, this.document);\n        // Group nodes in batches of nodes that require or do not require breaking an AttributeElements.\n        const nodeGroups = nodes.reduce((groups, node) => {\n            const lastGroup = groups[groups.length - 1];\n            // Break attributes on nodes that do exist in the model tree so they can have attributes, other elements\n            // can't have an attribute in model and won't get wrapped with an AttributeElement while down-casted.\n            const breakAttributes = !node.is('uiElement');\n            if (!lastGroup || lastGroup.breakAttributes != breakAttributes) {\n                groups.push({\n                    breakAttributes,\n                    nodes: [node]\n                });\n            }\n            else {\n                lastGroup.nodes.push(node);\n            }\n            return groups;\n        }, []);\n        // Insert nodes in batches.\n        let start = null;\n        let end = position;\n        for (const { nodes, breakAttributes } of nodeGroups) {\n            const range = this._insertNodes(end, nodes, breakAttributes);\n            if (!start) {\n                start = range.start;\n            }\n            end = range.end;\n        }\n        // When no nodes were inserted - return collapsed range.\n        if (!start) {\n            return new Range(position);\n        }\n        return new Range(start, end);\n    }\n    /**\n     * Removes provided range from the container.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n     * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n     * same parent container.\n     *\n     * @param rangeOrItem Range to remove from container\n     * or an {@link module:engine/view/item~Item item} to remove. If range is provided, after removing, it will be updated\n     * to a collapsed range showing the new position.\n     * @returns Document fragment containing removed nodes.\n     */\n    remove(rangeOrItem) {\n        const range = rangeOrItem instanceof Range ? rangeOrItem : Range._createOn(rangeOrItem);\n        validateRangeContainer(range, this.document);\n        // If range is collapsed - nothing to remove.\n        if (range.isCollapsed) {\n            return new DocumentFragment(this.document);\n        }\n        // Break attributes at range start and end.\n        const { start: breakStart, end: breakEnd } = this._breakAttributesRange(range, true);\n        const parentContainer = breakStart.parent;\n        const count = breakEnd.offset - breakStart.offset;\n        // Remove nodes in range.\n        const removed = parentContainer._removeChildren(breakStart.offset, count);\n        for (const node of removed) {\n            this._removeFromClonedElementsGroup(node);\n        }\n        // Merge after removing.\n        const mergePosition = this.mergeAttributes(breakStart);\n        range.start = mergePosition;\n        range.end = mergePosition.clone();\n        // Return removed nodes.\n        return new DocumentFragment(this.document, removed);\n    }\n    /**\n     * Removes matching elements from given range.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n     * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n     * same parent container.\n     *\n     * @param range Range to clear.\n     * @param element Element to remove.\n     */\n    clear(range, element) {\n        validateRangeContainer(range, this.document);\n        // Create walker on given range.\n        // We walk backward because when we remove element during walk it modifies range end position.\n        const walker = range.getWalker({\n            direction: 'backward',\n            ignoreElementEnd: true\n        });\n        // Let's walk.\n        for (const current of walker) {\n            const item = current.item;\n            let rangeToRemove;\n            // When current item matches to the given element.\n            if (item.is('element') && element.isSimilar(item)) {\n                // Create range on this element.\n                rangeToRemove = Range._createOn(item);\n                // When range starts inside Text or TextProxy element.\n            }\n            else if (!current.nextPosition.isAfter(range.start) && item.is('$textProxy')) {\n                // We need to check if parent of this text matches to given element.\n                const parentElement = item.getAncestors().find(ancestor => {\n                    return ancestor.is('element') && element.isSimilar(ancestor);\n                });\n                // If it is then create range inside this element.\n                if (parentElement) {\n                    rangeToRemove = Range._createIn(parentElement);\n                }\n            }\n            // If we have found element to remove.\n            if (rangeToRemove) {\n                // We need to check if element range stick out of the given range and truncate if it is.\n                if (rangeToRemove.end.isAfter(range.end)) {\n                    rangeToRemove.end = range.end;\n                }\n                if (rangeToRemove.start.isBefore(range.start)) {\n                    rangeToRemove.start = range.start;\n                }\n                // At the end we remove range with found element.\n                this.remove(rangeToRemove);\n            }\n        }\n    }\n    /**\n     * Moves nodes from provided range to target position.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n     * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n     * same parent container.\n     *\n     * @param sourceRange Range containing nodes to move.\n     * @param targetPosition Position to insert.\n     * @returns Range in target container. Inserted nodes are placed between\n     * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\n     */\n    move(sourceRange, targetPosition) {\n        let nodes;\n        if (targetPosition.isAfter(sourceRange.end)) {\n            targetPosition = this._breakAttributes(targetPosition, true);\n            const parent = targetPosition.parent;\n            const countBefore = parent.childCount;\n            sourceRange = this._breakAttributesRange(sourceRange, true);\n            nodes = this.remove(sourceRange);\n            targetPosition.offset += (parent.childCount - countBefore);\n        }\n        else {\n            nodes = this.remove(sourceRange);\n        }\n        return this.insert(targetPosition, nodes);\n    }\n    /**\n     * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\n     *\n     * If a collapsed range was passed and is same as selection, the selection\n     * will be moved to the inside of the wrapped attribute element.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\n     * when {@link module:engine/view/range~Range#start}\n     * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n     * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\n     * is collapsed and different than view selection.\n     *\n     * @param range Range to wrap.\n     * @param attribute Attribute element to use as wrapper.\n     * @returns range Range after wrapping, spanning over wrapping attribute element.\n     */\n    wrap(range, attribute) {\n        if (!(attribute instanceof AttributeElement)) {\n            throw new CKEditorError('view-writer-wrap-invalid-attribute', this.document);\n        }\n        validateRangeContainer(range, this.document);\n        if (!range.isCollapsed) {\n            // Non-collapsed range. Wrap it with the attribute element.\n            return this._wrapRange(range, attribute);\n        }\n        else {\n            // Collapsed range. Wrap position.\n            let position = range.start;\n            if (position.parent.is('element') && !_hasNonUiChildren(position.parent)) {\n                position = position.getLastMatchingPosition(value => value.item.is('uiElement'));\n            }\n            position = this._wrapPosition(position, attribute);\n            const viewSelection = this.document.selection;\n            // If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\n            if (viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual(range.start)) {\n                this.setSelection(position);\n            }\n            return new Range(position);\n        }\n    }\n    /**\n     * Unwraps nodes within provided range from attribute element.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n     * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n     * same parent container.\n     */\n    unwrap(range, attribute) {\n        if (!(attribute instanceof AttributeElement)) {\n            /**\n             * The `attribute` passed to {@link module:engine/view/downcastwriter~DowncastWriter#unwrap `DowncastWriter#unwrap()`}\n             * must be an instance of {@link module:engine/view/attributeelement~AttributeElement `AttributeElement`}.\n             *\n             * @error view-writer-unwrap-invalid-attribute\n             */\n            throw new CKEditorError('view-writer-unwrap-invalid-attribute', this.document);\n        }\n        validateRangeContainer(range, this.document);\n        // If range is collapsed - nothing to unwrap.\n        if (range.isCollapsed) {\n            return range;\n        }\n        // Break attributes at range start and end.\n        const { start: breakStart, end: breakEnd } = this._breakAttributesRange(range, true);\n        const parentContainer = breakStart.parent;\n        // Unwrap children located between break points.\n        const newRange = this._unwrapChildren(parentContainer, breakStart.offset, breakEnd.offset, attribute);\n        // Merge attributes at the both ends and return a new range.\n        const start = this.mergeAttributes(newRange.start);\n        // If start position was merged - move end position back.\n        if (!start.isEqual(newRange.start)) {\n            newRange.end.offset--;\n        }\n        const end = this.mergeAttributes(newRange.end);\n        return new Range(start, end);\n    }\n    /**\n     * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\n     * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\n     * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\n     *\n     * New element has to be created because `Element#tagName` property in DOM is readonly.\n     *\n     * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n     *\n     * @param newName New name for element.\n     * @param viewElement Element to be renamed.\n     * @returns Element created due to rename.\n     */\n    rename(newName, viewElement) {\n        const newElement = new ContainerElement(this.document, newName, viewElement.getAttributes());\n        this.insert(Position._createAfter(viewElement), newElement);\n        this.move(Range._createIn(viewElement), Position._createAt(newElement, 0));\n        this.remove(Range._createOn(viewElement));\n        return newElement;\n    }\n    /**\n     * Cleans up memory by removing obsolete cloned elements group from the writer.\n     *\n     * Should be used whenever all {@link module:engine/view/attributeelement~AttributeElement attribute elements}\n     * with the same {@link module:engine/view/attributeelement~AttributeElement#id id} are going to be removed from the view and\n     * the group will no longer be needed.\n     *\n     * Cloned elements group are not removed automatically in case if the group is still needed after all its elements\n     * were removed from the view.\n     *\n     * Keep in mind that group names are equal to the `id` property of the attribute element.\n     *\n     * @param groupName Name of the group to clear.\n     */\n    clearClonedElementsGroup(groupName) {\n        this._cloneGroups.delete(groupName);\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/view/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n     *\n     * This method is a shortcut to other constructors such as:\n     *\n     * * {@link #createPositionBefore},\n     * * {@link #createPositionAfter},\n     *\n     * @param offset Offset or one of the flags. Used only when the first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    createPositionAt(itemOrPosition, offset) {\n        return Position._createAt(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new position after given view item.\n     *\n     * @param item View item after which the position should be located.\n     */\n    createPositionAfter(item) {\n        return Position._createAfter(item);\n    }\n    /**\n     * Creates a new position before given view item.\n     *\n     * @param item View item before which the position should be located.\n     */\n    createPositionBefore(item) {\n        return Position._createBefore(item);\n    }\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * **Note:** This factory method creates its own {@link module:engine/view/position~Position} instances basing on passed values.\n     *\n     * @param start Start position.\n     * @param end End position. If not set, range will be collapsed at `start` position.\n     */\n    createRange(start, end) {\n        return new Range(start, end);\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n     */\n    createRangeOn(item) {\n        return Range._createOn(item);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @param element Element which is a parent for the range.\n     */\n    createRangeIn(element) {\n        return Range._createIn(element);\n    }\n    createSelection(...args) {\n        return new Selection(...args);\n    }\n    /**\n     * Creates placeholders for child elements of the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure\n     * `elementToStructure()`} conversion helper.\n     *\n     * ```ts\n     * const viewSlot = conversionApi.writer.createSlot();\n     * const viewPosition = conversionApi.writer.createPositionAt( viewElement, 0 );\n     *\n     * conversionApi.writer.insert( viewPosition, viewSlot );\n     * ```\n     *\n     * It could be filtered down to a specific subset of children (only `<foo>` model elements in this case):\n     *\n     * ```ts\n     * const viewSlot = conversionApi.writer.createSlot( node => node.is( 'element', 'foo' ) );\n     * const viewPosition = conversionApi.writer.createPositionAt( viewElement, 0 );\n     *\n     * conversionApi.writer.insert( viewPosition, viewSlot );\n     * ```\n     *\n     * While providing a filtered slot, make sure to provide slots for all child nodes. A single node can not be downcasted into\n     * multiple slots.\n     *\n     * **Note**: You should not change the order of nodes. View elements should be in the same order as model nodes.\n     *\n     * @param modeOrFilter The filter for child nodes.\n     * @returns The slot element to be placed in to the view structure while processing\n     * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure `elementToStructure()`}.\n     */\n    createSlot(modeOrFilter = 'children') {\n        if (!this._slotFactory) {\n            /**\n             * The `createSlot()` method is only allowed inside the `elementToStructure` downcast helper callback.\n             *\n             * @error view-writer-invalid-create-slot-context\n             */\n            throw new CKEditorError('view-writer-invalid-create-slot-context', this.document);\n        }\n        return this._slotFactory(this, modeOrFilter);\n    }\n    /**\n     * Registers a slot factory.\n     *\n     * @internal\n     * @param slotFactory The slot factory.\n     */\n    _registerSlotFactory(slotFactory) {\n        this._slotFactory = slotFactory;\n    }\n    /**\n     * Clears the registered slot factory.\n     *\n     * @internal\n     */\n    _clearSlotFactory() {\n        this._slotFactory = null;\n    }\n    /**\n     * Inserts a node or nodes at the specified position. Takes care of breaking attributes before insertion\n     * and merging them afterwards if requested by the breakAttributes param.\n     *\n     * @param position Insertion position.\n     * @param nodes Node or nodes to insert.\n     * @param breakAttributes Whether attributes should be broken.\n     * @returns Range around inserted nodes.\n     */\n    _insertNodes(position, nodes, breakAttributes) {\n        let parentElement;\n        // Break attributes on nodes that do exist in the model tree so they can have attributes, other elements\n        // can't have an attribute in model and won't get wrapped with an AttributeElement while down-casted.\n        if (breakAttributes) {\n            parentElement = getParentContainer(position);\n        }\n        else {\n            parentElement = position.parent.is('$text') ? position.parent.parent : position.parent;\n        }\n        if (!parentElement) {\n            /**\n             * Position's parent container cannot be found.\n             *\n             * @error view-writer-invalid-position-container\n             */\n            throw new CKEditorError('view-writer-invalid-position-container', this.document);\n        }\n        let insertionPosition;\n        if (breakAttributes) {\n            insertionPosition = this._breakAttributes(position, true);\n        }\n        else {\n            insertionPosition = position.parent.is('$text') ? breakTextNode(position) : position;\n        }\n        const length = parentElement._insertChild(insertionPosition.offset, nodes);\n        for (const node of nodes) {\n            this._addToClonedElementsGroup(node);\n        }\n        const endPosition = insertionPosition.getShiftedBy(length);\n        const start = this.mergeAttributes(insertionPosition);\n        // If start position was merged - move end position.\n        if (!start.isEqual(insertionPosition)) {\n            endPosition.offset--;\n        }\n        const end = this.mergeAttributes(endPosition);\n        return new Range(start, end);\n    }\n    /**\n     * Wraps children with provided `wrapElement`. Only children contained in `parent` element between\n     * `startOffset` and `endOffset` will be wrapped.\n     */\n    _wrapChildren(parent, startOffset, endOffset, wrapElement) {\n        let i = startOffset;\n        const wrapPositions = [];\n        while (i < endOffset) {\n            const child = parent.getChild(i);\n            const isText = child.is('$text');\n            const isAttribute = child.is('attributeElement');\n            //\n            // (In all examples, assume that `wrapElement` is `<span class=\"foo\">` element.)\n            //\n            // Check if `wrapElement` can be joined with the wrapped element. One of requirements is having same name.\n            // If possible, join elements.\n            //\n            // <p><span class=\"bar\">abc</span></p>  -->  <p><span class=\"foo bar\">abc</span></p>\n            //\n            if (isAttribute && this._wrapAttributeElement(wrapElement, child)) {\n                wrapPositions.push(new Position(parent, i));\n            }\n            //\n            // Wrap the child if it is not an attribute element or if it is an attribute element that should be inside\n            // `wrapElement` (due to priority).\n            //\n            // <p>abc</p>                   -->  <p><span class=\"foo\">abc</span></p>\n            // <p><strong>abc</strong></p>  -->  <p><span class=\"foo\"><strong>abc</strong></span></p>\n            else if (isText || !isAttribute || shouldABeOutsideB(wrapElement, child)) {\n                // Clone attribute.\n                const newAttribute = wrapElement._clone();\n                // Wrap current node with new attribute.\n                child._remove();\n                newAttribute._appendChild(child);\n                parent._insertChild(i, newAttribute);\n                this._addToClonedElementsGroup(newAttribute);\n                wrapPositions.push(new Position(parent, i));\n            }\n            //\n            // If other nested attribute is found and it wasn't wrapped (see above), continue wrapping inside it.\n            //\n            // <p><a href=\"foo.html\">abc</a></p>  -->  <p><a href=\"foo.html\"><span class=\"foo\">abc</span></a></p>\n            //\n            else /* if ( isAttribute ) */ {\n                this._wrapChildren(child, 0, child.childCount, wrapElement);\n            }\n            i++;\n        }\n        // Merge at each wrap.\n        let offsetChange = 0;\n        for (const position of wrapPositions) {\n            position.offset -= offsetChange;\n            // Do not merge with elements outside selected children.\n            if (position.offset == startOffset) {\n                continue;\n            }\n            const newPosition = this.mergeAttributes(position);\n            // If nodes were merged - other merge offsets will change.\n            if (!newPosition.isEqual(position)) {\n                offsetChange++;\n                endOffset--;\n            }\n        }\n        return Range._createFromParentsAndOffsets(parent, startOffset, parent, endOffset);\n    }\n    /**\n     * Unwraps children from provided `unwrapElement`. Only children contained in `parent` element between\n     * `startOffset` and `endOffset` will be unwrapped.\n     */\n    _unwrapChildren(parent, startOffset, endOffset, unwrapElement) {\n        let i = startOffset;\n        const unwrapPositions = [];\n        // Iterate over each element between provided offsets inside parent.\n        // We don't use tree walker or range iterator because we will be removing and merging potentially multiple nodes,\n        // so it could get messy. It is safer to it manually in this case.\n        while (i < endOffset) {\n            const child = parent.getChild(i);\n            // Skip all text nodes. There should be no container element's here either.\n            if (!child.is('attributeElement')) {\n                i++;\n                continue;\n            }\n            //\n            // (In all examples, assume that `unwrapElement` is `<span class=\"foo\">` element.)\n            //\n            // If the child is similar to the given attribute element, unwrap it - it will be completely removed.\n            //\n            // <p><span class=\"foo\">abc</span>xyz</p>  -->  <p>abcxyz</p>\n            //\n            if (child.isSimilar(unwrapElement)) {\n                const unwrapped = child.getChildren();\n                const count = child.childCount;\n                // Replace wrapper element with its children\n                child._remove();\n                parent._insertChild(i, unwrapped);\n                this._removeFromClonedElementsGroup(child);\n                // Save start and end position of moved items.\n                unwrapPositions.push(new Position(parent, i), new Position(parent, i + count));\n                // Skip elements that were unwrapped. Assuming there won't be another element to unwrap in child elements.\n                i += count;\n                endOffset += count - 1;\n                continue;\n            }\n            //\n            // If the child is not similar but is an attribute element, try partial unwrapping - remove the same attributes/styles/classes.\n            // Partial unwrapping will happen only if the elements have the same name.\n            //\n            // <p><span class=\"foo bar\">abc</span>xyz</p>  -->  <p><span class=\"bar\">abc</span>xyz</p>\n            // <p><i class=\"foo\">abc</i>xyz</p>            -->  <p><i class=\"foo\">abc</i>xyz</p>\n            //\n            if (this._unwrapAttributeElement(unwrapElement, child)) {\n                unwrapPositions.push(new Position(parent, i), new Position(parent, i + 1));\n                i++;\n                continue;\n            }\n            //\n            // If other nested attribute is found, look through it's children for elements to unwrap.\n            //\n            // <p><i><span class=\"foo\">abc</span></i><p>  -->  <p><i>abc</i><p>\n            //\n            this._unwrapChildren(child, 0, child.childCount, unwrapElement);\n            i++;\n        }\n        // Merge at each unwrap.\n        let offsetChange = 0;\n        for (const position of unwrapPositions) {\n            position.offset -= offsetChange;\n            // Do not merge with elements outside selected children.\n            if (position.offset == startOffset || position.offset == endOffset) {\n                continue;\n            }\n            const newPosition = this.mergeAttributes(position);\n            // If nodes were merged - other merge offsets will change.\n            if (!newPosition.isEqual(position)) {\n                offsetChange++;\n                endOffset--;\n            }\n        }\n        return Range._createFromParentsAndOffsets(parent, startOffset, parent, endOffset);\n    }\n    /**\n     * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\n     * This method will also merge newly added attribute element with its siblings whenever possible.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n     * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     *\n     * @returns New range after wrapping, spanning over wrapping attribute element.\n     */\n    _wrapRange(range, attribute) {\n        // Break attributes at range start and end.\n        const { start: breakStart, end: breakEnd } = this._breakAttributesRange(range, true);\n        const parentContainer = breakStart.parent;\n        // Wrap all children with attribute.\n        const newRange = this._wrapChildren(parentContainer, breakStart.offset, breakEnd.offset, attribute);\n        // Merge attributes at the both ends and return a new range.\n        const start = this.mergeAttributes(newRange.start);\n        // If start position was merged - move end position back.\n        if (!start.isEqual(newRange.start)) {\n            newRange.end.offset--;\n        }\n        const end = this.mergeAttributes(newRange.end);\n        return new Range(start, end);\n    }\n    /**\n     * Helper function for {@link #wrap}. Wraps position with provided attribute element.\n     * This method will also merge newly added attribute element with its siblings whenever possible.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n     * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     *\n     * @returns New position after wrapping.\n     */\n    _wrapPosition(position, attribute) {\n        // Return same position when trying to wrap with attribute similar to position parent.\n        if (attribute.isSimilar(position.parent)) {\n            return movePositionToTextNode(position.clone());\n        }\n        // When position is inside text node - break it and place new position between two text nodes.\n        if (position.parent.is('$text')) {\n            position = breakTextNode(position);\n        }\n        // Create fake element that will represent position, and will not be merged with other attributes.\n        const fakeElement = this.createAttributeElement('_wrapPosition-fake-element');\n        fakeElement._priority = Number.POSITIVE_INFINITY;\n        fakeElement.isSimilar = () => false;\n        // Insert fake element in position location.\n        position.parent._insertChild(position.offset, fakeElement);\n        // Range around inserted fake attribute element.\n        const wrapRange = new Range(position, position.getShiftedBy(1));\n        // Wrap fake element with attribute (it will also merge if possible).\n        this.wrap(wrapRange, attribute);\n        // Remove fake element and place new position there.\n        const newPosition = new Position(fakeElement.parent, fakeElement.index);\n        fakeElement._remove();\n        // If position is placed between text nodes - merge them and return position inside.\n        const nodeBefore = newPosition.nodeBefore;\n        const nodeAfter = newPosition.nodeAfter;\n        if (nodeBefore instanceof Text && nodeAfter instanceof Text) {\n            return mergeTextNodes(nodeBefore, nodeAfter);\n        }\n        // If position is next to text node - move position inside.\n        return movePositionToTextNode(newPosition);\n    }\n    /**\n     * Wraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\n     * merging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\n     * element to element being wrapped.\n     *\n     * @param wrapper Wrapper AttributeElement.\n     * @param toWrap AttributeElement to wrap using wrapper element.\n     * @returns Returns `true` if elements are merged.\n     */\n    _wrapAttributeElement(wrapper, toWrap) {\n        if (!canBeJoined(wrapper, toWrap)) {\n            return false;\n        }\n        // Can't merge if name or priority differs.\n        if (wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority) {\n            return false;\n        }\n        // Check if attributes can be merged.\n        for (const key of wrapper.getAttributeKeys()) {\n            // Classes and styles should be checked separately.\n            if (key === 'class' || key === 'style') {\n                continue;\n            }\n            // If some attributes are different we cannot wrap.\n            if (toWrap.hasAttribute(key) && toWrap.getAttribute(key) !== wrapper.getAttribute(key)) {\n                return false;\n            }\n        }\n        // Check if styles can be merged.\n        for (const key of wrapper.getStyleNames()) {\n            if (toWrap.hasStyle(key) && toWrap.getStyle(key) !== wrapper.getStyle(key)) {\n                return false;\n            }\n        }\n        // Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\n        for (const key of wrapper.getAttributeKeys()) {\n            // Classes and styles should be checked separately.\n            if (key === 'class' || key === 'style') {\n                continue;\n            }\n            // Move only these attributes that are not present - other are similar.\n            if (!toWrap.hasAttribute(key)) {\n                this.setAttribute(key, wrapper.getAttribute(key), toWrap);\n            }\n        }\n        for (const key of wrapper.getStyleNames()) {\n            if (!toWrap.hasStyle(key)) {\n                this.setStyle(key, wrapper.getStyle(key), toWrap);\n            }\n        }\n        for (const key of wrapper.getClassNames()) {\n            if (!toWrap.hasClass(key)) {\n                this.addClass(key, toWrap);\n            }\n        }\n        return true;\n    }\n    /**\n     * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\n     * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\n     * inside element being unwrapped.\n     *\n     * @param wrapper Wrapper AttributeElement.\n     * @param toUnwrap AttributeElement to unwrap using wrapper element.\n     * @returns Returns `true` if elements are unwrapped.\n     **/\n    _unwrapAttributeElement(wrapper, toUnwrap) {\n        if (!canBeJoined(wrapper, toUnwrap)) {\n            return false;\n        }\n        // Can't unwrap if name or priority differs.\n        if (wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority) {\n            return false;\n        }\n        // Check if AttributeElement has all wrapper attributes.\n        for (const key of wrapper.getAttributeKeys()) {\n            // Classes and styles should be checked separately.\n            if (key === 'class' || key === 'style') {\n                continue;\n            }\n            // If some attributes are missing or different we cannot unwrap.\n            if (!toUnwrap.hasAttribute(key) || toUnwrap.getAttribute(key) !== wrapper.getAttribute(key)) {\n                return false;\n            }\n        }\n        // Check if AttributeElement has all wrapper classes.\n        if (!toUnwrap.hasClass(...wrapper.getClassNames())) {\n            return false;\n        }\n        // Check if AttributeElement has all wrapper styles.\n        for (const key of wrapper.getStyleNames()) {\n            // If some styles are missing or different we cannot unwrap.\n            if (!toUnwrap.hasStyle(key) || toUnwrap.getStyle(key) !== wrapper.getStyle(key)) {\n                return false;\n            }\n        }\n        // Remove all wrapper's attributes from unwrapped element.\n        for (const key of wrapper.getAttributeKeys()) {\n            // Classes and styles should be checked separately.\n            if (key === 'class' || key === 'style') {\n                continue;\n            }\n            this.removeAttribute(key, toUnwrap);\n        }\n        // Remove all wrapper's classes from unwrapped element.\n        this.removeClass(Array.from(wrapper.getClassNames()), toUnwrap);\n        // Remove all wrapper's styles from unwrapped element.\n        this.removeStyle(Array.from(wrapper.getStyleNames()), toUnwrap);\n        return true;\n    }\n    /**\n     * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at the boundaries of given range.\n     *\n     * @param range Range which `start` and `end` positions will be used to break attributes.\n     * @param forceSplitText If set to `true`, will break text nodes even if they are directly in container element.\n     * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n     * @returns New range with located at break positions.\n     */\n    _breakAttributesRange(range, forceSplitText = false) {\n        const rangeStart = range.start;\n        const rangeEnd = range.end;\n        validateRangeContainer(range, this.document);\n        // Break at the collapsed position. Return new collapsed range.\n        if (range.isCollapsed) {\n            const position = this._breakAttributes(range.start, forceSplitText);\n            return new Range(position, position);\n        }\n        const breakEnd = this._breakAttributes(rangeEnd, forceSplitText);\n        const count = breakEnd.parent.childCount;\n        const breakStart = this._breakAttributes(rangeStart, forceSplitText);\n        // Calculate new break end offset.\n        breakEnd.offset += breakEnd.parent.childCount - count;\n        return new Range(breakStart, breakEnd);\n    }\n    /**\n     * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at given position.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\n     * is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\n     * is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\n     *\n     * @param position Position where to break attributes.\n     * @param forceSplitText If set to `true`, will break text nodes even if they are directly in container element.\n     * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n     * @returns New position after breaking the attributes.\n     */\n    _breakAttributes(position, forceSplitText = false) {\n        const positionOffset = position.offset;\n        const positionParent = position.parent;\n        // If position is placed inside EmptyElement - throw an exception as we cannot break inside.\n        if (position.parent.is('emptyElement')) {\n            /**\n             * Cannot break an `EmptyElement` instance.\n             *\n             * This error is thrown if\n             * {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes `DowncastWriter#breakAttributes()`}\n             * was executed in an incorrect position.\n             *\n             * @error view-writer-cannot-break-empty-element\n             */\n            throw new CKEditorError('view-writer-cannot-break-empty-element', this.document);\n        }\n        // If position is placed inside UIElement - throw an exception as we cannot break inside.\n        if (position.parent.is('uiElement')) {\n            /**\n             * Cannot break a `UIElement` instance.\n             *\n             * This error is thrown if\n             * {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes `DowncastWriter#breakAttributes()`}\n             * was executed in an incorrect position.\n             *\n             * @error view-writer-cannot-break-ui-element\n             */\n            throw new CKEditorError('view-writer-cannot-break-ui-element', this.document);\n        }\n        // If position is placed inside RawElement - throw an exception as we cannot break inside.\n        if (position.parent.is('rawElement')) {\n            /**\n             * Cannot break a `RawElement` instance.\n             *\n             * This error is thrown if\n             * {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes `DowncastWriter#breakAttributes()`}\n             * was executed in an incorrect position.\n             *\n             * @error view-writer-cannot-break-raw-element\n             */\n            throw new CKEditorError('view-writer-cannot-break-raw-element', this.document);\n        }\n        // There are no attributes to break and text nodes breaking is not forced.\n        if (!forceSplitText && positionParent.is('$text') && isContainerOrFragment(positionParent.parent)) {\n            return position.clone();\n        }\n        // Position's parent is container, so no attributes to break.\n        if (isContainerOrFragment(positionParent)) {\n            return position.clone();\n        }\n        // Break text and start again in new position.\n        if (positionParent.is('$text')) {\n            return this._breakAttributes(breakTextNode(position), forceSplitText);\n        }\n        const length = positionParent.childCount;\n        // <p>foo<b><u>bar{}</u></b></p>\n        // <p>foo<b><u>bar</u>[]</b></p>\n        // <p>foo<b><u>bar</u></b>[]</p>\n        if (positionOffset == length) {\n            const newPosition = new Position(positionParent.parent, positionParent.index + 1);\n            return this._breakAttributes(newPosition, forceSplitText);\n        }\n        else {\n            // <p>foo<b><u>{}bar</u></b></p>\n            // <p>foo<b>[]<u>bar</u></b></p>\n            // <p>foo{}<b><u>bar</u></b></p>\n            if (positionOffset === 0) {\n                const newPosition = new Position(positionParent.parent, positionParent.index);\n                return this._breakAttributes(newPosition, forceSplitText);\n            }\n            // <p>foo<b><u>b{}ar</u></b></p>\n            // <p>foo<b><u>b[]ar</u></b></p>\n            // <p>foo<b><u>b</u>[]<u>ar</u></b></p>\n            // <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n            else {\n                const offsetAfter = positionParent.index + 1;\n                // Break element.\n                const clonedNode = positionParent._clone();\n                // Insert cloned node to position's parent node.\n                positionParent.parent._insertChild(offsetAfter, clonedNode);\n                this._addToClonedElementsGroup(clonedNode);\n                // Get nodes to move.\n                const count = positionParent.childCount - positionOffset;\n                const nodesToMove = positionParent._removeChildren(positionOffset, count);\n                // Move nodes to cloned node.\n                clonedNode._appendChild(nodesToMove);\n                // Create new position to work on.\n                const newPosition = new Position(positionParent.parent, offsetAfter);\n                return this._breakAttributes(newPosition, forceSplitText);\n            }\n        }\n    }\n    /**\n     * Stores the information that an {@link module:engine/view/attributeelement~AttributeElement attribute element} was\n     * added to the tree. Saves the reference to the group in the given element and updates the group, so other elements\n     * from the group now keep a reference to the given attribute element.\n     *\n     * The clones group can be obtained using {@link module:engine/view/attributeelement~AttributeElement#getElementsWithSameId}.\n     *\n     * Does nothing if added element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n     *\n     * @param element Attribute element to save.\n     */\n    _addToClonedElementsGroup(element) {\n        // Add only if the element is in document tree.\n        if (!element.root.is('rootElement')) {\n            return;\n        }\n        // Traverse the element's children recursively to find other attribute elements that also might got inserted.\n        // The loop is at the beginning so we can make fast returns later in the code.\n        if (element.is('element')) {\n            for (const child of element.getChildren()) {\n                this._addToClonedElementsGroup(child);\n            }\n        }\n        const id = element.id;\n        if (!id) {\n            return;\n        }\n        let group = this._cloneGroups.get(id);\n        if (!group) {\n            group = new Set();\n            this._cloneGroups.set(id, group);\n        }\n        group.add(element);\n        element._clonesGroup = group;\n    }\n    /**\n     * Removes all the information about the given {@link module:engine/view/attributeelement~AttributeElement attribute element}\n     * from its clones group.\n     *\n     * Keep in mind, that the element will still keep a reference to the group (but the group will not keep a reference to it).\n     * This allows to reference the whole group even if the element was already removed from the tree.\n     *\n     * Does nothing if the element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n     *\n     * @param element Attribute element to remove.\n     */\n    _removeFromClonedElementsGroup(element) {\n        // Traverse the element's children recursively to find other attribute elements that also got removed.\n        // The loop is at the beginning so we can make fast returns later in the code.\n        if (element.is('element')) {\n            for (const child of element.getChildren()) {\n                this._removeFromClonedElementsGroup(child);\n            }\n        }\n        const id = element.id;\n        if (!id) {\n            return;\n        }\n        const group = this._cloneGroups.get(id);\n        if (!group) {\n            return;\n        }\n        group.delete(element);\n        // Not removing group from element on purpose!\n        // If other parts of code have reference to this element, they will be able to get references to other elements from the group.\n    }\n}\n// Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\nfunction _hasNonUiChildren(parent) {\n    return Array.from(parent.getChildren()).some(child => !child.is('uiElement'));\n}\n/**\n * The `attribute` passed to {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#wrap()`}\n * must be an instance of {@link module:engine/view/attributeelement~AttributeElement `AttributeElement`}.\n *\n * @error view-writer-wrap-invalid-attribute\n */\n/**\n * Returns first parent container of specified {@link module:engine/view/position~Position Position}.\n * Position's parent node is checked as first, then next parents are checked.\n * Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n *\n * @param position Position used as a start point to locate parent container.\n * @returns Parent container element or `undefined` if container is not found.\n */\nfunction getParentContainer(position) {\n    let parent = position.parent;\n    while (!isContainerOrFragment(parent)) {\n        if (!parent) {\n            return undefined;\n        }\n        parent = parent.parent;\n    }\n    return parent;\n}\n/**\n * Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\n * can be wrapped outside second element. It is done by comparing elements'\n * {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\n * {@link module:engine/view/element~Element#getIdentity identities} are compared.\n */\nfunction shouldABeOutsideB(a, b) {\n    if (a.priority < b.priority) {\n        return true;\n    }\n    else if (a.priority > b.priority) {\n        return false;\n    }\n    // When priorities are equal and names are different - use identities.\n    return a.getIdentity() < b.getIdentity();\n}\n/**\n * Returns new position that is moved to near text node. Returns same position if there is no text node before of after\n * specified position.\n *\n * ```html\n * <p>foo[]</p>  ->  <p>foo{}</p>\n * <p>[]foo</p>  ->  <p>{}foo</p>\n * ```\n *\n * @returns Position located inside text node or same position if there is no text nodes\n * before or after position location.\n */\nfunction movePositionToTextNode(position) {\n    const nodeBefore = position.nodeBefore;\n    if (nodeBefore && nodeBefore.is('$text')) {\n        return new Position(nodeBefore, nodeBefore.data.length);\n    }\n    const nodeAfter = position.nodeAfter;\n    if (nodeAfter && nodeAfter.is('$text')) {\n        return new Position(nodeAfter, 0);\n    }\n    return position;\n}\n/**\n * Breaks text node into two text nodes when possible.\n *\n * ```html\n * <p>foo{}bar</p> -> <p>foo[]bar</p>\n * <p>{}foobar</p> -> <p>[]foobar</p>\n * <p>foobar{}</p> -> <p>foobar[]</p>\n * ```\n *\n * @param position Position that need to be placed inside text node.\n * @returns New position after breaking text node.\n */\nfunction breakTextNode(position) {\n    if (position.offset == position.parent.data.length) {\n        return new Position(position.parent.parent, position.parent.index + 1);\n    }\n    if (position.offset === 0) {\n        return new Position(position.parent.parent, position.parent.index);\n    }\n    // Get part of the text that need to be moved.\n    const textToMove = position.parent.data.slice(position.offset);\n    // Leave rest of the text in position's parent.\n    position.parent._data = position.parent.data.slice(0, position.offset);\n    // Insert new text node after position's parent text node.\n    position.parent.parent._insertChild(position.parent.index + 1, new Text(position.root.document, textToMove));\n    // Return new position between two newly created text nodes.\n    return new Position(position.parent.parent, position.parent.index + 1);\n}\n/**\n * Merges two text nodes into first node. Removes second node and returns merge position.\n *\n * @param t1 First text node to merge. Data from second text node will be moved at the end of this text node.\n * @param t2 Second text node to merge. This node will be removed after merging.\n * @returns Position after merging text nodes.\n */\nfunction mergeTextNodes(t1, t2) {\n    // Merge text data into first text node and remove second one.\n    const nodeBeforeLength = t1.data.length;\n    t1._data += t2.data;\n    t2._remove();\n    return new Position(t1, nodeBeforeLength);\n}\nconst validNodesToInsert = [Text, AttributeElement, ContainerElement, EmptyElement, RawElement, UIElement];\n/**\n * Checks if provided nodes are valid to insert.\n *\n * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n * contains instances that are not supported ones (see error description for valid ones.\n */\nfunction validateNodesToInsert(nodes, errorContext) {\n    for (const node of nodes) {\n        if (!validNodesToInsert.some((validNode => node instanceof validNode))) { // eslint-disable-line no-use-before-define\n            /**\n             * One of the nodes to be inserted is of an invalid type.\n             *\n             * Nodes to be inserted with {@link module:engine/view/downcastwriter~DowncastWriter#insert `DowncastWriter#insert()`} should be\n             * of the following types:\n             *\n             * * {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n             * * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n             * * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\n             * * {@link module:engine/view/uielement~UIElement UIElement},\n             * * {@link module:engine/view/rawelement~RawElement RawElement},\n             * * {@link module:engine/view/text~Text Text}.\n             *\n             * @error view-writer-insert-invalid-node-type\n             */\n            throw new CKEditorError('view-writer-insert-invalid-node-type', errorContext);\n        }\n        if (!node.is('$text')) {\n            validateNodesToInsert(node.getChildren(), errorContext);\n        }\n    }\n}\n/**\n * Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\n *\n * @returns Returns `true` if node is instance of ContainerElement or DocumentFragment.\n */\nfunction isContainerOrFragment(node) {\n    return node && (node.is('containerElement') || node.is('documentFragment'));\n}\n/**\n * Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\n * inside same {@link module:engine/view/containerelement~ContainerElement container element}.\n * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\n */\nfunction validateRangeContainer(range, errorContext) {\n    const startContainer = getParentContainer(range.start);\n    const endContainer = getParentContainer(range.end);\n    if (!startContainer || !endContainer || startContainer !== endContainer) {\n        /**\n         * The container of the given range is invalid.\n         *\n         * This may happen if {@link module:engine/view/range~Range#start range start} and\n         * {@link module:engine/view/range~Range#end range end} positions are not placed inside the same container element or\n         * a parent container for these positions cannot be found.\n         *\n         * Methods like {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#remove()`},\n         * {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#clean()`},\n         * {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#wrap()`},\n         * {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#unwrap()`} need to be called\n         * on a range that has its start and end positions located in the same container element. Both positions can be\n         * nested within other elements (e.g. an attribute element) but the closest container ancestor must be the same.\n         *\n         * @error view-writer-invalid-range-container\n         */\n        throw new CKEditorError('view-writer-invalid-range-container', errorContext);\n    }\n}\n/**\n * Checks if two attribute elements can be joined together. Elements can be joined together if, and only if\n * they do not have ids specified.\n */\nfunction canBeJoined(a, b) {\n    return a.id === null && b.id === null;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { keyCodes, isText } from '@ckeditor/ckeditor5-utils';\n/**\n * Set of utilities related to handling block and inline fillers.\n *\n * Browsers do not allow to put caret in elements which does not have height. Because of it, we need to fill all\n * empty elements which should be selectable with elements or characters called \"fillers\". Unfortunately there is no one\n * universal filler, this is why two types are uses:\n *\n * * Block filler is an element which fill block elements, like `<p>`. CKEditor uses `<br>` as a block filler during the editing,\n * as browsers do natively. So instead of an empty `<p>` there will be `<p><br></p>`. The advantage of block filler is that\n * it is transparent for the selection, so when the caret is before the `<br>` and user presses right arrow he will be\n * moved to the next paragraph, not after the `<br>`. The disadvantage is that it breaks a block, so it can not be used\n * in the middle of a line of text. The {@link module:engine/view/filler~BR_FILLER `<br>` filler} can be replaced with any other\n * character in the data output, for instance {@link module:engine/view/filler~NBSP_FILLER non-breaking space} or\n * {@link module:engine/view/filler~MARKED_NBSP_FILLER marked non-breaking space}.\n *\n * * Inline filler is a filler which does not break a line of text, so it can be used inside the text, for instance in the empty\n * `<b>` surrendered by text: `foo<b></b>bar`, if we want to put the caret there. CKEditor uses a sequence of the zero-width\n * spaces as an {@link module:engine/view/filler~INLINE_FILLER inline filler} having the predetermined\n * {@link module:engine/view/filler~INLINE_FILLER_LENGTH length}. A sequence is used, instead of a single character to\n * avoid treating random zero-width spaces as the inline filler. Disadvantage of the inline filler is that it is not\n * transparent for the selection. The arrow key moves the caret between zero-width spaces characters, so the additional\n * code is needed to handle the caret.\n *\n * Both inline and block fillers are handled by the {@link module:engine/view/renderer~Renderer renderer} and are not present in the\n * view.\n *\n * @module engine/view/filler\n */\n/**\n * Non-breaking space filler creator. This function creates the `&nbsp;` text node.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~MARKED_NBSP_FILLER\n * @see module:engine/view/filler~BR_FILLER\n */\nexport const NBSP_FILLER = (domDocument) => domDocument.createTextNode('\\u00A0');\n/**\n * Marked non-breaking space filler creator. This function creates the `<span data-cke-filler=\"true\">&nbsp;</span>` element.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~NBSP_FILLER\n * @see module:engine/view/filler~BR_FILLER\n */\nexport const MARKED_NBSP_FILLER = (domDocument) => {\n    const span = domDocument.createElement('span');\n    span.dataset.ckeFiller = 'true';\n    span.innerText = '\\u00A0';\n    return span;\n};\n/**\n * `<br>` filler creator. This function creates the `<br data-cke-filler=\"true\">` element.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~NBSP_FILLER\n * @see module:engine/view/filler~MARKED_NBSP_FILLER\n */\nexport const BR_FILLER = (domDocument) => {\n    const fillerBr = domDocument.createElement('br');\n    fillerBr.dataset.ckeFiller = 'true';\n    return fillerBr;\n};\n/**\n * Length of the {@link module:engine/view/filler~INLINE_FILLER INLINE_FILLER}.\n */\nexport const INLINE_FILLER_LENGTH = 7;\n/**\n * Inline filler which is a sequence of the word joiners.\n */\nexport const INLINE_FILLER = '\\u2060'.repeat(INLINE_FILLER_LENGTH);\n/**\n * Checks if the node is a text node which starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n * ```ts\n * startsWithFiller( document.createTextNode( INLINE_FILLER ) ); // true\n * startsWithFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // true\n * startsWithFiller( document.createTextNode( 'foo' ) ); // false\n * startsWithFiller( document.createElement( 'p' ) ); // false\n * ```\n *\n * @param domNode DOM node.\n * @returns True if the text node starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function startsWithFiller(domNode) {\n    if (typeof domNode == 'string') {\n        return domNode.substr(0, INLINE_FILLER_LENGTH) === INLINE_FILLER;\n    }\n    return isText(domNode) && (domNode.data.substr(0, INLINE_FILLER_LENGTH) === INLINE_FILLER);\n}\n/**\n * Checks if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n * ```ts\n * isInlineFiller( document.createTextNode( INLINE_FILLER ) ); // true\n * isInlineFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // false\n * ```\n *\n * @param domText DOM text node.\n * @returns True if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isInlineFiller(domText) {\n    return domText.data.length == INLINE_FILLER_LENGTH && startsWithFiller(domText);\n}\n/**\n * Get string data from the text node, removing an {@link module:engine/view/filler~INLINE_FILLER inline filler} from it,\n * if text node contains it.\n *\n * ```ts\n * getDataWithoutFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ) == 'foo' // true\n * getDataWithoutFiller( document.createTextNode( 'foo' ) ) == 'foo' // true\n * ```\n *\n * @param domText DOM text node, possible with inline filler.\n * @returns Data without filler.\n */\nexport function getDataWithoutFiller(domText) {\n    const data = typeof domText == 'string' ? domText : domText.data;\n    if (startsWithFiller(domText)) {\n        return data.slice(INLINE_FILLER_LENGTH);\n    }\n    return data;\n}\n/**\n * Assign key observer which move cursor from the end of the inline filler to the beginning of it when\n * the left arrow is pressed, so the filler does not break navigation.\n *\n * @param view View controller instance we should inject quirks handling on.\n */\nexport function injectQuirksHandling(view) {\n    view.document.on('arrowKey', jumpOverInlineFiller, { priority: 'low' });\n}\n/**\n * Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\n */\nfunction jumpOverInlineFiller(evt, data) {\n    if (data.keyCode == keyCodes.arrowleft) {\n        const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n        if (domSelection.rangeCount == 1 && domSelection.getRangeAt(0).collapsed) {\n            const domParent = domSelection.getRangeAt(0).startContainer;\n            const domOffset = domSelection.getRangeAt(0).startOffset;\n            if (startsWithFiller(domParent) && domOffset <= INLINE_FILLER_LENGTH) {\n                domSelection.collapse(domParent, 0);\n            }\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/renderer\n */\nimport ViewText from './text.js';\nimport ViewPosition from './position.js';\nimport { INLINE_FILLER, INLINE_FILLER_LENGTH, startsWithFiller, isInlineFiller } from './filler.js';\nimport { CKEditorError, ObservableMixin, diff, env, fastDiff, insertAt, isComment, isNode, isText, remove, indexOf } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/renderer.css';\n/**\n * Renderer is responsible for updating the DOM structure and the DOM selection based on\n * the {@link module:engine/view/renderer~Renderer#markToSync information about updated view nodes}.\n * In other words, it renders the view to the DOM.\n *\n * Its main responsibility is to make only the necessary, minimal changes to the DOM. However, unlike in many\n * virtual DOM implementations, the primary reason for doing minimal changes is not the performance but ensuring\n * that native editing features such as text composition, autocompletion, spell checking, selection's x-index are\n * affected as little as possible.\n *\n * Renderer uses {@link module:engine/view/domconverter~DomConverter} to transform view nodes and positions\n * to and from the DOM.\n */\nexport default class Renderer extends /* #__PURE__ */ ObservableMixin() {\n    /**\n     * Creates a renderer instance.\n     *\n     * @param domConverter Converter instance.\n     * @param selection View selection.\n     */\n    constructor(domConverter, selection) {\n        super();\n        /**\n         * Set of DOM Documents instances.\n         */\n        this.domDocuments = new Set();\n        /**\n         * Set of nodes which attributes changed and may need to be rendered.\n         */\n        this.markedAttributes = new Set();\n        /**\n         * Set of elements which child lists changed and may need to be rendered.\n         */\n        this.markedChildren = new Set();\n        /**\n         * Set of text nodes which text data changed and may need to be rendered.\n         */\n        this.markedTexts = new Set();\n        /**\n         * The text node in which the inline filler was rendered.\n         */\n        this._inlineFiller = null;\n        /**\n         * DOM element containing fake selection.\n         */\n        this._fakeSelectionContainer = null;\n        this.domConverter = domConverter;\n        this.selection = selection;\n        this.set('isFocused', false);\n        this.set('isSelecting', false);\n        this.set('isComposing', false);\n        // Rendering the selection and inline filler manipulation should be postponed in (non-Android) Blink until the user finishes\n        // creating the selection in DOM to avoid accidental selection collapsing\n        // (https://github.com/ckeditor/ckeditor5/issues/10562, https://github.com/ckeditor/ckeditor5/issues/10723).\n        // When the user stops selecting, all pending changes should be rendered ASAP, though.\n        if (env.isBlink && !env.isAndroid) {\n            this.on('change:isSelecting', () => {\n                if (!this.isSelecting) {\n                    this.render();\n                }\n            });\n        }\n    }\n    /**\n     * Marks a view node to be updated in the DOM by {@link #render `render()`}.\n     *\n     * Note that only view nodes whose parents have corresponding DOM elements need to be marked to be synchronized.\n     *\n     * @see #markedAttributes\n     * @see #markedChildren\n     * @see #markedTexts\n     *\n     * @param type Type of the change.\n     * @param node ViewNode to be marked.\n     */\n    markToSync(type, node) {\n        if (type === 'text') {\n            if (this.domConverter.mapViewToDom(node.parent)) {\n                this.markedTexts.add(node);\n            }\n        }\n        else {\n            // If the node has no DOM element it is not rendered yet,\n            // its children/attributes do not need to be marked to be sync.\n            if (!this.domConverter.mapViewToDom(node)) {\n                return;\n            }\n            if (type === 'attributes') {\n                this.markedAttributes.add(node);\n            }\n            else if (type === 'children') {\n                this.markedChildren.add(node);\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const unreachable = type;\n                /**\n                 * Unknown type passed to Renderer.markToSync.\n                 *\n                 * @error view-renderer-unknown-type\n                 */\n                throw new CKEditorError('view-renderer-unknown-type', this);\n            }\n        }\n    }\n    /**\n     * Renders all buffered changes ({@link #markedAttributes}, {@link #markedChildren} and {@link #markedTexts}) and\n     * the current view selection (if needed) to the DOM by applying a minimal set of changes to it.\n     *\n     * Renderer tries not to break the text composition (e.g. IME) and x-index of the selection,\n     * so it does as little as it is needed to update the DOM.\n     *\n     * Renderer also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed\n     * at the selection position and adds or removes it. To prevent breaking text composition inline filler will not be\n     * removed as long as the selection is in the text node which needed it at first.\n     */\n    render() {\n        // Ignore rendering while in the composition mode. Composition events are not cancellable and browser will modify the DOM tree.\n        // All marked elements, attributes, etc. will wait until next render after the composition ends.\n        // On Android composition events are immediately applied to the model, so we don't need to skip rendering,\n        // and we should not do it because the difference between view and DOM could lead to position mapping problems.\n        if (this.isComposing && !env.isAndroid) {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Rendering aborted while isComposing.',\n            // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-style: italic'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            return;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.group( '%c[Renderer]%c Rendering',\n        // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-weight: bold'\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        let inlineFillerPosition = null;\n        const isInlineFillerRenderingPossible = env.isBlink && !env.isAndroid ? !this.isSelecting : true;\n        // Refresh mappings.\n        for (const element of this.markedChildren) {\n            this._updateChildrenMappings(element);\n        }\n        // Don't manipulate inline fillers while the selection is being made in (non-Android) Blink to prevent accidental\n        // DOM selection collapsing\n        // (https://github.com/ckeditor/ckeditor5/issues/10562, https://github.com/ckeditor/ckeditor5/issues/10723).\n        if (isInlineFillerRenderingPossible) {\n            // There was inline filler rendered in the DOM but it's not\n            // at the selection position any more, so we can remove it\n            // (cause even if it's needed, it must be placed in another location).\n            if (this._inlineFiller && !this._isSelectionInInlineFiller()) {\n                this._removeInlineFiller();\n            }\n            // If we've got the filler, let's try to guess its position in the view.\n            if (this._inlineFiller) {\n                inlineFillerPosition = this._getInlineFillerPosition();\n            }\n            // Otherwise, if it's needed, create it at the selection position.\n            else if (this._needsInlineFillerAtSelection()) {\n                inlineFillerPosition = this.selection.getFirstPosition();\n                // Do not use `markToSync` so it will be added even if the parent is already added.\n                this.markedChildren.add(inlineFillerPosition.parent);\n            }\n        }\n        // Make sure the inline filler has any parent, so it can be mapped to view position by DomConverter.\n        else if (this._inlineFiller && this._inlineFiller.parentNode) {\n            // While the user is making selection, preserve the inline filler at its original position.\n            inlineFillerPosition = this.domConverter.domPositionToView(this._inlineFiller);\n            // While down-casting the document selection attributes, all existing empty\n            // attribute elements (for selection position) are removed from the view and DOM,\n            // so make sure that we were able to map filler position.\n            // https://github.com/ckeditor/ckeditor5/issues/12026\n            if (inlineFillerPosition && inlineFillerPosition.parent.is('$text')) {\n                // The inline filler position is expected to be before the text node.\n                inlineFillerPosition = ViewPosition._createBefore(inlineFillerPosition.parent);\n            }\n        }\n        for (const element of this.markedAttributes) {\n            this._updateAttrs(element);\n        }\n        for (const element of this.markedChildren) {\n            this._updateChildren(element, { inlineFillerPosition });\n        }\n        for (const node of this.markedTexts) {\n            if (!this.markedChildren.has(node.parent) && this.domConverter.mapViewToDom(node.parent)) {\n                this._updateText(node, { inlineFillerPosition });\n            }\n        }\n        // * Check whether the inline filler is required and where it really is in the DOM.\n        //   At this point in most cases it will be in the DOM, but there are exceptions.\n        //   For example, if the inline filler was deep in the created DOM structure, it will not be created.\n        //   Similarly, if it was removed at the beginning of this function and then neither text nor children were updated,\n        //   it will not be present. Fix those and similar scenarios.\n        // * Don't manipulate inline fillers while the selection is being made in (non-Android) Blink to prevent accidental\n        //   DOM selection collapsing\n        //   (https://github.com/ckeditor/ckeditor5/issues/10562, https://github.com/ckeditor/ckeditor5/issues/10723).\n        if (isInlineFillerRenderingPossible) {\n            if (inlineFillerPosition) {\n                const fillerDomPosition = this.domConverter.viewPositionToDom(inlineFillerPosition);\n                const domDocument = fillerDomPosition.parent.ownerDocument;\n                if (!startsWithFiller(fillerDomPosition.parent)) {\n                    // Filler has not been created at filler position. Create it now.\n                    this._inlineFiller = addInlineFiller(domDocument, fillerDomPosition.parent, fillerDomPosition.offset);\n                }\n                else {\n                    // Filler has been found, save it.\n                    this._inlineFiller = fillerDomPosition.parent;\n                }\n            }\n            else {\n                // There is no filler needed.\n                this._inlineFiller = null;\n            }\n        }\n        // First focus the new editing host, then update the selection.\n        // Otherwise, FF may throw an error (https://github.com/ckeditor/ckeditor5/issues/721).\n        this._updateFocus();\n        this._updateSelection();\n        this.domConverter._clearTemporaryCustomProperties();\n        this.markedTexts.clear();\n        this.markedAttributes.clear();\n        this.markedChildren.clear();\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n        // @if CK_DEBUG_TYPING // }\n    }\n    /**\n     * Updates mappings of view element's children.\n     *\n     * Children that were replaced in the view structure by similar elements (same tag name) are treated as 'replaced'.\n     * This means that their mappings can be updated so the new view elements are mapped to the existing DOM elements.\n     * Thanks to that these elements do not need to be re-rendered completely.\n     *\n     * @param viewElement The view element whose children mappings will be updated.\n     */\n    _updateChildrenMappings(viewElement) {\n        const domElement = this.domConverter.mapViewToDom(viewElement);\n        if (!domElement) {\n            // If there is no `domElement` it means that it was already removed from DOM and there is no need to process it.\n            return;\n        }\n        // Removing nodes from the DOM as we iterate can cause `actualDomChildren`\n        // (which is a live-updating `NodeList`) to get out of sync with the\n        // indices that we compute as we iterate over `actions`.\n        // This would produce incorrect element mappings.\n        //\n        // Converting live list to an array to make the list static.\n        const actualDomChildren = Array.from(domElement.childNodes);\n        const expectedDomChildren = Array.from(this.domConverter.viewChildrenToDom(viewElement, { withChildren: false }));\n        const diff = this._diffNodeLists(actualDomChildren, expectedDomChildren);\n        const actions = this._findUpdateActions(diff, actualDomChildren, expectedDomChildren, areSimilarElements);\n        if (actions.indexOf('update') !== -1) {\n            const counter = { equal: 0, insert: 0, delete: 0 };\n            for (const action of actions) {\n                if (action === 'update') {\n                    const insertIndex = counter.equal + counter.insert;\n                    const deleteIndex = counter.equal + counter.delete;\n                    const viewChild = viewElement.getChild(insertIndex);\n                    // UIElement and RawElement are special cases. Their children are not stored in a view (#799)\n                    // so we cannot use them with replacing flow (since they use view children during rendering\n                    // which will always result in rendering empty elements).\n                    if (viewChild && !viewChild.is('uiElement') && !viewChild.is('rawElement')) {\n                        this._updateElementMappings(viewChild, actualDomChildren[deleteIndex]);\n                    }\n                    remove(expectedDomChildren[insertIndex]);\n                    counter.equal++;\n                }\n                else {\n                    counter[action]++;\n                }\n            }\n        }\n    }\n    /**\n     * Updates mappings of a given view element.\n     *\n     * @param viewElement The view element whose mappings will be updated.\n     * @param domElement The DOM element representing the given view element.\n     */\n    _updateElementMappings(viewElement, domElement) {\n        // Remap 'DomConverter' bindings.\n        this.domConverter.unbindDomElement(domElement);\n        this.domConverter.bindElements(domElement, viewElement);\n        // View element may have children which needs to be updated, but are not marked, mark them to update.\n        this.markedChildren.add(viewElement);\n        // Because we replace new view element mapping with the existing one, the corresponding DOM element\n        // will not be rerendered. The new view element may have different attributes than the previous one.\n        // Since its corresponding DOM element will not be rerendered, new attributes will not be added\n        // to the DOM, so we need to mark it here to make sure its attributes gets updated. See #1427 for more\n        // detailed case study.\n        // Also there are cases where replaced element is removed from the view structure and then has\n        // its attributes changed or removed. In such cases the element will not be present in `markedAttributes`\n        // and also may be the same (`element.isSimilar()`) as the reused element not having its attributes updated.\n        // To prevent such situations we always mark reused element to have its attributes rerenderd (#1560).\n        this.markedAttributes.add(viewElement);\n    }\n    /**\n     * Gets the position of the inline filler based on the current selection.\n     * Here, we assume that we know that the filler is needed and\n     * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it is needed,\n     * it is somewhere at the selection position.\n     *\n     * Note: The filler position cannot be restored based on the filler's DOM text node, because\n     * when this method is called (before rendering), the bindings will often be broken. View-to-DOM\n     * bindings are only dependable after rendering.\n     */\n    _getInlineFillerPosition() {\n        const firstPos = this.selection.getFirstPosition();\n        if (firstPos.parent.is('$text')) {\n            return ViewPosition._createBefore(firstPos.parent);\n        }\n        else {\n            return firstPos;\n        }\n    }\n    /**\n     * Returns `true` if the selection has not left the inline filler's text node.\n     * If it is `true`, it means that the filler had been added for a reason and the selection did not\n     * leave the filler's text node. For example, the user can be in the middle of a composition so it should not be touched.\n     *\n     * @returns `true` if the inline filler and selection are in the same place.\n     */\n    _isSelectionInInlineFiller() {\n        if (this.selection.rangeCount != 1 || !this.selection.isCollapsed) {\n            return false;\n        }\n        // Note, we can't check if selection's position equals position of the\n        // this._inlineFiller node, because of #663. We may not be able to calculate\n        // the filler's position in the view at this stage.\n        // Instead, we check it the other way – whether selection is anchored in\n        // that text node or next to it.\n        // Possible options are:\n        // \"FILLER{}\"\n        // \"FILLERadded-text{}\"\n        const selectionPosition = this.selection.getFirstPosition();\n        const position = this.domConverter.viewPositionToDom(selectionPosition);\n        if (position && isText(position.parent) && startsWithFiller(position.parent)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Removes the inline filler.\n     */\n    _removeInlineFiller() {\n        const domFillerNode = this._inlineFiller;\n        // Something weird happened and the stored node doesn't contain the filler's text.\n        if (!startsWithFiller(domFillerNode)) {\n            /**\n             * The inline filler node was lost. Most likely, something overwrote the filler text node\n             * in the DOM.\n             *\n             * @error view-renderer-filler-was-lost\n             */\n            throw new CKEditorError('view-renderer-filler-was-lost', this);\n        }\n        if (isInlineFiller(domFillerNode)) {\n            domFillerNode.remove();\n        }\n        else {\n            domFillerNode.data = domFillerNode.data.substr(INLINE_FILLER_LENGTH);\n        }\n        this._inlineFiller = null;\n    }\n    /**\n     * Checks if the inline {@link module:engine/view/filler filler} should be added.\n     *\n     * @returns `true` if the inline filler should be added.\n     */\n    _needsInlineFillerAtSelection() {\n        if (this.selection.rangeCount != 1 || !this.selection.isCollapsed) {\n            return false;\n        }\n        const selectionPosition = this.selection.getFirstPosition();\n        const selectionParent = selectionPosition.parent;\n        const selectionOffset = selectionPosition.offset;\n        // If there is no DOM root we do not care about fillers.\n        if (!this.domConverter.mapViewToDom(selectionParent.root)) {\n            return false;\n        }\n        if (!(selectionParent.is('element'))) {\n            return false;\n        }\n        // Prevent adding inline filler inside elements with contenteditable=false.\n        // https://github.com/ckeditor/ckeditor5-engine/issues/1170\n        if (!isEditable(selectionParent)) {\n            return false;\n        }\n        const nodeBefore = selectionPosition.nodeBefore;\n        const nodeAfter = selectionPosition.nodeAfter;\n        if (nodeBefore instanceof ViewText || nodeAfter instanceof ViewText) {\n            return false;\n        }\n        // We have block filler, we do not need inline one.\n        if (selectionOffset === selectionParent.getFillerOffset() && (!nodeBefore || !nodeBefore.is('element', 'br'))) {\n            return false;\n        }\n        // Do not use inline filler while typing outside inline elements on Android.\n        // The deleteContentBackward would remove part of the inline filler instead of removing last letter in a link.\n        if (env.isAndroid && (nodeBefore || nodeAfter)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Checks if text needs to be updated and possibly updates it.\n     *\n     * @param viewText View text to update.\n     * @param options.inlineFillerPosition The position where the inline filler should be rendered.\n     */\n    _updateText(viewText, options) {\n        const domText = this.domConverter.findCorrespondingDomText(viewText);\n        const newDomText = this.domConverter.viewToDom(viewText);\n        let expectedText = newDomText.data;\n        const filler = options.inlineFillerPosition;\n        if (filler && filler.parent == viewText.parent && filler.offset == viewText.index) {\n            expectedText = INLINE_FILLER + expectedText;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.group( '%c[Renderer]%c Update text',\n        // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-weight: normal'\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        this._updateTextNode(domText, expectedText);\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n        // @if CK_DEBUG_TYPING // }\n    }\n    /**\n     * Checks if attribute list needs to be updated and possibly updates it.\n     *\n     * @param viewElement The view element to update.\n     */\n    _updateAttrs(viewElement) {\n        const domElement = this.domConverter.mapViewToDom(viewElement);\n        if (!domElement) {\n            // If there is no `domElement` it means that 'viewElement' is outdated as its mapping was updated\n            // in 'this._updateChildrenMappings()'. There is no need to process it as new view element which\n            // replaced old 'viewElement' mapping was also added to 'this.markedAttributes'\n            // in 'this._updateChildrenMappings()' so it will be processed separately.\n            return;\n        }\n        // Remove attributes from DOM elements if they do not exist in the view.\n        //\n        // Note: It is important to first remove DOM attributes and then set new ones, because some view attributes may be renamed\n        // as they are set on DOM (due to unsafe attributes handling). If we set the view attribute first, and then remove\n        // non-existing DOM attributes, then we would remove the attribute that we just set.\n        //\n        // Note: The domElement.attributes is a live collection, so we need to convert it to an array to avoid issues.\n        for (const domAttr of Array.from(domElement.attributes)) {\n            const key = domAttr.name;\n            // All other attributes not present in the DOM should be removed.\n            if (!viewElement.hasAttribute(key)) {\n                this.domConverter.removeDomElementAttribute(domElement, key);\n            }\n        }\n        // Add or overwrite attributes.\n        for (const key of viewElement.getAttributeKeys()) {\n            this.domConverter.setDomElementAttribute(domElement, key, viewElement.getAttribute(key), viewElement);\n        }\n    }\n    /**\n     * Checks if elements child list needs to be updated and possibly updates it.\n     *\n     * Note that on Android, to reduce the risk of composition breaks, it tries to update data of an existing\n     * child text nodes instead of replacing them completely.\n     *\n     * @param viewElement View element to update.\n     * @param options.inlineFillerPosition The position where the inline filler should be rendered.\n     */\n    _updateChildren(viewElement, options) {\n        const domElement = this.domConverter.mapViewToDom(viewElement);\n        if (!domElement) {\n            // If there is no `domElement` it means that it was already removed from DOM.\n            // There is no need to process it. It will be processed when re-inserted.\n            return;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.group( '%c[Renderer]%c Update children',\n        // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-weight: normal'\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        // IME on Android inserts a new text node while typing after a link\n        // instead of updating an existing text node that follows the link.\n        // We must normalize those text nodes so the diff won't get confused.\n        // https://github.com/ckeditor/ckeditor5/issues/12574.\n        if (env.isAndroid) {\n            let previousDomNode = null;\n            for (const domNode of Array.from(domElement.childNodes)) {\n                if (previousDomNode && isText(previousDomNode) && isText(domNode)) {\n                    domElement.normalize();\n                    break;\n                }\n                previousDomNode = domNode;\n            }\n        }\n        const inlineFillerPosition = options.inlineFillerPosition;\n        const actualDomChildren = domElement.childNodes;\n        const expectedDomChildren = Array.from(this.domConverter.viewChildrenToDom(viewElement, { bind: true }));\n        // Inline filler element has to be created as it is present in the DOM, but not in the view. It is required\n        // during diffing so text nodes could be compared correctly and also during rendering to maintain\n        // proper order and indexes while updating the DOM.\n        if (inlineFillerPosition && inlineFillerPosition.parent === viewElement) {\n            addInlineFiller(domElement.ownerDocument, expectedDomChildren, inlineFillerPosition.offset);\n        }\n        const diff = this._diffNodeLists(actualDomChildren, expectedDomChildren);\n        // We need to make sure that we update the existing text node and not replace it with another one.\n        // The composition and different \"language\" browser extensions are fragile to text node being completely replaced.\n        const actions = this._findUpdateActions(diff, actualDomChildren, expectedDomChildren, areTextNodes);\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping && actions.every( a => a == 'equal' ) ) {\n        // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Nothing to update.',\n        // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-style: italic'\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        let i = 0;\n        const nodesToUnbind = new Set();\n        // Handle deletions first.\n        // This is to prevent a situation where an element that already exists in `actualDomChildren` is inserted at a different\n        // index in `actualDomChildren`. Since `actualDomChildren` is a `NodeList`, this works like move, not like an insert,\n        // and it disrupts the whole algorithm. See https://github.com/ckeditor/ckeditor5/issues/6367.\n        //\n        // It doesn't matter in what order we remove or add nodes, as long as we remove and add correct nodes at correct indexes.\n        for (const action of actions) {\n            if (action === 'delete') {\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING //\tconst node = actualDomChildren[ i ];\n                // @if CK_DEBUG_TYPING // \tif ( isText( node ) ) {\n                // @if CK_DEBUG_TYPING // \t\tconsole.info( '%c[Renderer]%c Remove text node' +\n                // @if CK_DEBUG_TYPING // \t\t\t`${ this.isComposing ? ' while composing (may break composition)' : '' }: ` +\n                // @if CK_DEBUG_TYPING // \t\t\t`%c${ _escapeTextNodeData( node.data ) }%c (${ node.data.length })`,\n                // @if CK_DEBUG_TYPING // \t\t\t'color: green; font-weight: bold',\n                // @if CK_DEBUG_TYPING // \t\t\tthis.isComposing ? 'color: red; font-weight: bold' : '', 'color: blue', ''\n                // @if CK_DEBUG_TYPING // \t\t);\n                // @if CK_DEBUG_TYPING // \t} else {\n                // @if CK_DEBUG_TYPING // \t\tconsole.info( '%c[Renderer]%c Remove element' +\n                // @if CK_DEBUG_TYPING // \t\t\t`${ this.isComposing ? ' while composing (may break composition)' : '' }: `,\n                // @if CK_DEBUG_TYPING // \t\t\t'color: green; font-weight: bold',\n                // @if CK_DEBUG_TYPING // \t\t\tthis.isComposing ? 'color: red; font-weight: bold' : '',\n                // @if CK_DEBUG_TYPING // \t\t\tnode\n                // @if CK_DEBUG_TYPING // \t\t);\n                // @if CK_DEBUG_TYPING // \t}\n                // @if CK_DEBUG_TYPING // }\n                nodesToUnbind.add(actualDomChildren[i]);\n                remove(actualDomChildren[i]);\n            }\n            else if (action === 'equal' || action === 'update') {\n                i++;\n            }\n        }\n        i = 0;\n        for (const action of actions) {\n            if (action === 'insert') {\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING //\tconst node = expectedDomChildren[ i ];\n                // @if CK_DEBUG_TYPING //\tif ( isText( node ) ) {\n                // @if CK_DEBUG_TYPING //\t\tconsole.info( '%c[Renderer]%c Insert text node' +\n                // @if CK_DEBUG_TYPING //\t\t\t`${ this.isComposing ? ' while composing (may break composition)' : '' }: ` +\n                // @if CK_DEBUG_TYPING //\t\t\t`%c${ _escapeTextNodeData( node.data ) }%c (${ node.data.length })`,\n                // @if CK_DEBUG_TYPING //\t\t\t'color: green; font-weight: bold',\n                // @if CK_DEBUG_TYPING //\t\t\tthis.isComposing ? 'color: red; font-weight: bold' : '',\n                // @if CK_DEBUG_TYPING //\t\t\t'color: blue', ''\n                // @if CK_DEBUG_TYPING //\t\t);\n                // @if CK_DEBUG_TYPING //\t} else {\n                // @if CK_DEBUG_TYPING //\t\tconsole.info( '%c[Renderer]%c Insert element:',\n                // @if CK_DEBUG_TYPING //\t\t\t'color: green; font-weight: bold', 'font-weight: normal',\n                // @if CK_DEBUG_TYPING //\t\t\tnode\n                // @if CK_DEBUG_TYPING //\t\t);\n                // @if CK_DEBUG_TYPING //\t}\n                // @if CK_DEBUG_TYPING // }\n                insertAt(domElement, i, expectedDomChildren[i]);\n                i++;\n            }\n            // Update the existing text node data.\n            else if (action === 'update') {\n                this._updateTextNode(actualDomChildren[i], expectedDomChildren[i].data);\n                i++;\n            }\n            else if (action === 'equal') {\n                // Force updating text nodes inside elements which did not change and do not need to be re-rendered (#1125).\n                // Do it here (not in the loop above) because only after insertions the `i` index is correct.\n                this._markDescendantTextToSync(this.domConverter.domToView(expectedDomChildren[i]));\n                i++;\n            }\n        }\n        // Unbind removed nodes. When node does not have a parent it means that it was removed from DOM tree during\n        // comparison with the expected DOM. We don't need to check child nodes, because if child node was reinserted,\n        // it was moved to DOM tree out of the removed node.\n        for (const node of nodesToUnbind) {\n            if (!node.parentNode) {\n                this.domConverter.unbindDomElement(node);\n            }\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n        // @if CK_DEBUG_TYPING // }\n    }\n    /**\n     * Shorthand for diffing two arrays or node lists of DOM nodes.\n     *\n     * @param actualDomChildren Actual DOM children\n     * @param expectedDomChildren Expected DOM children.\n     * @returns The list of actions based on the {@link module:utils/diff~diff} function.\n     */\n    _diffNodeLists(actualDomChildren, expectedDomChildren) {\n        actualDomChildren = filterOutFakeSelectionContainer(actualDomChildren, this._fakeSelectionContainer);\n        return diff(actualDomChildren, expectedDomChildren, sameNodes.bind(null, this.domConverter));\n    }\n    /**\n     * Finds DOM nodes that were replaced with the similar nodes (same tag name) in the view. All nodes are compared\n     * within one `insert`/`delete` action group, for example:\n     *\n     * ```\n     * Actual DOM:\t\t<p><b>Foo</b>Bar<i>Baz</i><b>Bax</b></p>\n     * Expected DOM:\t<p>Bar<b>123</b><i>Baz</i><b>456</b></p>\n     * Input actions:\t[ insert, insert, delete, delete, equal, insert, delete ]\n     * Output actions:\t[ insert, replace, delete, equal, replace ]\n     * ```\n     *\n     * @param actions Actions array which is a result of the {@link module:utils/diff~diff} function.\n     * @param actualDom Actual DOM children\n     * @param expectedDom Expected DOM children.\n     * @param comparator A comparator function that should return `true` if the given node should be reused\n     * (either by the update of a text node data or an element children list for similar elements).\n     * @returns Actions array modified with the `update` actions.\n     */\n    _findUpdateActions(actions, actualDom, expectedDom, comparator) {\n        // If there is no both 'insert' and 'delete' actions, no need to check for replaced elements.\n        if (actions.indexOf('insert') === -1 || actions.indexOf('delete') === -1) {\n            return actions;\n        }\n        let newActions = [];\n        let actualSlice = [];\n        let expectedSlice = [];\n        const counter = { equal: 0, insert: 0, delete: 0 };\n        for (const action of actions) {\n            if (action === 'insert') {\n                expectedSlice.push(expectedDom[counter.equal + counter.insert]);\n            }\n            else if (action === 'delete') {\n                actualSlice.push(actualDom[counter.equal + counter.delete]);\n            }\n            else { // equal\n                newActions = newActions.concat(diff(actualSlice, expectedSlice, comparator)\n                    .map(action => action === 'equal' ? 'update' : action));\n                newActions.push('equal');\n                // Reset stored elements on 'equal'.\n                actualSlice = [];\n                expectedSlice = [];\n            }\n            counter[action]++;\n        }\n        return newActions.concat(diff(actualSlice, expectedSlice, comparator)\n            .map(action => action === 'equal' ? 'update' : action));\n    }\n    /**\n     * Checks if text needs to be updated and possibly updates it by removing and inserting only parts\n     * of the data from the existing text node to reduce impact on the IME composition.\n     *\n     * @param domText DOM text node to update.\n     * @param expectedText The expected data of a text node.\n     */\n    _updateTextNode(domText, expectedText) {\n        const actualText = domText.data;\n        if (actualText == expectedText) {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Text node does not need update:%c ' +\n            // @if CK_DEBUG_TYPING // \t\t`${ _escapeTextNodeData( actualText ) }%c (${ actualText.length })`,\n            // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-style: italic', 'color: blue', ''\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            return;\n        }\n        // Our approach to interleaving space character with NBSP might differ with the one implemented by the browser.\n        // Avoid modifying the text node in the DOM if only NBSPs and spaces are interchanged.\n        // We should avoid DOM modifications while composing to avoid breakage of composition.\n        // See: https://github.com/ckeditor/ckeditor5/issues/13994.\n        if (env.isAndroid && this.isComposing && actualText.replace(/\\u00A0/g, ' ') == expectedText.replace(/\\u00A0/g, ' ')) {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Text node ignore NBSP changes while composing: ' +\n            // @if CK_DEBUG_TYPING // \t\t`%c${ _escapeTextNodeData( actualText ) }%c (${ actualText.length }) ->` +\n            // @if CK_DEBUG_TYPING // \t\t` %c${ _escapeTextNodeData( expectedText ) }%c (${ expectedText.length })`,\n            // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-style: italic', 'color: blue', '', 'color: blue', ''\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            return;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Update text node' +\n        // @if CK_DEBUG_TYPING // \t\t`${ this.isComposing ? ' while composing (may break composition)' : '' }: ` +\n        // @if CK_DEBUG_TYPING // \t\t`%c${ _escapeTextNodeData( actualText ) }%c (${ actualText.length }) ->` +\n        // @if CK_DEBUG_TYPING // \t\t` %c${ _escapeTextNodeData( expectedText ) }%c (${ expectedText.length })`,\n        // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', this.isComposing ? 'color: red; font-weight: bold' : '',\n        // @if CK_DEBUG_TYPING // \t\t'color: blue', '', 'color: blue', ''\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        this._updateTextNodeInternal(domText, expectedText);\n    }\n    /**\n     * Part of the `_updateTextNode` method extracted for easier testing.\n     */\n    _updateTextNodeInternal(domText, expectedText) {\n        const actions = fastDiff(domText.data, expectedText);\n        for (const action of actions) {\n            if (action.type === 'insert') {\n                domText.insertData(action.index, action.values.join(''));\n            }\n            else { // 'delete'\n                domText.deleteData(action.index, action.howMany);\n            }\n        }\n    }\n    /**\n     * Marks text nodes to be synchronized.\n     *\n     * If a text node is passed, it will be marked. If an element is passed, all descendant text nodes inside it will be marked.\n     *\n     * @param viewNode View node to sync.\n     */\n    _markDescendantTextToSync(viewNode) {\n        if (!viewNode) {\n            return;\n        }\n        if (viewNode.is('$text')) {\n            this.markedTexts.add(viewNode);\n        }\n        else if (viewNode.is('element')) {\n            for (const child of viewNode.getChildren()) {\n                this._markDescendantTextToSync(child);\n            }\n        }\n    }\n    /**\n     * Checks if the selection needs to be updated and possibly updates it.\n     */\n    _updateSelection() {\n        // Block updating DOM selection in (non-Android) Blink while the user is selecting to prevent accidental selection collapsing.\n        // Note: Structural changes in DOM must trigger selection rendering, though. Nodes the selection was anchored\n        // to, may disappear in DOM which would break the selection (e.g. in real-time collaboration scenarios).\n        // https://github.com/ckeditor/ckeditor5/issues/10562, https://github.com/ckeditor/ckeditor5/issues/10723\n        if (env.isBlink && !env.isAndroid && this.isSelecting && !this.markedChildren.size) {\n            return;\n        }\n        // If there is no selection - remove DOM and fake selections.\n        if (this.selection.rangeCount === 0) {\n            this._removeDomSelection();\n            this._removeFakeSelection();\n            return;\n        }\n        const domRoot = this.domConverter.mapViewToDom(this.selection.editableElement);\n        // Do nothing if there is no focus, or there is no DOM element corresponding to selection's editable element.\n        if (!this.isFocused || !domRoot) {\n            return;\n        }\n        // Render fake selection - create the fake selection container (if needed) and move DOM selection to it.\n        if (this.selection.isFake) {\n            this._updateFakeSelection(domRoot);\n        }\n        // There was a fake selection so remove it and update the DOM selection.\n        // This is especially important on Android because otherwise IME will try to compose over the fake selection container.\n        else if (this._fakeSelectionContainer && this._fakeSelectionContainer.isConnected) {\n            this._removeFakeSelection();\n            this._updateDomSelection(domRoot);\n        }\n        // Update the DOM selection in case of a plain selection change (no fake selection is involved).\n        // On non-Android the whole rendering is disabled in composition mode (including DOM selection update),\n        // but updating DOM selection should be also disabled on Android if in the middle of the composition\n        // (to not interrupt it).\n        else if (!(this.isComposing && env.isAndroid)) {\n            this._updateDomSelection(domRoot);\n        }\n    }\n    /**\n     * Updates the fake selection.\n     *\n     * @param domRoot A valid DOM root where the fake selection container should be added.\n     */\n    _updateFakeSelection(domRoot) {\n        const domDocument = domRoot.ownerDocument;\n        if (!this._fakeSelectionContainer) {\n            this._fakeSelectionContainer = createFakeSelectionContainer(domDocument);\n        }\n        const container = this._fakeSelectionContainer;\n        // Bind fake selection container with the current selection *position*.\n        this.domConverter.bindFakeSelection(container, this.selection);\n        if (!this._fakeSelectionNeedsUpdate(domRoot)) {\n            return;\n        }\n        if (!container.parentElement || container.parentElement != domRoot) {\n            domRoot.appendChild(container);\n        }\n        container.textContent = this.selection.fakeSelectionLabel || '\\u00A0';\n        const domSelection = domDocument.getSelection();\n        const domRange = domDocument.createRange();\n        domSelection.removeAllRanges();\n        domRange.selectNodeContents(container);\n        domSelection.addRange(domRange);\n    }\n    /**\n     * Updates the DOM selection.\n     *\n     * @param domRoot A valid DOM root where the DOM selection should be rendered.\n     */\n    _updateDomSelection(domRoot) {\n        const domSelection = domRoot.ownerDocument.defaultView.getSelection();\n        // Let's check whether DOM selection needs updating at all.\n        if (!this._domSelectionNeedsUpdate(domSelection)) {\n            return;\n        }\n        // Multi-range selection is not available in most browsers, and, at least in Chrome, trying to\n        // set such selection, that is not continuous, throws an error. Because of that, we will just use anchor\n        // and focus of view selection.\n        // Since we are not supporting multi-range selection, we also do not need to check if proper editable is\n        // selected. If there is any editable selected, it is okay (editable is taken from selection anchor).\n        const anchor = this.domConverter.viewPositionToDom(this.selection.anchor);\n        const focus = this.domConverter.viewPositionToDom(this.selection.focus);\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Update DOM selection:',\n        // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', '', anchor, focus\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        domSelection.setBaseAndExtent(anchor.parent, anchor.offset, focus.parent, focus.offset);\n        // Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n        if (env.isGecko) {\n            fixGeckoSelectionAfterBr(focus, domSelection);\n        }\n    }\n    /**\n     * Checks whether a given DOM selection needs to be updated.\n     *\n     * @param domSelection The DOM selection to check.\n     */\n    _domSelectionNeedsUpdate(domSelection) {\n        if (!this.domConverter.isDomSelectionCorrect(domSelection)) {\n            // Current DOM selection is in incorrect position. We need to update it.\n            return true;\n        }\n        const oldViewSelection = domSelection && this.domConverter.domSelectionToView(domSelection);\n        if (oldViewSelection && this.selection.isEqual(oldViewSelection)) {\n            return false;\n        }\n        // If selection is not collapsed, it does not need to be updated if it is similar.\n        if (!this.selection.isCollapsed && this.selection.isSimilar(oldViewSelection)) {\n            // Selection did not changed and is correct, do not update.\n            return false;\n        }\n        // Selections are not similar.\n        return true;\n    }\n    /**\n     * Checks whether the fake selection needs to be updated.\n     *\n     * @param domRoot A valid DOM root where a new fake selection container should be added.\n     */\n    _fakeSelectionNeedsUpdate(domRoot) {\n        const container = this._fakeSelectionContainer;\n        const domSelection = domRoot.ownerDocument.getSelection();\n        // Fake selection needs to be updated if there's no fake selection container, or the container currently sits\n        // in a different root.\n        if (!container || container.parentElement !== domRoot) {\n            return true;\n        }\n        // Make sure that the selection actually is within the fake selection.\n        if (domSelection.anchorNode !== container && !container.contains(domSelection.anchorNode)) {\n            return true;\n        }\n        return container.textContent !== this.selection.fakeSelectionLabel;\n    }\n    /**\n     * Removes the DOM selection.\n     */\n    _removeDomSelection() {\n        for (const doc of this.domDocuments) {\n            const domSelection = doc.getSelection();\n            if (domSelection.rangeCount) {\n                const activeDomElement = doc.activeElement;\n                const viewElement = this.domConverter.mapDomToView(activeDomElement);\n                if (activeDomElement && viewElement) {\n                    domSelection.removeAllRanges();\n                }\n            }\n        }\n    }\n    /**\n     * Removes the fake selection.\n     */\n    _removeFakeSelection() {\n        const container = this._fakeSelectionContainer;\n        if (container) {\n            container.remove();\n        }\n    }\n    /**\n     * Checks if focus needs to be updated and possibly updates it.\n     */\n    _updateFocus() {\n        if (this.isFocused) {\n            const editable = this.selection.editableElement;\n            if (editable) {\n                this.domConverter.focus(editable);\n            }\n        }\n    }\n}\n/**\n * Checks if provided element is editable.\n */\nfunction isEditable(element) {\n    if (element.getAttribute('contenteditable') == 'false') {\n        return false;\n    }\n    const parent = element.findAncestor(element => element.hasAttribute('contenteditable'));\n    return !parent || parent.getAttribute('contenteditable') == 'true';\n}\n/**\n * Adds inline filler at a given position.\n *\n * The position can be given as an array of DOM nodes and an offset in that array,\n * or a DOM parent element and an offset in that element.\n *\n * @returns The DOM text node that contains an inline filler.\n */\nfunction addInlineFiller(domDocument, domParentOrArray, offset) {\n    const childNodes = domParentOrArray instanceof Array ? domParentOrArray : domParentOrArray.childNodes;\n    const nodeAfterFiller = childNodes[offset];\n    if (isText(nodeAfterFiller)) {\n        nodeAfterFiller.data = INLINE_FILLER + nodeAfterFiller.data;\n        return nodeAfterFiller;\n    }\n    else {\n        const fillerNode = domDocument.createTextNode(INLINE_FILLER);\n        if (Array.isArray(domParentOrArray)) {\n            childNodes.splice(offset, 0, fillerNode);\n        }\n        else {\n            insertAt(domParentOrArray, offset, fillerNode);\n        }\n        return fillerNode;\n    }\n}\n/**\n * Whether two DOM nodes should be considered as similar.\n * Nodes are considered similar if they have the same tag name.\n */\nfunction areSimilarElements(node1, node2) {\n    return isNode(node1) && isNode(node2) &&\n        !isText(node1) && !isText(node2) &&\n        !isComment(node1) && !isComment(node2) &&\n        node1.tagName.toLowerCase() === node2.tagName.toLowerCase();\n}\n/**\n * Whether two DOM nodes are text nodes.\n */\nfunction areTextNodes(node1, node2) {\n    return isNode(node1) && isNode(node2) &&\n        isText(node1) && isText(node2);\n}\n/**\n * Whether two dom nodes should be considered as the same.\n * Two nodes which are considered the same are:\n *\n * * Text nodes with the same text.\n * * Element nodes represented by the same object.\n * * Two block filler elements.\n *\n * @param blockFillerMode Block filler mode, see {@link module:engine/view/domconverter~DomConverter#blockFillerMode}.\n */\nfunction sameNodes(domConverter, actualDomChild, expectedDomChild) {\n    // Elements.\n    if (actualDomChild === expectedDomChild) {\n        return true;\n    }\n    // Texts.\n    else if (isText(actualDomChild) && isText(expectedDomChild)) {\n        return actualDomChild.data === expectedDomChild.data;\n    }\n    // Block fillers.\n    else if (domConverter.isBlockFiller(actualDomChild) &&\n        domConverter.isBlockFiller(expectedDomChild)) {\n        return true;\n    }\n    // Not matching types.\n    return false;\n}\n/**\n * The following is a Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n * When the native DOM selection is at the end of the block and preceded by <br /> e.g.\n *\n * ```html\n * <p>foo<br/>[]</p>\n * ```\n *\n * which happens a lot when using the soft line break, the browser fails to (visually) move the\n * caret to the new line. A quick fix is as simple as force–refreshing the selection with the same range.\n */\nfunction fixGeckoSelectionAfterBr(focus, domSelection) {\n    let parent = focus.parent;\n    let offset = focus.offset;\n    if (isText(parent) && isInlineFiller(parent)) {\n        offset = indexOf(parent) + 1;\n        parent = parent.parentNode;\n    }\n    // This fix works only when the focus point is at the very end of an element.\n    // There is no point in running it in cases unrelated to the browser bug.\n    if (parent.nodeType != Node.ELEMENT_NODE || offset != parent.childNodes.length - 1) {\n        return;\n    }\n    const childAtOffset = parent.childNodes[offset];\n    // To stay on the safe side, the fix being as specific as possible, it targets only the\n    // selection which is at the very end of the element and preceded by <br />.\n    if (childAtOffset && childAtOffset.tagName == 'BR') {\n        domSelection.addRange(domSelection.getRangeAt(0));\n    }\n}\nfunction filterOutFakeSelectionContainer(domChildList, fakeSelectionContainer) {\n    const childList = Array.from(domChildList);\n    if (childList.length == 0 || !fakeSelectionContainer) {\n        return childList;\n    }\n    const last = childList[childList.length - 1];\n    if (last == fakeSelectionContainer) {\n        childList.pop();\n    }\n    return childList;\n}\n/**\n * Creates a fake selection container for a given document.\n */\nfunction createFakeSelectionContainer(domDocument) {\n    const container = domDocument.createElement('div');\n    container.className = 'ck-fake-selection-container';\n    Object.assign(container.style, {\n        position: 'fixed',\n        top: 0,\n        left: '-9999px',\n        // See https://github.com/ckeditor/ckeditor5/issues/752.\n        width: '42px'\n    });\n    // Fill it with a text node so we can update it later.\n    container.textContent = '\\u00A0';\n    return container;\n}\n// @if CK_DEBUG_TYPING // function _escapeTextNodeData( text ) {\n// @if CK_DEBUG_TYPING // \tconst escapedText = text\n// @if CK_DEBUG_TYPING // \t\t.replace( /&/g, '&amp;' )\n// @if CK_DEBUG_TYPING // \t\t.replace( /\\u00A0/g, '&nbsp;' )\n// @if CK_DEBUG_TYPING // \t\t.replace( /\\u2060/g, '&NoBreak;' );\n// @if CK_DEBUG_TYPING //\n// @if CK_DEBUG_TYPING // \treturn `\"${ escapedText }\"`;\n// @if CK_DEBUG_TYPING // }\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/domconverter\n */\n/* globals Node, NodeFilter, DOMParser */\nimport ViewText from './text.js';\nimport ViewElement from './element.js';\nimport ViewUIElement from './uielement.js';\nimport ViewPosition from './position.js';\nimport ViewRange from './range.js';\nimport ViewSelection from './selection.js';\nimport ViewDocumentFragment from './documentfragment.js';\nimport ViewTreeWalker from './treewalker.js';\nimport { default as Matcher } from './matcher.js';\nimport { BR_FILLER, INLINE_FILLER_LENGTH, NBSP_FILLER, MARKED_NBSP_FILLER, getDataWithoutFiller, isInlineFiller, startsWithFiller } from './filler.js';\nimport { global, logWarning, indexOf, getAncestors, isText, isComment, isValidAttributeName, first, env } from '@ckeditor/ckeditor5-utils';\nconst BR_FILLER_REF = BR_FILLER(global.document); // eslint-disable-line new-cap\nconst NBSP_FILLER_REF = NBSP_FILLER(global.document); // eslint-disable-line new-cap\nconst MARKED_NBSP_FILLER_REF = MARKED_NBSP_FILLER(global.document); // eslint-disable-line new-cap\nconst UNSAFE_ATTRIBUTE_NAME_PREFIX = 'data-ck-unsafe-attribute-';\nconst UNSAFE_ELEMENT_REPLACEMENT_ATTRIBUTE = 'data-ck-unsafe-element';\n/**\n * `DomConverter` is a set of tools to do transformations between DOM nodes and view nodes. It also handles\n * {@link module:engine/view/domconverter~DomConverter#bindElements bindings} between these nodes.\n *\n * An instance of the DOM converter is available under\n * {@link module:engine/view/view~View#domConverter `editor.editing.view.domConverter`}.\n *\n * The DOM converter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep the\n * state of a tree nor keeps the synchronization between the tree view and the DOM tree (use {@link module:engine/view/document~Document}).\n *\n * The DOM converter keeps DOM elements to view element bindings, so when the converter gets destroyed, the bindings are lost.\n * Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\n */\nexport default class DomConverter {\n    /**\n     * Creates a DOM converter.\n     *\n     * @param document The view document instance.\n     * @param options An object with configuration options.\n     * @param options.blockFillerMode The type of the block filler to use.\n     * Default value depends on the options.renderingMode:\n     *  'nbsp' when options.renderingMode == 'data',\n     *  'br' when options.renderingMode == 'editing'.\n     * @param options.renderingMode Whether to leave the View-to-DOM conversion result unchanged\n     * or improve editing experience by filtering out interactive data.\n     */\n    constructor(document, { blockFillerMode, renderingMode = 'editing' } = {}) {\n        /**\n         * The DOM-to-view mapping.\n         */\n        this._domToViewMapping = new WeakMap();\n        /**\n         * The view-to-DOM mapping.\n         */\n        this._viewToDomMapping = new WeakMap();\n        /**\n         * Holds the mapping between fake selection containers and corresponding view selections.\n         */\n        this._fakeSelectionMapping = new WeakMap();\n        /**\n         * Matcher for view elements whose content should be treated as raw data\n         * and not processed during the conversion from DOM nodes to view elements.\n         */\n        this._rawContentElementMatcher = new Matcher();\n        /**\n         * Matcher for inline object view elements. This is an extension of a simple {@link #inlineObjectElements} array of element names.\n         */\n        this._inlineObjectElementMatcher = new Matcher();\n        /**\n         * Set of elements with temporary custom properties that require clearing after render.\n         */\n        this._elementsWithTemporaryCustomProperties = new Set();\n        this.document = document;\n        this.renderingMode = renderingMode;\n        this.blockFillerMode = blockFillerMode || (renderingMode === 'editing' ? 'br' : 'nbsp');\n        this.preElements = ['pre', 'textarea'];\n        this.blockElements = [\n            'address', 'article', 'aside', 'blockquote', 'caption', 'center', 'dd', 'details', 'dir', 'div',\n            'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header',\n            'hgroup', 'legend', 'li', 'main', 'menu', 'nav', 'ol', 'p', 'pre', 'section', 'summary', 'table', 'tbody',\n            'td', 'tfoot', 'th', 'thead', 'tr', 'ul'\n        ];\n        this.inlineObjectElements = [\n            'object', 'iframe', 'input', 'button', 'textarea', 'select', 'option', 'video', 'embed', 'audio', 'img', 'canvas'\n        ];\n        this.unsafeElements = ['script', 'style'];\n        this._domDocument = this.renderingMode === 'editing' ? global.document : global.document.implementation.createHTMLDocument('');\n    }\n    /**\n     * Binds a given DOM element that represents fake selection to a **position** of a\n     * {@link module:engine/view/documentselection~DocumentSelection document selection}.\n     * Document selection copy is stored and can be retrieved by the\n     * {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView} method.\n     */\n    bindFakeSelection(domElement, viewDocumentSelection) {\n        this._fakeSelectionMapping.set(domElement, new ViewSelection(viewDocumentSelection));\n    }\n    /**\n     * Returns a {@link module:engine/view/selection~Selection view selection} instance corresponding to a given\n     * DOM element that represents fake selection. Returns `undefined` if binding to the given DOM element does not exist.\n     */\n    fakeSelectionToView(domElement) {\n        return this._fakeSelectionMapping.get(domElement);\n    }\n    /**\n     * Binds DOM and view elements, so it will be possible to get corresponding elements using\n     * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n     * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n     *\n     * @param domElement The DOM element to bind.\n     * @param viewElement The view element to bind.\n     */\n    bindElements(domElement, viewElement) {\n        this._domToViewMapping.set(domElement, viewElement);\n        this._viewToDomMapping.set(viewElement, domElement);\n    }\n    /**\n     * Unbinds a given DOM element from the view element it was bound to. Unbinding is deep, meaning that all children of\n     * the DOM element will be unbound too.\n     *\n     * @param domElement The DOM element to unbind.\n     */\n    unbindDomElement(domElement) {\n        const viewElement = this._domToViewMapping.get(domElement);\n        if (viewElement) {\n            this._domToViewMapping.delete(domElement);\n            this._viewToDomMapping.delete(viewElement);\n            for (const child of domElement.children) {\n                this.unbindDomElement(child);\n            }\n        }\n    }\n    /**\n     * Binds DOM and view document fragments, so it will be possible to get corresponding document fragments using\n     * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n     * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n     *\n     * @param domFragment The DOM document fragment to bind.\n     * @param viewFragment The view document fragment to bind.\n     */\n    bindDocumentFragments(domFragment, viewFragment) {\n        this._domToViewMapping.set(domFragment, viewFragment);\n        this._viewToDomMapping.set(viewFragment, domFragment);\n    }\n    /**\n     * Decides whether a given pair of attribute key and value should be passed further down the pipeline.\n     *\n     * @param elementName Element name in lower case.\n     */\n    shouldRenderAttribute(attributeKey, attributeValue, elementName) {\n        if (this.renderingMode === 'data') {\n            return true;\n        }\n        attributeKey = attributeKey.toLowerCase();\n        if (attributeKey.startsWith('on')) {\n            return false;\n        }\n        if (attributeKey === 'srcdoc' &&\n            attributeValue.match(/\\bon\\S+\\s*=|javascript:|<\\s*\\/*script/i)) {\n            return false;\n        }\n        if (elementName === 'img' &&\n            (attributeKey === 'src' || attributeKey === 'srcset')) {\n            return true;\n        }\n        if (elementName === 'source' && attributeKey === 'srcset') {\n            return true;\n        }\n        if (attributeValue.match(/^\\s*(javascript:|data:(image\\/svg|text\\/x?html))/i)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Set `domElement`'s content using provided `html` argument. Apply necessary filtering for the editing pipeline.\n     *\n     * @param domElement DOM element that should have `html` set as its content.\n     * @param html Textual representation of the HTML that will be set on `domElement`.\n     */\n    setContentOf(domElement, html) {\n        // For data pipeline we pass the HTML as-is.\n        if (this.renderingMode === 'data') {\n            domElement.innerHTML = html;\n            return;\n        }\n        const document = new DOMParser().parseFromString(html, 'text/html');\n        const fragment = document.createDocumentFragment();\n        const bodyChildNodes = document.body.childNodes;\n        while (bodyChildNodes.length > 0) {\n            fragment.appendChild(bodyChildNodes[0]);\n        }\n        const treeWalker = document.createTreeWalker(fragment, NodeFilter.SHOW_ELEMENT);\n        const nodes = [];\n        let currentNode;\n        // eslint-disable-next-line no-cond-assign\n        while (currentNode = treeWalker.nextNode()) {\n            nodes.push(currentNode);\n        }\n        for (const currentNode of nodes) {\n            // Go through nodes to remove those that are prohibited in editing pipeline.\n            for (const attributeName of currentNode.getAttributeNames()) {\n                this.setDomElementAttribute(currentNode, attributeName, currentNode.getAttribute(attributeName));\n            }\n            const elementName = currentNode.tagName.toLowerCase();\n            // There are certain nodes, that should be renamed to <span> in editing pipeline.\n            if (this._shouldRenameElement(elementName)) {\n                _logUnsafeElement(elementName);\n                currentNode.replaceWith(this._createReplacementDomElement(elementName, currentNode));\n            }\n        }\n        // Empty the target element.\n        while (domElement.firstChild) {\n            domElement.firstChild.remove();\n        }\n        domElement.append(fragment);\n    }\n    /**\n     * Converts the view to the DOM. For all text nodes, not bound elements and document fragments new items will\n     * be created. For bound elements and document fragments the method will return corresponding items.\n     *\n     * @param viewNode View node or document fragment to transform.\n     * @param options Conversion options.\n     * @param options.bind Determines whether new elements will be bound.\n     * @param options.withChildren If `false`, node's and document fragment's children will not be converted.\n     * @returns Converted node or DocumentFragment.\n     */\n    viewToDom(viewNode, options = {}) {\n        if (viewNode.is('$text')) {\n            const textData = this._processDataFromViewText(viewNode);\n            return this._domDocument.createTextNode(textData);\n        }\n        else {\n            const viewElementOrFragment = viewNode;\n            if (this.mapViewToDom(viewElementOrFragment)) {\n                // Do not reuse element that is marked to not reuse (for example an IMG element\n                // so it can immediately display a placeholder background instead of waiting for the new src to load).\n                if (viewElementOrFragment.getCustomProperty('editingPipeline:doNotReuseOnce')) {\n                    this._elementsWithTemporaryCustomProperties.add(viewElementOrFragment);\n                }\n                else {\n                    return this.mapViewToDom(viewElementOrFragment);\n                }\n            }\n            let domElement;\n            if (viewElementOrFragment.is('documentFragment')) {\n                // Create DOM document fragment.\n                domElement = this._domDocument.createDocumentFragment();\n                if (options.bind) {\n                    this.bindDocumentFragments(domElement, viewElementOrFragment);\n                }\n            }\n            else if (viewElementOrFragment.is('uiElement')) {\n                if (viewElementOrFragment.name === '$comment') {\n                    domElement = this._domDocument.createComment(viewElementOrFragment.getCustomProperty('$rawContent'));\n                }\n                else {\n                    // UIElement has its own render() method (see #799).\n                    domElement = viewElementOrFragment.render(this._domDocument, this);\n                }\n                if (options.bind) {\n                    this.bindElements(domElement, viewElementOrFragment);\n                }\n                return domElement;\n            }\n            else {\n                // Create DOM element.\n                if (this._shouldRenameElement(viewElementOrFragment.name)) {\n                    _logUnsafeElement(viewElementOrFragment.name);\n                    domElement = this._createReplacementDomElement(viewElementOrFragment.name);\n                }\n                else if (viewElementOrFragment.hasAttribute('xmlns')) {\n                    domElement = this._domDocument.createElementNS(viewElementOrFragment.getAttribute('xmlns'), viewElementOrFragment.name);\n                }\n                else {\n                    domElement = this._domDocument.createElement(viewElementOrFragment.name);\n                }\n                // RawElement take care of their children in RawElement#render() method which can be customized\n                // (see https://github.com/ckeditor/ckeditor5/issues/4469).\n                if (viewElementOrFragment.is('rawElement')) {\n                    viewElementOrFragment.render(domElement, this);\n                }\n                if (options.bind) {\n                    this.bindElements(domElement, viewElementOrFragment);\n                }\n                // Copy element's attributes.\n                for (const key of viewElementOrFragment.getAttributeKeys()) {\n                    this.setDomElementAttribute(domElement, key, viewElementOrFragment.getAttribute(key), viewElementOrFragment);\n                }\n            }\n            if (options.withChildren !== false) {\n                for (const child of this.viewChildrenToDom(viewElementOrFragment, options)) {\n                    if (domElement instanceof HTMLTemplateElement) {\n                        domElement.content.appendChild(child);\n                    }\n                    else {\n                        domElement.appendChild(child);\n                    }\n                }\n            }\n            return domElement;\n        }\n    }\n    /**\n     * Sets the attribute on a DOM element.\n     *\n     * **Note**: To remove the attribute, use {@link #removeDomElementAttribute}.\n     *\n     * @param domElement The DOM element the attribute should be set on.\n     * @param key The name of the attribute.\n     * @param value The value of the attribute.\n     * @param relatedViewElement The view element related to the `domElement` (if there is any).\n     * It helps decide whether the attribute set is unsafe. For instance, view elements created via the\n     * {@link module:engine/view/downcastwriter~DowncastWriter} methods can allow certain attributes that would normally be filtered out.\n     */\n    setDomElementAttribute(domElement, key, value, relatedViewElement) {\n        const shouldRenderAttribute = this.shouldRenderAttribute(key, value, domElement.tagName.toLowerCase()) ||\n            relatedViewElement && relatedViewElement.shouldRenderUnsafeAttribute(key);\n        if (!shouldRenderAttribute) {\n            logWarning('domconverter-unsafe-attribute-detected', { domElement, key, value });\n        }\n        if (!isValidAttributeName(key)) {\n            /**\n             * Invalid attribute name was ignored during rendering.\n             *\n             * @error domconverter-invalid-attribute-detected\n             */\n            logWarning('domconverter-invalid-attribute-detected', { domElement, key, value });\n            return;\n        }\n        // The old value was safe but the new value is unsafe.\n        if (domElement.hasAttribute(key) && !shouldRenderAttribute) {\n            domElement.removeAttribute(key);\n        }\n        // The old value was unsafe (but prefixed) but the new value will be safe (will be unprefixed).\n        else if (domElement.hasAttribute(UNSAFE_ATTRIBUTE_NAME_PREFIX + key) && shouldRenderAttribute) {\n            domElement.removeAttribute(UNSAFE_ATTRIBUTE_NAME_PREFIX + key);\n        }\n        // If the attribute should not be rendered, rename it (instead of removing) to give developers some idea of what\n        // is going on (https://github.com/ckeditor/ckeditor5/issues/10801).\n        domElement.setAttribute(shouldRenderAttribute ? key : UNSAFE_ATTRIBUTE_NAME_PREFIX + key, value);\n    }\n    /**\n     * Removes an attribute from a DOM element.\n     *\n     * **Note**: To set the attribute, use {@link #setDomElementAttribute}.\n     *\n     * @param domElement The DOM element the attribute should be removed from.\n     * @param key The name of the attribute.\n     */\n    removeDomElementAttribute(domElement, key) {\n        // See #_createReplacementDomElement() to learn what this is.\n        if (key == UNSAFE_ELEMENT_REPLACEMENT_ATTRIBUTE) {\n            return;\n        }\n        domElement.removeAttribute(key);\n        // See setDomElementAttribute() to learn what this is.\n        domElement.removeAttribute(UNSAFE_ATTRIBUTE_NAME_PREFIX + key);\n    }\n    /**\n     * Converts children of the view element to DOM using the\n     * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\n     * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\n     *\n     * @param viewElement Parent view element.\n     * @param options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\n     * @returns DOM nodes.\n     */\n    *viewChildrenToDom(viewElement, options = {}) {\n        const fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\n        let offset = 0;\n        for (const childView of viewElement.getChildren()) {\n            if (fillerPositionOffset === offset) {\n                yield this._getBlockFiller();\n            }\n            const transparentRendering = childView.is('element') &&\n                !!childView.getCustomProperty('dataPipeline:transparentRendering') &&\n                !first(childView.getAttributes());\n            if (transparentRendering && this.renderingMode == 'data') {\n                // `RawElement` doesn't have #children defined, so they need to be temporarily rendered\n                // and extracted directly.\n                if (childView.is('rawElement')) {\n                    const tempElement = this._domDocument.createElement(childView.name);\n                    childView.render(tempElement, this);\n                    yield* [...tempElement.childNodes];\n                }\n                else {\n                    yield* this.viewChildrenToDom(childView, options);\n                }\n            }\n            else {\n                if (transparentRendering) {\n                    /**\n                     * The `dataPipeline:transparentRendering` flag is supported only in the data pipeline.\n                     *\n                     * @error domconverter-transparent-rendering-unsupported-in-editing-pipeline\n                     */\n                    logWarning('domconverter-transparent-rendering-unsupported-in-editing-pipeline', { viewElement: childView });\n                }\n                yield this.viewToDom(childView, options);\n            }\n            offset++;\n        }\n        if (fillerPositionOffset === offset) {\n            yield this._getBlockFiller();\n        }\n    }\n    /**\n     * Converts view {@link module:engine/view/range~Range} to DOM range.\n     * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n     *\n     * @param viewRange View range.\n     * @returns DOM range.\n     */\n    viewRangeToDom(viewRange) {\n        const domStart = this.viewPositionToDom(viewRange.start);\n        const domEnd = this.viewPositionToDom(viewRange.end);\n        const domRange = this._domDocument.createRange();\n        domRange.setStart(domStart.parent, domStart.offset);\n        domRange.setEnd(domEnd.parent, domEnd.offset);\n        return domRange;\n    }\n    /**\n     * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\n     *\n     * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n     * If the converted position is directly before inline filler it is moved inside the filler.\n     *\n     * @param viewPosition View position.\n     * @returns DOM position or `null` if view position could not be converted to DOM.\n     * DOM position has two properties:\n     * * `parent` - DOM position parent.\n     * * `offset` - DOM position offset.\n     */\n    viewPositionToDom(viewPosition) {\n        const viewParent = viewPosition.parent;\n        if (viewParent.is('$text')) {\n            const domParent = this.findCorrespondingDomText(viewParent);\n            if (!domParent) {\n                // Position is in a view text node that has not been rendered to DOM yet.\n                return null;\n            }\n            let offset = viewPosition.offset;\n            if (startsWithFiller(domParent)) {\n                offset += INLINE_FILLER_LENGTH;\n            }\n            return { parent: domParent, offset };\n        }\n        else {\n            // viewParent is instance of ViewElement.\n            let domParent, domBefore, domAfter;\n            if (viewPosition.offset === 0) {\n                domParent = this.mapViewToDom(viewParent);\n                if (!domParent) {\n                    // Position is in a view element that has not been rendered to DOM yet.\n                    return null;\n                }\n                domAfter = domParent.childNodes[0];\n            }\n            else {\n                const nodeBefore = viewPosition.nodeBefore;\n                domBefore = nodeBefore.is('$text') ?\n                    this.findCorrespondingDomText(nodeBefore) :\n                    this.mapViewToDom(nodeBefore);\n                if (!domBefore) {\n                    // Position is after a view element that has not been rendered to DOM yet.\n                    return null;\n                }\n                domParent = domBefore.parentNode;\n                domAfter = domBefore.nextSibling;\n            }\n            // If there is an inline filler at position return position inside the filler. We should never return\n            // the position before the inline filler.\n            if (isText(domAfter) && startsWithFiller(domAfter)) {\n                return { parent: domAfter, offset: INLINE_FILLER_LENGTH };\n            }\n            const offset = domBefore ? indexOf(domBefore) + 1 : 0;\n            return { parent: domParent, offset };\n        }\n    }\n    /**\n     * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\n     * be created. For bound elements and document fragments function will return corresponding items. For\n     * {@link module:engine/view/filler fillers} `null` will be returned.\n     * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n     *\n     * @param domNode DOM node or document fragment to transform.\n     * @param options Conversion options.\n     * @param options.bind Determines whether new elements will be bound. False by default.\n     * @param options.withChildren If `true`, node's and document fragment's children will be converted too. True by default.\n     * @param options.keepOriginalCase If `false`, node's tag name will be converted to lower case. False by default.\n     * @param options.skipComments If `false`, comment nodes will be converted to `$comment`\n     * {@link module:engine/view/uielement~UIElement view UI elements}. False by default.\n     * @returns Converted node or document fragment or `null` if DOM node is a {@link module:engine/view/filler filler}\n     * or the given node is an empty text node.\n     */\n    domToView(domNode, options = {}) {\n        const inlineNodes = [];\n        const generator = this._domToView(domNode, options, inlineNodes);\n        // Get the first yielded value or a returned value.\n        const node = generator.next().value;\n        if (!node) {\n            return null;\n        }\n        // Trigger children handling.\n        generator.next();\n        // Whitespace cleaning.\n        this._processDomInlineNodes(null, inlineNodes, options);\n        // Text not got trimmed to an empty string so there is no result node.\n        if (node.is('$text') && node.data.length == 0) {\n            return null;\n        }\n        return node;\n    }\n    /**\n     * Converts children of the DOM element to view nodes using\n     * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\n     * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\n     *\n     * @param domElement Parent DOM element.\n     * @param options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n     * @param inlineNodes An array that will be populated with inline nodes. It's used internally for whitespace processing.\n     * @returns View nodes.\n     */\n    *domChildrenToView(domElement, options = {}, inlineNodes = []) {\n        // Get child nodes from content document fragment if element is template\n        let childNodes = [];\n        if (domElement instanceof HTMLTemplateElement) {\n            childNodes = [...domElement.content.childNodes];\n        }\n        else {\n            childNodes = [...domElement.childNodes];\n        }\n        for (let i = 0; i < childNodes.length; i++) {\n            const domChild = childNodes[i];\n            const generator = this._domToView(domChild, options, inlineNodes);\n            // Get the first yielded value or a returned value.\n            const viewChild = generator.next().value;\n            if (viewChild !== null) {\n                // Whitespace cleaning before entering a block element (between block elements).\n                if (this._isBlockViewElement(viewChild)) {\n                    this._processDomInlineNodes(domElement, inlineNodes, options);\n                }\n                yield viewChild;\n                // Trigger children handling.\n                generator.next();\n            }\n        }\n        // Whitespace cleaning before leaving a block element (content of block element).\n        this._processDomInlineNodes(domElement, inlineNodes, options);\n    }\n    /**\n     * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\n     * Ranges which cannot be converted will be omitted.\n     *\n     * @param domSelection DOM selection.\n     * @returns View selection.\n     */\n    domSelectionToView(domSelection) {\n        // See: https://github.com/ckeditor/ckeditor5/issues/9635.\n        if (isGeckoRestrictedDomSelection(domSelection)) {\n            return new ViewSelection([]);\n        }\n        // DOM selection might be placed in fake selection container.\n        // If container contains fake selection - return corresponding view selection.\n        if (domSelection.rangeCount === 1) {\n            let container = domSelection.getRangeAt(0).startContainer;\n            // The DOM selection might be moved to the text node inside the fake selection container.\n            if (isText(container)) {\n                container = container.parentNode;\n            }\n            const viewSelection = this.fakeSelectionToView(container);\n            if (viewSelection) {\n                return viewSelection;\n            }\n        }\n        const isBackward = this.isDomSelectionBackward(domSelection);\n        const viewRanges = [];\n        for (let i = 0; i < domSelection.rangeCount; i++) {\n            // DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\n            const domRange = domSelection.getRangeAt(i);\n            const viewRange = this.domRangeToView(domRange);\n            if (viewRange) {\n                viewRanges.push(viewRange);\n            }\n        }\n        return new ViewSelection(viewRanges, { backward: isBackward });\n    }\n    /**\n     * Converts DOM Range to view {@link module:engine/view/range~Range}.\n     * If the start or end position can not be converted `null` is returned.\n     *\n     * @param domRange DOM range.\n     * @returns View range.\n     */\n    domRangeToView(domRange) {\n        const viewStart = this.domPositionToView(domRange.startContainer, domRange.startOffset);\n        const viewEnd = this.domPositionToView(domRange.endContainer, domRange.endOffset);\n        if (viewStart && viewEnd) {\n            return new ViewRange(viewStart, viewEnd);\n        }\n        return null;\n    }\n    /**\n     * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\n     *\n     * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\n     * position of the filler will be converted and returned.\n     *\n     * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\n     * that position will be converted to view position before that UIElement.\n     *\n     * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\n     *\n     * @param domParent DOM position parent.\n     * @param domOffset DOM position offset. You can skip it when converting the inline filler node.\n     * @returns View position.\n     */\n    domPositionToView(domParent, domOffset = 0) {\n        if (this.isBlockFiller(domParent)) {\n            return this.domPositionToView(domParent.parentNode, indexOf(domParent));\n        }\n        // If position is somewhere inside UIElement or a RawElement - return position before that element.\n        const viewElement = this.mapDomToView(domParent);\n        if (viewElement && (viewElement.is('uiElement') || viewElement.is('rawElement'))) {\n            return ViewPosition._createBefore(viewElement);\n        }\n        if (isText(domParent)) {\n            if (isInlineFiller(domParent)) {\n                return this.domPositionToView(domParent.parentNode, indexOf(domParent));\n            }\n            const viewParent = this.findCorrespondingViewText(domParent);\n            let offset = domOffset;\n            if (!viewParent) {\n                return null;\n            }\n            if (startsWithFiller(domParent)) {\n                offset -= INLINE_FILLER_LENGTH;\n                offset = offset < 0 ? 0 : offset;\n            }\n            return new ViewPosition(viewParent, offset);\n        }\n        // domParent instanceof HTMLElement.\n        else {\n            if (domOffset === 0) {\n                const viewParent = this.mapDomToView(domParent);\n                if (viewParent) {\n                    return new ViewPosition(viewParent, 0);\n                }\n            }\n            else {\n                const domBefore = domParent.childNodes[domOffset - 1];\n                // Jump over an inline filler (and also on Firefox jump over a block filler while pressing backspace in an empty paragraph).\n                if (isText(domBefore) && isInlineFiller(domBefore) || domBefore && this.isBlockFiller(domBefore)) {\n                    return this.domPositionToView(domBefore.parentNode, indexOf(domBefore));\n                }\n                const viewBefore = isText(domBefore) ?\n                    this.findCorrespondingViewText(domBefore) :\n                    this.mapDomToView(domBefore);\n                // TODO #663\n                if (viewBefore && viewBefore.parent) {\n                    return new ViewPosition(viewBefore.parent, viewBefore.index + 1);\n                }\n            }\n            return null;\n        }\n    }\n    /**\n     * Returns corresponding view {@link module:engine/view/element~Element Element} or\n     * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\n     * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n     * to the given DOM - `undefined` is returned.\n     *\n     * For all DOM elements rendered by a {@link module:engine/view/uielement~UIElement} or\n     * a {@link module:engine/view/rawelement~RawElement}, the parent `UIElement` or `RawElement` will be returned.\n     *\n     * @param domElementOrDocumentFragment DOM element or document fragment.\n     * @returns Corresponding view element, document fragment or `undefined` if no element was bound.\n     */\n    mapDomToView(domElementOrDocumentFragment) {\n        const hostElement = this.getHostViewElement(domElementOrDocumentFragment);\n        return hostElement || this._domToViewMapping.get(domElementOrDocumentFragment);\n    }\n    /**\n     * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n     * corresponding text node is returned based on the sibling or parent.\n     *\n     * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n     * to find the corresponding text node.\n     *\n     * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n     * element, it is used to find the corresponding text node.\n     *\n     * For all text nodes rendered by a {@link module:engine/view/uielement~UIElement} or\n     * a {@link module:engine/view/rawelement~RawElement}, the parent `UIElement` or `RawElement` will be returned.\n     *\n     * Otherwise `null` is returned.\n     *\n     * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\n     *\n     * @param domText DOM text node.\n     * @returns Corresponding view text node or `null`, if it was not possible to find a corresponding node.\n     */\n    findCorrespondingViewText(domText) {\n        if (isInlineFiller(domText)) {\n            return null;\n        }\n        // If DOM text was rendered by a UIElement or a RawElement - return this parent element.\n        const hostElement = this.getHostViewElement(domText);\n        if (hostElement) {\n            return hostElement;\n        }\n        const previousSibling = domText.previousSibling;\n        // Try to use previous sibling to find the corresponding text node.\n        if (previousSibling) {\n            if (!(this.isElement(previousSibling))) {\n                // The previous is text or comment.\n                return null;\n            }\n            const viewElement = this.mapDomToView(previousSibling);\n            if (viewElement) {\n                const nextSibling = viewElement.nextSibling;\n                // It might be filler which has no corresponding view node.\n                if (nextSibling instanceof ViewText) {\n                    return nextSibling;\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        // Try to use parent to find the corresponding text node.\n        else {\n            const viewElement = this.mapDomToView(domText.parentNode);\n            if (viewElement) {\n                const firstChild = viewElement.getChild(0);\n                // It might be filler which has no corresponding view node.\n                if (firstChild instanceof ViewText) {\n                    return firstChild;\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    }\n    mapViewToDom(documentFragmentOrElement) {\n        return this._viewToDomMapping.get(documentFragmentOrElement);\n    }\n    /**\n     * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n     * corresponding text node is returned based on the sibling or parent.\n     *\n     * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n     * to find the corresponding text node.\n     *\n     * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n     * element, it is used to find the corresponding text node.\n     *\n     * Otherwise `null` is returned.\n     *\n     * @param viewText View text node.\n     * @returns Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\n     */\n    findCorrespondingDomText(viewText) {\n        const previousSibling = viewText.previousSibling;\n        // Try to use previous sibling to find the corresponding text node.\n        if (previousSibling && this.mapViewToDom(previousSibling)) {\n            return this.mapViewToDom(previousSibling).nextSibling;\n        }\n        // If this is a first node, try to use parent to find the corresponding text node.\n        if (!previousSibling && viewText.parent && this.mapViewToDom(viewText.parent)) {\n            return this.mapViewToDom(viewText.parent).childNodes[0];\n        }\n        return null;\n    }\n    /**\n     * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\n     */\n    focus(viewEditable) {\n        const domEditable = this.mapViewToDom(viewEditable);\n        if (domEditable && domEditable.ownerDocument.activeElement !== domEditable) {\n            // Save the scrollX and scrollY positions before the focus.\n            const { scrollX, scrollY } = global.window;\n            const scrollPositions = [];\n            // Save all scrollLeft and scrollTop values starting from domEditable up to\n            // document#documentElement.\n            forEachDomElementAncestor(domEditable, node => {\n                const { scrollLeft, scrollTop } = node;\n                scrollPositions.push([scrollLeft, scrollTop]);\n            });\n            domEditable.focus();\n            // Restore scrollLeft and scrollTop values starting from domEditable up to\n            // document#documentElement.\n            // https://github.com/ckeditor/ckeditor5-engine/issues/951\n            // https://github.com/ckeditor/ckeditor5-engine/issues/957\n            forEachDomElementAncestor(domEditable, node => {\n                const [scrollLeft, scrollTop] = scrollPositions.shift();\n                node.scrollLeft = scrollLeft;\n                node.scrollTop = scrollTop;\n            });\n            // Restore the scrollX and scrollY positions after the focus.\n            // https://github.com/ckeditor/ckeditor5-engine/issues/951\n            global.window.scrollTo(scrollX, scrollY);\n        }\n    }\n    /**\n     * Remove DOM selection from blurred editable, so it won't interfere with clicking on dropdowns (especially on iOS).\n     *\n     * @internal\n     */\n    _clearDomSelection() {\n        const domEditable = this.mapViewToDom(this.document.selection.editableElement);\n        if (!domEditable) {\n            return;\n        }\n        // Check if DOM selection is inside editor editable element.\n        const domSelection = domEditable.ownerDocument.defaultView.getSelection();\n        const newViewSelection = this.domSelectionToView(domSelection);\n        const selectionInEditable = newViewSelection && newViewSelection.rangeCount > 0;\n        if (selectionInEditable) {\n            domSelection.removeAllRanges();\n        }\n    }\n    /**\n     * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\n     *\n     * @param node Node to check.\n     */\n    isElement(node) {\n        return node && node.nodeType == Node.ELEMENT_NODE;\n    }\n    /**\n     * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\n     *\n     * @param node Node to check.\n     */\n    isDocumentFragment(node) {\n        return node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\n    }\n    /**\n     * Checks if the node is an instance of the block filler for this DOM converter.\n     *\n     * ```ts\n     * const converter = new DomConverter( viewDocument, { blockFillerMode: 'br' } );\n     *\n     * converter.isBlockFiller( BR_FILLER( document ) ); // true\n     * converter.isBlockFiller( NBSP_FILLER( document ) ); // false\n     * ```\n     *\n     * **Note:**: For the `'nbsp'` mode the method also checks context of a node so it cannot be a detached node.\n     *\n     * **Note:** A special case in the `'nbsp'` mode exists where the `<br>` in `<p><br></p>` is treated as a block filler.\n     *\n     * @param domNode DOM node to check.\n     * @returns True if a node is considered a block filler for given mode.\n     */\n    isBlockFiller(domNode) {\n        if (this.blockFillerMode == 'br') {\n            return domNode.isEqualNode(BR_FILLER_REF);\n        }\n        // Special case for <p><br></p> in which <br> should be treated as filler even when we are not in the 'br' mode. See ckeditor5#5564.\n        if (domNode.tagName === 'BR' &&\n            hasBlockParent(domNode, this.blockElements) &&\n            domNode.parentNode.childNodes.length === 1) {\n            return true;\n        }\n        // If not in 'br' mode, try recognizing both marked and regular nbsp block fillers.\n        return domNode.isEqualNode(MARKED_NBSP_FILLER_REF) || isNbspBlockFiller(domNode, this.blockElements);\n    }\n    /**\n     * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\n     *\n     * @param DOM Selection instance to check.\n     */\n    isDomSelectionBackward(selection) {\n        if (selection.isCollapsed) {\n            return false;\n        }\n        // Since it takes multiple lines of code to check whether a \"DOM Position\" is before/after another \"DOM Position\",\n        // we will use the fact that range will collapse if it's end is before it's start.\n        const range = this._domDocument.createRange();\n        try {\n            range.setStart(selection.anchorNode, selection.anchorOffset);\n            range.setEnd(selection.focusNode, selection.focusOffset);\n        }\n        catch (e) {\n            // Safari sometimes gives us a selection that makes Range.set{Start,End} throw.\n            // See https://github.com/ckeditor/ckeditor5/issues/12375.\n            return false;\n        }\n        const backward = range.collapsed;\n        range.detach();\n        return backward;\n    }\n    /**\n     * Returns a parent {@link module:engine/view/uielement~UIElement} or {@link module:engine/view/rawelement~RawElement}\n     * that hosts the provided DOM node. Returns `null` if there is no such parent.\n     */\n    getHostViewElement(domNode) {\n        const ancestors = getAncestors(domNode);\n        // Remove domNode from the list.\n        ancestors.pop();\n        while (ancestors.length) {\n            const domNode = ancestors.pop();\n            const viewNode = this._domToViewMapping.get(domNode);\n            if (viewNode && (viewNode.is('uiElement') || viewNode.is('rawElement'))) {\n                return viewNode;\n            }\n        }\n        return null;\n    }\n    /**\n     * Checks if the given selection's boundaries are at correct places.\n     *\n     * The following places are considered as incorrect for selection boundaries:\n     *\n     * * before or in the middle of an inline filler sequence,\n     * * inside a DOM element which represents {@link module:engine/view/uielement~UIElement a view UI element},\n     * * inside a DOM element which represents {@link module:engine/view/rawelement~RawElement a view raw element}.\n     *\n     * @param domSelection The DOM selection object to be checked.\n     * @returns `true` if the given selection is at a correct place, `false` otherwise.\n     */\n    isDomSelectionCorrect(domSelection) {\n        return this._isDomSelectionPositionCorrect(domSelection.anchorNode, domSelection.anchorOffset) &&\n            this._isDomSelectionPositionCorrect(domSelection.focusNode, domSelection.focusOffset);\n    }\n    /**\n     * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n     * and not processed during the conversion from DOM nodes to view elements.\n     *\n     * This is affecting how {@link module:engine/view/domconverter~DomConverter#domToView} and\n     * {@link module:engine/view/domconverter~DomConverter#domChildrenToView} process DOM nodes.\n     *\n     * The raw data can be later accessed by a\n     * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n     *\n     * @param pattern Pattern matching a view element whose content should\n     * be treated as raw data.\n     */\n    registerRawContentMatcher(pattern) {\n        this._rawContentElementMatcher.add(pattern);\n    }\n    /**\n     * Registers a {@link module:engine/view/matcher~MatcherPattern} for inline object view elements.\n     *\n     * This is affecting how {@link module:engine/view/domconverter~DomConverter#domToView} and\n     * {@link module:engine/view/domconverter~DomConverter#domChildrenToView} process DOM nodes.\n     *\n     * This is an extension of a simple {@link #inlineObjectElements} array of element names.\n     *\n     * @param pattern Pattern matching a view element which should be treated as an inline object.\n     */\n    registerInlineObjectMatcher(pattern) {\n        this._inlineObjectElementMatcher.add(pattern);\n    }\n    /**\n     * Clear temporary custom properties.\n     *\n     * @internal\n     */\n    _clearTemporaryCustomProperties() {\n        for (const element of this._elementsWithTemporaryCustomProperties) {\n            element._removeCustomProperty('editingPipeline:doNotReuseOnce');\n        }\n        this._elementsWithTemporaryCustomProperties.clear();\n    }\n    /**\n     * Returns the block {@link module:engine/view/filler filler} node based on the current {@link #blockFillerMode} setting.\n     */\n    _getBlockFiller() {\n        switch (this.blockFillerMode) {\n            case 'nbsp':\n                return NBSP_FILLER(this._domDocument); // eslint-disable-line new-cap\n            case 'markedNbsp':\n                return MARKED_NBSP_FILLER(this._domDocument); // eslint-disable-line new-cap\n            case 'br':\n                return BR_FILLER(this._domDocument); // eslint-disable-line new-cap\n        }\n    }\n    /**\n     * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\n     *\n     * @param domParent Position parent.\n     * @param offset Position offset.\n     * @returns `true` if given position is at a correct place for selection boundary, `false` otherwise.\n     */\n    _isDomSelectionPositionCorrect(domParent, offset) {\n        // If selection is before or in the middle of inline filler string, it is incorrect.\n        if (isText(domParent) && startsWithFiller(domParent) && offset < INLINE_FILLER_LENGTH) {\n            // Selection in a text node, at wrong position (before or in the middle of filler).\n            return false;\n        }\n        if (this.isElement(domParent) && startsWithFiller(domParent.childNodes[offset])) {\n            // Selection in an element node, before filler text node.\n            return false;\n        }\n        const viewParent = this.mapDomToView(domParent);\n        // The position is incorrect when anchored inside a UIElement or a RawElement.\n        // Note: In case of UIElement and RawElement, mapDomToView() returns a parent element for any DOM child\n        // so there's no need to perform any additional checks.\n        if (viewParent && (viewParent.is('uiElement') || viewParent.is('rawElement'))) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Internal generator for {@link #domToView}. Also used by {@link #domChildrenToView}.\n     * Separates DOM nodes conversion from whitespaces processing.\n     *\n     * @param domNode DOM node or document fragment to transform.\n     * @param inlineNodes An array of recently encountered inline nodes truncated to the block element boundaries.\n     * Used later to process whitespaces.\n     */\n    *_domToView(domNode, options, inlineNodes) {\n        if (this.isBlockFiller(domNode)) {\n            return null;\n        }\n        // When node is inside a UIElement or a RawElement return that parent as it's view representation.\n        const hostElement = this.getHostViewElement(domNode);\n        if (hostElement) {\n            return hostElement;\n        }\n        if (isComment(domNode) && options.skipComments) {\n            return null;\n        }\n        if (isText(domNode)) {\n            if (isInlineFiller(domNode)) {\n                return null;\n            }\n            else {\n                const textData = domNode.data;\n                if (textData === '') {\n                    return null;\n                }\n                const textNode = new ViewText(this.document, textData);\n                inlineNodes.push(textNode);\n                return textNode;\n            }\n        }\n        else {\n            let viewElement = this.mapDomToView(domNode);\n            if (viewElement) {\n                if (this._isInlineObjectElement(viewElement)) {\n                    inlineNodes.push(viewElement);\n                }\n                return viewElement;\n            }\n            if (this.isDocumentFragment(domNode)) {\n                // Create view document fragment.\n                viewElement = new ViewDocumentFragment(this.document);\n                if (options.bind) {\n                    this.bindDocumentFragments(domNode, viewElement);\n                }\n            }\n            else {\n                // Create view element.\n                viewElement = this._createViewElement(domNode, options);\n                if (options.bind) {\n                    this.bindElements(domNode, viewElement);\n                }\n                // Copy element's attributes.\n                const attrs = domNode.attributes;\n                if (attrs) {\n                    for (let l = attrs.length, i = 0; i < l; i++) {\n                        viewElement._setAttribute(attrs[i].name, attrs[i].value);\n                    }\n                }\n                // Treat this element's content as a raw data if it was registered as such.\n                if (this._isViewElementWithRawContent(viewElement, options)) {\n                    viewElement._setCustomProperty('$rawContent', domNode.innerHTML);\n                    if (!this._isBlockViewElement(viewElement)) {\n                        inlineNodes.push(viewElement);\n                    }\n                    return viewElement;\n                }\n                // Comment node is also treated as an element with raw data.\n                if (isComment(domNode)) {\n                    viewElement._setCustomProperty('$rawContent', domNode.data);\n                    return viewElement;\n                }\n            }\n            // Yield the element first so the flow of nested inline nodes is not reversed inside elements.\n            yield viewElement;\n            const nestedInlineNodes = [];\n            if (options.withChildren !== false) {\n                for (const child of this.domChildrenToView(domNode, options, nestedInlineNodes)) {\n                    viewElement._appendChild(child);\n                }\n            }\n            // Check if this is an inline object after processing child nodes so matcher\n            // for inline objects can verify if the element is empty.\n            if (this._isInlineObjectElement(viewElement)) {\n                inlineNodes.push(viewElement);\n                // Inline object content should be handled as a flow-root.\n                this._processDomInlineNodes(null, nestedInlineNodes, options);\n            }\n            else {\n                // It's an inline element that is not an object (like <b>, <i>) or a block element.\n                for (const inlineNode of nestedInlineNodes) {\n                    inlineNodes.push(inlineNode);\n                }\n            }\n        }\n    }\n    /**\n     * Internal helper that walks the list of inline view nodes already generated from DOM nodes\n     * and handles whitespaces and NBSPs.\n     *\n     * @param domParent The DOM parent of the given inline nodes. This should be a document fragment or\n     * a block element to whitespace processing start cleaning.\n     * @param inlineNodes An array of recently encountered inline nodes truncated to the block element boundaries.\n     */\n    _processDomInlineNodes(domParent, inlineNodes, options) {\n        if (!inlineNodes.length) {\n            return;\n        }\n        // Process text nodes only after reaching a block or document fragment,\n        // do not alter whitespaces while processing an inline element like <b> or <i>.\n        if (domParent && !this.isDocumentFragment(domParent) && !this._isBlockDomElement(domParent)) {\n            return;\n        }\n        let prevNodeEndsWithSpace = false;\n        for (let i = 0; i < inlineNodes.length; i++) {\n            const node = inlineNodes[i];\n            if (!node.is('$text')) {\n                prevNodeEndsWithSpace = false;\n                continue;\n            }\n            let data;\n            let nodeEndsWithSpace = false;\n            if (this._isPreFormatted(node)) {\n                data = getDataWithoutFiller(node.data);\n            }\n            else {\n                // Change all consecutive whitespace characters (from the [ \\n\\t\\r] set –\n                // see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\n                // That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\n                // We're replacing 1+ (and not 2+) to also normalize singular \\n\\t\\r characters (#822).\n                data = node.data.replace(/[ \\n\\t\\r]{1,}/g, ' ');\n                nodeEndsWithSpace = /[^\\S\\u00A0]/.test(data.charAt(data.length - 1));\n                const prevNode = i > 0 ? inlineNodes[i - 1] : null;\n                const nextNode = i + 1 < inlineNodes.length ? inlineNodes[i + 1] : null;\n                const shouldLeftTrim = !prevNode || prevNode.is('element') && prevNode.name == 'br' || prevNodeEndsWithSpace;\n                const shouldRightTrim = nextNode ? false : !startsWithFiller(node.data);\n                // Do not try to clear whitespaces if this is flat mapping for the purpose of mutation observer and differ in rendering.\n                if (options.withChildren !== false) {\n                    // If the previous dom text node does not exist or it ends by whitespace character, remove space character from the\n                    // beginning of this text node. Such space character is treated as a whitespace.\n                    if (shouldLeftTrim) {\n                        data = data.replace(/^ /, '');\n                    }\n                    // If the next text node does not exist remove space character from the end of this text node.\n                    if (shouldRightTrim) {\n                        data = data.replace(/ $/, '');\n                    }\n                }\n                // At the beginning and end of a block element, Firefox inserts normal space + <br> instead of non-breaking space.\n                // This means that the text node starts/end with normal space instead of non-breaking space.\n                // This causes a problem because the normal space would be removed in `.replace` calls above. To prevent that,\n                // the inline filler is removed only after the data is initially processed (by the `.replace` above). See ckeditor5#692.\n                data = getDataWithoutFiller(data);\n                // At this point we should have removed all whitespaces from DOM text data.\n                //\n                // Now, We will reverse the process that happens in `_processDataFromViewText`.\n                //\n                // We have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\n                // First, change all ` \\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view to\n                // ` \\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them back to `  `.\n                data = data.replace(/ \\u00A0/g, '  ');\n                const isNextNodeInlineObjectElement = nextNode && nextNode.is('element') && nextNode.name != 'br';\n                const isNextNodeStartingWithSpace = nextNode && nextNode.is('$text') && nextNode.data.charAt(0) == ' ';\n                // Then, let's change the last nbsp to a space.\n                if (/[ \\u00A0]\\u00A0$/.test(data) || !nextNode || isNextNodeInlineObjectElement || isNextNodeStartingWithSpace) {\n                    data = data.replace(/\\u00A0$/, ' ');\n                }\n                // Then, change &nbsp; character that is at the beginning of the text node to space character.\n                // We do that replacement only if this is the first node or the previous node ends on whitespace character.\n                if (shouldLeftTrim || prevNode && prevNode.is('element') && prevNode.name != 'br') {\n                    data = data.replace(/^\\u00A0/, ' ');\n                }\n            }\n            // At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\n            // changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\n            if (data.length == 0 && node.parent) {\n                node._remove();\n                inlineNodes.splice(i, 1);\n                i--;\n            }\n            else {\n                node._data = data;\n                prevNodeEndsWithSpace = nodeEndsWithSpace;\n            }\n        }\n        inlineNodes.length = 0;\n    }\n    /**\n     * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\n     * it is correctly displayed in the DOM.\n     *\n     * Following changes are done:\n     *\n     * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\n     * element or if a previous text node ends with a space character,\n     * * space at the end of the text node is changed to `&nbsp;` if there are two spaces at the end of a node or if next node\n     * starts with a space or if it is the last text node in its container,\n     * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\n     *\n     * Content of {@link #preElements} is not processed.\n     *\n     * @param node View text node to process.\n     * @returns Processed text data.\n     */\n    _processDataFromViewText(node) {\n        let data = node.data;\n        // If the currently processed view text node is preformatted, we should not change whitespaces.\n        if (this._isPreFormatted(node)) {\n            return data;\n        }\n        // 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\n        // (container element boundary).\n        if (data.charAt(0) == ' ') {\n            const prevNode = this._getTouchingInlineViewNode(node, false);\n            const prevEndsWithSpace = prevNode && prevNode.is('$textProxy') && this._nodeEndsWithSpace(prevNode);\n            if (prevEndsWithSpace || !prevNode) {\n                data = '\\u00A0' + data.substr(1);\n            }\n        }\n        // 2. Replace the last space with nbsp if there are two spaces at the end or if the next node starts with space or there is no\n        // next node (container element boundary).\n        //\n        // Keep in mind that Firefox prefers $nbsp; before tag, not inside it:\n        //\n        // Foo <span>&nbsp;bar</span>  <-- bad.\n        // Foo&nbsp;<span> bar</span>  <-- good.\n        //\n        // More here: https://github.com/ckeditor/ckeditor5-engine/issues/1747.\n        if (data.charAt(data.length - 1) == ' ') {\n            const nextNode = this._getTouchingInlineViewNode(node, true);\n            const nextStartsWithSpace = nextNode && nextNode.is('$textProxy') && nextNode.data.charAt(0) == ' ';\n            if (data.charAt(data.length - 2) == ' ' || !nextNode || nextStartsWithSpace) {\n                data = data.substr(0, data.length - 1) + '\\u00A0';\n            }\n        }\n        // 3. Create space+nbsp pairs.\n        return data.replace(/ {2}/g, ' \\u00A0');\n    }\n    /**\n     * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\n     *\n     * @param  node Node to check.\n     * @returns `true` if given `node` ends with space, `false` otherwise.\n     */\n    _nodeEndsWithSpace(node) {\n        if (this._isPreFormatted(node)) {\n            return false;\n        }\n        const data = this._processDataFromViewText(node);\n        return data.charAt(data.length - 1) == ' ';\n    }\n    /**\n     * Checks whether given text contains preformatted white space. This is the case if\n     * * any of node ancestors has a name which is in `preElements` array, or\n     * * the closest ancestor that has the `white-space` CSS property sets it to a value that preserves spaces\n     *\n     * @param node Node to check\n     * @returns `true` if given node contains preformatted white space, `false` otherwise.\n     */\n    _isPreFormatted(node) {\n        if (_hasViewParentOfType(node, this.preElements)) {\n            return true;\n        }\n        for (const ancestor of node.getAncestors({ parentFirst: true })) {\n            if (!ancestor.is('element') || !ancestor.hasStyle('white-space') || ancestor.getStyle('white-space') === 'inherit') {\n                continue;\n            }\n            // If the node contains the `white-space` property with a value that does not preserve spaces, it will take\n            // precedence over any white-space settings its ancestors contain, so no further parent checking needs to\n            // be done.\n            return ['pre', 'pre-wrap', 'break-spaces'].includes(ancestor.getStyle('white-space'));\n        }\n        return false;\n    }\n    /**\n     * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\n     * that is contained in the same container element. If there is no such sibling, `null` is returned.\n     *\n     * @param node Reference node.\n     * @returns Touching text node, an inline object\n     * or `null` if there is no next or previous touching text node.\n     */\n    _getTouchingInlineViewNode(node, getNext) {\n        const treeWalker = new ViewTreeWalker({\n            startPosition: getNext ? ViewPosition._createAfter(node) : ViewPosition._createBefore(node),\n            direction: getNext ? 'forward' : 'backward'\n        });\n        for (const { item } of treeWalker) {\n            // Found a text node in the same container element.\n            if (item.is('$textProxy')) {\n                return item;\n            }\n            // Found a transparent element, skip it and continue inside it.\n            else if (item.is('element') && item.getCustomProperty('dataPipeline:transparentRendering')) {\n                continue;\n            }\n            // <br> found – it works like a block boundary, so do not scan further.\n            else if (item.is('element', 'br')) {\n                return null;\n            }\n            // Found an inline object (for example an image).\n            else if (this._isInlineObjectElement(item)) {\n                return item;\n            }\n            // ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\n            // text node in its container element.\n            else if (item.is('containerElement')) {\n                return null;\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns `true` if a DOM node belongs to {@link #blockElements}. `false` otherwise.\n     */\n    _isBlockDomElement(node) {\n        return this.isElement(node) && this.blockElements.includes(node.tagName.toLowerCase());\n    }\n    /**\n     * Returns `true` if a view node belongs to {@link #blockElements}. `false` otherwise.\n     */\n    _isBlockViewElement(node) {\n        return node.is('element') && this.blockElements.includes(node.name);\n    }\n    /**\n     * Returns `true` if a DOM node belongs to {@link #inlineObjectElements}. `false` otherwise.\n     */\n    _isInlineObjectElement(node) {\n        if (!node.is('element')) {\n            return false;\n        }\n        return node.name == 'br' ||\n            this.inlineObjectElements.includes(node.name) ||\n            !!this._inlineObjectElementMatcher.match(node);\n    }\n    /**\n     * Creates view element basing on the node type.\n     *\n     * @param node DOM node to check.\n     * @param options Conversion options. See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n     */\n    _createViewElement(node, options) {\n        if (isComment(node)) {\n            return new ViewUIElement(this.document, '$comment');\n        }\n        const viewName = options.keepOriginalCase ? node.tagName : node.tagName.toLowerCase();\n        return new ViewElement(this.document, viewName);\n    }\n    /**\n     * Checks if view element's content should be treated as a raw data.\n     *\n     * @param viewElement View element to check.\n     * @param options Conversion options. See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n     */\n    _isViewElementWithRawContent(viewElement, options) {\n        return options.withChildren !== false && viewElement.is('element') && !!this._rawContentElementMatcher.match(viewElement);\n    }\n    /**\n     * Checks whether a given element name should be renamed in a current rendering mode.\n     *\n     * @param elementName The name of view element.\n     */\n    _shouldRenameElement(elementName) {\n        const name = elementName.toLowerCase();\n        return this.renderingMode === 'editing' && this.unsafeElements.includes(name);\n    }\n    /**\n     * Return a <span> element with a special attribute holding the name of the original element.\n     * Optionally, copy all the attributes of the original element if that element is provided.\n     *\n     * @param elementName The name of view element.\n     * @param originalDomElement The original DOM element to copy attributes and content from.\n     */\n    _createReplacementDomElement(elementName, originalDomElement) {\n        const newDomElement = this._domDocument.createElement('span');\n        // Mark the span replacing a script as hidden.\n        newDomElement.setAttribute(UNSAFE_ELEMENT_REPLACEMENT_ATTRIBUTE, elementName);\n        if (originalDomElement) {\n            while (originalDomElement.firstChild) {\n                newDomElement.appendChild(originalDomElement.firstChild);\n            }\n            for (const attributeName of originalDomElement.getAttributeNames()) {\n                newDomElement.setAttribute(attributeName, originalDomElement.getAttribute(attributeName));\n            }\n        }\n        return newDomElement;\n    }\n}\n/**\n * Helper function.\n * Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\n *\n * @returns`true` if such parent exists or `false` if it does not.\n */\nfunction _hasViewParentOfType(node, types) {\n    return node.getAncestors().some(parent => parent.is('element') && types.includes(parent.name));\n}\n/**\n * A helper that executes given callback for each DOM node's ancestor, starting from the given node\n * and ending in document#documentElement.\n *\n * @param callback A callback to be executed for each ancestor.\n */\nfunction forEachDomElementAncestor(element, callback) {\n    let node = element;\n    while (node) {\n        callback(node);\n        node = node.parentElement;\n    }\n}\n/**\n * Checks if given node is a nbsp block filler.\n *\n * A &nbsp; is a block filler only if it is a single child of a block element.\n *\n * @param domNode DOM node.\n */\nfunction isNbspBlockFiller(domNode, blockElements) {\n    const isNBSP = domNode.isEqualNode(NBSP_FILLER_REF);\n    return isNBSP && hasBlockParent(domNode, blockElements) && domNode.parentNode.childNodes.length === 1;\n}\n/**\n * Checks if domNode has block parent.\n *\n * @param domNode DOM node.\n */\nfunction hasBlockParent(domNode, blockElements) {\n    const parent = domNode.parentNode;\n    return !!parent && !!parent.tagName && blockElements.includes(parent.tagName.toLowerCase());\n}\n/**\n * Log to console the information about element that was replaced.\n * Check UNSAFE_ELEMENTS for all recognized unsafe elements.\n *\n * @param elementName The name of the view element.\n */\nfunction _logUnsafeElement(elementName) {\n    if (elementName === 'script') {\n        logWarning('domconverter-unsafe-script-element-detected');\n    }\n    if (elementName === 'style') {\n        logWarning('domconverter-unsafe-style-element-detected');\n    }\n}\n/**\n * In certain cases, Firefox mysteriously assigns so called \"restricted objects\" to native DOM Range properties.\n * Any attempt at accessing restricted object's properties causes errors.\n * See: https://github.com/ckeditor/ckeditor5/issues/9635.\n */\nfunction isGeckoRestrictedDomSelection(domSelection) {\n    if (!env.isGecko) {\n        return false;\n    }\n    if (!domSelection.rangeCount) {\n        return false;\n    }\n    const container = domSelection.getRangeAt(0).startContainer;\n    try {\n        Object.prototype.toString.call(container);\n    }\n    catch (error) {\n        return true;\n    }\n    return false;\n}\n/**\n * While rendering the editor content, the {@link module:engine/view/domconverter~DomConverter} detected a `<script>` element that may\n * disrupt the editing experience. To avoid this, the `<script>` element was replaced with `<span data-ck-unsafe-element=\"script\"></span>`.\n *\n * @error domconverter-unsafe-script-element-detected\n */\n/**\n * While rendering the editor content, the {@link module:engine/view/domconverter~DomConverter} detected a `<style>` element that may affect\n * the editing experience. To avoid this, the `<style>` element was replaced with `<span data-ck-unsafe-element=\"style\"></span>`.\n *\n * @error domconverter-unsafe-style-element-detected\n */\n/**\n * The {@link module:engine/view/domconverter~DomConverter} detected an interactive attribute in the\n * {@glink framework/architecture/editing-engine#editing-pipeline editing pipeline}. For the best\n * editing experience, the attribute was renamed to `data-ck-unsafe-attribute-[original attribute name]`.\n *\n * If you are the author of the plugin that generated this attribute and you want it to be preserved\n * in the editing pipeline, you can configure this when creating the element\n * using {@link module:engine/view/downcastwriter~DowncastWriter} during the\n * {@glink framework/architecture/editing-engine#conversion model–view conversion}. Methods such as\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement},\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement}, or\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement}\n * accept an option that will disable filtering of specific attributes:\n *\n * ```ts\n * const paragraph = writer.createContainerElement( 'p',\n * \t{\n * \t\tclass: 'clickable-paragraph',\n * \t\tonclick: 'alert( \"Paragraph clicked!\" )'\n * \t},\n * \t{\n * \t\t// Make sure the \"onclick\" attribute will pass through.\n * \t\trenderUnsafeAttributes: [ 'onclick' ]\n * \t}\n * );\n * ```\n *\n * @error domconverter-unsafe-attribute-detected\n * @param domElement The DOM element the attribute was set on.\n * @param key The original name of the attribute\n * @param value The value of the original attribute\n */\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/observer\n */\nimport { DomEmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Abstract base observer class. Observers are classes which listen to DOM events, do the preliminary\n * processing and fire events on the {@link module:engine/view/document~Document} objects.\n * Observers can also add features to the view, for instance by updating its status or marking elements\n * which need a refresh on DOM events.\n */\nexport default class Observer extends /* #__PURE__ */ DomEmitterMixin() {\n    /**\n     * Creates an instance of the observer.\n     */\n    constructor(view) {\n        super();\n        /**\n         * The state of the observer. If it is disabled, no events will be fired.\n         */\n        this._isEnabled = false;\n        this.view = view;\n        this.document = view.document;\n    }\n    /**\n     * The state of the observer. If it is disabled, no events will be fired.\n     */\n    get isEnabled() {\n        return this._isEnabled;\n    }\n    /**\n     * Enables the observer. This method is called when the observer is registered to the\n     * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#forceRender rendering}\n     * (all observers are {@link #disable disabled} before rendering).\n     *\n     * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\n     * However, a child class may not need to be disabled, so it can implement an empty method.\n     *\n     * @see module:engine/view/observer/observer~Observer#disable\n     */\n    enable() {\n        this._isEnabled = true;\n    }\n    /**\n     * Disables the observer. This method is called before\n     * {@link module:engine/view/view~View#forceRender rendering} to prevent firing events during rendering.\n     *\n     * @see module:engine/view/observer/observer~Observer#enable\n     */\n    disable() {\n        this._isEnabled = false;\n    }\n    /**\n     * Disables and destroys the observer, among others removes event listeners created by the observer.\n     */\n    destroy() {\n        this.disable();\n        this.stopListening();\n    }\n    /**\n     * Checks whether a given DOM event should be ignored (should not be turned into a synthetic view document event).\n     *\n     * Currently, an event will be ignored only if its target or any of its ancestors has the `data-cke-ignore-events` attribute.\n     * This attribute can be used inside the structures generated by\n     * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `DowncastWriter#createUIElement()`} to ignore events\n     * fired within a UI that should be excluded from CKEditor 5's realms.\n     *\n     * @param domTarget The DOM event target to check (usually an element, sometimes a text node and\n     * potentially sometimes a document, too).\n     * @returns Whether this event should be ignored by the observer.\n     */\n    checkShouldIgnoreEventFromTarget(domTarget) {\n        if (domTarget && domTarget.nodeType === 3) {\n            domTarget = domTarget.parentNode;\n        }\n        if (!domTarget || domTarget.nodeType !== 1) {\n            return false;\n        }\n        return domTarget.matches('[data-cke-ignore-events], [data-cke-ignore-events] *');\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/domeventdata\n */\nimport { extend } from 'lodash-es';\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n *\n * @typeParam TEvent The type of DOM Event that this class represents.\n */\nexport default class DomEventData {\n    /**\n     * @param view The instance of the view controller.\n     * @param domEvent The DOM event.\n     * @param additionalData Additional properties that the instance should contain.\n     */\n    constructor(view, domEvent, additionalData) {\n        this.view = view;\n        this.document = view.document;\n        this.domEvent = domEvent;\n        this.domTarget = domEvent.target;\n        extend(this, additionalData);\n    }\n    /**\n     * The tree view element representing the target.\n     */\n    get target() {\n        return this.view.domConverter.mapDomToView(this.domTarget);\n    }\n    /**\n     * Prevents the native's event default action.\n     */\n    preventDefault() {\n        this.domEvent.preventDefault();\n    }\n    /**\n     * Stops native event propagation.\n     */\n    stopPropagation() {\n        this.domEvent.stopPropagation();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/domeventobserver\n */\nimport Observer from './observer.js';\nimport DomEventData from './domeventdata.js';\n/**\n * Base class for DOM event observers. This class handles\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\n * Child class needs to define\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\n *\n * For instance:\n *\n * ```ts\n * class ClickObserver extends DomEventObserver<'click'> {\n * \t// It can also be defined as a normal property in the constructor.\n * \tget domEventType(): 'click' {\n * \t\treturn 'click';\n * \t}\n *\n * \tonDomEvent( domEvent: MouseEvent ): void {\n * \t\tthis.fire( 'click', domEvent );\n * \t}\n * }\n * ```\n *\n * @typeParam EventType DOM Event type name or an union of those.\n * @typeParam AdditionalData Additional data passed along with the event.\n */\nexport default class DomEventObserver extends Observer {\n    constructor() {\n        super(...arguments);\n        /**\n         * If set to `true` DOM events will be listened on the capturing phase.\n         * Default value is `false`.\n         */\n        this.useCapture = false;\n        /**\n         * If set to `true`, indicates that the function specified by listener will never call `preventDefault()`.\n         * Default value is `false`.\n         */\n        this.usePassive = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    observe(domElement) {\n        const types = typeof this.domEventType == 'string' ? [this.domEventType] : this.domEventType;\n        types.forEach(type => {\n            this.listenTo(domElement, type, (eventInfo, domEvent) => {\n                if (this.isEnabled && !this.checkShouldIgnoreEventFromTarget(domEvent.target)) {\n                    this.onDomEvent(domEvent);\n                }\n            }, { useCapture: this.useCapture, usePassive: this.usePassive });\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    stopObserving(domElement) {\n        this.stopListening(domElement);\n    }\n    /**\n     * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\n     *\n     * @see module:utils/emittermixin~Emitter#fire\n     * @param eventType The event type (name).\n     * @param domEvent The DOM event.\n     * @param additionalData The additional data which should extend the\n     * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\n     */\n    fire(eventType, domEvent, additionalData) {\n        if (this.isEnabled) {\n            this.document.fire(eventType, new DomEventData(this.view, domEvent, additionalData));\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/keyobserver\n */\nimport DomEventObserver from './domeventobserver.js';\nimport { getCode } from '@ckeditor/ckeditor5-utils';\n/**\n * Observer for events connected with pressing keyboard keys.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class KeyObserver extends DomEventObserver {\n    constructor() {\n        super(...arguments);\n        /**\n         * @inheritDoc\n         */\n        this.domEventType = ['keydown', 'keyup'];\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvt) {\n        const data = {\n            keyCode: domEvt.keyCode,\n            altKey: domEvt.altKey,\n            ctrlKey: domEvt.ctrlKey,\n            shiftKey: domEvt.shiftKey,\n            metaKey: domEvt.metaKey,\n            get keystroke() {\n                return getCode(this);\n            }\n        };\n        this.fire(domEvt.type, domEvt, data);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/fakeselectionobserver\n */\nimport Observer from './observer.js';\nimport ViewSelection from '../selection.js';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils';\nimport { debounce } from 'lodash-es';\n/**\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\n * if arrow keys are pressed.\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\n */\nexport default class FakeSelectionObserver extends Observer {\n    /**\n     * Creates new FakeSelectionObserver instance.\n     */\n    constructor(view) {\n        super(view);\n        this._fireSelectionChangeDoneDebounced = debounce(data => {\n            this.document.fire('selectionChangeDone', data);\n        }, 200);\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() {\n        const document = this.document;\n        document.on('arrowKey', (eventInfo, data) => {\n            const selection = document.selection;\n            if (selection.isFake && this.isEnabled) {\n                // Prevents default key down handling - no selection change will occur.\n                data.preventDefault();\n            }\n        }, { context: '$capture' });\n        document.on('arrowKey', (eventInfo, data) => {\n            const selection = document.selection;\n            if (selection.isFake && this.isEnabled) {\n                this._handleSelectionMove(data.keyCode);\n            }\n        }, { priority: 'lowest' });\n    }\n    /**\n     * @inheritDoc\n     */\n    stopObserving() { }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this._fireSelectionChangeDoneDebounced.cancel();\n    }\n    /**\n     * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\n     * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\n     *\n     * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\n     * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\n     * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n     */\n    _handleSelectionMove(keyCode) {\n        const selection = this.document.selection;\n        const newSelection = new ViewSelection(selection.getRanges(), { backward: selection.isBackward, fake: false });\n        // Left or up arrow pressed - move selection to start.\n        if (keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup) {\n            newSelection.setTo(newSelection.getFirstPosition());\n        }\n        // Right or down arrow pressed - move selection to end.\n        if (keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown) {\n            newSelection.setTo(newSelection.getLastPosition());\n        }\n        const data = {\n            oldSelection: selection,\n            newSelection,\n            domSelection: null\n        };\n        // Fire dummy selection change event.\n        this.document.fire('selectionChange', data);\n        // Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n        // This function is debounced what means that `selectionChangeDone` event will be fired only when\n        // defined int the function time will elapse since the last time the function was called.\n        // So `selectionChangeDone` will be fired when selection will stop changing.\n        this._fireSelectionChangeDoneDebounced(data);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/mutationobserver\n */\n/* globals window */\nimport Observer from './observer.js';\nimport { startsWithFiller } from '../filler.js';\nimport { isEqualWith } from 'lodash-es';\n// @if CK_DEBUG_TYPING // const { _debouncedLine } = require( '../../dev-utils/utils.js' );\n/**\n * Mutation observer's role is to watch for any DOM changes inside the editor that weren't\n * done by the editor's {@link module:engine/view/renderer~Renderer} itself and reverting these changes.\n *\n * It does this by observing all mutations in the DOM, marking related view elements as changed and calling\n * {@link module:engine/view/renderer~Renderer#render}. Because all mutated nodes are marked as\n * \"to be rendered\" and the {@link module:engine/view/renderer~Renderer#render `render()`} method is called,\n * all changes are reverted in the DOM (the DOM is synced with the editor's view structure).\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class MutationObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        this._config = {\n            childList: true,\n            characterData: true,\n            subtree: true\n        };\n        this.domConverter = view.domConverter;\n        this._domElements = new Set();\n        this._mutationObserver = new window.MutationObserver(this._onMutations.bind(this));\n    }\n    /**\n     * Synchronously handles mutations and empties the queue.\n     */\n    flush() {\n        this._onMutations(this._mutationObserver.takeRecords());\n    }\n    /**\n     * @inheritDoc\n     */\n    observe(domElement) {\n        this._domElements.add(domElement);\n        if (this.isEnabled) {\n            this._mutationObserver.observe(domElement, this._config);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    stopObserving(domElement) {\n        this._domElements.delete(domElement);\n        if (this.isEnabled) {\n            // Unfortunately, it is not possible to stop observing particular DOM element.\n            // In order to stop observing one of multiple DOM elements, we need to re-connect the mutation observer.\n            this._mutationObserver.disconnect();\n            for (const domElement of this._domElements) {\n                this._mutationObserver.observe(domElement, this._config);\n            }\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    enable() {\n        super.enable();\n        for (const domElement of this._domElements) {\n            this._mutationObserver.observe(domElement, this._config);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    disable() {\n        super.disable();\n        this._mutationObserver.disconnect();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this._mutationObserver.disconnect();\n    }\n    /**\n     * Handles mutations. Mark view elements to sync and call render.\n     *\n     * @param domMutations Array of native mutations.\n     */\n    _onMutations(domMutations) {\n        // As a result of this.flush() we can have an empty collection.\n        if (domMutations.length === 0) {\n            return;\n        }\n        const domConverter = this.domConverter;\n        // Use map and set for deduplication.\n        const mutatedTextNodes = new Set();\n        const elementsWithMutatedChildren = new Set();\n        // Handle `childList` mutations first, so we will be able to check if the `characterData` mutation is in the\n        // element with changed structure anyway.\n        for (const mutation of domMutations) {\n            const element = domConverter.mapDomToView(mutation.target);\n            if (!element) {\n                continue;\n            }\n            // Do not collect mutations from UIElements and RawElements.\n            if (element.is('uiElement') || element.is('rawElement')) {\n                continue;\n            }\n            if (mutation.type === 'childList' && !this._isBogusBrMutation(mutation)) {\n                elementsWithMutatedChildren.add(element);\n            }\n        }\n        // Handle `characterData` mutations later, when we have the full list of nodes which changed structure.\n        for (const mutation of domMutations) {\n            const element = domConverter.mapDomToView(mutation.target);\n            // Do not collect mutations from UIElements and RawElements.\n            if (element && (element.is('uiElement') || element.is('rawElement'))) {\n                continue;\n            }\n            if (mutation.type === 'characterData') {\n                const text = domConverter.findCorrespondingViewText(mutation.target);\n                if (text && !elementsWithMutatedChildren.has(text.parent)) {\n                    mutatedTextNodes.add(text);\n                }\n                // When we added first letter to the text node which had only inline filler, for the DOM it is mutation\n                // on text, but for the view, where filler text node did not exist, new text node was created, so we\n                // need to handle it as a 'children' mutation instead of 'text'.\n                else if (!text && startsWithFiller(mutation.target)) {\n                    elementsWithMutatedChildren.add(domConverter.mapDomToView(mutation.target.parentNode));\n                }\n            }\n        }\n        // Now we build the list of mutations to mark elements. We did not do it earlier to avoid marking the\n        // same node multiple times in case of duplication.\n        const mutations = [];\n        for (const textNode of mutatedTextNodes) {\n            mutations.push({ type: 'text', node: textNode });\n        }\n        for (const viewElement of elementsWithMutatedChildren) {\n            const domElement = domConverter.mapViewToDom(viewElement);\n            const viewChildren = Array.from(viewElement.getChildren());\n            const newViewChildren = Array.from(domConverter.domChildrenToView(domElement, { withChildren: false }));\n            // It may happen that as a result of many changes (sth was inserted and then removed),\n            // both elements haven't really changed. #1031\n            if (!isEqualWith(viewChildren, newViewChildren, sameNodes)) {\n                mutations.push({ type: 'children', node: viewElement });\n            }\n        }\n        // In case only non-relevant mutations were recorded it skips the event and force render (#5600).\n        if (mutations.length) {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \t_debouncedLine();\n            // @if CK_DEBUG_TYPING // \tconsole.group( '%c[MutationObserver]%c Mutations detected',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green', 'font-weight: bold'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            this.document.fire('mutations', { mutations });\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n            // @if CK_DEBUG_TYPING // }\n        }\n    }\n    /**\n     * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.\n     * Such mutations are generated while pressing space or performing native spellchecker correction\n     * on the end of the block element in Firefox browser.\n     *\n     * @param mutation Native mutation object.\n     */\n    _isBogusBrMutation(mutation) {\n        let addedNode = null;\n        // Check if mutation added only one node on the end of its parent.\n        if (mutation.nextSibling === null && mutation.removedNodes.length === 0 && mutation.addedNodes.length == 1) {\n            addedNode = this.domConverter.domToView(mutation.addedNodes[0], {\n                withChildren: false\n            });\n        }\n        return addedNode && addedNode.is('element', 'br');\n    }\n}\nfunction sameNodes(child1, child2) {\n    // First level of comparison (array of children vs array of children) – use the Lodash's default behavior.\n    if (Array.isArray(child1)) {\n        return;\n    }\n    // Elements.\n    if (child1 === child2) {\n        return true;\n    }\n    // Texts.\n    else if (child1.is('$text') && child2.is('$text')) {\n        return child1.data === child2.data;\n    }\n    // Not matching types.\n    return false;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/focusobserver\n */\n/* globals setTimeout, clearTimeout */\nimport DomEventObserver from './domeventobserver.js';\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class FocusObserver extends DomEventObserver {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        /**\n         * Identifier of the timeout currently used by focus listener to delay rendering execution.\n         */\n        this._renderTimeoutId = null;\n        /**\n         * Set to `true` if the document is in the process of setting the focus.\n         *\n         * The flag is used to indicate that setting the focus is in progress.\n         */\n        this._isFocusChanging = false;\n        /**\n         * @inheritDoc\n         */\n        this.domEventType = ['focus', 'blur'];\n        this.useCapture = true;\n        const document = this.document;\n        document.on('focus', () => this._handleFocus());\n        document.on('blur', (evt, data) => this._handleBlur(data));\n        // Focus the editor in cases where browser dispatches `beforeinput` event to a not-focused editable element.\n        // This is flushed by the beforeinput listener in the `InsertTextObserver`.\n        // Note that focus is set only if the document is not focused yet.\n        // See https://github.com/ckeditor/ckeditor5/issues/14702.\n        document.on('beforeinput', () => {\n            if (!document.isFocused) {\n                this._handleFocus();\n            }\n        }, { priority: 'highest' });\n    }\n    /**\n     * Finishes setting the document focus state.\n     */\n    flush() {\n        if (this._isFocusChanging) {\n            this._isFocusChanging = false;\n            this.document.isFocused = true;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvent) {\n        this.fire(domEvent.type, domEvent);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this._clearTimeout();\n        super.destroy();\n    }\n    /**\n     * The `focus` event handler.\n     */\n    _handleFocus() {\n        this._clearTimeout();\n        this._isFocusChanging = true;\n        // Unfortunately native `selectionchange` event is fired asynchronously.\n        // We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n        // overwrite new DOM selection with selection from the view.\n        // See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n        // Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n        //\n        // Using `view.change()` instead of `view.forceRender()` to prevent double rendering\n        // in a situation where `selectionchange` already caused selection change.\n        this._renderTimeoutId = setTimeout(() => {\n            this._renderTimeoutId = null;\n            this.flush();\n            this.view.change(() => { });\n        }, 50);\n    }\n    /**\n     * The `blur` event handler.\n     */\n    _handleBlur(data) {\n        const selectedEditable = this.document.selection.editableElement;\n        if (selectedEditable === null || selectedEditable === data.target) {\n            this.document.isFocused = false;\n            this._isFocusChanging = false;\n            // Re-render the document to update view elements\n            // (changing document.isFocused already marked view as changed since last rendering).\n            this.view.change(() => { });\n        }\n    }\n    /**\n     * Clears timeout.\n     */\n    _clearTimeout() {\n        if (this._renderTimeoutId) {\n            clearTimeout(this._renderTimeoutId);\n            this._renderTimeoutId = null;\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/selectionobserver\n */\n/* global setInterval, clearInterval */\nimport Observer from './observer.js';\nimport MutationObserver from './mutationobserver.js';\nimport FocusObserver from './focusobserver.js';\nimport { env } from '@ckeditor/ckeditor5-utils';\nimport { debounce } from 'lodash-es';\n/**\n * Selection observer class observes selection changes in the document. If a selection changes on the document this\n * observer checks if the DOM selection is different from the {@link module:engine/view/document~Document#selection view selection}.\n * The selection observer fires {@link module:engine/view/document~Document#event:selectionChange} event only if\n * a selection change was the only change in the document and the DOM selection is different from the view selection.\n *\n * This observer also manages the {@link module:engine/view/document~Document#isSelecting} property of the view document.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class SelectionObserver extends Observer {\n    constructor(view) {\n        super(view);\n        this.mutationObserver = view.getObserver(MutationObserver);\n        this.focusObserver = view.getObserver(FocusObserver);\n        this.selection = this.document.selection;\n        this.domConverter = view.domConverter;\n        this._documents = new WeakSet();\n        this._fireSelectionChangeDoneDebounced = debounce(data => {\n            this.document.fire('selectionChangeDone', data);\n        }, 200);\n        this._clearInfiniteLoopInterval = setInterval(() => this._clearInfiniteLoop(), 1000);\n        this._documentIsSelectingInactivityTimeoutDebounced = debounce(() => (this.document.isSelecting = false), 5000);\n        this._loopbackCounter = 0;\n    }\n    /**\n     * @inheritDoc\n     */\n    observe(domElement) {\n        const domDocument = domElement.ownerDocument;\n        const startDocumentIsSelecting = () => {\n            this.document.isSelecting = true;\n            // Let's activate the safety timeout each time the document enters the \"is selecting\" state.\n            this._documentIsSelectingInactivityTimeoutDebounced();\n        };\n        const endDocumentIsSelecting = () => {\n            if (!this.document.isSelecting) {\n                return;\n            }\n            // Make sure that model selection is up-to-date at the end of selecting process.\n            // Sometimes `selectionchange` events could arrive after the `mouseup` event and that selection could be already outdated.\n            this._handleSelectionChange(domDocument);\n            this.document.isSelecting = false;\n            // The safety timeout can be canceled when the document leaves the \"is selecting\" state.\n            this._documentIsSelectingInactivityTimeoutDebounced.cancel();\n        };\n        // The document has the \"is selecting\" state while the user keeps making (extending) the selection\n        // (e.g. by holding the mouse button and moving the cursor). The state resets when they either released\n        // the mouse button or interrupted the process by pressing or releasing any key.\n        this.listenTo(domElement, 'selectstart', startDocumentIsSelecting, { priority: 'highest' });\n        this.listenTo(domElement, 'keydown', endDocumentIsSelecting, { priority: 'highest', useCapture: true });\n        this.listenTo(domElement, 'keyup', endDocumentIsSelecting, { priority: 'highest', useCapture: true });\n        // Add document-wide listeners only once. This method could be called for multiple editing roots.\n        if (this._documents.has(domDocument)) {\n            return;\n        }\n        // This listener is using capture mode to make sure that selection is upcasted before any other\n        // handler would like to check it and update (for example table multi cell selection).\n        this.listenTo(domDocument, 'mouseup', endDocumentIsSelecting, { priority: 'highest', useCapture: true });\n        this.listenTo(domDocument, 'selectionchange', () => {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \t_debouncedLine();\n            // @if CK_DEBUG_TYPING // \tconst domSelection = domDocument.defaultView!.getSelection();\n            // @if CK_DEBUG_TYPING // \tconsole.group( '%c[SelectionObserver]%c selectionchange', 'color: green', ''\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[SelectionObserver]%c DOM Selection:', 'font-weight: bold; color: green', '',\n            // @if CK_DEBUG_TYPING // \t\t{ node: domSelection!.anchorNode, offset: domSelection!.anchorOffset },\n            // @if CK_DEBUG_TYPING // \t\t{ node: domSelection!.focusNode, offset: domSelection!.focusOffset }\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            // The Renderer is disabled while composing on non-android browsers, so we can't update the view selection\n            // because the DOM and view tree drifted apart. Position mapping could fail because of it.\n            if (this.document.isComposing && !env.isAndroid) {\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.info( '%c[SelectionObserver]%c Selection change ignored (isComposing)',\n                // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green', ''\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n                // @if CK_DEBUG_TYPING // }\n                return;\n            }\n            this._handleSelectionChange(domDocument);\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n            // @if CK_DEBUG_TYPING // }\n            // Defer the safety timeout when the selection changes (e.g. the user keeps extending the selection\n            // using their mouse).\n            this._documentIsSelectingInactivityTimeoutDebounced();\n        });\n        // Update the model DocumentSelection just after the Renderer and the SelectionObserver are locked.\n        // We do this synchronously (without waiting for the `selectionchange` DOM event) as browser updates\n        // the DOM selection (but not visually) to span the text that is under composition and could be replaced.\n        this.listenTo(this.view.document, 'compositionstart', () => {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconst domSelection = domDocument.defaultView!.getSelection();\n            // @if CK_DEBUG_TYPING // \tconsole.group( '%c[SelectionObserver]%c update selection on compositionstart', 'color: green', ''\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[SelectionObserver]%c DOM Selection:', 'font-weight: bold; color: green', '',\n            // @if CK_DEBUG_TYPING // \t\t{ node: domSelection!.anchorNode, offset: domSelection!.anchorOffset },\n            // @if CK_DEBUG_TYPING // \t\t{ node: domSelection!.focusNode, offset: domSelection!.focusOffset }\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            this._handleSelectionChange(domDocument);\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n            // @if CK_DEBUG_TYPING // }\n        }, { priority: 'lowest' });\n        this._documents.add(domDocument);\n    }\n    /**\n     * @inheritDoc\n     */\n    stopObserving(domElement) {\n        this.stopListening(domElement);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        clearInterval(this._clearInfiniteLoopInterval);\n        this._fireSelectionChangeDoneDebounced.cancel();\n        this._documentIsSelectingInactivityTimeoutDebounced.cancel();\n    }\n    /* istanbul ignore next -- @preserve */\n    _reportInfiniteLoop() {\n        // @if CK_DEBUG //\t\tthrow new Error(\n        // @if CK_DEBUG //\t\t\t'Selection change observer detected an infinite rendering loop.\\n\\n' +\n        // @if CK_DEBUG //\t \t\t'⚠️⚠️ Report this error on https://github.com/ckeditor/ckeditor5/issues/11658.'\n        // @if CK_DEBUG //\t\t);\n    }\n    /**\n     * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if\n     * a selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change\n     * and {@link module:engine/view/document~Document#event:selectionChangeDone} when a selection stop changing.\n     *\n     * @param domDocument DOM document.\n     */\n    _handleSelectionChange(domDocument) {\n        if (!this.isEnabled) {\n            return;\n        }\n        const domSelection = domDocument.defaultView.getSelection();\n        if (this.checkShouldIgnoreEventFromTarget(domSelection.anchorNode)) {\n            return;\n        }\n        // Ensure the mutation event will be before selection event on all browsers.\n        this.mutationObserver.flush();\n        const newViewSelection = this.domConverter.domSelectionToView(domSelection);\n        // Do not convert selection change if the new view selection has no ranges in it.\n        //\n        // It means that the DOM selection is in some way incorrect. Ranges that were in the DOM selection could not be\n        // converted to the view. This happens when the DOM selection was moved outside of the editable element.\n        if (newViewSelection.rangeCount == 0) {\n            this.view.hasDomSelection = false;\n            return;\n        }\n        this.view.hasDomSelection = true;\n        // Mark the latest focus change as complete (we got new selection after the focus so the selection is in the focused element).\n        this.focusObserver.flush();\n        if (this.selection.isEqual(newViewSelection) && this.domConverter.isDomSelectionCorrect(domSelection)) {\n            return;\n        }\n        // Ensure we are not in the infinite loop (#400).\n        // This counter is reset each second. 60 selection changes in 1 second is enough high number\n        // to be very difficult (impossible) to achieve using just keyboard keys (during normal editor use).\n        if (++this._loopbackCounter > 60) {\n            // Selection change observer detected an infinite rendering loop.\n            // Most probably you try to put the selection in the position which is not allowed\n            // by the browser and browser fixes it automatically what causes `selectionchange` event on\n            // which a loopback through a model tries to re-render the wrong selection and again.\n            this._reportInfiniteLoop();\n            return;\n        }\n        if (this.selection.isSimilar(newViewSelection)) {\n            // If selection was equal and we are at this point of algorithm, it means that it was incorrect.\n            // Just re-render it, no need to fire any events, etc.\n            this.view.forceRender();\n        }\n        else {\n            const data = {\n                oldSelection: this.selection,\n                newSelection: newViewSelection,\n                domSelection\n            };\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[SelectionObserver]%c Fire selection change:',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green', '',\n            // @if CK_DEBUG_TYPING // \t\tnewViewSelection.getFirstRange()\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            // Prepare data for new selection and fire appropriate events.\n            this.document.fire('selectionChange', data);\n            // Call `#_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n            // This function is debounced what means that `selectionChangeDone` event will be fired only when\n            // defined int the function time will elapse since the last time the function was called.\n            // So `selectionChangeDone` will be fired when selection will stop changing.\n            this._fireSelectionChangeDoneDebounced(data);\n        }\n    }\n    /**\n     * Clears `SelectionObserver` internal properties connected with preventing infinite loop.\n     */\n    _clearInfiniteLoop() {\n        this._loopbackCounter = 0;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/compositionobserver\n */\nimport DomEventObserver from './domeventobserver.js';\n// @if CK_DEBUG_TYPING // const { _debouncedLine } = require( '../../dev-utils/utils.js' );\n/**\n * {@link module:engine/view/document~Document#event:compositionstart Compositionstart},\n * {@link module:engine/view/document~Document#event:compositionupdate compositionupdate} and\n * {@link module:engine/view/document~Document#event:compositionend compositionend} events observer.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class CompositionObserver extends DomEventObserver {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        /**\n         * @inheritDoc\n         */\n        this.domEventType = ['compositionstart', 'compositionupdate', 'compositionend'];\n        const document = this.document;\n        document.on('compositionstart', () => {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.log( '%c[CompositionObserver] ' +\n            // @if CK_DEBUG_TYPING // \t\t'┌───────────────────────────── isComposing = true ─────────────────────────────┐',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            document.isComposing = true;\n        }, { priority: 'low' });\n        document.on('compositionend', () => {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.log( '%c[CompositionObserver] ' +\n            // @if CK_DEBUG_TYPING // \t\t'└───────────────────────────── isComposing = false ─────────────────────────────┘',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            document.isComposing = false;\n        }, { priority: 'low' });\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvent) {\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \t_debouncedLine();\n        // @if CK_DEBUG_TYPING // \tconsole.group( `%c[CompositionObserver]%c ${ domEvent.type }`, 'color: green', '' );\n        // @if CK_DEBUG_TYPING // }\n        this.fire(domEvent.type, domEvent, {\n            data: domEvent.data\n        });\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n        // @if CK_DEBUG_TYPING // }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * A facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nexport default class DataTransfer {\n    /**\n     * @param nativeDataTransfer The native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n     * @param options.cacheFiles Whether `files` list should be initialized in the constructor.\n     */\n    constructor(nativeDataTransfer, options = {}) {\n        // We should store references to the File instances in case someone would like to process this files\n        // outside the event handler. Files are stored only for `drop` and `paste` events because they are not usable\n        // in other events and are generating a huge delay on Firefox while dragging.\n        // See https://github.com/ckeditor/ckeditor5/issues/13366.\n        this._files = options.cacheFiles ? getFiles(nativeDataTransfer) : null;\n        this._native = nativeDataTransfer;\n    }\n    /**\n     * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n     */\n    get files() {\n        if (!this._files) {\n            this._files = getFiles(this._native);\n        }\n        return this._files;\n    }\n    /**\n     * Returns an array of available native content types.\n     */\n    get types() {\n        return this._native.types;\n    }\n    /**\n     * Gets the data from the data transfer by its MIME type.\n     *\n     * ```ts\n     * dataTransfer.getData( 'text/plain' );\n     * ```\n     *\n     * @param type The MIME type. E.g. `text/html` or `text/plain`.\n     */\n    getData(type) {\n        return this._native.getData(type);\n    }\n    /**\n     * Sets the data in the data transfer.\n     *\n     * @param type The MIME type. E.g. `text/html` or `text/plain`.\n     */\n    setData(type, data) {\n        this._native.setData(type, data);\n    }\n    /**\n     * The effect that is allowed for a drag operation.\n     */\n    set effectAllowed(value) {\n        this._native.effectAllowed = value;\n    }\n    get effectAllowed() {\n        return this._native.effectAllowed;\n    }\n    /**\n     * The actual drop effect.\n     */\n    set dropEffect(value) {\n        this._native.dropEffect = value;\n    }\n    get dropEffect() {\n        return this._native.dropEffect;\n    }\n    /**\n     * Set a preview image of the dragged content.\n     */\n    setDragImage(image, x, y) {\n        this._native.setDragImage(image, x, y);\n    }\n    /**\n     * Whether the dragging operation was canceled.\n     */\n    get isCanceled() {\n        return this._native.dropEffect == 'none' || !!this._native.mozUserCancelled;\n    }\n}\nfunction getFiles(nativeDataTransfer) {\n    // DataTransfer.files and items are array-like and might not have an iterable interface.\n    const files = Array.from(nativeDataTransfer.files || []);\n    const items = Array.from(nativeDataTransfer.items || []);\n    if (files.length) {\n        return files;\n    }\n    // Chrome has empty DataTransfer.files, but allows getting files through the items interface.\n    return items\n        .filter(item => item.kind === 'file')\n        .map(item => item.getAsFile());\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/inputobserver\n */\nimport DomEventObserver from './domeventobserver.js';\nimport DataTransfer from '../datatransfer.js';\nimport { env } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_TYPING // const { _debouncedLine } = require( '../../dev-utils/utils.js' );\n/**\n * Observer for events connected with data input.\n *\n * **Note**: This observer is attached by {@link module:engine/view/view~View} and available by default in all\n * editor instances.\n */\nexport default class InputObserver extends DomEventObserver {\n    constructor() {\n        super(...arguments);\n        /**\n         * @inheritDoc\n         */\n        this.domEventType = 'beforeinput';\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvent) {\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \t_debouncedLine();\n        // @if CK_DEBUG_TYPING // \tconsole.group( `%c[InputObserver]%c ${ domEvent.type }: ${ domEvent.inputType }`,\n        // @if CK_DEBUG_TYPING // \t\t'color: green', 'color: default'\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        const domTargetRanges = domEvent.getTargetRanges();\n        const view = this.view;\n        const viewDocument = view.document;\n        let dataTransfer = null;\n        let data = null;\n        let targetRanges = [];\n        if (domEvent.dataTransfer) {\n            dataTransfer = new DataTransfer(domEvent.dataTransfer);\n        }\n        if (domEvent.data !== null) {\n            data = domEvent.data;\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( `%c[InputObserver]%c event data: %c${ JSON.stringify( data ) }`,\n            // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-weight: bold', 'color: blue;'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n        }\n        else if (dataTransfer) {\n            data = dataTransfer.getData('text/plain');\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( `%c[InputObserver]%c event data transfer: %c${ JSON.stringify( data ) }`,\n            // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-weight: bold', 'color: blue;'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n        }\n        // If the editor selection is fake (an object is selected), the DOM range does not make sense because it is anchored\n        // in the fake selection container.\n        if (viewDocument.selection.isFake) {\n            // Future-proof: in case of multi-range fake selections being possible.\n            targetRanges = Array.from(viewDocument.selection.getRanges());\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[InputObserver]%c using fake selection:',\n            // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-weight: bold', targetRanges,\n            // @if CK_DEBUG_TYPING // \t\tviewDocument.selection.isFake ? 'fake view selection' : 'fake DOM parent'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n        }\n        else if (domTargetRanges.length) {\n            targetRanges = domTargetRanges.map(domRange => {\n                // Sometimes browser provides range that starts before editable node.\n                // We try to fall back to collapsed range at the valid end position.\n                // See https://github.com/ckeditor/ckeditor5/issues/14411.\n                // See https://github.com/ckeditor/ckeditor5/issues/14050.\n                const viewStart = view.domConverter.domPositionToView(domRange.startContainer, domRange.startOffset);\n                const viewEnd = view.domConverter.domPositionToView(domRange.endContainer, domRange.endOffset);\n                if (viewStart) {\n                    return view.createRange(viewStart, viewEnd);\n                }\n                else if (viewEnd) {\n                    return view.createRange(viewEnd);\n                }\n            }).filter((range) => !!range);\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[InputObserver]%c using target ranges:',\n            // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-weight: bold', targetRanges\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n        }\n        // For Android devices we use a fallback to the current DOM selection, Android modifies it according\n        // to the expected target ranges of input event.\n        else if (env.isAndroid) {\n            const domSelection = domEvent.target.ownerDocument.defaultView.getSelection();\n            targetRanges = Array.from(view.domConverter.domSelectionToView(domSelection).getRanges());\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[InputObserver]%c using selection ranges:',\n            // @if CK_DEBUG_TYPING // \t\t'color: green; font-weight: bold', 'font-weight: bold', targetRanges\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n        }\n        // Android sometimes fires insertCompositionText with a new-line character at the end of the data\n        // instead of firing insertParagraph beforeInput event.\n        // Fire the correct type of beforeInput event and ignore the replaced fragment of text because\n        // it wants to replace \"test\" with \"test\\n\".\n        // https://github.com/ckeditor/ckeditor5/issues/12368.\n        if (env.isAndroid && domEvent.inputType == 'insertCompositionText' && data && data.endsWith('\\n')) {\n            this.fire(domEvent.type, domEvent, {\n                inputType: 'insertParagraph',\n                targetRanges: [view.createRange(targetRanges[0].end)]\n            });\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n            // @if CK_DEBUG_TYPING // }\n            return;\n        }\n        // Normalize the insertText data that includes new-line characters.\n        // https://github.com/ckeditor/ckeditor5/issues/2045.\n        if (domEvent.inputType == 'insertText' && data && data.includes('\\n')) {\n            // There might be a single new-line or double for new paragraph, but we translate\n            // it to paragraphs as it is our default action for enter handling.\n            const parts = data.split(/\\n{1,2}/g);\n            let partTargetRanges = targetRanges;\n            for (let i = 0; i < parts.length; i++) {\n                const dataPart = parts[i];\n                if (dataPart != '') {\n                    this.fire(domEvent.type, domEvent, {\n                        data: dataPart,\n                        dataTransfer,\n                        targetRanges: partTargetRanges,\n                        inputType: domEvent.inputType,\n                        isComposing: domEvent.isComposing\n                    });\n                    // Use the result view selection so following events will be added one after another.\n                    partTargetRanges = [viewDocument.selection.getFirstRange()];\n                }\n                if (i + 1 < parts.length) {\n                    this.fire(domEvent.type, domEvent, {\n                        inputType: 'insertParagraph',\n                        targetRanges: partTargetRanges\n                    });\n                    // Use the result view selection so following events will be added one after another.\n                    partTargetRanges = [viewDocument.selection.getFirstRange()];\n                }\n            }\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n            // @if CK_DEBUG_TYPING // }\n            return;\n        }\n        // Fire the normalized beforeInput event.\n        this.fire(domEvent.type, domEvent, {\n            data,\n            dataTransfer,\n            targetRanges,\n            inputType: domEvent.inputType,\n            isComposing: domEvent.isComposing\n        });\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n        // @if CK_DEBUG_TYPING // }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/arrowkeysobserver\n */\nimport Observer from './observer.js';\nimport BubblingEventInfo from './bubblingeventinfo.js';\nimport { isArrowKeyCode } from '@ckeditor/ckeditor5-utils';\n/**\n * Arrow keys observer introduces the {@link module:engine/view/document~Document#event:arrowKey `Document#arrowKey`} event.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class ArrowKeysObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        this.document.on('keydown', (event, data) => {\n            if (this.isEnabled && isArrowKeyCode(data.keyCode)) {\n                const eventInfo = new BubblingEventInfo(this.document, 'arrowKey', this.document.selection.getFirstRange());\n                this.document.fire(eventInfo, data);\n                if (eventInfo.stop.called) {\n                    event.stop();\n                }\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() { }\n    /**\n     * @inheritDoc\n     */\n    stopObserving() { }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Observer from './observer.js';\nimport BubblingEventInfo from './bubblingeventinfo.js';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils';\n/**\n * Tab observer introduces the {@link module:engine/view/document~Document#event:tab `Document#tab`} event.\n *\n * Note that because {@link module:engine/view/observer/tabobserver~TabObserver} is attached by the\n * {@link module:engine/view/view~View}, this event is available by default.\n */\nexport default class TabObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        const doc = this.document;\n        doc.on('keydown', (evt, data) => {\n            if (!this.isEnabled ||\n                data.keyCode != keyCodes.tab ||\n                data.ctrlKey) {\n                return;\n            }\n            const event = new BubblingEventInfo(doc, 'tab', doc.selection.getFirstRange());\n            doc.fire(event, data);\n            if (event.stop.called) {\n                evt.stop();\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() { }\n    /**\n     * @inheritDoc\n     */\n    stopObserving() { }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/view\n */\nimport Document from './document.js';\nimport DowncastWriter from './downcastwriter.js';\nimport Renderer from './renderer.js';\nimport DomConverter from './domconverter.js';\nimport Position from './position.js';\nimport Range from './range.js';\nimport Selection from './selection.js';\nimport KeyObserver from './observer/keyobserver.js';\nimport FakeSelectionObserver from './observer/fakeselectionobserver.js';\nimport MutationObserver from './observer/mutationobserver.js';\nimport SelectionObserver from './observer/selectionobserver.js';\nimport FocusObserver from './observer/focusobserver.js';\nimport CompositionObserver from './observer/compositionobserver.js';\nimport InputObserver from './observer/inputobserver.js';\nimport ArrowKeysObserver from './observer/arrowkeysobserver.js';\nimport TabObserver from './observer/tabobserver.js';\nimport { CKEditorError, env, ObservableMixin, scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils';\nimport { injectUiElementHandling } from './uielement.js';\nimport { injectQuirksHandling } from './filler.js';\nimport { cloneDeep } from 'lodash-es';\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n * ```ts\n * view.change( writer => {\n * \twriter.insert( position, writer.createText( 'foo' ) );\n * } );\n * ```\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n * * {@link module:engine/view/observer/inputobserver~InputObserver}.\n * * {@link module:engine/view/observer/arrowkeysobserver~ArrowKeysObserver}.\n * * {@link module:engine/view/observer/tabobserver~TabObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n */\nexport default class View extends /* #__PURE__ */ ObservableMixin() {\n    /**\n     * @param stylesProcessor The styles processor instance.\n     */\n    constructor(stylesProcessor) {\n        super();\n        /**\n         * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n         */\n        this.domRoots = new Map();\n        /**\n         * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n         * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n         * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n         * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n         */\n        this._initialDomRootAttributes = new WeakMap();\n        /**\n         * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n         */\n        this._observers = new Map();\n        /**\n         * Is set to `true` when {@link #change view changes} are currently in progress.\n         */\n        this._ongoingChange = false;\n        /**\n         * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n         */\n        this._postFixersInProgress = false;\n        /**\n         * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n         */\n        this._renderingDisabled = false;\n        /**\n         * Internal flag that disables rendering when there are no changes since the last rendering.\n         * It stores information about changed selection and changed elements from attached document roots.\n         */\n        this._hasChangedSinceTheLastRendering = false;\n        this.document = new Document(stylesProcessor);\n        this.domConverter = new DomConverter(this.document);\n        this.set('isRenderingInProgress', false);\n        this.set('hasDomSelection', false);\n        this._renderer = new Renderer(this.domConverter, this.document.selection);\n        this._renderer.bind('isFocused', 'isSelecting', 'isComposing')\n            .to(this.document, 'isFocused', 'isSelecting', 'isComposing');\n        this._writer = new DowncastWriter(this.document);\n        // Add default observers.\n        // Make sure that this list matches AlwaysRegisteredObservers type.\n        this.addObserver(MutationObserver);\n        this.addObserver(FocusObserver);\n        this.addObserver(SelectionObserver);\n        this.addObserver(KeyObserver);\n        this.addObserver(FakeSelectionObserver);\n        this.addObserver(CompositionObserver);\n        this.addObserver(ArrowKeysObserver);\n        this.addObserver(InputObserver);\n        this.addObserver(TabObserver);\n        // Inject quirks handlers.\n        injectQuirksHandling(this);\n        injectUiElementHandling(this);\n        // Use 'normal' priority so that rendering is performed as first when using that priority.\n        this.on('render', () => {\n            this._render();\n            // Informs that layout has changed after render.\n            this.document.fire('layoutChanged');\n            // Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n            this._hasChangedSinceTheLastRendering = false;\n        });\n        // Listen to the document selection changes directly.\n        this.listenTo(this.document.selection, 'change', () => {\n            this._hasChangedSinceTheLastRendering = true;\n        });\n        // Trigger re-render if only the focus changed.\n        this.listenTo(this.document, 'change:isFocused', () => {\n            this._hasChangedSinceTheLastRendering = true;\n        });\n        // Remove ranges from DOM selection if editor is blurred.\n        // See https://github.com/ckeditor/ckeditor5/issues/5753.\n        if (env.isiOS) {\n            this.listenTo(this.document, 'blur', (evt, data) => {\n                const relatedViewElement = this.domConverter.mapDomToView(data.domEvent.relatedTarget);\n                // Do not modify DOM selection if focus is moved to other editable of the same editor.\n                if (!relatedViewElement) {\n                    this.domConverter._clearDomSelection();\n                }\n            });\n        }\n        // Listen to external content mutations (directly in the DOM) and mark them to get verified by the renderer.\n        this.listenTo(this.document, 'mutations', (evt, { mutations }) => {\n            mutations.forEach(mutation => this._renderer.markToSync(mutation.type, mutation.node));\n        }, { priority: 'low' });\n        // After all mutated nodes were marked to sync we can trigger view to DOM synchronization\n        // to make sure the DOM structure matches the view.\n        this.listenTo(this.document, 'mutations', () => {\n            this.forceRender();\n        }, { priority: 'lowest' });\n    }\n    /**\n     * Attaches a DOM root element to the view element and enable all observers on that element.\n     * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n     * with the view what means that all child nodes will be removed and replaced with content of the view root.\n     *\n     * This method also will change view element name as the same as tag name of given dom root.\n     * Name is always transformed to lower case.\n     *\n     * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n     *\n     * @param domRoot DOM root element.\n     * @param name Name of the root.\n     */\n    attachDomRoot(domRoot, name = 'main') {\n        const viewRoot = this.document.getRoot(name);\n        // Set view root name the same as DOM root tag name.\n        viewRoot._name = domRoot.tagName.toLowerCase();\n        const initialDomRootAttributes = {};\n        // 1. Copy and cache the attributes to remember the state of the element before attaching.\n        //    The cached attributes will be restored in detachDomRoot() so the element goes to the\n        //    clean state as if the editing view never used it.\n        // 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n        //    The editing view takes over the attribute management completely because various\n        //    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n        //    cannot be managed by the engine and the UI library at the same time.\n        for (const { name, value } of Array.from(domRoot.attributes)) {\n            initialDomRootAttributes[name] = value;\n            // Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n            // and its descendants could have already set some using the writer.addClass() on the view\n            // document root. They haven't been rendered yet so they are not present in the DOM root.\n            // Using writer.setAttribute( 'class', ... ) would override them completely.\n            if (name === 'class') {\n                this._writer.addClass(value.split(' '), viewRoot);\n            }\n            else {\n                // There is a chance that some attributes have already been set on the view root before attaching\n                // the DOM root and should be preserved. This is a similar case to the \"class\" attribute except\n                // this time there is no workaround using a some low-level API.\n                if (!viewRoot.hasAttribute(name)) {\n                    this._writer.setAttribute(name, value, viewRoot);\n                }\n            }\n        }\n        this._initialDomRootAttributes.set(domRoot, initialDomRootAttributes);\n        const updateContenteditableAttribute = () => {\n            this._writer.setAttribute('contenteditable', (!viewRoot.isReadOnly).toString(), viewRoot);\n            if (viewRoot.isReadOnly) {\n                this._writer.addClass('ck-read-only', viewRoot);\n            }\n            else {\n                this._writer.removeClass('ck-read-only', viewRoot);\n            }\n        };\n        // Set initial value.\n        updateContenteditableAttribute();\n        this.domRoots.set(name, domRoot);\n        this.domConverter.bindElements(domRoot, viewRoot);\n        this._renderer.markToSync('children', viewRoot);\n        this._renderer.markToSync('attributes', viewRoot);\n        this._renderer.domDocuments.add(domRoot.ownerDocument);\n        viewRoot.on('change:children', (evt, node) => this._renderer.markToSync('children', node));\n        viewRoot.on('change:attributes', (evt, node) => this._renderer.markToSync('attributes', node));\n        viewRoot.on('change:text', (evt, node) => this._renderer.markToSync('text', node));\n        viewRoot.on('change:isReadOnly', () => this.change(updateContenteditableAttribute));\n        viewRoot.on('change', () => {\n            this._hasChangedSinceTheLastRendering = true;\n        });\n        for (const observer of this._observers.values()) {\n            observer.observe(domRoot, name);\n        }\n    }\n    /**\n     * Detaches a DOM root element from the view element and restores its attributes to the state before\n     * {@link #attachDomRoot `attachDomRoot()`}.\n     *\n     * @param name Name of the root to detach.\n     */\n    detachDomRoot(name) {\n        const domRoot = this.domRoots.get(name);\n        // Remove all root attributes so the DOM element is \"bare\".\n        Array.from(domRoot.attributes).forEach(({ name }) => domRoot.removeAttribute(name));\n        const initialDomRootAttributes = this._initialDomRootAttributes.get(domRoot);\n        // Revert all view root attributes back to the state before attachDomRoot was called.\n        for (const attribute in initialDomRootAttributes) {\n            domRoot.setAttribute(attribute, initialDomRootAttributes[attribute]);\n        }\n        this.domRoots.delete(name);\n        this.domConverter.unbindDomElement(domRoot);\n        for (const observer of this._observers.values()) {\n            observer.stopObserving(domRoot);\n        }\n    }\n    /**\n     * Gets DOM root element.\n     *\n     * @param name  Name of the root.\n     * @returns DOM root element instance.\n     */\n    getDomRoot(name = 'main') {\n        return this.domRoots.get(name);\n    }\n    /**\n     * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n     * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n     * {@link #domRoots DOM roots}.\n     *\n     * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n     * when registered for the first time. This means that features and other components can register a single observer\n     * multiple times without caring whether it has been already added or not.\n     *\n     * @param ObserverConstructor The constructor of an observer to add.\n     * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n     * @returns Added observer instance.\n     */\n    addObserver(ObserverConstructor) {\n        let observer = this._observers.get(ObserverConstructor);\n        if (observer) {\n            return observer;\n        }\n        observer = new ObserverConstructor(this);\n        this._observers.set(ObserverConstructor, observer);\n        for (const [name, domElement] of this.domRoots) {\n            observer.observe(domElement, name);\n        }\n        observer.enable();\n        return observer;\n    }\n    /**\n     * Returns observer of the given type or `undefined` if such observer has not been added yet.\n     *\n     * @param ObserverConstructor The constructor of an observer to get.\n     * @returns Observer instance or undefined.\n     */\n    getObserver(ObserverConstructor) {\n        return this._observers.get(ObserverConstructor);\n    }\n    /**\n     * Disables all added observers.\n     */\n    disableObservers() {\n        for (const observer of this._observers.values()) {\n            observer.disable();\n        }\n    }\n    /**\n     * Enables all added observers.\n     */\n    enableObservers() {\n        for (const observer of this._observers.values()) {\n            observer.enable();\n        }\n    }\n    /**\n     * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n     * caret, **if not already visible to the user**.\n     *\n     * **Note**: Calling this method fires the {@link module:engine/view/view~ViewScrollToTheSelectionEvent} event that\n     * allows custom behaviors.\n     *\n     * @param options Additional configuration of the scrolling behavior.\n     * @param options.viewportOffset A distance between the DOM selection and the viewport boundary to be maintained\n     * while scrolling to the selection (default is 20px). Setting this value to `0` will reveal the selection precisely at\n     * the viewport boundary.\n     * @param options.ancestorOffset A distance between the DOM selection and scrollable DOM root ancestor(s) to be maintained\n     * while scrolling to the selection (default is 20px). Setting this value to `0` will reveal the selection precisely at\n     * the scrollable ancestor(s) boundary.\n     * @param options.alignToTop When set `true`, the DOM selection will be aligned to the top of the viewport if not already visible\n     * (see `forceScroll` to learn more).\n     * @param options.forceScroll When set `true`, the DOM selection will be aligned to the top of the viewport and scrollable ancestors\n     * whether it is already visible or not. This option will only work when `alignToTop` is `true`.\n     */\n    scrollToTheSelection({ alignToTop, forceScroll, viewportOffset = 20, ancestorOffset = 20 } = {}) {\n        const range = this.document.selection.getFirstRange();\n        if (!range) {\n            return;\n        }\n        // Clone to make sure properties like `viewportOffset` are not mutated in the event listeners.\n        const originalArgs = cloneDeep({ alignToTop, forceScroll, viewportOffset, ancestorOffset });\n        if (typeof viewportOffset === 'number') {\n            viewportOffset = {\n                top: viewportOffset,\n                bottom: viewportOffset,\n                left: viewportOffset,\n                right: viewportOffset\n            };\n        }\n        const options = {\n            target: this.domConverter.viewRangeToDom(range),\n            viewportOffset,\n            ancestorOffset,\n            alignToTop,\n            forceScroll\n        };\n        this.fire('scrollToTheSelection', options, originalArgs);\n        scrollViewportToShowTarget(options);\n    }\n    /**\n     * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n     * that is currently having selection inside.\n     */\n    focus() {\n        if (!this.document.isFocused) {\n            const editable = this.document.selection.editableElement;\n            if (editable) {\n                this.domConverter.focus(editable);\n                this.forceRender();\n            }\n            else {\n                // Before focusing view document, selection should be placed inside one of the view's editables.\n                // Normally its selection will be converted from model document (which have default selection), but\n                // when using view document on its own, we need to manually place selection before focusing it.\n                //\n                // @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n            }\n        }\n    }\n    /**\n     * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n     * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n     * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n     * to nest calls one inside another and still performs a single rendering after all those changes are made.\n     * It also returns the return value of its callback.\n     *\n     * ```ts\n     * const text = view.change( writer => {\n     * \tconst newText = writer.createText( 'foo' );\n     * \twriter.insert( position1, newText );\n     *\n     * \tview.change( writer => {\n     * \t\twriter.insert( position2, writer.createText( 'bar' ) );\n     * \t} );\n     *\n     * \twriter.remove( range );\n     *\n     * \treturn newText;\n     * } );\n     * ```\n     *\n     * When the outermost change block is done and rendering to the DOM is over the\n     * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n     *\n     * This method throws a `applying-view-changes-on-rendering` error when\n     * the change block is used after rendering to the DOM has started.\n     *\n     * @param callback Callback function which may modify the view.\n     * @returns Value returned by the callback.\n     */\n    change(callback) {\n        if (this.isRenderingInProgress || this._postFixersInProgress) {\n            /**\n             * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n             * cause some unexpected behaviour and inconsistency between the DOM and the view.\n             * This may be caused by:\n             *\n             * * calling {@link module:engine/view/view~View#change} or {@link module:engine/view/view~View#forceRender} during rendering\n             * process,\n             * * calling {@link module:engine/view/view~View#change} or {@link module:engine/view/view~View#forceRender} inside of\n             *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n             *\n             * @error cannot-change-view-tree\n             */\n            throw new CKEditorError('cannot-change-view-tree', this);\n        }\n        try {\n            // Recursive call to view.change() method - execute listener immediately.\n            if (this._ongoingChange) {\n                return callback(this._writer);\n            }\n            // This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n            // event for all nested calls.\n            this._ongoingChange = true;\n            const callbackResult = callback(this._writer);\n            this._ongoingChange = false;\n            // This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n            // view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n            // changes. Also, we don't need to render anything if there're no changes since last rendering.\n            if (!this._renderingDisabled && this._hasChangedSinceTheLastRendering) {\n                this._postFixersInProgress = true;\n                this.document._callPostFixers(this._writer);\n                this._postFixersInProgress = false;\n                this.fire('render');\n            }\n            return callbackResult;\n        }\n        catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next -- @preserve */\n            CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    /**\n     * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n     * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n     *\n     * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n     * block and the view will automatically check whether it needs to render DOM or not.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n     * trying to re-render when rendering to DOM has already started.\n     */\n    forceRender() {\n        this._hasChangedSinceTheLastRendering = true;\n        this.getObserver(FocusObserver).flush();\n        this.change(() => { });\n    }\n    /**\n     * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n     */\n    destroy() {\n        for (const observer of this._observers.values()) {\n            observer.destroy();\n        }\n        this.document.destroy();\n        this.stopListening();\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/view/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n     *\n     * This method is a shortcut to other constructors such as:\n     *\n     * * {@link #createPositionBefore},\n     * * {@link #createPositionAfter},\n     *\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    createPositionAt(itemOrPosition, offset) {\n        return Position._createAt(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new position after given view item.\n     *\n     * @param item View item after which the position should be located.\n     */\n    createPositionAfter(item) {\n        return Position._createAfter(item);\n    }\n    /**\n     * Creates a new position before given view item.\n     *\n     * @param item View item before which the position should be located.\n     */\n    createPositionBefore(item) {\n        return Position._createBefore(item);\n    }\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n     *\n     * @param start Start position.\n     * @param end End position. If not set, range will be collapsed at `start` position.\n     */\n    createRange(start, end) {\n        return new Range(start, end);\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n     */\n    createRangeOn(item) {\n        return Range._createOn(item);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @param element Element which is a parent for the range.\n     */\n    createRangeIn(element) {\n        return Range._createIn(element);\n    }\n    createSelection(...args) {\n        return new Selection(...args);\n    }\n    /**\n     * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n     * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n     *\n     * @internal\n     * @param flag A flag indicates whether the rendering should be disabled.\n     */\n    _disableRendering(flag) {\n        this._renderingDisabled = flag;\n        if (flag == false) {\n            // Render when you stop blocking rendering.\n            this.change(() => { });\n        }\n    }\n    /**\n     * Renders all changes. In order to avoid triggering the observers (e.g. selection) all observers are disabled\n     * before rendering and re-enabled after that.\n     */\n    _render() {\n        this.isRenderingInProgress = true;\n        this.disableObservers();\n        this._renderer.render();\n        this.enableObservers();\n        this.isRenderingInProgress = false;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nexport default class TypeCheckable {\n    /* istanbul ignore next -- @preserve */\n    is() {\n        // There are a lot of overloads above.\n        // Overriding method in derived classes remove them and only `is( type: string ): boolean` is visible which we don't want.\n        // One option would be to copy them all to all classes, but that's ugly.\n        // It's best when TypeScript compiler doesn't see those overloads, except the one in the top base class.\n        // To overload a method, but not let the compiler see it, do after class definition:\n        // `MyClass.prototype.is = function( type: string ) {...}`\n        throw new Error('is() method is abstract');\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * @module engine/model/node\n */\nimport TypeCheckable from './typecheckable.js';\nimport { compareArrays, toMap } from '@ckeditor/ckeditor5-utils';\n/**\n * Model node. Most basic structure of model tree.\n *\n * This is an abstract class that is a base for other classes representing different nodes in model.\n *\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\n * However, it is **very important** that nodes already attached to model tree should be only changed through\n * {@link module:engine/model/writer~Writer Writer API}.\n *\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#_insertChild _insertChild} or\n * {@link module:engine/model/node~Node#_setAttribute _setAttribute}\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\n *\n * The flow of working on `Node` (and classes that inherits from it) is as such:\n * 1. You can create a `Node` instance, modify it using it's API.\n * 2. Add `Node` to the model using `Batch` API.\n * 3. Change `Node` that was already added to the model using `Batch` API.\n *\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\n *\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\n * the information about `Node` is still kept in model document.\n *\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\n * follows same rules.\n */\nexport default class Node extends TypeCheckable {\n    /**\n     * Creates a model node.\n     *\n     * This is an abstract class, so this constructor should not be used directly.\n     *\n     * @param attrs Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     */\n    constructor(attrs) {\n        super();\n        /**\n         * Parent of this node. It could be {@link module:engine/model/element~Element}\n         * or {@link module:engine/model/documentfragment~DocumentFragment}.\n         * Equals to `null` if the node has no parent.\n         */\n        this.parent = null;\n        /**\n         * Index of this node in its parent or `null` if the node has no parent.\n         *\n         * @internal\n         */\n        this._index = null;\n        /**\n         * Offset at which this node starts in its parent or `null` if the node has no parent.\n         *\n         * @internal\n         */\n        this._startOffset = null;\n        this._attrs = toMap(attrs);\n    }\n    /**\n     * {@link module:engine/model/document~Document Document} that owns this root element.\n     */\n    get document() {\n        return null;\n    }\n    /**\n     * Index of this node in its parent or `null` if the node has no parent.\n     */\n    get index() {\n        return this._index;\n    }\n    /**\n     * Offset at which this node starts in its parent. It is equal to the sum of {@link #offsetSize offsetSize}\n     * of all its previous siblings. Equals to `null` if node has no parent.\n     */\n    get startOffset() {\n        return this._startOffset;\n    }\n    /**\n     * Offset size of this node.\n     *\n     * Represents how much \"offset space\" is occupied by the node in its parent. It is important for\n     * {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position can be placed between\n     * that node start and end. `offsetSize` greater than `1` is for nodes that represents more than one entity, i.e.\n     * a {@link module:engine/model/text~Text text node}.\n     */\n    get offsetSize() {\n        return 1;\n    }\n    /**\n     * Offset at which this node ends in its parent. It is equal to the sum of this node's\n     * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\n     * Equals to `null` if the node has no parent.\n     */\n    get endOffset() {\n        if (this.startOffset === null) {\n            return null;\n        }\n        return this.startOffset + this.offsetSize;\n    }\n    /**\n     * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\n     */\n    get nextSibling() {\n        const index = this.index;\n        return (index !== null && this.parent.getChild(index + 1)) || null;\n    }\n    /**\n     * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\n     */\n    get previousSibling() {\n        const index = this.index;\n        return (index !== null && this.parent.getChild(index - 1)) || null;\n    }\n    /**\n     * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\n     * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\n     */\n    get root() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let root = this;\n        while (root.parent) {\n            root = root.parent;\n        }\n        return root;\n    }\n    /**\n     * Returns `true` if the node is inside a document root that is attached to the document.\n     */\n    isAttached() {\n        // If the node has no parent it means that it is a root.\n        // But this is not a `RootElement`, so it means that it is not attached.\n        //\n        // If this is not the root, check if this element's root is attached.\n        return this.parent === null ? false : this.root.isAttached();\n    }\n    /**\n     * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\n     * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\n     * create {@link module:engine/model/position~Position Position} instance.\n     *\n     * ```ts\n     * const abc = new Text( 'abc' );\n     * const foo = new Text( 'foo' );\n     * const h1 = new Element( 'h1', null, new Text( 'header' ) );\n     * const p = new Element( 'p', null, [ abc, foo ] );\n     * const div = new Element( 'div', null, [ h1, p ] );\n     * foo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n     * h1.getPath(); // Returns [ 0 ].\n     * div.getPath(); // Returns [].\n     * ```\n     */\n    getPath() {\n        const path = [];\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let node = this;\n        while (node.parent) {\n            path.unshift(node.startOffset);\n            node = node.parent;\n        }\n        return path;\n    }\n    /**\n     * Returns ancestors array of this node.\n     *\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` this node will be also included in parent's array.\n     * @param options.parentFirst When set to `true`, array will be sorted from node's parent to root element,\n     * otherwise root element will be the first item in the array.\n     * @returns Array with ancestors.\n     */\n    getAncestors(options = {}) {\n        const ancestors = [];\n        let parent = options.includeSelf ? this : this.parent;\n        while (parent) {\n            ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n            parent = parent.parent;\n        }\n        return ancestors;\n    }\n    /**\n     * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n     * which is a common ancestor of both nodes.\n     *\n     * @param node The second node.\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` both nodes will be considered \"ancestors\" too.\n     * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n     */\n    getCommonAncestor(node, options = {}) {\n        const ancestorsA = this.getAncestors(options);\n        const ancestorsB = node.getAncestors(options);\n        let i = 0;\n        while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n            i++;\n        }\n        return i === 0 ? null : ancestorsA[i - 1];\n    }\n    /**\n     * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n     * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n     *\n     * @param node Node to compare with.\n     */\n    isBefore(node) {\n        // Given node is not before this node if they are same.\n        if (this == node) {\n            return false;\n        }\n        // Return `false` if it is impossible to compare nodes.\n        if (this.root !== node.root) {\n            return false;\n        }\n        const thisPath = this.getPath();\n        const nodePath = node.getPath();\n        const result = compareArrays(thisPath, nodePath);\n        switch (result) {\n            case 'prefix':\n                return true;\n            case 'extension':\n                return false;\n            default:\n                return thisPath[result] < nodePath[result];\n        }\n    }\n    /**\n     * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n     * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n     *\n     * @param node Node to compare with.\n     */\n    isAfter(node) {\n        // Given node is not before this node if they are same.\n        if (this == node) {\n            return false;\n        }\n        // Return `false` if it is impossible to compare nodes.\n        if (this.root !== node.root) {\n            return false;\n        }\n        // In other cases, just check if the `node` is before, and return the opposite.\n        return !this.isBefore(node);\n    }\n    /**\n     * Checks if the node has an attribute with given key.\n     *\n     * @param key Key of attribute to check.\n     * @returns `true` if attribute with given key is set on node, `false` otherwise.\n     */\n    hasAttribute(key) {\n        return this._attrs.has(key);\n    }\n    /**\n     * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\n     *\n     * @param key Key of attribute to look for.\n     * @returns Attribute value or `undefined`.\n     */\n    getAttribute(key) {\n        return this._attrs.get(key);\n    }\n    /**\n     * Returns iterator that iterates over this node's attributes.\n     *\n     * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     */\n    getAttributes() {\n        return this._attrs.entries();\n    }\n    /**\n     * Returns iterator that iterates over this node's attribute keys.\n     */\n    getAttributeKeys() {\n        return this._attrs.keys();\n    }\n    /**\n     * Converts `Node` to plain object and returns it.\n     *\n     * @returns `Node` converted to plain object.\n     */\n    toJSON() {\n        const json = {};\n        // Serializes attributes to the object.\n        // attributes = { a: 'foo', b: 1, c: true }.\n        if (this._attrs.size) {\n            json.attributes = Array.from(this._attrs).reduce((result, attr) => {\n                result[attr[0]] = attr[1];\n                return result;\n            }, {});\n        }\n        return json;\n    }\n    /**\n     * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\n     *\n     * @internal\n     * @returns Node with same attributes as this node.\n     */\n    _clone(_deep) {\n        return new this.constructor(this._attrs);\n    }\n    /**\n     * Removes this node from its parent.\n     *\n     * @internal\n     * @see module:engine/model/writer~Writer#remove\n     */\n    _remove() {\n        this.parent._removeChildren(this.index);\n    }\n    /**\n     * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\n     *\n     * @see module:engine/model/writer~Writer#setAttribute\n     * @internal\n     * @param key Key of attribute to set.\n     * @param value Attribute value.\n     */\n    _setAttribute(key, value) {\n        this._attrs.set(key, value);\n    }\n    /**\n     * Removes all attributes from the node and sets given attributes.\n     *\n     * @see module:engine/model/writer~Writer#setAttributes\n     * @internal\n     * @param attrs Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     */\n    _setAttributesTo(attrs) {\n        this._attrs = toMap(attrs);\n    }\n    /**\n     * Removes an attribute with given key from the node.\n     *\n     * @see module:engine/model/writer~Writer#removeAttribute\n     * @internal\n     * @param key Key of attribute to remove.\n     * @returns `true` if the attribute was set on the element, `false` otherwise.\n     */\n    _removeAttribute(key) {\n        return this._attrs.delete(key);\n    }\n    /**\n     * Removes all attributes from the node.\n     *\n     * @see module:engine/model/writer~Writer#clearAttributes\n     * @internal\n     */\n    _clearAttributes() {\n        this._attrs.clear();\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nNode.prototype.is = function (type) {\n    return type === 'node' || type === 'model:node';\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/nodelist\n */\nimport Node from './node.js';\nimport { CKEditorError, spliceArray } from '@ckeditor/ckeditor5-utils';\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\nexport default class NodeList {\n    /**\n     * Creates a node list.\n     *\n     * @internal\n     * @param nodes Nodes contained in this node list.\n     */\n    constructor(nodes) {\n        /**\n         * Nodes contained in this node list.\n         */\n        this._nodes = [];\n        /**\n         * This array maps numbers (offsets) to node that is placed at that offset.\n         *\n         * This array is similar to `_nodes` with the difference that one node may occupy multiple consecutive items in the array.\n         *\n         * This array is needed to quickly retrieve a node that is placed at given offset.\n         */\n        this._offsetToNode = [];\n        if (nodes) {\n            this._insertNodes(0, nodes);\n        }\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over all nodes contained inside this node list.\n     */\n    [Symbol.iterator]() {\n        return this._nodes[Symbol.iterator]();\n    }\n    /**\n     * Number of nodes contained inside this node list.\n     */\n    get length() {\n        return this._nodes.length;\n    }\n    /**\n     * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n     */\n    get maxOffset() {\n        return this._offsetToNode.length;\n    }\n    /**\n     * Gets the node at the given index. Returns `null` if incorrect index was passed.\n     */\n    getNode(index) {\n        return this._nodes[index] || null;\n    }\n    /**\n     * Gets the node at the given offset. Returns `null` if incorrect offset was passed.\n     */\n    getNodeAtOffset(offset) {\n        return this._offsetToNode[offset] || null;\n    }\n    /**\n     * Returns an index of the given node or `null` if given node does not have a parent.\n     *\n     * This is an alias to {@link module:engine/model/node~Node#index}.\n     */\n    getNodeIndex(node) {\n        return node.index;\n    }\n    /**\n     * Returns the offset at which given node is placed in its parent or `null` if given node does not have a parent.\n     *\n     * This is an alias to {@link module:engine/model/node~Node#startOffset}.\n     */\n    getNodeStartOffset(node) {\n        return node.startOffset;\n    }\n    /**\n     * Converts index to offset in node list.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `model-nodelist-index-out-of-bounds` if given index is less\n     * than `0` or more than {@link #length}.\n     */\n    indexToOffset(index) {\n        if (index == this._nodes.length) {\n            return this.maxOffset;\n        }\n        const node = this._nodes[index];\n        if (!node) {\n            /**\n             * Given index cannot be found in the node list.\n             *\n             * @error model-nodelist-index-out-of-bounds\n             */\n            throw new CKEditorError('model-nodelist-index-out-of-bounds', this);\n        }\n        return this.getNodeStartOffset(node);\n    }\n    /**\n     * Converts offset in node list to index.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `model-nodelist-offset-out-of-bounds` if given offset is less\n     * than `0` or more than {@link #maxOffset}.\n     */\n    offsetToIndex(offset) {\n        if (offset == this._offsetToNode.length) {\n            return this._nodes.length;\n        }\n        const node = this._offsetToNode[offset];\n        if (!node) {\n            /**\n             * Given offset cannot be found in the node list.\n             *\n             * @error model-nodelist-offset-out-of-bounds\n             * @param offset\n             * @param nodeList Stringified node list.\n             */\n            throw new CKEditorError('model-nodelist-offset-out-of-bounds', this, {\n                offset,\n                nodeList: this\n            });\n        }\n        return this.getNodeIndex(node);\n    }\n    /**\n     * Inserts given nodes at given index.\n     *\n     * @internal\n     * @param index Index at which nodes should be inserted.\n     * @param nodes Nodes to be inserted.\n     */\n    _insertNodes(index, nodes) {\n        // Validation.\n        for (const node of nodes) {\n            if (!(node instanceof Node)) {\n                /**\n                 * Trying to insert an object which is not a Node instance.\n                 *\n                 * @error model-nodelist-insertnodes-not-node\n                 */\n                throw new CKEditorError('model-nodelist-insertnodes-not-node', this);\n            }\n        }\n        const nodesArray = Array.from(nodes);\n        const offsetsArray = makeOffsetsArray(nodesArray);\n        let offset = this.indexToOffset(index);\n        // Splice nodes array and offsets array into the nodelist.\n        this._nodes = spliceArray(this._nodes, nodesArray, index, 0);\n        this._offsetToNode = spliceArray(this._offsetToNode, offsetsArray, offset, 0);\n        // Refresh indexes and offsets for nodes inside this node list. We need to do this for all inserted nodes and all nodes after them.\n        for (let i = index; i < this._nodes.length; i++) {\n            this._nodes[i]._index = i;\n            this._nodes[i]._startOffset = offset;\n            offset += this._nodes[i].offsetSize;\n        }\n    }\n    /**\n     * Removes one or more nodes starting at the given index.\n     *\n     * @internal\n     * @param indexStart Index of the first node to remove.\n     * @param howMany Number of nodes to remove.\n     * @returns Array containing removed nodes.\n     */\n    _removeNodes(indexStart, howMany = 1) {\n        if (howMany == 0) {\n            return [];\n        }\n        // Remove nodes from this nodelist.\n        let offset = this.indexToOffset(indexStart);\n        const nodes = this._nodes.splice(indexStart, howMany);\n        const lastNode = nodes[nodes.length - 1];\n        const removedOffsetSum = lastNode.startOffset + lastNode.offsetSize - offset;\n        this._offsetToNode.splice(offset, removedOffsetSum);\n        // Reset index and start offset properties for the removed nodes -- they do not have a parent anymore.\n        for (const node of nodes) {\n            node._index = null;\n            node._startOffset = null;\n        }\n        for (let i = indexStart; i < this._nodes.length; i++) {\n            this._nodes[i]._index = i;\n            this._nodes[i]._startOffset = offset;\n            offset += this._nodes[i].offsetSize;\n        }\n        return nodes;\n    }\n    /**\n     * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n     * are also converted to their plain object representation.\n     *\n     * @returns `NodeList` instance converted to `Array`.\n     */\n    toJSON() {\n        return this._nodes.map(node => node.toJSON());\n    }\n}\n/**\n * Creates an array of nodes in the format as in {@link module:engine/model/nodelist~NodeList#_offsetToNode}, i.e. one node will\n * occupy multiple items if its offset size is greater than one.\n */\nfunction makeOffsetsArray(nodes) {\n    const offsets = [];\n    for (const node of nodes) {\n        const start = offsets.length;\n        offsets.length += node.offsetSize;\n        offsets.fill(node, start);\n    }\n    return offsets;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/text\n */\nimport Node from './node.js';\n// @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n */\nexport default class Text extends Node {\n    /**\n     * Creates a text node.\n     *\n     * **Note:** Constructor of this class shouldn't be used directly in the code.\n     * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n     *\n     * @internal\n     * @param data Node's text.\n     * @param attrs Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     */\n    constructor(data, attrs) {\n        super(attrs);\n        this._data = data || '';\n    }\n    /**\n     * @inheritDoc\n     */\n    get offsetSize() {\n        return this.data.length;\n    }\n    /**\n     * Returns a text data contained in the node.\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * Converts `Text` instance to plain object and returns it.\n     *\n     * @returns`Text` instance converted to plain object.\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.data = this.data;\n        return json;\n    }\n    /**\n     * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n     *\n     * @internal\n     * @returns `Text` instance created using given plain object.\n     */\n    _clone() {\n        return new Text(this.data, this.getAttributes());\n    }\n    /**\n     * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n     *\n     * @param json Plain object to be converted to `Text`.\n     * @returns `Text` instance created using given plain object.\n     */\n    static fromJSON(json) {\n        return new Text(json.data, json.attributes);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nText.prototype.is = function (type) {\n    return type === '$text' || type === 'model:$text' ||\n        // This are legacy values kept for backward compatibility.\n        type === 'text' || type === 'model:text' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'node' || type === 'model:node';\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/textproxy\n */\nimport TypeCheckable from './typecheckable.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n/**\n * `TextProxy` represents a part of {@link module:engine/model/text~Text text node}.\n *\n * Since {@link module:engine/model/position~Position positions} can be placed between characters of a text node,\n * {@link module:engine/model/range~Range ranges} may contain only parts of text nodes. When {@link module:engine/model/range~Range#getItems\n * getting items}\n * contained in such range, we need to represent a part of that text node, since returning the whole text node would be incorrect.\n * `TextProxy` solves this issue.\n *\n * `TextProxy` has an API similar to {@link module:engine/model/text~Text Text} and allows to do most of the common tasks performed\n * on model nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/model/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is not an instance of {@link module:engine/model/node~Node node}. Keep this in mind when using it as a\n * parameter of methods.\n *\n * **Note:** `TextProxy` is a readonly interface. If you want to perform changes on model data represented by a `TextProxy`\n * use {@link module:engine/model/writer~Writer model writer API}.\n *\n * **Note:** `TextProxy` instances are created on the fly, basing on the current state of model. Because of this, it is\n * highly unrecommended to store references to `TextProxy` instances. `TextProxy` instances are not refreshed when\n * model changes, so they might get invalidated. Instead, consider creating {@link module:engine/model/liveposition~LivePosition live\n * position}.\n *\n * `TextProxy` instances are created by {@link module:engine/model/treewalker~TreeWalker model tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy extends TypeCheckable {\n    /**\n     * Creates a text proxy.\n     *\n     * @internal\n     * @param textNode Text node which part is represented by this text proxy.\n     * @param offsetInText Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy\n     * starts.\n     * @param length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n     */\n    constructor(textNode, offsetInText, length) {\n        super();\n        this.textNode = textNode;\n        if (offsetInText < 0 || offsetInText > textNode.offsetSize) {\n            /**\n             * Given `offsetInText` value is incorrect.\n             *\n             * @error model-textproxy-wrong-offsetintext\n             */\n            throw new CKEditorError('model-textproxy-wrong-offsetintext', this);\n        }\n        if (length < 0 || offsetInText + length > textNode.offsetSize) {\n            /**\n             * Given `length` value is incorrect.\n             *\n             * @error model-textproxy-wrong-length\n             */\n            throw new CKEditorError('model-textproxy-wrong-length', this);\n        }\n        this.data = textNode.data.substring(offsetInText, offsetInText + length);\n        this.offsetInText = offsetInText;\n    }\n    /**\n     * Offset at which this text proxy starts in it's parent.\n     *\n     * @see module:engine/model/node~Node#startOffset\n     */\n    get startOffset() {\n        return this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null;\n    }\n    /**\n     * Offset size of this text proxy. Equal to the number of characters represented by the text proxy.\n     *\n     * @see module:engine/model/node~Node#offsetSize\n     */\n    get offsetSize() {\n        return this.data.length;\n    }\n    /**\n     * Offset at which this text proxy ends in it's parent.\n     *\n     * @see module:engine/model/node~Node#endOffset\n     */\n    get endOffset() {\n        return this.startOffset !== null ? this.startOffset + this.offsetSize : null;\n    }\n    /**\n     * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/model/text~Text text node}\n     * (`true`) or the whole text node (`false`).\n     *\n     * This is `false` when text proxy starts at the very beginning of {@link module:engine/model/textproxy~TextProxy#textNode textNode}\n     * ({@link module:engine/model/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n     * text node size.\n     */\n    get isPartial() {\n        return this.offsetSize !== this.textNode.offsetSize;\n    }\n    /**\n     * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n     */\n    get parent() {\n        return this.textNode.parent;\n    }\n    /**\n     * Root of this text proxy, which is same as root of text node represented by this text proxy.\n     */\n    get root() {\n        return this.textNode.root;\n    }\n    /**\n     * Gets path to this text proxy.\n     *\n     * @see module:engine/model/node~Node#getPath\n     */\n    getPath() {\n        const path = this.textNode.getPath();\n        if (path.length > 0) {\n            path[path.length - 1] += this.offsetInText;\n        }\n        return path;\n    }\n    /**\n     * Returns ancestors array of this text proxy.\n     *\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` this text proxy will be also included in parent's array.\n     * @param options.parentFirst When set to `true`, array will be sorted from text proxy parent to root element,\n     * otherwise root element will be the first item in the array.\n     * @returns Array with ancestors.\n     */\n    getAncestors(options = {}) {\n        const ancestors = [];\n        let parent = options.includeSelf ? this : this.parent;\n        while (parent) {\n            ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n            parent = parent.parent;\n        }\n        return ancestors;\n    }\n    /**\n     * Checks if this text proxy has an attribute for given key.\n     *\n     * @param key Key of attribute to check.\n     * @returns `true` if attribute with given key is set on text proxy, `false` otherwise.\n     */\n    hasAttribute(key) {\n        return this.textNode.hasAttribute(key);\n    }\n    /**\n     * Gets an attribute value for given key or `undefined` if that attribute is not set on text proxy.\n     *\n     * @param key Key of attribute to look for.\n     * @returns Attribute value or `undefined`.\n     */\n    getAttribute(key) {\n        return this.textNode.getAttribute(key);\n    }\n    /**\n     * Returns iterator that iterates over this node's attributes. Attributes are returned as arrays containing two\n     * items. First one is attribute key and second is attribute value.\n     *\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     */\n    getAttributes() {\n        return this.textNode.getAttributes();\n    }\n    /**\n     * Returns iterator that iterates over this node's attribute keys.\n     */\n    getAttributeKeys() {\n        return this.textNode.getAttributeKeys();\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nTextProxy.prototype.is = function (type) {\n    return type === '$textProxy' || type === 'model:$textProxy' ||\n        // This are legacy values kept for backward compatibility.\n        type === 'textProxy' || type === 'model:textProxy';\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/element\n */\nimport Node from './node.js';\nimport NodeList from './nodelist.js';\nimport Text from './text.js';\nimport TextProxy from './textproxy.js';\nimport { isIterable } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const { stringifyMap, convertMapToStringifiedObject, convertMapToTags } = require( '../dev-utils/utils' );\n/**\n * Model element. Type of {@link module:engine/model/node~Node node} that has a {@link module:engine/model/element~Element#name name} and\n * {@link module:engine/model/element~Element#getChildren child nodes}.\n *\n * **Important**: see {@link module:engine/model/node~Node} to read about restrictions using `Element` and `Node` API.\n */\nexport default class Element extends Node {\n    /**\n     * Creates a model element.\n     *\n     * **Note:** Constructor of this class shouldn't be used directly in the code.\n     * Use the {@link module:engine/model/writer~Writer#createElement} method instead.\n     *\n     * @internal\n     * @param name Element's name.\n     * @param attrs Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     * @param children One or more nodes to be inserted as children of created element.\n     */\n    constructor(name, attrs, children) {\n        super(attrs);\n        /**\n         * List of children nodes.\n         */\n        this._children = new NodeList();\n        this.name = name;\n        if (children) {\n            this._insertChild(0, children);\n        }\n    }\n    /**\n     * Number of this element's children.\n     */\n    get childCount() {\n        return this._children.length;\n    }\n    /**\n     * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.\n     */\n    get maxOffset() {\n        return this._children.maxOffset;\n    }\n    /**\n     * Is `true` if there are no nodes inside this element, `false` otherwise.\n     */\n    get isEmpty() {\n        return this.childCount === 0;\n    }\n    /**\n     * Gets the child at the given index. Returns `null` if incorrect index was passed.\n     *\n     * @param index Index in this element.\n     * @returns Child node.\n     */\n    getChild(index) {\n        return this._children.getNode(index);\n    }\n    /**\n     * Gets the child at the given offset. Returns `null` if incorrect index was passed.\n     *\n     * @param offset Offset in this element.\n     * @returns Child node.\n     */\n    getChildAtOffset(offset) {\n        return this._children.getNodeAtOffset(offset);\n    }\n    /**\n     * Returns an iterator that iterates over all of this element's children.\n     */\n    getChildren() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Returns an index of the given child node. Returns `null` if given node is not a child of this element.\n     *\n     * @param node Child node to look for.\n     * @returns Child node's index in this element.\n     */\n    getChildIndex(node) {\n        return this._children.getNodeIndex(node);\n    }\n    /**\n     * Returns the starting offset of given child. Starting offset is equal to the sum of\n     * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n     * given node is not a child of this element.\n     *\n     * @param node Child node to look for.\n     * @returns Child node's starting offset.\n     */\n    getChildStartOffset(node) {\n        return this._children.getNodeStartOffset(node);\n    }\n    /**\n     * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n     * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.\n     *\n     * ```ts\n     * const textNode = new Text( 'foo' );\n     * const pElement = new Element( 'p' );\n     * const divElement = new Element( [ textNode, pElement ] );\n     * divElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n     * divElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n     * divElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n     * divElement.offsetToIndex( 2 ); // Returns 0.\n     * divElement.offsetToIndex( 3 ); // Returns 1.\n     * divElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n     * ```\n     */\n    offsetToIndex(offset) {\n        return this._children.offsetToIndex(offset);\n    }\n    /**\n     * Returns a descendant node by its path relative to this element.\n     *\n     * ```ts\n     * // <this>a<b>c</b></this>\n     * this.getNodeByPath( [ 0 ] );     // -> \"a\"\n     * this.getNodeByPath( [ 1 ] );     // -> <b>\n     * this.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n     * ```\n     *\n     * @param relativePath Path of the node to find, relative to this element.\n     */\n    getNodeByPath(relativePath) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let node = this;\n        for (const offset of relativePath) {\n            node = node.getChildAtOffset(offset);\n        }\n        return node;\n    }\n    /**\n     * Returns the parent element of the given name. Returns null if the element is not inside the desired parent.\n     *\n     * @param parentName The name of the parent element to find.\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` this node will be also included while searching.\n     */\n    findAncestor(parentName, options = {}) {\n        let parent = options.includeSelf ? this : this.parent;\n        while (parent) {\n            if (parent.name === parentName) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n        return null;\n    }\n    /**\n     * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.\n     *\n     * @returns `Element` instance converted to plain object.\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.name = this.name;\n        if (this._children.length > 0) {\n            json.children = [];\n            for (const node of this._children) {\n                json.children.push(node.toJSON());\n            }\n        }\n        return json;\n    }\n    /**\n     * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.\n     * If clone is deep, the original element's children are also cloned. If not, then empty element is returned.\n     *\n     * @internal\n     * @param deep If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any child.\n     */\n    _clone(deep = false) {\n        const children = deep ? Array.from(this._children).map(node => node._clone(true)) : undefined;\n        return new Element(this.name, this.getAttributes(), children);\n    }\n    /**\n     * {@link module:engine/model/element~Element#_insertChild Inserts} one or more nodes at the end of this element.\n     *\n     * @see module:engine/model/writer~Writer#append\n     * @internal\n     * @param nodes Nodes to be inserted.\n     */\n    _appendChild(nodes) {\n        this._insertChild(this.childCount, nodes);\n    }\n    /**\n     * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n     * to this element.\n     *\n     * @see module:engine/model/writer~Writer#insert\n     * @internal\n     * @param index Index at which nodes should be inserted.\n     * @param items Items to be inserted.\n     */\n    _insertChild(index, items) {\n        const nodes = normalize(items);\n        for (const node of nodes) {\n            // If node that is being added to this element is already inside another element, first remove it from the old parent.\n            if (node.parent !== null) {\n                node._remove();\n            }\n            node.parent = this;\n        }\n        this._children._insertNodes(index, nodes);\n    }\n    /**\n     * Removes one or more nodes starting at the given index and sets\n     * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n     *\n     * @see module:engine/model/writer~Writer#remove\n     * @internal\n     * @param index Index of the first node to remove.\n     * @param howMany Number of nodes to remove.\n     * @returns Array containing removed nodes.\n     */\n    _removeChildren(index, howMany = 1) {\n        const nodes = this._children._removeNodes(index, howMany);\n        for (const node of nodes) {\n            node.parent = null;\n        }\n        return nodes;\n    }\n    /**\n     * Creates an `Element` instance from given plain object (i.e. parsed JSON string).\n     * Converts `Element` children to proper nodes.\n     *\n     * @param json Plain object to be converted to `Element`.\n     * @returns `Element` instance created using given plain object.\n     */\n    static fromJSON(json) {\n        let children;\n        if (json.children) {\n            children = [];\n            for (const child of json.children) {\n                if (child.name) {\n                    // If child has name property, it is an Element.\n                    children.push(Element.fromJSON(child));\n                }\n                else {\n                    // Otherwise, it is a Text node.\n                    children.push(Text.fromJSON(child));\n                }\n            }\n        }\n        return new Element(json.name, json.attributes, children);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'element' || type === 'model:element' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'node' || type === 'model:node';\n    }\n    return name === this.name && (type === 'element' || type === 'model:element');\n};\n/**\n * Converts strings to Text and non-iterables to arrays.\n */\nfunction normalize(nodes) {\n    // Separate condition because string is iterable.\n    if (typeof nodes == 'string') {\n        return [new Text(nodes)];\n    }\n    if (!isIterable(nodes)) {\n        nodes = [nodes];\n    }\n    // Array.from to enable .map() on non-arrays.\n    return Array.from(nodes)\n        .map(node => {\n        if (typeof node == 'string') {\n            return new Text(node);\n        }\n        if (node instanceof TextProxy) {\n            return new Text(node.data, node.getAttributes());\n        }\n        return node;\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/treewalker\n */\nimport Element from './element.js';\nimport { default as Position, getTextNodeAtPosition, getNodeAfterPosition, getNodeBeforePosition } from './position.js';\nimport Text from './text.js';\nimport TextProxy from './textproxy.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n    /**\n     * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n     *\n     * @param options Object with configuration.\n     */\n    constructor(options) {\n        if (!options || (!options.boundaries && !options.startPosition)) {\n            /**\n             * Neither boundaries nor starting position of a `TreeWalker` have been defined.\n             *\n             * @error model-tree-walker-no-start-position\n             */\n            throw new CKEditorError('model-tree-walker-no-start-position', null);\n        }\n        const direction = options.direction || 'forward';\n        if (direction != 'forward' && direction != 'backward') {\n            /**\n             * Only `backward` and `forward` direction allowed.\n             *\n             * @error model-tree-walker-unknown-direction\n             */\n            throw new CKEditorError('model-tree-walker-unknown-direction', options, { direction });\n        }\n        this.direction = direction;\n        this.boundaries = options.boundaries || null;\n        if (options.startPosition) {\n            this._position = options.startPosition.clone();\n        }\n        else {\n            this._position = Position._createAt(this.boundaries[this.direction == 'backward' ? 'end' : 'start']);\n        }\n        // Reset position stickiness in case it was set to other value, as the stickiness is kept after cloning.\n        this.position.stickiness = 'toNone';\n        this.singleCharacters = !!options.singleCharacters;\n        this.shallow = !!options.shallow;\n        this.ignoreElementEnd = !!options.ignoreElementEnd;\n        this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n        this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n        this._visitedParent = this.position.parent;\n    }\n    /**\n     * Iterable interface.\n     *\n     * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n     */\n    [Symbol.iterator]() {\n        return this;\n    }\n    /**\n     * Iterator position. This is always static position, even if the initial position was a\n     * {@link module:engine/model/liveposition~LivePosition live position}. If start position is not defined then position depends\n     * on {@link #direction}. If direction is `'forward'` position starts form the beginning, when direction\n     * is `'backward'` position starts from the end.\n     */\n    get position() {\n        return this._position;\n    }\n    /**\n     * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n     *\n     * For example:\n     *\n     * ```ts\n     * walker.skip( value => value.type == 'text' ); // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n     * walker.skip( () => true ); // Move the position to the end: <paragraph>[]foo</paragraph> -> <paragraph>foo</paragraph>[]\n     * walker.skip( () => false ); // Do not move the position.\n     * ```\n     *\n     * @param skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n     * return `true` if the value should be skipped or `false` if not.\n     */\n    skip(skip) {\n        let done, value, prevPosition, prevVisitedParent;\n        do {\n            prevPosition = this.position;\n            prevVisitedParent = this._visitedParent;\n            ({ done, value } = this.next());\n        } while (!done && skip(value));\n        if (!done) {\n            this._position = prevPosition;\n            this._visitedParent = prevVisitedParent;\n        }\n    }\n    /**\n     * Gets the next tree walker's value.\n     */\n    next() {\n        if (this.direction == 'forward') {\n            return this._next();\n        }\n        else {\n            return this._previous();\n        }\n    }\n    /**\n     * Makes a step forward in model. Moves the {@link #position} to the next position and returns the encountered value.\n     */\n    _next() {\n        const previousPosition = this.position;\n        const position = this.position.clone();\n        const parent = this._visitedParent;\n        // We are at the end of the root.\n        if (parent.parent === null && position.offset === parent.maxOffset) {\n            return { done: true, value: undefined };\n        }\n        // We reached the walker boundary.\n        if (parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset) {\n            return { done: true, value: undefined };\n        }\n        // Get node just after the current position.\n        // Use a highly optimized version instead of checking the text node first and then getting the node after. See #6582.\n        const textNodeAtPosition = getTextNodeAtPosition(position, parent);\n        const node = textNodeAtPosition || getNodeAfterPosition(position, parent, textNodeAtPosition);\n        if (node instanceof Element) {\n            if (!this.shallow) {\n                // Manual operations on path internals for optimization purposes. Here and in the rest of the method.\n                position.path.push(0);\n                this._visitedParent = node;\n            }\n            else {\n                // We are past the walker boundaries.\n                if (this.boundaries && this.boundaries.end.isBefore(position)) {\n                    return { done: true, value: undefined };\n                }\n                position.offset++;\n            }\n            this._position = position;\n            return formatReturnValue('elementStart', node, previousPosition, position, 1);\n        }\n        if (node instanceof Text) {\n            let charactersCount;\n            if (this.singleCharacters) {\n                charactersCount = 1;\n            }\n            else {\n                let offset = node.endOffset;\n                if (this._boundaryEndParent == parent && this.boundaries.end.offset < offset) {\n                    offset = this.boundaries.end.offset;\n                }\n                charactersCount = offset - position.offset;\n            }\n            const offsetInTextNode = position.offset - node.startOffset;\n            const item = new TextProxy(node, offsetInTextNode, charactersCount);\n            position.offset += charactersCount;\n            this._position = position;\n            return formatReturnValue('text', item, previousPosition, position, charactersCount);\n        }\n        // `node` is not set, we reached the end of current `parent`.\n        position.path.pop();\n        position.offset++;\n        this._position = position;\n        this._visitedParent = parent.parent;\n        if (this.ignoreElementEnd) {\n            return this._next();\n        }\n        return formatReturnValue('elementEnd', parent, previousPosition, position);\n    }\n    /**\n     * Makes a step backward in model. Moves the {@link #position} to the previous position and returns the encountered value.\n     */\n    _previous() {\n        const previousPosition = this.position;\n        const position = this.position.clone();\n        const parent = this._visitedParent;\n        // We are at the beginning of the root.\n        if (parent.parent === null && position.offset === 0) {\n            return { done: true, value: undefined };\n        }\n        // We reached the walker boundary.\n        if (parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset) {\n            return { done: true, value: undefined };\n        }\n        // Get node just before the current position.\n        // Use a highly optimized version instead of checking the text node first and then getting the node before. See #6582.\n        const positionParent = position.parent;\n        const textNodeAtPosition = getTextNodeAtPosition(position, positionParent);\n        const node = textNodeAtPosition || getNodeBeforePosition(position, positionParent, textNodeAtPosition);\n        if (node instanceof Element) {\n            position.offset--;\n            if (this.shallow) {\n                this._position = position;\n                return formatReturnValue('elementStart', node, previousPosition, position, 1);\n            }\n            position.path.push(node.maxOffset);\n            this._position = position;\n            this._visitedParent = node;\n            if (this.ignoreElementEnd) {\n                return this._previous();\n            }\n            return formatReturnValue('elementEnd', node, previousPosition, position);\n        }\n        if (node instanceof Text) {\n            let charactersCount;\n            if (this.singleCharacters) {\n                charactersCount = 1;\n            }\n            else {\n                let offset = node.startOffset;\n                if (this._boundaryStartParent == parent && this.boundaries.start.offset > offset) {\n                    offset = this.boundaries.start.offset;\n                }\n                charactersCount = position.offset - offset;\n            }\n            const offsetInTextNode = position.offset - node.startOffset;\n            const item = new TextProxy(node, offsetInTextNode - charactersCount, charactersCount);\n            position.offset -= charactersCount;\n            this._position = position;\n            return formatReturnValue('text', item, previousPosition, position, charactersCount);\n        }\n        // `node` is not set, we reached the beginning of current `parent`.\n        position.path.pop();\n        this._position = position;\n        this._visitedParent = parent.parent;\n        return formatReturnValue('elementStart', parent, previousPosition, position, 1);\n    }\n}\nfunction formatReturnValue(type, item, previousPosition, nextPosition, length) {\n    return {\n        done: false,\n        value: {\n            type,\n            item,\n            previousPosition,\n            nextPosition,\n            length\n        }\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/position\n */\nimport TypeCheckable from './typecheckable.js';\nimport TreeWalker from './treewalker.js';\nimport { CKEditorError, compareArrays } from '@ckeditor/ckeditor5-utils';\n/**\n * Represents a position in the model tree.\n *\n * A position is represented by its {@link module:engine/model/position~Position#root} and\n * a {@link module:engine/model/position~Position#path} in that root.\n *\n * You can create position instances via its constructor or the `createPosition*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n *\n * **Note:** Position is based on offsets, not indexes. This means that a position between two text nodes\n * `foo` and `bar` has offset `3`, not `1`. See {@link module:engine/model/position~Position#path} for more information.\n *\n * Since a position in the model is represented by a {@link module:engine/model/position~Position#root position root} and\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing places.\n * This requirement is important for operational transformation algorithms.\n *\n * Also, {@link module:engine/model/operation/operation~Operation operations}\n * kept in the {@link module:engine/model/document~Document#history document history}\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\n * after the document has changed.\n *\n * When changes are applied to the model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\n *\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\n */\nexport default class Position extends TypeCheckable {\n    /**\n     * Creates a position.\n     *\n     * @param root Root of the position.\n     * @param path Position path. See {@link module:engine/model/position~Position#path}.\n     * @param stickiness Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n     */\n    constructor(root, path, stickiness = 'toNone') {\n        super();\n        if (!root.is('element') && !root.is('documentFragment')) {\n            /**\n             * Position root is invalid.\n             *\n             * Positions can only be anchored in elements or document fragments.\n             *\n             * @error model-position-root-invalid\n             */\n            throw new CKEditorError('model-position-root-invalid', root);\n        }\n        if (!(path instanceof Array) || path.length === 0) {\n            /**\n             * Position path must be an array with at least one item.\n             *\n             * @error model-position-path-incorrect-format\n             * @param path\n             */\n            throw new CKEditorError('model-position-path-incorrect-format', root, { path });\n        }\n        // Normalize the root and path when element (not root) is passed.\n        if (root.is('rootElement')) {\n            path = path.slice();\n        }\n        else {\n            path = [...root.getPath(), ...path];\n            root = root.root;\n        }\n        this.root = root;\n        this.path = path;\n        this.stickiness = stickiness;\n    }\n    /**\n     * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\n     * to the last item in position {@link module:engine/model/position~Position#path path}.\n     *\n     * @type {Number}\n     */\n    get offset() {\n        return this.path[this.path.length - 1];\n    }\n    set offset(newOffset) {\n        this.path[this.path.length - 1] = newOffset;\n    }\n    /**\n     * Parent element of this position.\n     *\n     * Keep in mind that `parent` value is calculated when the property is accessed.\n     * If {@link module:engine/model/position~Position#path position path}\n     * leads to a non-existing element, `parent` property will throw error.\n     *\n     * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\n     */\n    get parent() {\n        let parent = this.root;\n        for (let i = 0; i < this.path.length - 1; i++) {\n            parent = parent.getChildAtOffset(this.path[i]);\n            if (!parent) {\n                /**\n                 * The position's path is incorrect. This means that a position does not point to\n                 * a correct place in the tree and hence, some of its methods and getters cannot work correctly.\n                 *\n                 * **Note**: Unlike DOM and view positions, in the model, the\n                 * {@link module:engine/model/position~Position#parent position's parent} is always an element or a document fragment.\n                 * The last offset in the {@link module:engine/model/position~Position#path position's path} is the point in this element\n                 * where this position points.\n                 *\n                 * Read more about model positions and offsets in\n                 * the {@glink framework/architecture/editing-engine#indexes-and-offsets Editing engine architecture} guide.\n                 *\n                 * @error model-position-path-incorrect\n                 * @param position The incorrect position.\n                 */\n                throw new CKEditorError('model-position-path-incorrect', this, { position: this });\n            }\n        }\n        if (parent.is('$text')) {\n            throw new CKEditorError('model-position-path-incorrect', this, { position: this });\n        }\n        return parent;\n    }\n    /**\n     * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\n     * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\n     * in text node, position index is equal to the index of that text node.\n     */\n    get index() {\n        return this.parent.offsetToIndex(this.offset);\n    }\n    /**\n     * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\n     * position is not in a text node.\n     */\n    get textNode() {\n        return getTextNodeAtPosition(this, this.parent);\n    }\n    /**\n     * Node directly after this position. Returns `null` if this position is at the end of its parent, or if it is in a text node.\n     */\n    get nodeAfter() {\n        // Cache the parent and reuse for performance reasons. See #6579 and #6582.\n        const parent = this.parent;\n        return getNodeAfterPosition(this, parent, getTextNodeAtPosition(this, parent));\n    }\n    /**\n     * Node directly before this position. Returns `null` if this position is at the start of its parent, or if it is in a text node.\n     */\n    get nodeBefore() {\n        // Cache the parent and reuse for performance reasons. See #6579 and #6582.\n        const parent = this.parent;\n        return getNodeBeforePosition(this, parent, getTextNodeAtPosition(this, parent));\n    }\n    /**\n     * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n     */\n    get isAtStart() {\n        return this.offset === 0;\n    }\n    /**\n     * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n     */\n    get isAtEnd() {\n        return this.offset == this.parent.maxOffset;\n    }\n    /**\n     * Checks whether the position is valid in current model tree, that is whether it points to an existing place in the model.\n     */\n    isValid() {\n        if (this.offset < 0) {\n            return false;\n        }\n        let parent = this.root;\n        for (let i = 0; i < this.path.length - 1; i++) {\n            parent = parent.getChildAtOffset(this.path[i]);\n            if (!parent) {\n                return false;\n            }\n        }\n        return this.offset <= parent.maxOffset;\n    }\n    /**\n     * Checks whether this position is before or after given position.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     */\n    compareWith(otherPosition) {\n        if (this.root != otherPosition.root) {\n            return 'different';\n        }\n        const result = compareArrays(this.path, otherPosition.path);\n        switch (result) {\n            case 'same':\n                return 'same';\n            case 'prefix':\n                return 'before';\n            case 'extension':\n                return 'after';\n            default:\n                return this.path[result] < otherPosition.path[result] ? 'before' : 'after';\n        }\n    }\n    /**\n     * Gets the farthest position which matches the callback using\n     * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\n     *\n     * For example:\n     *\n     * ```ts\n     * getLastMatchingPosition( value => value.type == 'text' );\n     * // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n     *\n     * getLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\n     * // <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\n     *\n     * getLastMatchingPosition( value => false );\n     * // Do not move the position.\n     * ```\n     *\n     * @param skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n     * return `true` if the value should be skipped or `false` if not.\n     * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n     *\n     * @returns The position after the last item which matches the `skip` callback test.\n     */\n    getLastMatchingPosition(skip, options = {}) {\n        options.startPosition = this;\n        const treeWalker = new TreeWalker(options);\n        treeWalker.skip(skip);\n        return treeWalker.position;\n    }\n    /**\n     * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\n     * but without the last item.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @returns Path to the parent.\n     */\n    getParentPath() {\n        return this.path.slice(0, -1);\n    }\n    /**\n     * Returns ancestors array of this position, that is this position's parent and its ancestors.\n     *\n     * @returns Array with ancestors.\n     */\n    getAncestors() {\n        const parent = this.parent;\n        if (parent.is('documentFragment')) {\n            return [parent];\n        }\n        else {\n            return parent.getAncestors({ includeSelf: true });\n        }\n    }\n    /**\n     * Returns the parent element of the given name. Returns null if the position is not inside the desired parent.\n     *\n     * @param parentName The name of the parent element to find.\n     */\n    findAncestor(parentName) {\n        const parent = this.parent;\n        if (parent.is('element')) {\n            return parent.findAncestor(parentName, { includeSelf: true });\n        }\n        return null;\n    }\n    /**\n     * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\n     * of these two paths must be identical.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param position The second position.\n     * @returns The common path.\n     */\n    getCommonPath(position) {\n        if (this.root != position.root) {\n            return [];\n        }\n        // We find on which tree-level start and end have the lowest common ancestor\n        const cmp = compareArrays(this.path, position.path);\n        // If comparison returned string it means that arrays are same.\n        const diffAt = (typeof cmp == 'string') ? Math.min(this.path.length, position.path.length) : cmp;\n        return this.path.slice(0, diffAt);\n    }\n    /**\n     * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n     * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\n     *\n     * @param position The second position.\n     */\n    getCommonAncestor(position) {\n        const ancestorsA = this.getAncestors();\n        const ancestorsB = position.getAncestors();\n        let i = 0;\n        while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n            i++;\n        }\n        return i === 0 ? null : ancestorsA[i - 1];\n    }\n    /**\n     * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\n     * is shifted by `shift` value (can be a negative value).\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param shift Offset shift. Can be a negative value.\n     * @returns Shifted position.\n     */\n    getShiftedBy(shift) {\n        const shifted = this.clone();\n        const offset = shifted.offset + shift;\n        shifted.offset = offset < 0 ? 0 : offset;\n        return shifted;\n    }\n    /**\n     * Checks whether this position is after given position.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @see module:engine/model/position~Position#isBefore\n     * @param  otherPosition Position to compare with.\n     * @returns True if this position is after given position.\n     */\n    isAfter(otherPosition) {\n        return this.compareWith(otherPosition) == 'after';\n    }\n    /**\n     * Checks whether this position is before given position.\n     *\n     * **Note:** watch out when using negation of the value returned by this method, because the negation will also\n     * be `true` if positions are in different roots and you might not expect this. You should probably use\n     * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\n     * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\n     *\n     * ```ts\n     * if ( a.isBefore( b ) && c.isAfter( d ) ) {\n     * \t// do A.\n     * } else {\n     * \t// do B.\n     * }\n     * ```\n     *\n     * or, if you have only one if-branch:\n     *\n     * ```ts\n     * if ( !( a.isBefore( b ) && c.isAfter( d ) ) {\n     * \t// do B.\n     * }\n     * ```\n     *\n     * rather than:\n     *\n     * ```ts\n     * if ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\n     * \t// do B.\n     * } else {\n     * \t// do A.\n     * }\n     * ```\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param otherPosition Position to compare with.\n     * @returns True if this position is before given position.\n     */\n    isBefore(otherPosition) {\n        return this.compareWith(otherPosition) == 'before';\n    }\n    /**\n     * Checks whether this position is equal to given position.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param otherPosition Position to compare with.\n     * @returns True if positions are same.\n     */\n    isEqual(otherPosition) {\n        return this.compareWith(otherPosition) == 'same';\n    }\n    /**\n     * Checks whether this position is touching given position. Positions touch when there are no text nodes\n     * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\n     * they are very similar or even indistinguishable.\n     *\n     * @param otherPosition Position to compare with.\n     * @returns True if positions touch.\n     */\n    isTouching(otherPosition) {\n        if (this.root !== otherPosition.root) {\n            return false;\n        }\n        const commonLevel = Math.min(this.path.length, otherPosition.path.length);\n        for (let level = 0; level < commonLevel; level++) {\n            const diff = this.path[level] - otherPosition.path[level];\n            // Positions are spread by a node, so they are not touching.\n            if (diff < -1 || diff > 1) {\n                return false;\n            }\n            else if (diff === 1) {\n                // `otherPosition` is on the left.\n                // `this` is on the right.\n                return checkTouchingBranch(otherPosition, this, level);\n            }\n            else if (diff === -1) {\n                // `this` is on the left.\n                // `otherPosition` is on the right.\n                return checkTouchingBranch(this, otherPosition, level);\n            }\n            // `diff === 0`.\n            // Positions are inside the same element on this level, compare deeper.\n        }\n        // If we ended up here, it means that positions paths have the same beginning.\n        // If the paths have the same length, then it means that they are identical, so the positions are same.\n        if (this.path.length === otherPosition.path.length) {\n            return true;\n        }\n        // If positions have different length of paths, then the common part is the same.\n        // In this case, the \"shorter\" position is on the left, the \"longer\" position is on the right.\n        //\n        // If the positions are touching, the \"longer\" position must have only zeroes. For example:\n        // [ 1, 2 ] vs [ 1, 2, 0 ]\n        // [ 1, 2 ] vs [ 1, 2, 0, 0, 0 ]\n        else if (this.path.length > otherPosition.path.length) {\n            return checkOnlyZeroes(this.path, commonLevel);\n        }\n        else {\n            return checkOnlyZeroes(otherPosition.path, commonLevel);\n        }\n    }\n    /**\n     * Checks if two positions are in the same parent.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param position Position to compare with.\n     * @returns `true` if positions have the same parent, `false` otherwise.\n     */\n    hasSameParentAs(position) {\n        if (this.root !== position.root) {\n            return false;\n        }\n        const thisParentPath = this.getParentPath();\n        const posParentPath = position.getParentPath();\n        return compareArrays(thisParentPath, posParentPath) == 'same';\n    }\n    /**\n     * Returns a copy of this position that is transformed by given `operation`.\n     *\n     * The new position's parameters are updated accordingly to the effect of the `operation`.\n     *\n     * For example, if `n` nodes are inserted before the position, the returned position {@link ~Position#offset} will be\n     * increased by `n`. If the position was in a merged element, it will be accordingly moved to the new element, etc.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param operation Operation to transform by.\n     * @returns Transformed position.\n     */\n    getTransformedByOperation(operation) {\n        let result;\n        switch (operation.type) {\n            case 'insert':\n                result = this._getTransformedByInsertOperation(operation);\n                break;\n            case 'move':\n            case 'remove':\n            case 'reinsert':\n                result = this._getTransformedByMoveOperation(operation);\n                break;\n            case 'split':\n                result = this._getTransformedBySplitOperation(operation);\n                break;\n            case 'merge':\n                result = this._getTransformedByMergeOperation(operation);\n                break;\n            default:\n                result = Position._createAt(this);\n                break;\n        }\n        return result;\n    }\n    /**\n     * Returns a copy of this position transformed by an insert operation.\n     *\n     * @internal\n     */\n    _getTransformedByInsertOperation(operation) {\n        return this._getTransformedByInsertion(operation.position, operation.howMany);\n    }\n    /**\n     * Returns a copy of this position transformed by a move operation.\n     *\n     * @internal\n     */\n    _getTransformedByMoveOperation(operation) {\n        return this._getTransformedByMove(operation.sourcePosition, operation.targetPosition, operation.howMany);\n    }\n    /**\n     * Returns a copy of this position transformed by a split operation.\n     *\n     * @internal\n     */\n    _getTransformedBySplitOperation(operation) {\n        const movedRange = operation.movedRange;\n        const isContained = movedRange.containsPosition(this) ||\n            (movedRange.start.isEqual(this) && this.stickiness == 'toNext');\n        if (isContained) {\n            return this._getCombined(operation.splitPosition, operation.moveTargetPosition);\n        }\n        else {\n            if (operation.graveyardPosition) {\n                return this._getTransformedByMove(operation.graveyardPosition, operation.insertionPosition, 1);\n            }\n            else {\n                return this._getTransformedByInsertion(operation.insertionPosition, 1);\n            }\n        }\n    }\n    /**\n     * Returns a copy of this position transformed by merge operation.\n     *\n     * @internal\n     */\n    _getTransformedByMergeOperation(operation) {\n        const movedRange = operation.movedRange;\n        const isContained = movedRange.containsPosition(this) || movedRange.start.isEqual(this);\n        let pos;\n        if (isContained) {\n            pos = this._getCombined(operation.sourcePosition, operation.targetPosition);\n            if (operation.sourcePosition.isBefore(operation.targetPosition)) {\n                // Above happens during OT when the merged element is moved before the merged-to element.\n                pos = pos._getTransformedByDeletion(operation.deletionPosition, 1);\n            }\n        }\n        else if (this.isEqual(operation.deletionPosition)) {\n            pos = Position._createAt(operation.deletionPosition);\n        }\n        else {\n            pos = this._getTransformedByMove(operation.deletionPosition, operation.graveyardPosition, 1);\n        }\n        return pos;\n    }\n    /**\n     * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\n     * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\n     *\n     * @internal\n     * @param deletePosition Position before the first removed node.\n     * @param howMany How many nodes are removed.\n     * @returns Transformed position or `null`.\n     */\n    _getTransformedByDeletion(deletePosition, howMany) {\n        const transformed = Position._createAt(this);\n        // This position can't be affected if deletion was in a different root.\n        if (this.root != deletePosition.root) {\n            return transformed;\n        }\n        if (compareArrays(deletePosition.getParentPath(), this.getParentPath()) == 'same') {\n            // If nodes are removed from the node that is pointed by this position...\n            if (deletePosition.offset < this.offset) {\n                // And are removed from before an offset of that position...\n                if (deletePosition.offset + howMany > this.offset) {\n                    // Position is in removed range, it's no longer in the tree.\n                    return null;\n                }\n                else {\n                    // Decrement the offset accordingly.\n                    transformed.offset -= howMany;\n                }\n            }\n        }\n        else if (compareArrays(deletePosition.getParentPath(), this.getParentPath()) == 'prefix') {\n            // If nodes are removed from a node that is on a path to this position...\n            const i = deletePosition.path.length - 1;\n            if (deletePosition.offset <= this.path[i]) {\n                // And are removed from before next node of that path...\n                if (deletePosition.offset + howMany > this.path[i]) {\n                    // If the next node of that path is removed return null\n                    // because the node containing this position got removed.\n                    return null;\n                }\n                else {\n                    // Otherwise, decrement index on that path.\n                    transformed.path[i] -= howMany;\n                }\n            }\n        }\n        return transformed;\n    }\n    /**\n     * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\n     *\n     * @internal\n     * @param insertPosition Position where nodes are inserted.\n     * @param howMany How many nodes are inserted.\n     * @returns Transformed position.\n     */\n    _getTransformedByInsertion(insertPosition, howMany) {\n        const transformed = Position._createAt(this);\n        // This position can't be affected if insertion was in a different root.\n        if (this.root != insertPosition.root) {\n            return transformed;\n        }\n        if (compareArrays(insertPosition.getParentPath(), this.getParentPath()) == 'same') {\n            // If nodes are inserted in the node that is pointed by this position...\n            if (insertPosition.offset < this.offset || (insertPosition.offset == this.offset && this.stickiness != 'toPrevious')) {\n                // And are inserted before an offset of that position...\n                // \"Push\" this positions offset.\n                transformed.offset += howMany;\n            }\n        }\n        else if (compareArrays(insertPosition.getParentPath(), this.getParentPath()) == 'prefix') {\n            // If nodes are inserted in a node that is on a path to this position...\n            const i = insertPosition.path.length - 1;\n            if (insertPosition.offset <= this.path[i]) {\n                // And are inserted before next node of that path...\n                // \"Push\" the index on that path.\n                transformed.path[i] += howMany;\n            }\n        }\n        return transformed;\n    }\n    /**\n     * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n     *\n     * @internal\n     * @param sourcePosition Position before the first element to move.\n     * @param targetPosition Position where moved elements will be inserted.\n     * @param howMany How many consecutive nodes to move, starting from `sourcePosition`.\n     * @returns Transformed position.\n     */\n    _getTransformedByMove(sourcePosition, targetPosition, howMany) {\n        // Update target position, as it could be affected by nodes removal.\n        targetPosition = targetPosition._getTransformedByDeletion(sourcePosition, howMany);\n        if (sourcePosition.isEqual(targetPosition)) {\n            // If `targetPosition` is equal to `sourcePosition` this isn't really any move. Just return position as it is.\n            return Position._createAt(this);\n        }\n        // Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\n        const transformed = this._getTransformedByDeletion(sourcePosition, howMany);\n        const isMoved = transformed === null ||\n            (sourcePosition.isEqual(this) && this.stickiness == 'toNext') ||\n            (sourcePosition.getShiftedBy(howMany).isEqual(this) && this.stickiness == 'toPrevious');\n        if (isMoved) {\n            // This position is inside moved range (or sticks to it).\n            // In this case, we calculate a combination of this position, move source position and target position.\n            return this._getCombined(sourcePosition, targetPosition);\n        }\n        else {\n            // This position is not inside a removed range.\n            //\n            // In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\n            return transformed._getTransformedByInsertion(targetPosition, howMany);\n        }\n    }\n    /**\n     * Returns a new position that is a combination of this position and given positions.\n     *\n     * The combined position is a copy of this position transformed by moving a range starting at `source` position\n     * to the `target` position. It is expected that this position is inside the moved range.\n     *\n     * Example:\n     *\n     * ```ts\n     * let original = model.createPositionFromPath( root, [ 2, 3, 1 ] );\n     * let source = model.createPositionFromPath( root, [ 2, 2 ] );\n     * let target = model.createPositionFromPath( otherRoot, [ 1, 1, 3 ] );\n     * original._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\n     * ```\n     *\n     * Explanation:\n     *\n     * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\n     * was inside moved nodes and now should point to the new place. The moved nodes will be after\n     * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\n     * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\n     * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\n     * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\n     *\n     * @internal\n     * @param source Beginning of the moved range.\n     * @param target Position where the range is moved.\n     * @returns Combined position.\n     */\n    _getCombined(source, target) {\n        const i = source.path.length - 1;\n        // The first part of a path to combined position is a path to the place where nodes were moved.\n        const combined = Position._createAt(target);\n        combined.stickiness = this.stickiness;\n        // Then we have to update the rest of the path.\n        // Fix the offset because this position might be after `from` position and we have to reflect that.\n        combined.offset = combined.offset + this.path[i] - source.offset;\n        // Then, add the rest of the path.\n        // If this position is at the same level as `from` position nothing will get added.\n        combined.path = [...combined.path, ...this.path.slice(i + 1)];\n        return combined;\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        return {\n            root: this.root.toJSON(),\n            path: Array.from(this.path),\n            stickiness: this.stickiness\n        };\n    }\n    /**\n     * Returns a new position that is equal to current position.\n     */\n    clone() {\n        return new this.constructor(this.root, this.path, this.stickiness);\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/model/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\n     *\n     * This method is a shortcut to other factory methods such as:\n     *\n     * * {@link module:engine/model/position~Position._createBefore},\n     * * {@link module:engine/model/position~Position._createAfter}.\n     *\n     * @internal\n     * @param offset Offset or one of the flags. Used only when the first parameter is a {@link module:engine/model/item~Item model item}.\n     * @param stickiness Position stickiness. Used only when the first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    static _createAt(itemOrPosition, offset, stickiness = 'toNone') {\n        if (itemOrPosition instanceof Position) {\n            return new Position(itemOrPosition.root, itemOrPosition.path, itemOrPosition.stickiness);\n        }\n        else {\n            const node = itemOrPosition;\n            if (offset == 'end') {\n                offset = node.maxOffset;\n            }\n            else if (offset == 'before') {\n                return this._createBefore(node, stickiness);\n            }\n            else if (offset == 'after') {\n                return this._createAfter(node, stickiness);\n            }\n            else if (offset !== 0 && !offset) {\n                /**\n                 * {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}\n                 * requires the offset to be specified when the first parameter is a model item.\n                 *\n                 * @error model-createpositionat-offset-required\n                 */\n                throw new CKEditorError('model-createpositionat-offset-required', [this, itemOrPosition]);\n            }\n            if (!node.is('element') && !node.is('documentFragment')) {\n                /**\n                 * Position parent have to be a model element or model document fragment.\n                 *\n                 * @error model-position-parent-incorrect\n                 */\n                throw new CKEditorError('model-position-parent-incorrect', [this, itemOrPosition]);\n            }\n            const path = node.getPath();\n            path.push(offset);\n            return new this(node.root, path, stickiness);\n        }\n    }\n    /**\n     * Creates a new position, after given {@link module:engine/model/item~Item model item}.\n     *\n     * @internal\n     * @param item Item after which the position should be placed.\n     * @param stickiness Position stickiness.\n     */\n    static _createAfter(item, stickiness) {\n        if (!item.parent) {\n            /**\n             * You can not make a position after a root element.\n             *\n             * @error model-position-after-root\n             * @param root\n             */\n            throw new CKEditorError('model-position-after-root', [this, item], { root: item });\n        }\n        return this._createAt(item.parent, item.endOffset, stickiness);\n    }\n    /**\n     * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\n     *\n     * @internal\n     * @param item Item before which the position should be placed.\n     * @param stickiness Position stickiness.\n     */\n    static _createBefore(item, stickiness) {\n        if (!item.parent) {\n            /**\n             * You can not make a position before a root element.\n             *\n             * @error model-position-before-root\n             * @param root\n             */\n            throw new CKEditorError('model-position-before-root', item, { root: item });\n        }\n        return this._createAt(item.parent, item.startOffset, stickiness);\n    }\n    /**\n     * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\n     *\n     * @param json Plain object to be converted to `Position`.\n     * @param doc Document object that will be position owner.\n     * @returns `Position` instance created using given plain object.\n     */\n    static fromJSON(json, doc) {\n        if (json.root === '$graveyard') {\n            const pos = new Position(doc.graveyard, json.path);\n            pos.stickiness = json.stickiness;\n            return pos;\n        }\n        if (!doc.getRoot(json.root)) {\n            /**\n             * Cannot create position for document. Root with specified name does not exist.\n             *\n             * @error model-position-fromjson-no-root\n             * @param rootName\n             */\n            throw new CKEditorError('model-position-fromjson-no-root', doc, { rootName: json.root });\n        }\n        return new Position(doc.getRoot(json.root), json.path, json.stickiness);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nPosition.prototype.is = function (type) {\n    return type === 'position' || type === 'model:position';\n};\n/**\n * Returns a text node at the given position.\n *\n * This is a helper function optimized to reuse the position parent instance for performance reasons.\n *\n * Normally, you should use {@link module:engine/model/position~Position#textNode `Position#textNode`}.\n * If you start hitting performance issues with {@link module:engine/model/position~Position#parent `Position#parent`}\n * check if your algorithm does not access it multiple times (which can happen directly or indirectly via other position properties).\n *\n * See https://github.com/ckeditor/ckeditor5/issues/6579.\n *\n * See also:\n *\n * * {@link module:engine/model/position~getNodeAfterPosition}\n * * {@link module:engine/model/position~getNodeBeforePosition}\n *\n * @param position\n * @param positionParent The parent of the given position.\n */\nexport function getTextNodeAtPosition(position, positionParent) {\n    const node = positionParent.getChildAtOffset(position.offset);\n    if (node && node.is('$text') && node.startOffset < position.offset) {\n        return node;\n    }\n    return null;\n}\n/**\n * Returns the node after the given position.\n *\n * This is a helper function optimized to reuse the position parent instance and the calculation of the text node at the\n * specific position for performance reasons.\n *\n * Normally, you should use {@link module:engine/model/position~Position#nodeAfter `Position#nodeAfter`}.\n * If you start hitting performance issues with {@link module:engine/model/position~Position#parent `Position#parent`} and/or\n * {@link module:engine/model/position~Position#textNode `Position#textNode`}\n * check if your algorithm does not access those properties multiple times\n * (which can happen directly or indirectly via other position properties).\n *\n * See https://github.com/ckeditor/ckeditor5/issues/6579 and https://github.com/ckeditor/ckeditor5/issues/6582.\n *\n * See also:\n *\n * * {@link module:engine/model/position~getTextNodeAtPosition}\n * * {@link module:engine/model/position~getNodeBeforePosition}\n *\n * @param position Position to check.\n * @param positionParent The parent of the given position.\n * @param textNode Text node at the given position.\n */\nexport function getNodeAfterPosition(position, positionParent, textNode) {\n    if (textNode !== null) {\n        return null;\n    }\n    return positionParent.getChildAtOffset(position.offset);\n}\n/**\n * Returns the node before the given position.\n *\n * Refer to {@link module:engine/model/position~getNodeBeforePosition} for documentation on when to use this util method.\n *\n * See also:\n *\n * * {@link module:engine/model/position~getTextNodeAtPosition}\n * * {@link module:engine/model/position~getNodeAfterPosition}\n *\n * @param position Position to check.\n * @param positionParent The parent of the given position.\n * @param textNode Text node at the given position.\n */\nexport function getNodeBeforePosition(position, positionParent, textNode) {\n    if (textNode !== null) {\n        return null;\n    }\n    return positionParent.getChild(positionParent.offsetToIndex(position.offset) - 1);\n}\n/**\n * This is a helper function for `Position#isTouching()`.\n *\n * It checks whether to given positions are touching, considering that they have the same root and paths\n * until given level, and at given level they differ by 1 (so they are branching at `level` point).\n *\n * The exact requirements for touching positions are described in `Position#isTouching()` and also\n * in the body of this function.\n *\n * @param left Position \"on the left\" (it is before `right`).\n * @param right Position \"on the right\" (it is after `left`).\n * @param level Level on which the positions are different.\n */\nfunction checkTouchingBranch(left, right, level) {\n    if (level + 1 === left.path.length) {\n        // Left position does not have any more entries after the point where the positions differ.\n        // [ 2 ] vs [ 3 ]\n        // [ 2 ] vs [ 3, 0, 0 ]\n        // The positions are spread by node at [ 2 ].\n        return false;\n    }\n    if (!checkOnlyZeroes(right.path, level + 1)) {\n        // Right position does not have only zeroes, so we have situation like:\n        // [ 2, maxOffset ] vs [ 3, 1 ]\n        // [ 2, maxOffset ] vs [ 3, 1, 0, 0 ]\n        // The positions are spread by node at [ 3, 0 ].\n        return false;\n    }\n    if (!checkOnlyMaxOffset(left, level + 1)) {\n        // Left position does not have only max offsets, so we have situation like:\n        // [ 2, 4 ] vs [ 3 ]\n        // [ 2, 4 ] vs [ 3, 0, 0 ]\n        // The positions are spread by node at [ 2, 5 ].\n        return false;\n    }\n    // Left position has only max offsets and right position has only zeroes or nothing.\n    // [ 2, maxOffset ] vs [ 3 ]\n    // [ 2, maxOffset, maxOffset ] vs [ 3, 0 ]\n    // There are not elements between positions. The positions are touching.\n    return true;\n}\n/**\n * Checks whether for given array, starting from given index until the end of the array, all items are `0`s.\n *\n * This is a helper function for `Position#isTouching()`.\n */\nfunction checkOnlyZeroes(arr, idx) {\n    while (idx < arr.length) {\n        if (arr[idx] !== 0) {\n            return false;\n        }\n        idx++;\n    }\n    return true;\n}\n/**\n * Checks whether for given position, starting from given path level, whether the position is at the end of\n * its parent and whether each element on the path to the position is also at at the end of its parent.\n *\n * This is a helper function for `Position#isTouching()`.\n */\nfunction checkOnlyMaxOffset(pos, level) {\n    let parent = pos.parent;\n    let idx = pos.path.length - 1;\n    let add = 0;\n    while (idx >= level) {\n        if (pos.path[idx] + add !== parent.maxOffset) {\n            return false;\n        }\n        // After the first check, we \"go up\", and check whether the position's parent-parent is the last element.\n        // However, we need to add 1 to the value in the path to \"simulate\" moving the path after the parent.\n        // It happens just once.\n        add = 1;\n        idx--;\n        parent = parent.parent;\n    }\n    return true;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/range\n */\nimport TypeCheckable from './typecheckable.js';\nimport Position from './position.js';\nimport TreeWalker from './treewalker.js';\nimport { CKEditorError, compareArrays } from '@ckeditor/ckeditor5-utils';\n/**\n * Represents a range in the model tree.\n *\n * A range is defined by its {@link module:engine/model/range~Range#start} and {@link module:engine/model/range~Range#end}\n * positions.\n *\n * You can create range instances via its constructor or the `createRange*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n */\nexport default class Range extends TypeCheckable {\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * @param start The start position.\n     * @param end The end position. If not set, the range will be collapsed at the `start` position.\n     */\n    constructor(start, end) {\n        super();\n        this.start = Position._createAt(start);\n        this.end = end ? Position._createAt(end) : Position._createAt(start);\n        // If the range is collapsed, treat in a similar way as a position and set its boundaries stickiness to 'toNone'.\n        // In other case, make the boundaries stick to the \"inside\" of the range.\n        this.start.stickiness = this.isCollapsed ? 'toNone' : 'toNext';\n        this.end.stickiness = this.isCollapsed ? 'toNone' : 'toPrevious';\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n     * them together with additional information like length or {@link module:engine/model/position~Position positions},\n     * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.\n     * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range\n     * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.\n     *\n     * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range\n     * and `ignoreElementEnd` option set to `true`.\n     */\n    *[Symbol.iterator]() {\n        yield* new TreeWalker({ boundaries: this, ignoreElementEnd: true });\n    }\n    /**\n     * Describes whether the range is collapsed, that is if {@link #start} and\n     * {@link #end} positions are equal.\n     */\n    get isCollapsed() {\n        return this.start.isEqual(this.end);\n    }\n    /**\n     * Describes whether this range is flat, that is if {@link #start} position and\n     * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.\n     */\n    get isFlat() {\n        const startParentPath = this.start.getParentPath();\n        const endParentPath = this.end.getParentPath();\n        return compareArrays(startParentPath, endParentPath) == 'same';\n    }\n    /**\n     * Range root element.\n     */\n    get root() {\n        return this.start.root;\n    }\n    /**\n     * Checks whether this range contains given {@link module:engine/model/position~Position position}.\n     *\n     * @param position Position to check.\n     * @returns `true` if given {@link module:engine/model/position~Position position} is contained\n     * in this range,`false` otherwise.\n     */\n    containsPosition(position) {\n        return position.isAfter(this.start) && position.isBefore(this.end);\n    }\n    /**\n     * Checks whether this range contains given {@link ~Range range}.\n     *\n     * @param otherRange Range to check.\n     * @param loose Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n     * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n     * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n     * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.\n     */\n    containsRange(otherRange, loose = false) {\n        if (otherRange.isCollapsed) {\n            loose = false;\n        }\n        const containsStart = this.containsPosition(otherRange.start) || (loose && this.start.isEqual(otherRange.start));\n        const containsEnd = this.containsPosition(otherRange.end) || (loose && this.end.isEqual(otherRange.end));\n        return containsStart && containsEnd;\n    }\n    /**\n     * Checks whether given {@link module:engine/model/item~Item} is inside this range.\n     */\n    containsItem(item) {\n        const pos = Position._createBefore(item);\n        return this.containsPosition(pos) || this.start.isEqual(pos);\n    }\n    /**\n     * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.\n     *\n     * @param otherRange Range to compare with.\n     * @returns `true` if ranges are equal, `false` otherwise.\n     */\n    isEqual(otherRange) {\n        return this.start.isEqual(otherRange.start) && this.end.isEqual(otherRange.end);\n    }\n    /**\n     * Checks and returns whether this range intersects with given range.\n     *\n     * @param otherRange Range to compare with.\n     * @returns `true` if ranges intersect, `false` otherwise.\n     */\n    isIntersecting(otherRange) {\n        return this.start.isBefore(otherRange.end) && this.end.isAfter(otherRange.start);\n    }\n    /**\n     * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.\n     * Returned array contains zero, one or two {@link ~Range ranges}.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let range = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n     * \tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n     * );\n     * let otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n     * let transformed = range.getDifference( otherRange );\n     * // transformed array has no ranges because `otherRange` contains `range`\n     *\n     * otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 3 ] ) );\n     * transformed = range.getDifference( otherRange );\n     * // transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]\n     *\n     * otherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 4 ] ) );\n     * transformed = range.getDifference( otherRange );\n     * // transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]\n     * ```\n     *\n     * @param otherRange Range to differentiate against.\n     * @returns The difference between ranges.\n     */\n    getDifference(otherRange) {\n        const ranges = [];\n        if (this.isIntersecting(otherRange)) {\n            // Ranges intersect.\n            if (this.containsPosition(otherRange.start)) {\n                // Given range start is inside this range. This means that we have to\n                // add shrunken range - from the start to the middle of this range.\n                ranges.push(new Range(this.start, otherRange.start));\n            }\n            if (this.containsPosition(otherRange.end)) {\n                // Given range end is inside this range. This means that we have to\n                // add shrunken range - from the middle of this range to the end.\n                ranges.push(new Range(otherRange.end, this.end));\n            }\n        }\n        else {\n            // Ranges do not intersect, return the original range.\n            ranges.push(new Range(this.start, this.end));\n        }\n        return ranges;\n    }\n    /**\n     * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.\n     * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let range = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n     * \tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n     * );\n     * let otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 2 ] ) );\n     * let transformed = range.getIntersection( otherRange ); // null - ranges have no common part\n     *\n     * otherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n     * transformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]\n     * ```\n     *\n     * @param otherRange Range to check for intersection.\n     * @returns A common part of given ranges or `null` if ranges have no common part.\n     */\n    getIntersection(otherRange) {\n        if (this.isIntersecting(otherRange)) {\n            // Ranges intersect, so a common range will be returned.\n            // At most, it will be same as this range.\n            let commonRangeStart = this.start;\n            let commonRangeEnd = this.end;\n            if (this.containsPosition(otherRange.start)) {\n                // Given range start is inside this range. This means thaNt we have to\n                // shrink common range to the given range start.\n                commonRangeStart = otherRange.start;\n            }\n            if (this.containsPosition(otherRange.end)) {\n                // Given range end is inside this range. This means that we have to\n                // shrink common range to the given range end.\n                commonRangeEnd = otherRange.end;\n            }\n            return new Range(commonRangeStart, commonRangeEnd);\n        }\n        // Ranges do not intersect, so they do not have common part.\n        return null;\n    }\n    /**\n     * Returns a range created by joining this {@link ~Range range} with the given {@link ~Range range}.\n     * If ranges have no common part, returns `null`.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let range = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n     * \tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n     * );\n     * let otherRange = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 1 ] ),\n     * \tmodel.createPositionFromPath( root, [ 2 ] )\n     * );\n     * let transformed = range.getJoined( otherRange ); // null - ranges have no common part\n     *\n     * otherRange = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 3 ] ),\n     * \tmodel.createPositionFromPath( root, [ 5 ] )\n     * );\n     * transformed = range.getJoined( otherRange ); // range from [ 2, 7 ] to [ 5 ]\n     * ```\n     *\n     * @param otherRange Range to be joined.\n     * @param loose Whether the intersection check is loose or strict. If the check is strict (`false`),\n     * ranges are tested for intersection or whether start/end positions are equal. If the check is loose (`true`),\n     * compared range is also checked if it's {@link module:engine/model/position~Position#isTouching touching} current range.\n     * @returns A sum of given ranges or `null` if ranges have no common part.\n     */\n    getJoined(otherRange, loose = false) {\n        let shouldJoin = this.isIntersecting(otherRange);\n        if (!shouldJoin) {\n            if (this.start.isBefore(otherRange.start)) {\n                shouldJoin = loose ? this.end.isTouching(otherRange.start) : this.end.isEqual(otherRange.start);\n            }\n            else {\n                shouldJoin = loose ? otherRange.end.isTouching(this.start) : otherRange.end.isEqual(this.start);\n            }\n        }\n        if (!shouldJoin) {\n            return null;\n        }\n        let startPosition = this.start;\n        let endPosition = this.end;\n        if (otherRange.start.isBefore(startPosition)) {\n            startPosition = otherRange.start;\n        }\n        if (otherRange.end.isAfter(endPosition)) {\n            endPosition = otherRange.end;\n        }\n        return new Range(startPosition, endPosition);\n    }\n    /**\n     * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.\n     *\n     * See an example of a model structure (`[` and `]` are range boundaries):\n     *\n     * ```\n     * root                                                            root\n     *  |- element DIV                         DIV             P2              P3             DIV\n     *  |   |- element H                   H        P1        f o o           b a r       H         P4\n     *  |   |   |- \"fir[st\"             fir[st     lorem                               se]cond     ipsum\n     *  |   |- element P1\n     *  |   |   |- \"lorem\"                                              ||\n     *  |- element P2                                                   ||\n     *  |   |- \"foo\"                                                    VV\n     *  |- element P3\n     *  |   |- \"bar\"                                                   root\n     *  |- element DIV                         DIV             [P2             P3]             DIV\n     *  |   |- element H                   H       [P1]       f o o           b a r        H         P4\n     *  |   |   |- \"se]cond\"            fir[st]    lorem                               [se]cond     ipsum\n     *  |   |- element P4\n     *  |   |   |- \"ipsum\"\n     * ```\n     *\n     * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.\n     * We are looking for minimal set of flat ranges that contains the same nodes.\n     *\n     * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:\n     *\n     * ```\n     * ( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = \"st\"\n     * ( [ 0, 1 ], [ 0, 2 ] ) = element P1 (\"lorem\")\n     * ( [ 1 ], [ 3 ] ) = element P2, element P3 (\"foobar\")\n     * ( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = \"se\"\n     * ```\n     *\n     * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned\n     * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range\n     * were omitted. Only their parts that were wholly in the range were returned.\n     *\n     * **Note:** this method is not returning flat ranges that contain no nodes.\n     *\n     * @returns Array of flat ranges covering this range.\n     */\n    getMinimalFlatRanges() {\n        const ranges = [];\n        const diffAt = this.start.getCommonPath(this.end).length;\n        const pos = Position._createAt(this.start);\n        let posParent = pos.parent;\n        // Go up.\n        while (pos.path.length > diffAt + 1) {\n            const howMany = posParent.maxOffset - pos.offset;\n            if (howMany !== 0) {\n                ranges.push(new Range(pos, pos.getShiftedBy(howMany)));\n            }\n            pos.path = pos.path.slice(0, -1);\n            pos.offset++;\n            posParent = posParent.parent;\n        }\n        // Go down.\n        while (pos.path.length <= this.end.path.length) {\n            const offset = this.end.path[pos.path.length - 1];\n            const howMany = offset - pos.offset;\n            if (howMany !== 0) {\n                ranges.push(new Range(pos, pos.getShiftedBy(howMany)));\n            }\n            pos.offset = offset;\n            pos.path.push(0);\n        }\n        return ranges;\n    }\n    /**\n     * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n     *\n     * For example, to iterate over all items in the entire document root:\n     *\n     * ```ts\n     * // Create a range spanning over the entire root content:\n     * const range = editor.model.createRangeIn( editor.model.document.getRoot() );\n     *\n     * // Iterate over all items in this range:\n     * for ( const value of range.getWalker() ) {\n     * \tconsole.log( value.item );\n     * }\n     * ```\n     *\n     * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n     */\n    getWalker(options = {}) {\n        options.boundaries = this;\n        return new TreeWalker(options);\n    }\n    /**\n     * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n     * them.\n     *\n     * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n     * set to `true`. However it returns only {@link module:engine/model/item~Item model items},\n     * not {@link module:engine/model/treewalker~TreeWalkerValue}.\n     *\n     * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n     * a full list of available options.\n     *\n     * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n     */\n    *getItems(options = {}) {\n        options.boundaries = this;\n        options.ignoreElementEnd = true;\n        const treeWalker = new TreeWalker(options);\n        for (const value of treeWalker) {\n            yield value.item;\n        }\n    }\n    /**\n     * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or\n     * contained in this range.\n     *\n     * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n     * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.\n     *\n     * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n     * a full list of available options.\n     *\n     * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n     */\n    *getPositions(options = {}) {\n        options.boundaries = this;\n        const treeWalker = new TreeWalker(options);\n        yield treeWalker.position;\n        for (const value of treeWalker) {\n            yield value.nextPosition;\n        }\n    }\n    /**\n     * Returns a range that is a result of transforming this range by given `operation`.\n     *\n     * **Note:** transformation may break one range into multiple ranges (for example, when a part of the range is\n     * moved to a different part of document tree). For this reason, an array is returned by this method and it\n     * may contain one or more `Range` instances.\n     *\n     * @param operation Operation to transform range by.\n     * @returns Range which is the result of transformation.\n     */\n    getTransformedByOperation(operation) {\n        switch (operation.type) {\n            case 'insert':\n                return this._getTransformedByInsertOperation(operation);\n            case 'move':\n            case 'remove':\n            case 'reinsert':\n                return this._getTransformedByMoveOperation(operation);\n            case 'split':\n                return [this._getTransformedBySplitOperation(operation)];\n            case 'merge':\n                return [this._getTransformedByMergeOperation(operation)];\n        }\n        return [new Range(this.start, this.end)];\n    }\n    /**\n     * Returns a range that is a result of transforming this range by multiple `operations`.\n     *\n     * @see ~Range#getTransformedByOperation\n     * @param operations Operations to transform the range by.\n     * @returns Range which is the result of transformation.\n     */\n    getTransformedByOperations(operations) {\n        const ranges = [new Range(this.start, this.end)];\n        for (const operation of operations) {\n            for (let i = 0; i < ranges.length; i++) {\n                const result = ranges[i].getTransformedByOperation(operation);\n                ranges.splice(i, 1, ...result);\n                i += result.length - 1;\n            }\n        }\n        // It may happen that a range is split into two, and then the part of second \"piece\" is moved into first\n        // \"piece\". In this case we will have incorrect third range, which should not be included in the result --\n        // because it is already included in the first \"piece\". In this loop we are looking for all such ranges that\n        // are inside other ranges and we simply remove them.\n        for (let i = 0; i < ranges.length; i++) {\n            const range = ranges[i];\n            for (let j = i + 1; j < ranges.length; j++) {\n                const next = ranges[j];\n                if (range.containsRange(next) || next.containsRange(range) || range.isEqual(next)) {\n                    ranges.splice(j, 1);\n                }\n            }\n        }\n        return ranges;\n    }\n    /**\n     * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n     * which is a common ancestor of the range's both ends (in which the entire range is contained).\n     */\n    getCommonAncestor() {\n        return this.start.getCommonAncestor(this.end);\n    }\n    /**\n     * Returns an {@link module:engine/model/element~Element Element} contained by the range.\n     * The element will be returned when it is the **only** node within the range and **fully–contained**\n     * at the same time.\n     */\n    getContainedElement() {\n        if (this.isCollapsed) {\n            return null;\n        }\n        const nodeAfterStart = this.start.nodeAfter;\n        const nodeBeforeEnd = this.end.nodeBefore;\n        if (nodeAfterStart && nodeAfterStart.is('element') && nodeAfterStart === nodeBeforeEnd) {\n            return nodeAfterStart;\n        }\n        return null;\n    }\n    /**\n     * Converts `Range` to plain object and returns it.\n     *\n     * @returns `Node` converted to plain object.\n     */\n    toJSON() {\n        return {\n            start: this.start.toJSON(),\n            end: this.end.toJSON()\n        };\n    }\n    /**\n     * Returns a new range that is equal to current range.\n     */\n    clone() {\n        return new this.constructor(this.start, this.end);\n    }\n    /**\n     * Returns a result of transforming a copy of this range by insert operation.\n     *\n     * One or more ranges may be returned as a result of this transformation.\n     *\n     * @internal\n     */\n    _getTransformedByInsertOperation(operation, spread = false) {\n        return this._getTransformedByInsertion(operation.position, operation.howMany, spread);\n    }\n    /**\n     * Returns a result of transforming a copy of this range by move operation.\n     *\n     * One or more ranges may be returned as a result of this transformation.\n     *\n     * @internal\n     */\n    _getTransformedByMoveOperation(operation, spread = false) {\n        const sourcePosition = operation.sourcePosition;\n        const howMany = operation.howMany;\n        const targetPosition = operation.targetPosition;\n        return this._getTransformedByMove(sourcePosition, targetPosition, howMany, spread);\n    }\n    /**\n     * Returns a result of transforming a copy of this range by split operation.\n     *\n     * Always one range is returned. The transformation is done in a way to not break the range.\n     *\n     * @internal\n     */\n    _getTransformedBySplitOperation(operation) {\n        const start = this.start._getTransformedBySplitOperation(operation);\n        let end = this.end._getTransformedBySplitOperation(operation);\n        if (this.end.isEqual(operation.insertionPosition)) {\n            end = this.end.getShiftedBy(1);\n        }\n        // Below may happen when range contains graveyard element used by split operation.\n        if (start.root != end.root) {\n            // End position was next to the moved graveyard element and was moved with it.\n            // Fix it by using old `end` which has proper `root`.\n            end = this.end.getShiftedBy(-1);\n        }\n        return new Range(start, end);\n    }\n    /**\n     * Returns a result of transforming a copy of this range by merge operation.\n     *\n     * Always one range is returned. The transformation is done in a way to not break the range.\n     *\n     * @internal\n     */\n    _getTransformedByMergeOperation(operation) {\n        // Special case when the marker is set on \"the closing tag\" of an element. Marker can be set like that during\n        // transformations, especially when a content of a few block elements were removed. For example:\n        //\n        // {} is the transformed range, [] is the removed range.\n        // <p>F[o{o</p><p>B}ar</p><p>Xy]z</p>\n        //\n        // <p>Fo{o</p><p>B}ar</p><p>z</p>\n        // <p>F{</p><p>B}ar</p><p>z</p>\n        // <p>F{</p>}<p>z</p>\n        // <p>F{}z</p>\n        //\n        if (this.start.isEqual(operation.targetPosition) && this.end.isEqual(operation.deletionPosition)) {\n            return new Range(this.start);\n        }\n        let start = this.start._getTransformedByMergeOperation(operation);\n        let end = this.end._getTransformedByMergeOperation(operation);\n        if (start.root != end.root) {\n            // This happens when the end position was next to the merged (deleted) element.\n            // Then, the end position was moved to the graveyard root. In this case we need to fix\n            // the range cause its boundaries would be in different roots.\n            end = this.end.getShiftedBy(-1);\n        }\n        if (start.isAfter(end)) {\n            // This happens in three following cases:\n            //\n            // Case 1: Merge operation source position is before the target position (due to some transformations, OT, etc.)\n            //         This means that start can be moved before the end of the range.\n            //\n            // Before: <p>a{a</p><p>b}b</p><p>cc</p>\n            // Merge:  <p>b}b</p><p>cca{a</p>\n            // Fix:    <p>{b}b</p><p>ccaa</p>\n            //\n            // Case 2: Range start is before merged node but not directly.\n            //         Result should include all nodes that were in the original range.\n            //\n            // Before: <p>aa</p>{<p>cc</p><p>b}b</p>\n            // Merge:  <p>aab}b</p>{<p>cc</p>\n            // Fix:    <p>aa{bb</p><p>cc</p>}\n            //\n            //         The range is expanded by an additional `b` letter but it is better than dropping the whole `cc` paragraph.\n            //\n            // Case 3: Range start is directly before merged node.\n            //         Resulting range should include only nodes from the merged element:\n            //\n            // Before: <p>aa</p>{<p>b}b</p><p>cc</p>\n            // Merge:  <p>aab}b</p>{<p>cc</p>\n            // Fix:    <p>aa{b}b</p><p>cc</p>\n            //\n            if (operation.sourcePosition.isBefore(operation.targetPosition)) {\n                // Case 1.\n                start = Position._createAt(end);\n                start.offset = 0;\n            }\n            else {\n                if (!operation.deletionPosition.isEqual(start)) {\n                    // Case 2.\n                    end = operation.deletionPosition;\n                }\n                // In both case 2 and 3 start is at the end of the merge-to element.\n                start = operation.targetPosition;\n            }\n            return new Range(start, end);\n        }\n        return new Range(start, end);\n    }\n    /**\n     * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this\n     * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are\n     * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let range = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n     * \tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n     * );\n     * let transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 1 ] ), 2 );\n     * // transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]\n     *\n     * transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 4, 0, 0 ] ), 4 );\n     * // transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]\n     *\n     * transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4 );\n     * // transformed array has one range, which is equal to original range\n     *\n     * transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4, true );\n     * // transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]\n     * ```\n     *\n     * @internal\n     * @param insertPosition Position where nodes are inserted.\n     * @param howMany How many nodes are inserted.\n     * @param spread Flag indicating whether this range should be spread if insertion\n     * was inside the range. Defaults to `false`.\n     * @returns Result of the transformation.\n     */\n    _getTransformedByInsertion(insertPosition, howMany, spread = false) {\n        if (spread && this.containsPosition(insertPosition)) {\n            // Range has to be spread. The first part is from original start to the spread point.\n            // The other part is from spread point to the original end, but transformed by\n            // insertion to reflect insertion changes.\n            return [\n                new Range(this.start, insertPosition),\n                new Range(insertPosition.getShiftedBy(howMany), this.end._getTransformedByInsertion(insertPosition, howMany))\n            ];\n        }\n        else {\n            const range = new Range(this.start, this.end);\n            range.start = range.start._getTransformedByInsertion(insertPosition, howMany);\n            range.end = range.end._getTransformedByInsertion(insertPosition, howMany);\n            return [range];\n        }\n    }\n    /**\n     * Returns an array containing {@link ~Range ranges} that are a result of transforming this\n     * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n     *\n     * @internal\n     * @param sourcePosition Position from which nodes are moved.\n     * @param targetPosition Position to where nodes are moved.\n     * @param howMany How many nodes are moved.\n     * @param spread Whether the range should be spread if the move points inside the range.\n     * @returns  Result of the transformation.\n     */\n    _getTransformedByMove(sourcePosition, targetPosition, howMany, spread = false) {\n        // Special case for transforming a collapsed range. Just transform it like a position.\n        if (this.isCollapsed) {\n            const newPos = this.start._getTransformedByMove(sourcePosition, targetPosition, howMany);\n            return [new Range(newPos)];\n        }\n        // Special case for transformation when a part of the range is moved towards the range.\n        //\n        // Examples:\n        //\n        // <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p></div><p>c[d</p><p>e]f</p>\n        // <p>e[f</p><div><p>a]b</p><p>cd</p></div> --> <p>e[f</p><p>a]b</p><div><p>cd</p></div>\n        //\n        // Without this special condition, the default algorithm leaves an \"artifact\" range from one of `differenceSet` parts:\n        //\n        // <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p>{</div>}<p>c[d</p><p>e]f</p>\n        //\n        // This special case is applied only if the range is to be kept together (not spread).\n        const moveRange = Range._createFromPositionAndShift(sourcePosition, howMany);\n        const insertPosition = targetPosition._getTransformedByDeletion(sourcePosition, howMany);\n        if (this.containsPosition(targetPosition) && !spread) {\n            if (moveRange.containsPosition(this.start) || moveRange.containsPosition(this.end)) {\n                const start = this.start._getTransformedByMove(sourcePosition, targetPosition, howMany);\n                const end = this.end._getTransformedByMove(sourcePosition, targetPosition, howMany);\n                return [new Range(start, end)];\n            }\n        }\n        // Default algorithm.\n        let result;\n        const differenceSet = this.getDifference(moveRange);\n        let difference = null;\n        const common = this.getIntersection(moveRange);\n        if (differenceSet.length == 1) {\n            // `moveRange` and this range may intersect but may be separate.\n            difference = new Range(differenceSet[0].start._getTransformedByDeletion(sourcePosition, howMany), differenceSet[0].end._getTransformedByDeletion(sourcePosition, howMany));\n        }\n        else if (differenceSet.length == 2) {\n            // `moveRange` is inside this range.\n            difference = new Range(this.start, this.end._getTransformedByDeletion(sourcePosition, howMany));\n        } // else, `moveRange` contains this range.\n        if (difference) {\n            result = difference._getTransformedByInsertion(insertPosition, howMany, common !== null || spread);\n        }\n        else {\n            result = [];\n        }\n        if (common) {\n            const transformedCommon = new Range(common.start._getCombined(moveRange.start, insertPosition), common.end._getCombined(moveRange.start, insertPosition));\n            if (result.length == 2) {\n                result.splice(1, 0, transformedCommon);\n            }\n            else {\n                result.push(transformedCommon);\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns a copy of this range that is transformed by deletion of `howMany` nodes from `deletePosition`.\n     *\n     * If the deleted range is intersecting with the transformed range, the transformed range will be shrank.\n     *\n     * If the deleted range contains transformed range, `null` will be returned.\n     *\n     * @internal\n     * @param deletionPosition Position from which nodes are removed.\n     * @param howMany How many nodes are removed.\n     * @returns Result of the transformation.\n     */\n    _getTransformedByDeletion(deletePosition, howMany) {\n        let newStart = this.start._getTransformedByDeletion(deletePosition, howMany);\n        let newEnd = this.end._getTransformedByDeletion(deletePosition, howMany);\n        if (newStart == null && newEnd == null) {\n            return null;\n        }\n        if (newStart == null) {\n            newStart = deletePosition;\n        }\n        if (newEnd == null) {\n            newEnd = deletePosition;\n        }\n        return new Range(newStart, newEnd);\n    }\n    /**\n     * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by\n     * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n     *\n     * @internal\n     * @param position Beginning of the range.\n     * @param shift How long the range should be.\n     */\n    static _createFromPositionAndShift(position, shift) {\n        const start = position;\n        const end = position.getShiftedBy(shift);\n        return shift > 0 ? new this(start, end) : new this(end, start);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @internal\n     * @param element Element which is a parent for the range.\n     */\n    static _createIn(element) {\n        return new this(Position._createAt(element, 0), Position._createAt(element, element.maxOffset));\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.\n     *\n     * @internal\n     */\n    static _createOn(item) {\n        return this._createFromPositionAndShift(Position._createBefore(item), item.offsetSize);\n    }\n    /**\n     * Combines all ranges from the passed array into a one range. At least one range has to be passed.\n     * Passed ranges must not have common parts.\n     *\n     * The first range from the array is a reference range. If other ranges start or end on the exactly same position where\n     * the reference range, they get combined into one range.\n     *\n     * ```\n     * [  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted\n     * [    ]                                       // The result of the function if the first range was a reference range.\n     *         [                           ]        // The result of the function if the third-to-seventh range was a reference range.\n     *                                        [  ]  // The result of the function if the last range was a reference range.\n     * ```\n     *\n     * @internal\n     * @param ranges Ranges to combine.\n     * @returns Combined range.\n     */\n    static _createFromRanges(ranges) {\n        if (ranges.length === 0) {\n            /**\n             * At least one range has to be passed to\n             * {@link module:engine/model/range~Range._createFromRanges `Range._createFromRanges()`}.\n             *\n             * @error range-create-from-ranges-empty-array\n             */\n            throw new CKEditorError('range-create-from-ranges-empty-array', null);\n        }\n        else if (ranges.length == 1) {\n            return ranges[0].clone();\n        }\n        // 1. Set the first range in `ranges` array as a reference range.\n        // If we are going to return just a one range, one of the ranges need to be the reference one.\n        // Other ranges will be stuck to that range, if possible.\n        const ref = ranges[0];\n        // 2. Sort all the ranges, so it's easier to process them.\n        ranges.sort((a, b) => {\n            return a.start.isAfter(b.start) ? 1 : -1;\n        });\n        // 3. Check at which index the reference range is now.\n        const refIndex = ranges.indexOf(ref);\n        // 4. At this moment we don't need the original range.\n        // We are going to modify the result, and we need to return a new instance of Range.\n        // We have to create a copy of the reference range.\n        const result = new this(ref.start, ref.end);\n        // 5. Ranges should be checked and glued starting from the range that is closest to the reference range.\n        // Since ranges are sorted, start with the range with index that is closest to reference range index.\n        for (let i = refIndex - 1; i >= 0; i--) {\n            if (ranges[i].end.isEqual(result.start)) {\n                result.start = Position._createAt(ranges[i].start);\n            }\n            else {\n                // If ranges are not starting/ending at the same position there is no point in looking further.\n                break;\n            }\n        }\n        // 6. Ranges should be checked and glued starting from the range that is closest to the reference range.\n        // Since ranges are sorted, start with the range with index that is closest to reference range index.\n        for (let i = refIndex + 1; i < ranges.length; i++) {\n            if (ranges[i].start.isEqual(result.end)) {\n                result.end = Position._createAt(ranges[i].end);\n            }\n            else {\n                // If ranges are not starting/ending at the same position there is no point in looking further.\n                break;\n            }\n        }\n        return result;\n    }\n    /**\n     * Creates a `Range` instance from given plain object (i.e. parsed JSON string).\n     *\n     * @param json Plain object to be converted to `Range`.\n     * @param doc Document object that will be range owner.\n     * @returns `Range` instance created using given plain object.\n     */\n    static fromJSON(json, doc) {\n        return new this(Position.fromJSON(json.start, doc), Position.fromJSON(json.end, doc));\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nRange.prototype.is = function (type) {\n    return type === 'range' || type === 'model:range';\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/mapper\n */\nimport ModelPosition from '../model/position.js';\nimport ModelRange from '../model/range.js';\nimport ViewPosition from '../view/position.js';\nimport ViewRange from '../view/range.js';\nimport ViewText from '../view/text.js';\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Maps elements, positions and markers between the {@link module:engine/view/document~Document view} and\n * the {@link module:engine/model/model model}.\n *\n * The instance of the Mapper used for the editing pipeline is available in\n * {@link module:engine/controller/editingcontroller~EditingController#mapper `editor.editing.mapper`}.\n *\n * Mapper uses bound elements to find corresponding elements and positions, so, to get proper results,\n * all model elements should be {@link module:engine/conversion/mapper~Mapper#bindElements bound}.\n *\n * To map the complex model to/from view relations, you may provide custom callbacks for the\n * {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition modelToViewPosition event} and\n * {@link module:engine/conversion/mapper~Mapper#event:viewToModelPosition viewToModelPosition event} that are fired whenever\n * a position mapping request occurs.\n * Those events are fired by the {@link module:engine/conversion/mapper~Mapper#toViewPosition toViewPosition}\n * and {@link module:engine/conversion/mapper~Mapper#toModelPosition toModelPosition} methods. `Mapper` adds its own default callbacks\n * with `'lowest'` priority. To override default `Mapper` mapping, add custom callback with higher priority and\n * stop the event.\n */\nexport default class Mapper extends /* #__PURE__ */ EmitterMixin() {\n    /**\n     * Creates an instance of the mapper.\n     */\n    constructor() {\n        super();\n        /**\n         * Model element to view element mapping.\n         */\n        this._modelToViewMapping = new WeakMap();\n        /**\n         * View element to model element mapping.\n         */\n        this._viewToModelMapping = new WeakMap();\n        /**\n         * A map containing callbacks between view element names and functions evaluating length of view elements\n         * in model.\n         */\n        this._viewToModelLengthCallbacks = new Map();\n        /**\n         * Model marker name to view elements mapping.\n         *\n         * Keys are `String`s while values are `Set`s with {@link module:engine/view/element~Element view elements}.\n         * One marker (name) can be mapped to multiple elements.\n         */\n        this._markerNameToElements = new Map();\n        /**\n         * View element to model marker names mapping.\n         *\n         * This is reverse to {@link ~Mapper#_markerNameToElements} map.\n         */\n        this._elementToMarkerNames = new Map();\n        /**\n         * The map of removed view elements with their current root (used for deferred unbinding).\n         */\n        this._deferredBindingRemovals = new Map();\n        /**\n         * Stores marker names of markers which have changed due to unbinding a view element (so it is assumed that the view element\n         * has been removed, moved or renamed).\n         */\n        this._unboundMarkerNames = new Set();\n        // Default mapper algorithm for mapping model position to view position.\n        this.on('modelToViewPosition', (evt, data) => {\n            if (data.viewPosition) {\n                return;\n            }\n            const viewContainer = this._modelToViewMapping.get(data.modelPosition.parent);\n            if (!viewContainer) {\n                /**\n                 * A model position could not be mapped to the view because the parent of the model position\n                 * does not have a mapped view element (might have not been converted yet or it has no converter).\n                 *\n                 * Make sure that the model element is correctly converted to the view.\n                 *\n                 * @error mapping-model-position-view-parent-not-found\n                 */\n                throw new CKEditorError('mapping-model-position-view-parent-not-found', this, { modelPosition: data.modelPosition });\n            }\n            data.viewPosition = this.findPositionIn(viewContainer, data.modelPosition.offset);\n        }, { priority: 'low' });\n        // Default mapper algorithm for mapping view position to model position.\n        this.on('viewToModelPosition', (evt, data) => {\n            if (data.modelPosition) {\n                return;\n            }\n            const viewBlock = this.findMappedViewAncestor(data.viewPosition);\n            const modelParent = this._viewToModelMapping.get(viewBlock);\n            const modelOffset = this._toModelOffset(data.viewPosition.parent, data.viewPosition.offset, viewBlock);\n            data.modelPosition = ModelPosition._createAt(modelParent, modelOffset);\n        }, { priority: 'low' });\n    }\n    /**\n     * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using\n     * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and\n     * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.\n     * The information that elements are bound is also used to translate positions.\n     *\n     * @param modelElement Model element.\n     * @param viewElement View element.\n     */\n    bindElements(modelElement, viewElement) {\n        this._modelToViewMapping.set(modelElement, viewElement);\n        this._viewToModelMapping.set(viewElement, modelElement);\n    }\n    /**\n     * Unbinds the given {@link module:engine/view/element~Element view element} from the map.\n     *\n     * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding\n     * will be removed only if model element is still bound to the passed `viewElement`.\n     *\n     * This behavior allows for re-binding model element to another view element without fear of losing the new binding\n     * when the previously bound view element is unbound.\n     *\n     * @param viewElement View element to unbind.\n     * @param options The options object.\n     * @param options.defer Controls whether the binding should be removed immediately or deferred until a\n     * {@link #flushDeferredBindings `flushDeferredBindings()`} call.\n     */\n    unbindViewElement(viewElement, options = {}) {\n        const modelElement = this.toModelElement(viewElement);\n        if (this._elementToMarkerNames.has(viewElement)) {\n            for (const markerName of this._elementToMarkerNames.get(viewElement)) {\n                this._unboundMarkerNames.add(markerName);\n            }\n        }\n        if (options.defer) {\n            this._deferredBindingRemovals.set(viewElement, viewElement.root);\n        }\n        else {\n            this._viewToModelMapping.delete(viewElement);\n            if (this._modelToViewMapping.get(modelElement) == viewElement) {\n                this._modelToViewMapping.delete(modelElement);\n            }\n        }\n    }\n    /**\n     * Unbinds the given {@link module:engine/model/element~Element model element} from the map.\n     *\n     * **Note:** the model-to-view binding will be removed, if it existed. However, the corresponding view-to-model binding\n     * will be removed only if the view element is still bound to the passed `modelElement`.\n     *\n     * This behavior lets for re-binding view element to another model element without fear of losing the new binding\n     * when the previously bound model element is unbound.\n     *\n     * @param modelElement Model element to unbind.\n     */\n    unbindModelElement(modelElement) {\n        const viewElement = this.toViewElement(modelElement);\n        this._modelToViewMapping.delete(modelElement);\n        if (this._viewToModelMapping.get(viewElement) == modelElement) {\n            this._viewToModelMapping.delete(viewElement);\n        }\n    }\n    /**\n     * Binds the given marker name with the given {@link module:engine/view/element~Element view element}. The element\n     * will be added to the current set of elements bound with the given marker name.\n     *\n     * @param element Element to bind.\n     * @param name Marker name.\n     */\n    bindElementToMarker(element, name) {\n        const elements = this._markerNameToElements.get(name) || new Set();\n        elements.add(element);\n        const names = this._elementToMarkerNames.get(element) || new Set();\n        names.add(name);\n        this._markerNameToElements.set(name, elements);\n        this._elementToMarkerNames.set(element, names);\n    }\n    /**\n     * Unbinds an element from given marker name.\n     *\n     * @param element Element to unbind.\n     * @param name Marker name.\n     */\n    unbindElementFromMarkerName(element, name) {\n        const nameToElements = this._markerNameToElements.get(name);\n        if (nameToElements) {\n            nameToElements.delete(element);\n            if (nameToElements.size == 0) {\n                this._markerNameToElements.delete(name);\n            }\n        }\n        const elementToNames = this._elementToMarkerNames.get(element);\n        if (elementToNames) {\n            elementToNames.delete(name);\n            if (elementToNames.size == 0) {\n                this._elementToMarkerNames.delete(element);\n            }\n        }\n    }\n    /**\n     * Returns all marker names of markers which have changed due to unbinding a view element (so it is assumed that the view element\n     * has been removed, moved or renamed) since the last flush. After returning, the marker names list is cleared.\n     */\n    flushUnboundMarkerNames() {\n        const markerNames = Array.from(this._unboundMarkerNames);\n        this._unboundMarkerNames.clear();\n        return markerNames;\n    }\n    /**\n     * Unbinds all deferred binding removals of view elements that in the meantime were not re-attached to some root or document fragment.\n     *\n     * See: {@link #unbindViewElement `unbindViewElement()`}.\n     */\n    flushDeferredBindings() {\n        for (const [viewElement, root] of this._deferredBindingRemovals) {\n            // Unbind it only if it wasn't re-attached to some root or document fragment.\n            if (viewElement.root == root) {\n                this.unbindViewElement(viewElement);\n            }\n        }\n        this._deferredBindingRemovals = new Map();\n    }\n    /**\n     * Removes all model to view and view to model bindings.\n     */\n    clearBindings() {\n        this._modelToViewMapping = new WeakMap();\n        this._viewToModelMapping = new WeakMap();\n        this._markerNameToElements = new Map();\n        this._elementToMarkerNames = new Map();\n        this._unboundMarkerNames = new Set();\n        this._deferredBindingRemovals = new Map();\n    }\n    toModelElement(viewElement) {\n        return this._viewToModelMapping.get(viewElement);\n    }\n    toViewElement(modelElement) {\n        return this._modelToViewMapping.get(modelElement);\n    }\n    /**\n     * Gets the corresponding model range.\n     *\n     * @param viewRange View range.\n     * @returns Corresponding model range.\n     */\n    toModelRange(viewRange) {\n        return new ModelRange(this.toModelPosition(viewRange.start), this.toModelPosition(viewRange.end));\n    }\n    /**\n     * Gets the corresponding view range.\n     *\n     * @param modelRange Model range.\n     * @returns Corresponding view range.\n     */\n    toViewRange(modelRange) {\n        return new ViewRange(this.toViewPosition(modelRange.start), this.toViewPosition(modelRange.end));\n    }\n    /**\n     * Gets the corresponding model position.\n     *\n     * @fires viewToModelPosition\n     * @param viewPosition View position.\n     * @returns Corresponding model position.\n     */\n    toModelPosition(viewPosition) {\n        const data = {\n            viewPosition,\n            mapper: this\n        };\n        this.fire('viewToModelPosition', data);\n        return data.modelPosition;\n    }\n    /**\n     * Gets the corresponding view position.\n     *\n     * @fires modelToViewPosition\n     * @param modelPosition Model position.\n     * @param options Additional options for position mapping process.\n     * @param options.isPhantom Should be set to `true` if the model position to map is pointing to a place\n     * in model tree which no longer exists. For example, it could be an end of a removed model range.\n     * @returns Corresponding view position.\n     */\n    toViewPosition(modelPosition, options = {}) {\n        const data = {\n            modelPosition,\n            mapper: this,\n            isPhantom: options.isPhantom\n        };\n        this.fire('modelToViewPosition', data);\n        return data.viewPosition;\n    }\n    /**\n     * Gets all view elements bound to the given marker name.\n     *\n     * @param name Marker name.\n     * @returns View elements bound with the given marker name or `null`\n     * if no elements are bound to the given marker name.\n     */\n    markerNameToElements(name) {\n        const boundElements = this._markerNameToElements.get(name);\n        if (!boundElements) {\n            return null;\n        }\n        const elements = new Set();\n        for (const element of boundElements) {\n            if (element.is('attributeElement')) {\n                for (const clone of element.getElementsWithSameId()) {\n                    elements.add(clone);\n                }\n            }\n            else {\n                elements.add(element);\n            }\n        }\n        return elements;\n    }\n    /**\n     * Registers a callback that evaluates the length in the model of a view element with the given name.\n     *\n     * The callback is fired with one argument, which is a view element instance. The callback is expected to return\n     * a number representing the length of the view element in the model.\n     *\n     * ```ts\n     * // List item in view may contain nested list, which have other list items. In model though,\n     * // the lists are represented by flat structure. Because of those differences, length of list view element\n     * // may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.\n     *\n     * function getViewListItemLength( element ) {\n     * \tlet length = 1;\n     *\n     * \tfor ( let child of element.getChildren() ) {\n     * \t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n     * \t\t\tfor ( let item of child.getChildren() ) {\n     * \t\t\t\tlength += getViewListItemLength( item );\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     *\n     * \treturn length;\n     * }\n     *\n     * mapper.registerViewToModelLength( 'li', getViewListItemLength );\n     * ```\n     *\n     * @param viewElementName Name of view element for which callback is registered.\n     * @param lengthCallback Function return a length of view element instance in model.\n     */\n    registerViewToModelLength(viewElementName, lengthCallback) {\n        this._viewToModelLengthCallbacks.set(viewElementName, lengthCallback);\n    }\n    /**\n     * For the given `viewPosition`, finds and returns the closest ancestor of this position that has a mapping to\n     * the model.\n     *\n     * @param viewPosition Position for which a mapped ancestor should be found.\n     */\n    findMappedViewAncestor(viewPosition) {\n        let parent = viewPosition.parent;\n        while (!this._viewToModelMapping.has(parent)) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n    /**\n     * Calculates model offset based on the view position and the block element.\n     *\n     * Example:\n     *\n     * ```html\n     * <p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5\n     * ```\n     *\n     * Is a sum of:\n     *\n     * ```html\n     * <p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3\n     * <p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2\n     * ```\n     *\n     * @param viewParent Position parent.\n     * @param viewOffset Position offset.\n     * @param viewBlock Block used as a base to calculate offset.\n     * @returns Offset in the model.\n     */\n    _toModelOffset(viewParent, viewOffset, viewBlock) {\n        if (viewBlock != viewParent) {\n            // See example.\n            const offsetToParentStart = this._toModelOffset(viewParent.parent, viewParent.index, viewBlock);\n            const offsetInParent = this._toModelOffset(viewParent, viewOffset, viewParent);\n            return offsetToParentStart + offsetInParent;\n        }\n        // viewBlock == viewParent, so we need to calculate the offset in the parent element.\n        // If the position is a text it is simple (\"ba|r\" -> 2).\n        if (viewParent.is('$text')) {\n            return viewOffset;\n        }\n        // If the position is in an element we need to sum lengths of siblings ( <b> bar </b> foo | -> 3 + 3 = 6 ).\n        let modelOffset = 0;\n        for (let i = 0; i < viewOffset; i++) {\n            modelOffset += this.getModelLength(viewParent.getChild(i));\n        }\n        return modelOffset;\n    }\n    /**\n     * Gets the length of the view element in the model.\n     *\n     * The length is calculated as follows:\n     * * if a {@link #registerViewToModelLength length mapping callback} is provided for the given `viewNode`, it is used to\n     * evaluate the model length (`viewNode` is used as first and only parameter passed to the callback),\n     * * length of a {@link module:engine/view/text~Text text node} is equal to the length of its\n     * {@link module:engine/view/text~Text#data data},\n     * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,\n     * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,\n     * * length of a non-mapped {@link module:engine/view/element~Element element} is equal to the length of its children.\n     *\n     * Examples:\n     *\n     * ```\n     * foo                          -> 3 // Text length is equal to its data length.\n     * <p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.\n     * <b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.\n     * <div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.\n     * ```\n     *\n     * @param viewNode View node.\n     * @returns Length of the node in the tree model.\n     */\n    getModelLength(viewNode) {\n        if (this._viewToModelLengthCallbacks.get(viewNode.name)) {\n            const callback = this._viewToModelLengthCallbacks.get(viewNode.name);\n            return callback(viewNode);\n        }\n        else if (this._viewToModelMapping.has(viewNode)) {\n            return 1;\n        }\n        else if (viewNode.is('$text')) {\n            return viewNode.data.length;\n        }\n        else if (viewNode.is('uiElement')) {\n            return 0;\n        }\n        else {\n            let len = 0;\n            for (const child of viewNode.getChildren()) {\n                len += this.getModelLength(child);\n            }\n            return len;\n        }\n    }\n    /**\n     * Finds the position in the view node (or in its children) with the expected model offset.\n     *\n     * Example:\n     *\n     * ```\n     * <p>fo<b>bar</b>bom</p> -> expected offset: 4\n     *\n     * findPositionIn( p, 4 ):\n     * <p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0\n     * <p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2\n     * <p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far\n     *\n     * findPositionIn( b, 4 - ( 5 - 3 ) ):\n     * <p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0\n     * <p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far\n     *\n     * findPositionIn( bar, 2 - ( 3 - 3 ) ):\n     * We are in the text node so we can simple find the offset.\n     * <p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found\n     * ```\n     *\n     * @param viewParent Tree view element in which we are looking for the position.\n     * @param expectedOffset Expected offset.\n     * @returns Found position.\n     */\n    findPositionIn(viewParent, expectedOffset) {\n        // Last scanned view node.\n        let viewNode;\n        // Length of the last scanned view node.\n        let lastLength = 0;\n        let modelOffset = 0;\n        let viewOffset = 0;\n        // In the text node it is simple: the offset in the model equals the offset in the text.\n        if (viewParent.is('$text')) {\n            return new ViewPosition(viewParent, expectedOffset);\n        }\n        // In other cases we add lengths of child nodes to find the proper offset.\n        // If it is smaller we add the length.\n        while (modelOffset < expectedOffset) {\n            viewNode = viewParent.getChild(viewOffset);\n            lastLength = this.getModelLength(viewNode);\n            modelOffset += lastLength;\n            viewOffset++;\n        }\n        // If it equals we found the position.\n        if (modelOffset == expectedOffset) {\n            return this._moveViewPositionToTextNode(new ViewPosition(viewParent, viewOffset));\n        }\n        // If it is higher we need to enter last child.\n        else {\n            // ( modelOffset - lastLength ) is the offset to the child we enter,\n            // so we subtract it from the expected offset to fine the offset in the child.\n            return this.findPositionIn(viewNode, expectedOffset - (modelOffset - lastLength));\n        }\n    }\n    /**\n     * Because we prefer positions in the text nodes over positions next to text nodes, if the view position was next to a text node,\n     * it moves it into the text node instead.\n     *\n     * ```\n     * <p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text\n     * <p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node\n     * <p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node\n     * ```\n     *\n     * @param viewPosition Position potentially next to the text node.\n     * @returns Position in the text node if possible.\n     */\n    _moveViewPositionToTextNode(viewPosition) {\n        // If the position is just after a text node, put it at the end of that text node.\n        // If the position is just before a text node, put it at the beginning of that text node.\n        const nodeBefore = viewPosition.nodeBefore;\n        const nodeAfter = viewPosition.nodeAfter;\n        if (nodeBefore instanceof ViewText) {\n            return new ViewPosition(nodeBefore, nodeBefore.data.length);\n        }\n        else if (nodeAfter instanceof ViewText) {\n            return new ViewPosition(nodeAfter, 0);\n        }\n        // Otherwise, just return the given position.\n        return viewPosition;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/modelconsumable\n */\nimport TextProxy from '../model/textproxy.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Manages a list of consumable values for the {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into separate, single properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing the changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and its attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when the given part of a model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), the consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addattribute:<attributeKey>`,\n * `changeattributes:<attributeKey>`, `removeattributes:<attributeKey>`.\n *\n * In most cases, it is enough to let th {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * the {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcasthelpers default downcast converters} for more information.\n *\n * Keep in mind that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, the others should not, because they would duplicate the results. Using `ModelConsumable` helps to avoid\n * this situation, because callbacks should only convert these values that were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n * ```ts\n * // Converter for custom `imageBlock` element that might have a `caption` element inside which changes\n * // how the image is displayed in the view:\n * //\n * // Model:\n * //\n * // [imageBlock]\n * //   └─ [caption]\n * //       └─ foo\n * //\n * // View:\n * //\n * // <figure>\n * //   ├─ <img />\n * //   └─ <caption>\n * //       └─ foo\n * modelConversionDispatcher.on( 'insert:imageBlock', ( evt, data, conversionApi ) => {\n * \t// First, consume the `imageBlock` element.\n * \tconversionApi.consumable.consume( data.item, 'insert' );\n *\n * \t// Just create normal image element for the view.\n * \t// Maybe it will be \"decorated\" later.\n * \tconst viewImage = new ViewElement( 'img' );\n * \tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n * \tconst viewWriter = conversionApi.writer;\n *\n * \t// Check if the `imageBlock` element has children.\n * \tif ( data.item.childCount > 0 ) {\n * \t\tconst modelCaption = data.item.getChild( 0 );\n *\n * \t\t// `modelCaption` insertion change is consumed from consumable values.\n * \t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n * \t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n * \t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n * \t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n * \t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n * \t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n * \t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n * \t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n * \t\t}\n * \t} else {\n * \t\tconversionApi.mapper.bindElements( data.item, viewImage );\n * \t\tviewWriter.insert( insertPosition, viewImage );\n * \t}\n *\n * \tevt.stop();\n * } );\n * ```\n */\nexport default class ModelConsumable {\n    constructor() {\n        /**\n         * Contains list of consumable values.\n         */\n        this._consumable = new Map();\n        /**\n         * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds a parent\n         * of that `TextProxy` and the start and end indices of that `TextProxy`. This allows identification of the `TextProxy`\n         * instances that point to the same part of the model but are different instances. Each distinct `TextProxy`\n         * is given a unique `Symbol` which is then registered as consumable. This process is transparent for the `ModelConsumable`\n         * API user because whenever `TextProxy` is added, tested, consumed or reverted, the internal mechanisms of\n         * `ModelConsumable` translate `TextProxy` to that unique `Symbol`.\n         */\n        this._textProxyRegistry = new Map();\n    }\n    /**\n     * Adds a consumable value to the consumables list and links it with a given model item.\n     *\n     * ```ts\n     * modelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n     * modelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n     * modelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n     * modelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n     * modelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n     * ```\n     *\n     * @param item Model item, range or selection that has the consumable.\n     * @param type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n     * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n     */\n    add(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        if (!this._consumable.has(item)) {\n            this._consumable.set(item, new Map());\n        }\n        this._consumable.get(item).set(type, true);\n    }\n    /**\n     * Removes a given consumable value from a given model item.\n     *\n     * ```ts\n     * modelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n     * modelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n     * modelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n     * modelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n     * modelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n     * ```\n     *\n     * @param item Model item, range or selection from which consumable will be consumed.\n     * @param type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n     * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n     * @returns `true` if consumable value was available and was consumed, `false` otherwise.\n     */\n    consume(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        if (this.test(item, type)) {\n            this._consumable.get(item).set(type, false);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Tests whether there is a consumable value of a given type connected with a given model item.\n     *\n     * ```ts\n     * modelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n     * modelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n     * modelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n     * modelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n     * modelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n     * ```\n     *\n     * @param item Model item, range or selection to be tested.\n     * @param type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n     * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n     * @returns `null` if such consumable was never added, `false` if the consumable values was\n     * already consumed or `true` if it was added and not consumed yet.\n     */\n    test(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        const itemConsumables = this._consumable.get(item);\n        if (itemConsumables === undefined) {\n            return null;\n        }\n        const value = itemConsumables.get(type);\n        if (value === undefined) {\n            return null;\n        }\n        return value;\n    }\n    /**\n     * Reverts consuming of a consumable value.\n     *\n     * ```ts\n     * modelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n     * modelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n     * modelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n     * modelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n     * modelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n     * ```\n     *\n     * @param item Model item, range or selection to be reverted.\n     * @param type Consumable type.\n     * @returns `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n     * never been added.\n     */\n    revert(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        const test = this.test(item, type);\n        if (test === false) {\n            this._consumable.get(item).set(type, true);\n            return true;\n        }\n        else if (test === true) {\n            return false;\n        }\n        return null;\n    }\n    /**\n     * Verifies if all events from the specified group were consumed.\n     *\n     * @param eventGroup The events group to verify.\n     */\n    verifyAllConsumed(eventGroup) {\n        const items = [];\n        for (const [item, consumables] of this._consumable) {\n            for (const [event, canConsume] of consumables) {\n                const eventPrefix = event.split(':')[0];\n                if (canConsume && eventGroup == eventPrefix) {\n                    items.push({\n                        event,\n                        item: item.name || item.description\n                    });\n                }\n            }\n        }\n        if (items.length) {\n            /**\n             * Some of the {@link module:engine/model/item~Item model items} were not consumed while downcasting the model to view.\n             *\n             * This might be the effect of:\n             *\n             * * A missing converter for some model elements. Make sure that you registered downcast converters for all model elements.\n             * * A custom converter that does not consume converted items. Make sure that you\n             * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} all model elements that you converted\n             * from the model to the view.\n             * * A custom converter that called `event.stop()`. When providing a custom converter, keep in mind that you should not stop\n             * the event. If you stop it then the default converter at the `lowest` priority will not trigger the conversion of this node's\n             * attributes and child nodes.\n             *\n             * @error conversion-model-consumable-not-consumed\n             * @param {Array.<module:engine/model/item~Item>} items Items that were not consumed.\n             */\n            throw new CKEditorError('conversion-model-consumable-not-consumed', null, { items });\n        }\n    }\n    /**\n     * Gets a unique symbol for the passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n     * have same parent, same start index and same end index will get the same symbol.\n     *\n     * Used internally to correctly consume `TextProxy` instances.\n     *\n     * @internal\n     * @param textProxy `TextProxy` instance to get a symbol for.\n     * @returns Symbol representing all equal instances of `TextProxy`.\n     */\n    _getSymbolForTextProxy(textProxy) {\n        let symbol = null;\n        const startMap = this._textProxyRegistry.get(textProxy.startOffset);\n        if (startMap) {\n            const endMap = startMap.get(textProxy.endOffset);\n            if (endMap) {\n                symbol = endMap.get(textProxy.parent);\n            }\n        }\n        if (!symbol) {\n            symbol = this._addSymbolForTextProxy(textProxy);\n        }\n        return symbol;\n    }\n    /**\n     * Adds a symbol for the given {@link module:engine/model/textproxy~TextProxy} instance.\n     *\n     * Used internally to correctly consume `TextProxy` instances.\n     *\n     * @param textProxy Text proxy instance.\n     * @returns Symbol generated for given `TextProxy`.\n     */\n    _addSymbolForTextProxy(textProxy) {\n        const start = textProxy.startOffset;\n        const end = textProxy.endOffset;\n        const parent = textProxy.parent;\n        const symbol = Symbol('$textProxy:' + textProxy.data);\n        let startMap;\n        let endMap;\n        startMap = this._textProxyRegistry.get(start);\n        if (!startMap) {\n            startMap = new Map();\n            this._textProxyRegistry.set(start, startMap);\n        }\n        endMap = startMap.get(end);\n        if (!endMap) {\n            endMap = new Map();\n            startMap.set(end, endMap);\n        }\n        endMap.set(parent, symbol);\n        return symbol;\n    }\n}\n/**\n * Returns a normalized consumable type name from the given string. A normalized consumable type name is a string that has\n * at most one colon, for example: `insert` or `addMarker:highlight`. If a string to normalize has more \"parts\" (more colons),\n * the further parts are dropped, for example: `addattribute:bold:$text` -> `addattributes:bold`.\n *\n * @param type Consumable type.\n * @returns Normalized consumable type.\n */\nfunction _normalizeConsumableType(type) {\n    const parts = type.split(':');\n    // For inserts allow passing event name, it's stored in the context of a specified element so the element name is not needed.\n    if (parts[0] == 'insert') {\n        return parts[0];\n    }\n    // Markers are identified by the whole name (otherwise we would consume the whole markers group).\n    if (parts[0] == 'addMarker' || parts[0] == 'removeMarker') {\n        return type;\n    }\n    return parts.length > 1 ? parts[0] + ':' + parts[1] : parts[0];\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/downcastdispatcher\n */\nimport Consumable from './modelconsumable.js';\nimport Range from '../model/range.js';\nimport { EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The downcast dispatcher is a central point of downcasting (conversion from the model to the view), which is a process of reacting\n * to changes in the model and firing a set of events. The callbacks listening to these events are called converters. The\n * converters' role is to convert the model changes to changes in view (for example, adding view nodes or\n * changing attributes on view elements).\n *\n * During the conversion process, downcast dispatcher fires events basing on the state of the model and prepares\n * data for these events. It is important to understand that the events are connected with the changes done on the model,\n * for example: \"a node has been inserted\" or \"an attribute has changed\". This is in contrary to upcasting (a view-to-model conversion)\n * where you convert the view state (view nodes) to a model tree.\n *\n * The events are prepared basing on a diff created by the {@link module:engine/model/differ~Differ Differ}, which buffers them\n * and then passes to the downcast dispatcher as a diff between the old model state and the new model state.\n *\n * Note that because the changes are converted, there is a need to have a mapping between the model structure and the view structure.\n * To map positions and elements during the downcast (a model-to-view conversion), use {@link module:engine/conversion/mapper~Mapper}.\n *\n * Downcast dispatcher fires the following events for model tree changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert`} &ndash;\n * If a range of nodes was inserted to the model tree.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove `remove`} &ndash;\n * If a range of nodes was removed from the model tree.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute`} &ndash;\n * If an attribute was added, changed or removed from a model node.\n *\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert`}\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute`},\n * the downcast dispatcher generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\n * These are used to have control over which changes have already been consumed. It is useful when some converters\n * overwrite others or convert multiple changes (for example, it converts an insertion of an element and also converts that\n * element's attributes during the insertion).\n *\n * Additionally, downcast dispatcher fires events for {@link module:engine/model/markercollection~Marker marker} changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker `addMarker`} &ndash; If a marker was added.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker `removeMarker`} &ndash; If a marker was\n * removed.\n *\n * Note that changing a marker is done through removing the marker from the old range and adding it to the new range,\n * so both of these events are fired.\n *\n * Finally, a downcast dispatcher also handles firing events for the {@link module:engine/model/selection model selection}\n * conversion:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection `selection`}\n * &ndash; Converts the selection from the model to the view.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute`}\n * &ndash; Fired for every selection attribute.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker `addMarker`}\n * &ndash; Fired for every marker that contains a selection.\n *\n * Unlike the model tree and the markers, the events for selection are not fired for changes but for a selection state.\n *\n * When providing custom listeners for a downcast dispatcher, remember to check whether a given change has not been\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\n *\n * When providing custom listeners for a downcast dispatcher, keep in mind that you **should not** stop the event. If you stop it,\n * then the default converter at the `lowest` priority will not trigger the conversion of this node's attributes and child nodes.\n *\n * When providing custom listeners for a downcast dispatcher, remember to use the provided\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} to apply changes to the view document.\n *\n * You can read more about conversion in the following guide:\n *\n * * {@glink framework/deep-dive/conversion/downcast Downcast conversion}\n *\n * An example of a custom converter for the downcast dispatcher:\n *\n * ```ts\n * // You will convert inserting a \"paragraph\" model element into the model.\n * downcastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\n * \t// Remember to check whether the change has not been consumed yet and consume it.\n * \tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n * \t\treturn;\n * \t}\n *\n * \t// Translate the position in the model to a position in the view.\n * \tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n * \t// Create a <p> element that will be inserted into the view at the `viewPosition`.\n * \tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\n *\n * \t// Bind the newly created view element to the model element so positions will map accordingly in the future.\n * \tconversionApi.mapper.bindElements( data.item, viewElement );\n *\n * \t// Add the newly created view element to the view.\n * \tconversionApi.writer.insert( viewPosition, viewElement );\n * } );\n * ```\n */\nexport default class DowncastDispatcher extends /* #__PURE__ */ EmitterMixin() {\n    /**\n     * Creates a downcast dispatcher instance.\n     *\n     * @see module:engine/conversion/downcastdispatcher~DowncastConversionApi\n     *\n     * @param conversionApi Additional properties for an interface that will be passed to events fired\n     * by the downcast dispatcher.\n     */\n    constructor(conversionApi) {\n        super();\n        this._conversionApi = { dispatcher: this, ...conversionApi };\n        this._firedEventsMap = new WeakMap();\n    }\n    /**\n     * Converts changes buffered in the given {@link module:engine/model/differ~Differ model differ}\n     * and fires conversion events based on it.\n     *\n     * @fires insert\n     * @fires remove\n     * @fires attribute\n     * @fires addMarker\n     * @fires removeMarker\n     * @fires reduceChanges\n     * @param differ The differ object with buffered changes.\n     * @param markers Markers related to the model fragment to convert.\n     * @param writer The view writer that should be used to modify the view document.\n     */\n    convertChanges(differ, markers, writer) {\n        const conversionApi = this._createConversionApi(writer, differ.getRefreshedItems());\n        // Before the view is updated, remove markers which have changed.\n        for (const change of differ.getMarkersToRemove()) {\n            this._convertMarkerRemove(change.name, change.range, conversionApi);\n        }\n        // Let features modify the change list (for example to allow reconversion).\n        const changes = this._reduceChanges(differ.getChanges());\n        // Convert changes that happened on model tree.\n        for (const entry of changes) {\n            if (entry.type === 'insert') {\n                this._convertInsert(Range._createFromPositionAndShift(entry.position, entry.length), conversionApi);\n            }\n            else if (entry.type === 'reinsert') {\n                this._convertReinsert(Range._createFromPositionAndShift(entry.position, entry.length), conversionApi);\n            }\n            else if (entry.type === 'remove') {\n                this._convertRemove(entry.position, entry.length, entry.name, conversionApi);\n            }\n            else {\n                // Defaults to 'attribute' change.\n                this._convertAttribute(entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, conversionApi);\n            }\n        }\n        // Remove mappings for all removed view elements.\n        // Remove these mappings as soon as they are not needed (https://github.com/ckeditor/ckeditor5/issues/15411).\n        conversionApi.mapper.flushDeferredBindings();\n        for (const markerName of conversionApi.mapper.flushUnboundMarkerNames()) {\n            const markerRange = markers.get(markerName).getRange();\n            this._convertMarkerRemove(markerName, markerRange, conversionApi);\n            this._convertMarkerAdd(markerName, markerRange, conversionApi);\n        }\n        // After the view is updated, convert markers which have changed.\n        for (const change of differ.getMarkersToAdd()) {\n            this._convertMarkerAdd(change.name, change.range, conversionApi);\n        }\n        // Verify if all insert consumables were consumed.\n        conversionApi.consumable.verifyAllConsumed('insert');\n    }\n    /**\n     * Starts a conversion of a model range and the provided markers.\n     *\n     * @fires insert\n     * @fires attribute\n     * @fires addMarker\n     * @param range The inserted range.\n     * @param markers The map of markers that should be down-casted.\n     * @param writer The view writer that should be used to modify the view document.\n     * @param options Optional options object passed to `convertionApi.options`.\n     */\n    convert(range, markers, writer, options = {}) {\n        const conversionApi = this._createConversionApi(writer, undefined, options);\n        this._convertInsert(range, conversionApi);\n        for (const [name, range] of markers) {\n            this._convertMarkerAdd(name, range, conversionApi);\n        }\n        // Verify if all insert consumables were consumed.\n        conversionApi.consumable.verifyAllConsumed('insert');\n    }\n    /**\n     * Starts the model selection conversion.\n     *\n     * Fires events for a given {@link module:engine/model/selection~Selection selection} to start the selection conversion.\n     *\n     * @fires selection\n     * @fires addMarker\n     * @fires attribute\n     * @param selection The selection to convert.\n     * @param markers Markers connected with the converted model.\n     * @param writer View writer that should be used to modify the view document.\n     */\n    convertSelection(selection, markers, writer) {\n        const conversionApi = this._createConversionApi(writer);\n        // First perform a clean-up at the current position of the selection.\n        this.fire('cleanSelection', { selection }, conversionApi);\n        // Don't convert selection if it is in a model root that does not have a view root (for now this is only the graveyard root).\n        const modelRoot = selection.getFirstPosition().root;\n        if (!conversionApi.mapper.toViewElement(modelRoot)) {\n            return;\n        }\n        // Now, perform actual selection conversion.\n        const markersAtSelection = Array.from(markers.getMarkersAtPosition(selection.getFirstPosition()));\n        this._addConsumablesForSelection(conversionApi.consumable, selection, markersAtSelection);\n        this.fire('selection', { selection }, conversionApi);\n        if (!selection.isCollapsed) {\n            return;\n        }\n        for (const marker of markersAtSelection) {\n            // Do not fire event if the marker has been consumed.\n            if (conversionApi.consumable.test(selection, 'addMarker:' + marker.name)) {\n                const markerRange = marker.getRange();\n                if (!shouldMarkerChangeBeConverted(selection.getFirstPosition(), marker, conversionApi.mapper)) {\n                    continue;\n                }\n                const data = {\n                    item: selection,\n                    markerName: marker.name,\n                    markerRange\n                };\n                this.fire(`addMarker:${marker.name}`, data, conversionApi);\n            }\n        }\n        for (const key of selection.getAttributeKeys()) {\n            // Do not fire event if the attribute has been consumed.\n            if (conversionApi.consumable.test(selection, 'attribute:' + key)) {\n                const data = {\n                    item: selection,\n                    range: selection.getFirstRange(),\n                    attributeKey: key,\n                    attributeOldValue: null,\n                    attributeNewValue: selection.getAttribute(key)\n                };\n                this.fire(`attribute:${key}:$text`, data, conversionApi);\n            }\n        }\n    }\n    /**\n     * Fires insertion conversion of a range of nodes.\n     *\n     * For each node in the range, {@link #event:insert `insert` event is fired}. For each attribute on each node,\n     * {@link #event:attribute `attribute` event is fired}.\n     *\n     * @fires insert\n     * @fires attribute\n     * @param range The inserted range.\n     * @param conversionApi The conversion API object.\n     * @param options.doNotAddConsumables Whether the ModelConsumable should not get populated\n     * for items in the provided range.\n     */\n    _convertInsert(range, conversionApi, options = {}) {\n        if (!options.doNotAddConsumables) {\n            // Collect a list of things that can be consumed, consisting of nodes and their attributes.\n            this._addConsumablesForInsert(conversionApi.consumable, range);\n        }\n        // Fire a separate insert event for each node and text fragment contained in the range.\n        for (const data of Array.from(range.getWalker({ shallow: true })).map(walkerValueToEventData)) {\n            this._testAndFire('insert', data, conversionApi);\n        }\n    }\n    /**\n     * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\n     *\n     * @param position Position from which node was removed.\n     * @param length Offset size of removed node.\n     * @param name Name of removed node.\n     * @param conversionApi The conversion API object.\n     */\n    _convertRemove(position, length, name, conversionApi) {\n        this.fire(`remove:${name}`, { position, length }, conversionApi);\n    }\n    /**\n     * Starts a conversion of an attribute change on a given `range`.\n     *\n     * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\n     *\n     * @fires attribute\n     * @param range Changed range.\n     * @param key Key of the attribute that has changed.\n     * @param oldValue Attribute value before the change or `null` if the attribute has not been set before.\n     * @param newValue New attribute value or `null` if the attribute has been removed.\n     * @param conversionApi The conversion API object.\n     */\n    _convertAttribute(range, key, oldValue, newValue, conversionApi) {\n        // Create a list with attributes to consume.\n        this._addConsumablesForRange(conversionApi.consumable, range, `attribute:${key}`);\n        // Create a separate attribute event for each node in the range.\n        for (const value of range) {\n            const data = {\n                item: value.item,\n                range: Range._createFromPositionAndShift(value.previousPosition, value.length),\n                attributeKey: key,\n                attributeOldValue: oldValue,\n                attributeNewValue: newValue\n            };\n            this._testAndFire(`attribute:${key}`, data, conversionApi);\n        }\n    }\n    /**\n     * Fires re-insertion conversion (with a `reconversion` flag passed to `insert` events)\n     * of a range of elements (only elements on the range depth, without children).\n     *\n     * For each node in the range on its depth (without children), {@link #event:insert `insert` event} is fired.\n     * For each attribute on each node, {@link #event:attribute `attribute` event} is fired.\n     *\n     * @fires insert\n     * @fires attribute\n     * @param range The range to reinsert.\n     * @param conversionApi The conversion API object.\n     */\n    _convertReinsert(range, conversionApi) {\n        // Convert the elements - without converting children.\n        const walkerValues = Array.from(range.getWalker({ shallow: true }));\n        // Collect a list of things that can be consumed, consisting of nodes and their attributes.\n        this._addConsumablesForInsert(conversionApi.consumable, walkerValues);\n        // Fire a separate insert event for each node and text fragment contained shallowly in the range.\n        for (const data of walkerValues.map(walkerValueToEventData)) {\n            this._testAndFire('insert', { ...data, reconversion: true }, conversionApi);\n        }\n    }\n    /**\n     * Converts the added marker. Fires the {@link #event:addMarker `addMarker`} event for each item\n     * in the marker's range. If the range is collapsed, a single event is dispatched. See the event description for more details.\n     *\n     * @fires addMarker\n     * @param markerName Marker name.\n     * @param markerRange The marker range.\n     * @param conversionApi The conversion API object.\n     */\n    _convertMarkerAdd(markerName, markerRange, conversionApi) {\n        // Do not convert if range is in graveyard.\n        if (markerRange.root.rootName == '$graveyard') {\n            return;\n        }\n        // In markers' case, event name == consumable name.\n        const eventName = `addMarker:${markerName}`;\n        //\n        // First, fire an event for the whole marker.\n        //\n        conversionApi.consumable.add(markerRange, eventName);\n        this.fire(eventName, { markerName, markerRange }, conversionApi);\n        //\n        // Do not fire events for each item inside the range if the range got consumed.\n        // Also consume the whole marker consumable if it wasn't consumed.\n        //\n        if (!conversionApi.consumable.consume(markerRange, eventName)) {\n            return;\n        }\n        //\n        // Then, fire an event for each item inside the marker range.\n        //\n        this._addConsumablesForRange(conversionApi.consumable, markerRange, eventName);\n        for (const item of markerRange.getItems()) {\n            // Do not fire event for already consumed items.\n            if (!conversionApi.consumable.test(item, eventName)) {\n                continue;\n            }\n            const data = { item, range: Range._createOn(item), markerName, markerRange };\n            this.fire(eventName, data, conversionApi);\n        }\n    }\n    /**\n     * Fires the conversion of the marker removal. Fires the {@link #event:removeMarker `removeMarker`} event with the provided data.\n     *\n     * @fires removeMarker\n     * @param markerName Marker name.\n     * @param markerRange The marker range.\n     * @param conversionApi The conversion API object.\n     */\n    _convertMarkerRemove(markerName, markerRange, conversionApi) {\n        // Do not convert if range is in graveyard.\n        if (markerRange.root.rootName == '$graveyard') {\n            return;\n        }\n        this.fire(`removeMarker:${markerName}`, { markerName, markerRange }, conversionApi);\n    }\n    /**\n     * Fires the reduction of changes buffered in the {@link module:engine/model/differ~Differ `Differ`}.\n     *\n     * Features can replace selected {@link module:engine/model/differ~DiffItem `DiffItem`}s with `reinsert` entries to trigger\n     * reconversion. The {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure\n     * `DowncastHelpers.elementToStructure()`} is using this event to trigger reconversion.\n     *\n     * @fires reduceChanges\n     */\n    _reduceChanges(changes) {\n        const data = { changes };\n        this.fire('reduceChanges', data);\n        return data.changes;\n    }\n    /**\n     * Populates provided {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from a given range,\n     * assuming that the range has just been inserted to the model.\n     *\n     * @param consumable The consumable.\n     * @param walkerValues The walker values for the inserted range.\n     * @returns The values to consume.\n     */\n    _addConsumablesForInsert(consumable, walkerValues) {\n        for (const value of walkerValues) {\n            const item = value.item;\n            // Add consumable if it wasn't there yet.\n            if (consumable.test(item, 'insert') === null) {\n                consumable.add(item, 'insert');\n                for (const key of item.getAttributeKeys()) {\n                    consumable.add(item, 'attribute:' + key);\n                }\n            }\n        }\n        return consumable;\n    }\n    /**\n     * Populates provided {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for a given range.\n     *\n     * @param consumable The consumable.\n     * @param range The affected range.\n     * @param type Consumable type.\n     * @returns The values to consume.\n     */\n    _addConsumablesForRange(consumable, range, type) {\n        for (const item of range.getItems()) {\n            consumable.add(item, type);\n        }\n        return consumable;\n    }\n    /**\n     * Populates provided {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\n     *\n     * @param consumable The consumable.\n     * @param selection The selection to create the consumable from.\n     * @param markers Markers that contain the selection.\n     * @returns The values to consume.\n     */\n    _addConsumablesForSelection(consumable, selection, markers) {\n        consumable.add(selection, 'selection');\n        for (const marker of markers) {\n            consumable.add(selection, 'addMarker:' + marker.name);\n        }\n        for (const key of selection.getAttributeKeys()) {\n            consumable.add(selection, 'attribute:' + key);\n        }\n        return consumable;\n    }\n    /**\n     * Tests whether given event wasn't already fired and if so, fires it.\n     *\n     * @fires insert\n     * @fires attribute\n     * @param type Event type.\n     * @param data Event data.\n     * @param conversionApi The conversion API object.\n     */\n    _testAndFire(type, data, conversionApi) {\n        const eventName = getEventName(type, data);\n        const itemKey = data.item.is('$textProxy') ? conversionApi.consumable._getSymbolForTextProxy(data.item) : data.item;\n        const eventsFiredForConversion = this._firedEventsMap.get(conversionApi);\n        const eventsFiredForItem = eventsFiredForConversion.get(itemKey);\n        if (!eventsFiredForItem) {\n            eventsFiredForConversion.set(itemKey, new Set([eventName]));\n        }\n        else if (!eventsFiredForItem.has(eventName)) {\n            eventsFiredForItem.add(eventName);\n        }\n        else {\n            return;\n        }\n        this.fire(eventName, data, conversionApi);\n    }\n    /**\n     * Fires not already fired events for setting attributes on just inserted item.\n     *\n     * @param item The model item to convert attributes for.\n     * @param conversionApi The conversion API object.\n     */\n    _testAndFireAddAttributes(item, conversionApi) {\n        const data = {\n            item,\n            range: Range._createOn(item)\n        };\n        for (const key of data.item.getAttributeKeys()) {\n            data.attributeKey = key;\n            data.attributeOldValue = null;\n            data.attributeNewValue = data.item.getAttribute(key);\n            this._testAndFire(`attribute:${key}`, data, conversionApi);\n        }\n    }\n    /**\n     * Builds an instance of the {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi} from a template and a given\n     * {@link module:engine/view/downcastwriter~DowncastWriter `DowncastWriter`} and options object.\n     *\n     * @param writer View writer that should be used to modify the view document.\n     * @param refreshedItems A set of model elements that should not reuse their\n     * previous view representations.\n     * @param options Optional options passed to `convertionApi.options`.\n     * @return The conversion API object.\n     */\n    _createConversionApi(writer, refreshedItems = new Set(), options = {}) {\n        const conversionApi = {\n            ...this._conversionApi,\n            consumable: new Consumable(),\n            writer,\n            options,\n            convertItem: item => this._convertInsert(Range._createOn(item), conversionApi),\n            convertChildren: element => this._convertInsert(Range._createIn(element), conversionApi, { doNotAddConsumables: true }),\n            convertAttributes: item => this._testAndFireAddAttributes(item, conversionApi),\n            canReuseView: viewElement => !refreshedItems.has(conversionApi.mapper.toModelElement(viewElement))\n        };\n        this._firedEventsMap.set(conversionApi, new Map());\n        return conversionApi;\n    }\n}\n/**\n * Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\n * converted if they happen inside an element with custom conversion method.\n */\nfunction shouldMarkerChangeBeConverted(modelPosition, marker, mapper) {\n    const range = marker.getRange();\n    const ancestors = Array.from(modelPosition.getAncestors());\n    ancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\n    ancestors.reverse();\n    const hasCustomHandling = ancestors.some(element => {\n        if (range.containsItem(element)) {\n            const viewElement = mapper.toViewElement(element);\n            return !!viewElement.getCustomProperty('addHighlight');\n        }\n    });\n    return !hasCustomHandling;\n}\nfunction getEventName(type, data) {\n    const name = data.item.is('element') ? data.item.name : '$text';\n    return `${type}:${name}`;\n}\nfunction walkerValueToEventData(value) {\n    const item = value.item;\n    const itemRange = Range._createFromPositionAndShift(value.previousPosition, value.length);\n    return {\n        item,\n        range: itemRange\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/selection\n */\nimport TypeCheckable from './typecheckable.js';\nimport Node from './node.js';\nimport Position from './position.js';\nimport Range from './range.js';\nimport { CKEditorError, EmitterMixin, isIterable } from '@ckeditor/ckeditor5-utils';\n/**\n * Selection is a set of {@link module:engine/model/range~Range ranges}. It has a direction specified by its\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}\n * (it can be {@link module:engine/model/selection~Selection#isBackward forward or backward}).\n * Additionally, selection may have its own attributes (think – whether text typed in in this selection\n * should have those attributes – e.g. whether you type a bolded text).\n */\nexport default class Selection extends /* #__PURE__ */ EmitterMixin(TypeCheckable) {\n    /**\n     * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n     * or creates an empty selection if no arguments were passed.\n     *\n     * ```ts\n     * // Creates empty selection without ranges.\n     * const selection = writer.createSelection();\n     *\n     * // Creates selection at the given range.\n     * const range = writer.createRange( start, end );\n     * const selection = writer.createSelection( range );\n     *\n     * // Creates selection at the given ranges\n     * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n     * const selection = writer.createSelection( ranges );\n     *\n     * // Creates selection from the other selection.\n     * // Note: It doesn't copy selection attributes.\n     * const otherSelection = writer.createSelection();\n     * const selection = writer.createSelection( otherSelection );\n     *\n     * // Creates selection from the given document selection.\n     * // Note: It doesn't copy selection attributes.\n     * const documentSelection = model.document.selection;\n     * const selection = writer.createSelection( documentSelection );\n     *\n     * // Creates selection at the given position.\n     * const position = writer.createPositionFromPath( root, path );\n     * const selection = writer.createSelection( position );\n     *\n     * // Creates selection at the given offset in the given element.\n     * const paragraph = writer.createElement( 'paragraph' );\n     * const selection = writer.createSelection( paragraph, offset );\n     *\n     * // Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n     * // first child of that element and ends after the last child of that element.\n     * const selection = writer.createSelection( paragraph, 'in' );\n     *\n     * // Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n     * // just after the item.\n     * const selection = writer.createSelection( paragraph, 'on' );\n     * ```\n     *\n     * Selection's constructor allow passing additional options (`'backward'`) as the last argument.\n     *\n     * ```ts\n     * // Creates backward selection.\n     * const selection = writer.createSelection( range, { backward: true } );\n     * ```\n     *\n     * @internal\n     */\n    constructor(...args) {\n        super();\n        /**\n         * Specifies whether the last added range was added as a backward or forward range.\n         */\n        this._lastRangeBackward = false;\n        /**\n         * List of attributes set on current selection.\n         */\n        this._attrs = new Map();\n        /** @internal */\n        this._ranges = [];\n        if (args.length) {\n            this.setTo(...args);\n        }\n    }\n    /**\n     * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection\n     * by dragging the mouse, the anchor is where the user pressed the mouse button (the beginning of the selection).\n     *\n     * Anchor and {@link #focus} define the direction of the selection, which is important\n     * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.\n     *\n     * Anchor is always set to the {@link module:engine/model/range~Range#start start} or\n     * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is\n     * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.\n     *\n     * May be set to `null` if there are no ranges in the selection.\n     *\n     * @see #focus\n     */\n    get anchor() {\n        if (this._ranges.length > 0) {\n            const range = this._ranges[this._ranges.length - 1];\n            return this._lastRangeBackward ? range.end : range.start;\n        }\n        return null;\n    }\n    /**\n     * Selection focus. Focus is the position where the selection ends. If a user is making a selection\n     * by dragging the mouse, the focus is where the mouse cursor is.\n     *\n     * May be set to `null` if there are no ranges in the selection.\n     *\n     * @see #anchor\n     */\n    get focus() {\n        if (this._ranges.length > 0) {\n            const range = this._ranges[this._ranges.length - 1];\n            return this._lastRangeBackward ? range.start : range.end;\n        }\n        return null;\n    }\n    /**\n     * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it\n     * and it is collapsed.\n     */\n    get isCollapsed() {\n        const length = this._ranges.length;\n        if (length === 1) {\n            return this._ranges[0].isCollapsed;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Returns the number of ranges in the selection.\n     */\n    get rangeCount() {\n        return this._ranges.length;\n    }\n    /**\n     * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.\n     */\n    get isBackward() {\n        return !this.isCollapsed && this._lastRangeBackward;\n    }\n    /**\n     * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,\n     * the same number of ranges and all ranges from one selection equal to ranges from the another selection.\n     *\n     * @param otherSelection Selection to compare with.\n     * @returns `true` if selections are equal, `false` otherwise.\n     */\n    isEqual(otherSelection) {\n        if (this.rangeCount != otherSelection.rangeCount) {\n            return false;\n        }\n        else if (this.rangeCount === 0) {\n            return true;\n        }\n        if (!this.anchor.isEqual(otherSelection.anchor) || !this.focus.isEqual(otherSelection.focus)) {\n            return false;\n        }\n        for (const thisRange of this._ranges) {\n            let found = false;\n            for (const otherRange of otherSelection._ranges) {\n                if (thisRange.isEqual(otherRange)) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns an iterable object that iterates over copies of selection ranges.\n     */\n    *getRanges() {\n        for (const range of this._ranges) {\n            yield new Range(range.start, range.end);\n        }\n    }\n    /**\n     * Returns a copy of the first range in the selection.\n     * First range is the one which {@link module:engine/model/range~Range#start start} position\n     * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n     * (not to confuse with the first range added to the selection).\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getFirstRange() {\n        let first = null;\n        for (const range of this._ranges) {\n            if (!first || range.start.isBefore(first.start)) {\n                first = range;\n            }\n        }\n        return first ? new Range(first.start, first.end) : null;\n    }\n    /**\n     * Returns a copy of the last range in the selection.\n     * Last range is the one which {@link module:engine/model/range~Range#end end} position\n     * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n     * recently added to the selection).\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getLastRange() {\n        let last = null;\n        for (const range of this._ranges) {\n            if (!last || range.end.isAfter(last.end)) {\n                last = range;\n            }\n        }\n        return last ? new Range(last.start, last.end) : null;\n    }\n    /**\n     * Returns the first position in the selection.\n     * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n     * any other position in the selection.\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getFirstPosition() {\n        const first = this.getFirstRange();\n        return first ? first.start.clone() : null;\n    }\n    /**\n     * Returns the last position in the selection.\n     * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n     * any other position in the selection.\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getLastPosition() {\n        const lastRange = this.getLastRange();\n        return lastRange ? lastRange.end.clone() : null;\n    }\n    /**\n     * Sets this selection's ranges and direction to the specified location based on the given\n     * {@link module:engine/model/selection~Selectable selectable}.\n     *\n     * ```ts\n     * // Removes all selection's ranges.\n     * selection.setTo( null );\n     *\n     * // Sets selection to the given range.\n     * const range = writer.createRange( start, end );\n     * selection.setTo( range );\n     *\n     * // Sets selection to given ranges.\n     * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n     * selection.setTo( ranges );\n     *\n     * // Sets selection to other selection.\n     * // Note: It doesn't copy selection attributes.\n     * const otherSelection = writer.createSelection();\n     * selection.setTo( otherSelection );\n     *\n     * // Sets selection to the given document selection.\n     * // Note: It doesn't copy selection attributes.\n     * const documentSelection = new DocumentSelection( doc );\n     * selection.setTo( documentSelection );\n     *\n     * // Sets collapsed selection at the given position.\n     * const position = writer.createPositionFromPath( root, path );\n     * selection.setTo( position );\n     *\n     * // Sets collapsed selection at the position of the given node and an offset.\n     * selection.setTo( paragraph, offset );\n     * ```\n     *\n     * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * ```ts\n     * selection.setTo( paragraph, 'in' );\n     * ```\n     *\n     * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n     *\n     * ```ts\n     * selection.setTo( paragraph, 'on' );\n     * ```\n     *\n     * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\n     *\n     * ```ts\n     * // Sets backward selection.\n     * const selection = writer.createSelection( range, { backward: true } );\n     * ```\n     */\n    setTo(...args) {\n        let [selectable, placeOrOffset, options] = args;\n        if (typeof placeOrOffset == 'object') {\n            options = placeOrOffset;\n            placeOrOffset = undefined;\n        }\n        if (selectable === null) {\n            this._setRanges([]);\n        }\n        else if (selectable instanceof Selection) {\n            this._setRanges(selectable.getRanges(), selectable.isBackward);\n        }\n        else if (selectable && typeof selectable.getRanges == 'function') {\n            // We assume that the selectable is a DocumentSelection.\n            // It can't be imported here, because it would lead to circular imports.\n            this._setRanges(selectable.getRanges(), selectable.isBackward);\n        }\n        else if (selectable instanceof Range) {\n            this._setRanges([selectable], !!options && !!options.backward);\n        }\n        else if (selectable instanceof Position) {\n            this._setRanges([new Range(selectable)]);\n        }\n        else if (selectable instanceof Node) {\n            const backward = !!options && !!options.backward;\n            let range;\n            if (placeOrOffset == 'in') {\n                range = Range._createIn(selectable);\n            }\n            else if (placeOrOffset == 'on') {\n                range = Range._createOn(selectable);\n            }\n            else if (placeOrOffset !== undefined) {\n                range = new Range(Position._createAt(selectable, placeOrOffset));\n            }\n            else {\n                /**\n                 * selection.setTo requires the second parameter when the first parameter is a node.\n                 *\n                 * @error model-selection-setto-required-second-parameter\n                 */\n                throw new CKEditorError('model-selection-setto-required-second-parameter', [this, selectable]);\n            }\n            this._setRanges([range], backward);\n        }\n        else if (isIterable(selectable)) {\n            // We assume that the selectable is an iterable of ranges.\n            this._setRanges(selectable, options && !!options.backward);\n        }\n        else {\n            /**\n             * Cannot set the selection to the given place.\n             *\n             * Invalid parameters were specified when setting the selection. Common issues:\n             *\n             * * A {@link module:engine/model/textproxy~TextProxy} instance was passed instead of\n             * a real {@link module:engine/model/text~Text}.\n             * * View nodes were passed instead of model nodes.\n             * * `null`/`undefined` was passed.\n             *\n             * @error model-selection-setto-not-selectable\n             */\n            throw new CKEditorError('model-selection-setto-not-selectable', [this, selectable]);\n        }\n    }\n    /**\n     * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n     * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n     * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n     *\n     * @fires change:range\n     * @param newRanges Ranges to set.\n     * @param isLastBackward Flag describing if last added range was selected forward - from start to end (`false`)\n     * or backward - from end to start (`true`).\n     */\n    _setRanges(newRanges, isLastBackward = false) {\n        const ranges = Array.from(newRanges);\n        // Check whether there is any range in new ranges set that is different than all already added ranges.\n        const anyNewRange = ranges.some(newRange => {\n            if (!(newRange instanceof Range)) {\n                /**\n                 * Selection range set to an object that is not an instance of {@link module:engine/model/range~Range}.\n                 *\n                 * Only {@link module:engine/model/range~Range} instances can be used to set a selection.\n                 * Common mistakes leading to this error are:\n                 *\n                 * * using DOM `Range` object,\n                 * * incorrect CKEditor 5 installation with multiple `ckeditor5-engine` packages having different versions.\n                 *\n                 * @error model-selection-set-ranges-not-range\n                 */\n                throw new CKEditorError('model-selection-set-ranges-not-range', [this, newRanges]);\n            }\n            return this._ranges.every(oldRange => {\n                return !oldRange.isEqual(newRange);\n            });\n        });\n        // Don't do anything if nothing changed.\n        if (ranges.length === this._ranges.length && !anyNewRange) {\n            return;\n        }\n        this._replaceAllRanges(ranges);\n        this._lastRangeBackward = !!isLastBackward;\n        this.fire('change:range', { directChange: true });\n    }\n    /**\n     * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n     *\n     * The location can be specified in the same form as\n     * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n     *\n     * @fires change:range\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    setFocus(itemOrPosition, offset) {\n        if (this.anchor === null) {\n            /**\n             * Cannot set selection focus if there are no ranges in selection.\n             *\n             * @error model-selection-setfocus-no-ranges\n             */\n            throw new CKEditorError('model-selection-setfocus-no-ranges', [this, itemOrPosition]);\n        }\n        const newFocus = Position._createAt(itemOrPosition, offset);\n        if (newFocus.compareWith(this.focus) == 'same') {\n            return;\n        }\n        const anchor = this.anchor;\n        if (this._ranges.length) {\n            this._popRange();\n        }\n        if (newFocus.compareWith(anchor) == 'before') {\n            this._pushRange(new Range(newFocus, anchor));\n            this._lastRangeBackward = true;\n        }\n        else {\n            this._pushRange(new Range(anchor, newFocus));\n            this._lastRangeBackward = false;\n        }\n        this.fire('change:range', { directChange: true });\n    }\n    /**\n     * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n     *\n     * @param key Key of attribute to look for.\n     * @returns Attribute value or `undefined`.\n     */\n    getAttribute(key) {\n        return this._attrs.get(key);\n    }\n    /**\n     * Returns iterable that iterates over this selection's attributes.\n     *\n     * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     */\n    getAttributes() {\n        return this._attrs.entries();\n    }\n    /**\n     * Returns iterable that iterates over this selection's attribute keys.\n     */\n    getAttributeKeys() {\n        return this._attrs.keys();\n    }\n    /**\n     * Checks if the selection has an attribute for given key.\n     *\n     * @param key Key of attribute to check.\n     * @returns `true` if attribute with given key is set on selection, `false` otherwise.\n     */\n    hasAttribute(key) {\n        return this._attrs.has(key);\n    }\n    /**\n     * Removes an attribute with given key from the selection.\n     *\n     * If given attribute was set on the selection, fires the {@link #event:change:range} event with\n     * removed attribute key.\n     *\n     * @fires change:attribute\n     * @param key Key of attribute to remove.\n     */\n    removeAttribute(key) {\n        if (this.hasAttribute(key)) {\n            this._attrs.delete(key);\n            this.fire('change:attribute', { attributeKeys: [key], directChange: true });\n        }\n    }\n    /**\n     * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n     *\n     * If the attribute value has changed, fires the {@link #event:change:range} event with\n     * the attribute key.\n     *\n     * @fires change:attribute\n     * @param key Key of attribute to set.\n     * @param value Attribute value.\n     */\n    setAttribute(key, value) {\n        if (this.getAttribute(key) !== value) {\n            this._attrs.set(key, value);\n            this.fire('change:attribute', { attributeKeys: [key], directChange: true });\n        }\n    }\n    /**\n     * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n     * one range in the selection, and that range contains exactly one element.\n     * Returns `null` if there is no selected element.\n     */\n    getSelectedElement() {\n        if (this.rangeCount !== 1) {\n            return null;\n        }\n        return this.getFirstRange().getContainedElement();\n    }\n    /**\n     * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n     *\n     * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n     *\n     * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n     * but will not return blocks nested in other blocks.\n     *\n     * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n     *\n     * ```xml\n     * <paragraph>[a</paragraph>\n     * <blockQuote>\n     * \t<paragraph>b</paragraph>\n     * </blockQuote>\n     * <paragraph>c]d</paragraph>\n     * ```\n     *\n     * In this case the paragraph will also be returned, despite the collapsed selection:\n     *\n     * ```xml\n     * <paragraph>[]a</paragraph>\n     * ```\n     *\n     * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n     *\n     * ```xml\n     * [<blockA></blockA>\n     * <blockB>\n     * \t<blockC></blockC>\n     * \t<blockD></blockD>\n     * </blockB>\n     * <blockE></blockE>]\n     * ```\n     *\n     * If the selection is inside a block all the inner blocks (A & B) are returned:\n     *\n     * ```xml\n     * <block>\n     * \t<blockA>[a</blockA>\n     * \t<blockB>b]</blockB>\n     * </block>\n     * ```\n     *\n     * **Special case**: Selection ignores first and/or last blocks if nothing (from user perspective) is selected in them.\n     *\n     * ```xml\n     * // Selection ends and the beginning of the last block.\n     * <paragraph>[a</paragraph>\n     * <paragraph>b</paragraph>\n     * <paragraph>]c</paragraph> // This block will not be returned\n     *\n     * // Selection begins at the end of the first block.\n     * <paragraph>a[</paragraph> // This block will not be returned\n     * <paragraph>b</paragraph>\n     * <paragraph>c]</paragraph>\n     *\n     * // Selection begings at the end of the first block and ends at the beginning of the last block.\n     * <paragraph>a[</paragraph> // This block will not be returned\n     * <paragraph>b</paragraph>\n     * <paragraph>]c</paragraph> // This block will not be returned\n     * ```\n     */\n    *getSelectedBlocks() {\n        const visited = new WeakSet();\n        for (const range of this.getRanges()) {\n            // Get start block of range in case of a collapsed range.\n            const startBlock = getParentBlock(range.start, visited);\n            if (isStartBlockSelected(startBlock, range)) {\n                yield startBlock;\n            }\n            for (const value of range.getWalker()) {\n                const block = value.item;\n                if (value.type == 'elementEnd' && isUnvisitedTopBlock(block, visited, range)) {\n                    yield block;\n                }\n            }\n            const endBlock = getParentBlock(range.end, visited);\n            if (isEndBlockSelected(endBlock, range)) {\n                yield endBlock;\n            }\n        }\n    }\n    /**\n     * Checks whether the selection contains the entire content of the given element. This means that selection must start\n     * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n     * touching the element's end.\n     *\n     * By default, this method will check whether the entire content of the selection's current root is selected.\n     * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n     */\n    containsEntireContent(element = this.anchor.root) {\n        const limitStartPosition = Position._createAt(element, 0);\n        const limitEndPosition = Position._createAt(element, 'end');\n        return limitStartPosition.isTouching(this.getFirstPosition()) &&\n            limitEndPosition.isTouching(this.getLastPosition());\n    }\n    /**\n     * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n     * if given range is intersecting with any range that is already stored in this selection.\n     */\n    _pushRange(range) {\n        this._checkRange(range);\n        this._ranges.push(new Range(range.start, range.end));\n    }\n    /**\n     * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n     */\n    _checkRange(range) {\n        for (let i = 0; i < this._ranges.length; i++) {\n            if (range.isIntersecting(this._ranges[i])) {\n                /**\n                 * Trying to add a range that intersects with another range in the selection.\n                 *\n                 * @error model-selection-range-intersects\n                 * @param addedRange Range that was added to the selection.\n                 * @param intersectingRange Range in the selection that intersects with `addedRange`.\n                 */\n                throw new CKEditorError('model-selection-range-intersects', [this, range], { addedRange: range, intersectingRange: this._ranges[i] });\n            }\n        }\n    }\n    /**\n     * Replaces all the ranges by the given ones.\n     * Uses {@link #_popRange _popRange} and {@link #_pushRange _pushRange} to ensure proper ranges removal and addition.\n     */\n    _replaceAllRanges(ranges) {\n        this._removeAllRanges();\n        for (const range of ranges) {\n            this._pushRange(range);\n        }\n    }\n    /**\n     * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n     * ensure proper ranges removal.\n     */\n    _removeAllRanges() {\n        while (this._ranges.length > 0) {\n            this._popRange();\n        }\n    }\n    /**\n     * Removes most recently added range from the selection.\n     */\n    _popRange() {\n        this._ranges.pop();\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nSelection.prototype.is = function (type) {\n    return type === 'selection' || type === 'model:selection';\n};\n/**\n * Checks whether the given element extends $block in the schema and has a parent (is not a root).\n * Marks it as already visited.\n */\nfunction isUnvisitedBlock(element, visited) {\n    if (visited.has(element)) {\n        return false;\n    }\n    visited.add(element);\n    return element.root.document.model.schema.isBlock(element) && !!element.parent;\n}\n/**\n * Checks if the given element is a $block was not previously visited and is a top block in a range.\n */\nfunction isUnvisitedTopBlock(element, visited, range) {\n    return isUnvisitedBlock(element, visited) && isTopBlockInRange(element, range);\n}\n/**\n * Finds the lowest element in position's ancestors which is a block.\n * It will search until first ancestor that is a limit element.\n * Marks all ancestors as already visited to not include any of them later on.\n */\nfunction getParentBlock(position, visited) {\n    const element = position.parent;\n    const schema = element.root.document.model.schema;\n    const ancestors = position.parent.getAncestors({ parentFirst: true, includeSelf: true });\n    let hasParentLimit = false;\n    const block = ancestors.find((element) => {\n        // Stop searching after first parent node that is limit element.\n        if (hasParentLimit) {\n            return false;\n        }\n        hasParentLimit = schema.isLimit(element);\n        return !hasParentLimit && isUnvisitedBlock(element, visited);\n    });\n    // Mark all ancestors of this position's parent, because find() might've stopped early and\n    // the found block may be a child of another block.\n    ancestors.forEach(element => visited.add(element));\n    return block;\n}\n/**\n * Checks if the blocks is not nested in other block inside a range.\n */\nfunction isTopBlockInRange(block, range) {\n    const parentBlock = findAncestorBlock(block);\n    if (!parentBlock) {\n        return true;\n    }\n    // Add loose flag to check as parentRange can be equal to range.\n    const isParentInRange = range.containsRange(Range._createOn(parentBlock), true);\n    return !isParentInRange;\n}\n/**\n * If a selection starts at the end of a block, that block is not returned as from the user's perspective this block wasn't selected.\n * See [#11585](https://github.com/ckeditor/ckeditor5/issues/11585) for more details.\n *\n * ```xml\n * <paragraph>a[</paragraph> // This block will not be returned\n * <paragraph>b</paragraph>\n * <paragraph>c]</paragraph>\n * ```\n *\n * Collapsed selection is not affected by it:\n *\n * ```xml\n * <paragraph>a[]</paragraph> // This block will be returned\n * ```\n */\nfunction isStartBlockSelected(startBlock, range) {\n    if (!startBlock) {\n        return false;\n    }\n    if (range.isCollapsed || startBlock.isEmpty) {\n        return true;\n    }\n    if (range.start.isTouching(Position._createAt(startBlock, startBlock.maxOffset))) {\n        return false;\n    }\n    return isTopBlockInRange(startBlock, range);\n}\n/**\n * If a selection ends at the beginning of a block, that block is not returned as from the user's perspective this block wasn't selected.\n * See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n *\n * ```xml\n * <paragraph>[a</paragraph>\n * <paragraph>b</paragraph>\n * <paragraph>]c</paragraph> // this block will not be returned\n * ```\n *\n * Collapsed selection is not affected by it:\n *\n * ```xml\n * <paragraph>[]a</paragraph> // this block will be returned\n * ```\n */\nfunction isEndBlockSelected(endBlock, range) {\n    if (!endBlock) {\n        return false;\n    }\n    if (range.isCollapsed || endBlock.isEmpty) {\n        return true;\n    }\n    if (range.end.isTouching(Position._createAt(endBlock, 0))) {\n        return false;\n    }\n    return isTopBlockInRange(endBlock, range);\n}\n/**\n * Returns first ancestor block of a node.\n */\nfunction findAncestorBlock(node) {\n    const schema = node.root.document.model.schema;\n    let parent = node.parent;\n    while (parent) {\n        if (schema.isBlock(parent)) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/liverange\n */\nimport Range from './range.js';\nimport { EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\n */\nexport default class LiveRange extends /* #__PURE__ */ EmitterMixin(Range) {\n    /**\n     * Creates a live range.\n     *\n     * @see module:engine/model/range~Range\n     */\n    constructor(start, end) {\n        super(start, end);\n        bindWithDocument.call(this);\n    }\n    /**\n     * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\n     * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n     * referring to it).\n     */\n    detach() {\n        this.stopListening();\n    }\n    /**\n     * Creates a {@link module:engine/model/range~Range range instance} that is equal to this live range.\n     */\n    toRange() {\n        return new Range(this.start, this.end);\n    }\n    /**\n     * Creates a `LiveRange` instance that is equal to the given range.\n     */\n    static fromRange(range) {\n        return new LiveRange(range.start, range.end);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nLiveRange.prototype.is = function (type) {\n    return type === 'liveRange' || type === 'model:liveRange' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type == 'range' || type === 'model:range';\n};\n/**\n * Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\n * that owns this range's {@link module:engine/model/range~Range#root root}.\n */\nfunction bindWithDocument() {\n    this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n        const operation = args[0];\n        if (!operation.isDocumentOperation) {\n            return;\n        }\n        transform.call(this, operation);\n    }, { priority: 'low' });\n}\n/**\n * Updates this range accordingly to the updates applied to the model. Bases on change events.\n */\nfunction transform(operation) {\n    // Transform the range by the operation. Join the result ranges if needed.\n    const ranges = this.getTransformedByOperation(operation);\n    const result = Range._createFromRanges(ranges);\n    const boundariesChanged = !result.isEqual(this);\n    const contentChanged = doesOperationChangeRangeContent(this, operation);\n    let deletionPosition = null;\n    if (boundariesChanged) {\n        // If range boundaries have changed, fire `change:range` event.\n        //\n        if (result.root.rootName == '$graveyard') {\n            // If the range was moved to the graveyard root, set `deletionPosition`.\n            if (operation.type == 'remove') {\n                deletionPosition = operation.sourcePosition;\n            }\n            else {\n                // Merge operation.\n                deletionPosition = operation.deletionPosition;\n            }\n        }\n        const oldRange = this.toRange();\n        this.start = result.start;\n        this.end = result.end;\n        this.fire('change:range', oldRange, { deletionPosition });\n    }\n    else if (contentChanged) {\n        // If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\n        this.fire('change:content', this.toRange(), { deletionPosition });\n    }\n}\n/**\n * Checks whether given operation changes something inside the range (even if it does not change boundaries).\n */\nfunction doesOperationChangeRangeContent(range, operation) {\n    switch (operation.type) {\n        case 'insert':\n            return range.containsPosition(operation.position);\n        case 'move':\n        case 'remove':\n        case 'reinsert':\n        case 'merge':\n            return range.containsPosition(operation.sourcePosition) ||\n                range.start.isEqual(operation.sourcePosition) ||\n                range.containsPosition(operation.targetPosition);\n        case 'split':\n            return range.containsPosition(operation.splitPosition) || range.containsPosition(operation.insertionPosition);\n    }\n    return false;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/documentselection\n */\nimport TypeCheckable from './typecheckable.js';\nimport LiveRange from './liverange.js';\nimport Selection from './selection.js';\nimport Text from './text.js';\nimport TextProxy from './textproxy.js';\nimport { CKEditorError, Collection, EmitterMixin, toMap, uid } from '@ckeditor/ckeditor5-utils';\nconst storePrefix = 'selection:';\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * Document selection can only be changed by using the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change `change()`} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n */\nexport default class DocumentSelection extends /* #__PURE__ */ EmitterMixin(TypeCheckable) {\n    /**\n     * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n     *\n     * @param doc Document which owns this selection.\n     */\n    constructor(doc) {\n        super();\n        this._selection = new LiveSelection(doc);\n        this._selection.delegate('change:range').to(this);\n        this._selection.delegate('change:attribute').to(this);\n        this._selection.delegate('change:marker').to(this);\n    }\n    /**\n     * Describes whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n     * collapsed.\n     */\n    get isCollapsed() {\n        return this._selection.isCollapsed;\n    }\n    /**\n     * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n     * Together with {@link #focus} they define the direction of selection, which is important\n     * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n     * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n     *\n     * Is set to `null` if there are no ranges in selection.\n     *\n     * @see #focus\n     */\n    get anchor() {\n        return this._selection.anchor;\n    }\n    /**\n     * Selection focus. Focus is a position where the selection ends.\n     *\n     * Is set to `null` if there are no ranges in selection.\n     *\n     * @see #anchor\n     */\n    get focus() {\n        return this._selection.focus;\n    }\n    /**\n     * Number of ranges in selection.\n     */\n    get rangeCount() {\n        return this._selection.rangeCount;\n    }\n    /**\n     * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n     * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n     */\n    get hasOwnRange() {\n        return this._selection.hasOwnRange;\n    }\n    /**\n     * Specifies whether the {@link #focus}\n     * precedes {@link #anchor}.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n    get isBackward() {\n        return this._selection.isBackward;\n    }\n    /**\n     * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n     *\n     * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n     */\n    get isGravityOverridden() {\n        return this._selection.isGravityOverridden;\n    }\n    /**\n     * A collection of selection {@link module:engine/model/markercollection~Marker markers}.\n     * Marker is a selection marker when selection range is inside the marker range.\n     *\n     * **Note**: Only markers from {@link ~DocumentSelection#observeMarkers observed markers groups} are collected.\n     */\n    get markers() {\n        return this._selection.markers;\n    }\n    /**\n     * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n     *\n     * @internal\n     */\n    get _ranges() {\n        return this._selection._ranges;\n    }\n    /**\n     * Returns an iterable that iterates over copies of selection ranges.\n     */\n    getRanges() {\n        return this._selection.getRanges();\n    }\n    /**\n     * Returns the first position in the selection.\n     * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n     * any other position in the selection.\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getFirstPosition() {\n        return this._selection.getFirstPosition();\n    }\n    /**\n     * Returns the last position in the selection.\n     * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n     * any other position in the selection.\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getLastPosition() {\n        return this._selection.getLastPosition();\n    }\n    /**\n     * Returns a copy of the first range in the selection.\n     * First range is the one which {@link module:engine/model/range~Range#start start} position\n     * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n     * (not to confuse with the first range added to the selection).\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getFirstRange() {\n        return this._selection.getFirstRange();\n    }\n    /**\n     * Returns a copy of the last range in the selection.\n     * Last range is the one which {@link module:engine/model/range~Range#end end} position\n     * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n     * recently added to the selection).\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getLastRange() {\n        return this._selection.getLastRange();\n    }\n    /**\n     * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n     *\n     * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n     *\n     * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n     * but will not return blocks nested in other blocks.\n     *\n     * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n     *\n     * ```\n     * <paragraph>[a</paragraph>\n     * <blockQuote>\n     * \t<paragraph>b</paragraph>\n     * </blockQuote>\n     * <paragraph>c]d</paragraph>\n     * ```\n     *\n     * In this case the paragraph will also be returned, despite the collapsed selection:\n     *\n     * ```\n     * <paragraph>[]a</paragraph>\n     * ```\n     *\n     * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n     *\n     * ```\n     * [<blockA></blockA>\n     * <blockB>\n     * \t<blockC></blockC>\n     * \t<blockD></blockD>\n     * </blockB>\n     * <blockE></blockE>]\n     * ```\n     *\n     * If the selection is inside a block all the inner blocks (A & B) are returned:\n     *\n     * ```\n     * <block>\n     * \t<blockA>[a</blockA>\n     * \t<blockB>b]</blockB>\n     * </block>\n     * ```\n     *\n     * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n     * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n     *\n     * ```\n     * <paragraph>[a</paragraph>\n     * <paragraph>b</paragraph>\n     * <paragraph>]c</paragraph> // this block will not be returned\n     * ```\n     */\n    getSelectedBlocks() {\n        return this._selection.getSelectedBlocks();\n    }\n    /**\n     * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n     * one range in the selection, and that range contains exactly one element.\n     * Returns `null` if there is no selected element.\n     */\n    getSelectedElement() {\n        return this._selection.getSelectedElement();\n    }\n    /**\n     * Checks whether the selection contains the entire content of the given element. This means that selection must start\n     * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n     * touching the element's end.\n     *\n     * By default, this method will check whether the entire content of the selection's current root is selected.\n     * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n     */\n    containsEntireContent(element) {\n        return this._selection.containsEntireContent(element);\n    }\n    /**\n     * Unbinds all events previously bound by document selection.\n     */\n    destroy() {\n        this._selection.destroy();\n    }\n    /**\n     * Returns iterable that iterates over this selection's attribute keys.\n     */\n    getAttributeKeys() {\n        return this._selection.getAttributeKeys();\n    }\n    /**\n     * Returns iterable that iterates over this selection's attributes.\n     *\n     * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     */\n    getAttributes() {\n        return this._selection.getAttributes();\n    }\n    /**\n     * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n     *\n     * @param key Key of attribute to look for.\n     * @returns Attribute value or `undefined`.\n     */\n    getAttribute(key) {\n        return this._selection.getAttribute(key);\n    }\n    /**\n     * Checks if the selection has an attribute for given key.\n     *\n     * @param key Key of attribute to check.\n     * @returns `true` if attribute with given key is set on selection, `false` otherwise.\n     */\n    hasAttribute(key) {\n        return this._selection.hasAttribute(key);\n    }\n    /**\n     * Refreshes selection attributes and markers according to the current position in the model.\n     */\n    refresh() {\n        this._selection.updateMarkers();\n        this._selection._updateAttributes(false);\n    }\n    /**\n     * Registers a marker group prefix or a marker name to be collected in the\n     * {@link ~DocumentSelection#markers selection markers collection}.\n     *\n     * See also {@link module:engine/model/markercollection~MarkerCollection#getMarkersGroup `MarkerCollection#getMarkersGroup()`}.\n     *\n     * @param prefixOrName The marker group prefix or marker name.\n     */\n    observeMarkers(prefixOrName) {\n        this._selection.observeMarkers(prefixOrName);\n    }\n    /**\n     * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n     * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n     *\n     * The location can be specified in the same form as\n     * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n     *\n     * @see module:engine/model/writer~Writer#setSelectionFocus\n     * @internal\n     * @param offset Offset or one of the flags. Used only when\n     * first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    _setFocus(itemOrPosition, offset) {\n        this._selection.setFocus(itemOrPosition, offset);\n    }\n    /**\n     * Sets this selection's ranges and direction to the specified location based on the given\n     * {@link module:engine/model/selection~Selectable selectable}.\n     * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n     *\n     * @see module:engine/model/writer~Writer#setSelection\n     * @internal\n     */\n    _setTo(...args) {\n        this._selection.setTo(...args);\n    }\n    /**\n     * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n     * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n     *\n     * @see module:engine/model/writer~Writer#setSelectionAttribute\n     * @internal\n     * @param key Key of the attribute to set.\n     * @param value Attribute value.\n     */\n    _setAttribute(key, value) {\n        this._selection.setAttribute(key, value);\n    }\n    /**\n     * Removes an attribute with given key from the selection.\n     * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}\n     * event with removed attribute key.\n     * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n     *\n     * @see module:engine/model/writer~Writer#removeSelectionAttribute\n     * @internal\n     * @param key Key of the attribute to remove.\n     */\n    _removeAttribute(key) {\n        this._selection.removeAttribute(key);\n    }\n    /**\n     * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n     *\n     * @internal\n     */\n    _getStoredAttributes() {\n        return this._selection.getStoredAttributes();\n    }\n    /**\n     * Temporarily changes the gravity of the selection from the left to the right.\n     *\n     * The gravity defines from which direction the selection inherits its attributes. If it's the default left\n     * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.\n     * This method allows to temporarily override this behavior by forcing the gravity to the right.\n     *\n     * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n     * of the process.\n     *\n     * @see module:engine/model/writer~Writer#overrideSelectionGravity\n     * @internal\n     * @returns The unique id which allows restoring the gravity.\n     */\n    _overrideGravity() {\n        return this._selection.overrideGravity();\n    }\n    /**\n     * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n     *\n     * Restoring the gravity is only possible using the unique identifier returned by\n     * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored\n     * the same number of times it was overridden.\n     *\n     * @see module:engine/model/writer~Writer#restoreSelectionGravity\n     * @internal\n     * @param uid The unique id returned by {@link #_overrideGravity}.\n     */\n    _restoreGravity(uid) {\n        this._selection.restoreGravity(uid);\n    }\n    /**\n     * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n     *\n     * @internal\n     * @param key Attribute key to convert.\n     * @returns Converted attribute key, applicable for selection store.\n     */\n    static _getStoreAttributeKey(key) {\n        return storePrefix + key;\n    }\n    /**\n     * Checks whether the given attribute key is an attribute stored on an element.\n     *\n     * @internal\n     */\n    static _isStoreAttributeKey(key) {\n        return key.startsWith(storePrefix);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nDocumentSelection.prototype.is = function (type) {\n    return type === 'selection' ||\n        type == 'model:selection' ||\n        type == 'documentSelection' ||\n        type == 'model:documentSelection';\n};\n/**\n * `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n *\n * LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n * * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `LiveSelection` are updated automatically according to selection ranges.\n */\nclass LiveSelection extends Selection {\n    /**\n     * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n     *\n     * @param doc Document which owns this selection.\n     */\n    constructor(doc) {\n        super();\n        /**\n         * List of selection markers.\n         * Marker is a selection marker when selection range is inside the marker range.\n         */\n        this.markers = new Collection({ idProperty: 'name' });\n        /**\n         * Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n         * last time. Possible values of priority are: `'low'` and `'normal'`.\n         *\n         * Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n         * attributes API are set with `'normal'` priority.\n         */\n        this._attributePriority = new Map();\n        /**\n         * Position to which the selection should be set if the last selection range was moved to the graveyard.\n         */\n        this._selectionRestorePosition = null;\n        /**\n         * Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n         */\n        this._hasChangedRange = false;\n        /**\n         * Each overriding gravity adds an UID to the set and each removal removes it.\n         * Gravity is overridden when there's at least one UID in the set.\n         * Gravity is restored when the set is empty.\n         * This is to prevent conflicts when gravity is overridden by more than one feature at the same time.\n         */\n        this._overriddenGravityRegister = new Set();\n        /**\n         * Prefixes of marker names that should affect `LiveSelection#markers` collection.\n         */\n        this._observedMarkers = new Set();\n        this._model = doc.model;\n        this._document = doc;\n        // Ensure selection is correct after each operation.\n        this.listenTo(this._model, 'applyOperation', (evt, args) => {\n            const operation = args[0];\n            if (!operation.isDocumentOperation || operation.type == 'marker' || operation.type == 'rename' || operation.type == 'noop') {\n                return;\n            }\n            // Fix selection if the last range was removed from it and we have a position to which we can restore the selection.\n            if (this._ranges.length == 0 && this._selectionRestorePosition) {\n                this._fixGraveyardSelection(this._selectionRestorePosition);\n            }\n            // \"Forget\" the restore position even if it was not \"used\".\n            this._selectionRestorePosition = null;\n            if (this._hasChangedRange) {\n                this._hasChangedRange = false;\n                this.fire('change:range', { directChange: false });\n            }\n        }, { priority: 'lowest' });\n        // Ensure selection is correct and up to date after each range change.\n        this.on('change:range', () => {\n            this._validateSelectionRanges(this.getRanges());\n        });\n        // Update markers data stored by the selection after each marker change.\n        // This handles only marker changes done through marker operations (not model tree changes).\n        this.listenTo(this._model.markers, 'update', (evt, marker, oldRange, newRange) => {\n            this._updateMarker(marker, newRange);\n        });\n        // Ensure selection is up to date after each change block.\n        this.listenTo(this._document, 'change', (evt, batch) => {\n            clearAttributesStoredInElement(this._model, batch);\n        });\n    }\n    get isCollapsed() {\n        const length = this._ranges.length;\n        return length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\n    }\n    get anchor() {\n        return super.anchor || this._document._getDefaultRange().start;\n    }\n    get focus() {\n        return super.focus || this._document._getDefaultRange().end;\n    }\n    get rangeCount() {\n        return this._ranges.length ? this._ranges.length : 1;\n    }\n    /**\n     * Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n     * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n     */\n    get hasOwnRange() {\n        return this._ranges.length > 0;\n    }\n    /**\n     * When set to `true` then selection attributes on node before the caret won't be taken\n     * into consideration while updating selection attributes.\n     */\n    get isGravityOverridden() {\n        return !!this._overriddenGravityRegister.size;\n    }\n    /**\n     * Unbinds all events previously bound by live selection.\n     */\n    destroy() {\n        for (let i = 0; i < this._ranges.length; i++) {\n            this._ranges[i].detach();\n        }\n        this.stopListening();\n    }\n    *getRanges() {\n        if (this._ranges.length) {\n            yield* super.getRanges();\n        }\n        else {\n            yield this._document._getDefaultRange();\n        }\n    }\n    getFirstRange() {\n        return super.getFirstRange() || this._document._getDefaultRange();\n    }\n    getLastRange() {\n        return super.getLastRange() || this._document._getDefaultRange();\n    }\n    setTo(...args) {\n        super.setTo(...args);\n        this._updateAttributes(true);\n        this.updateMarkers();\n    }\n    setFocus(itemOrPosition, offset) {\n        super.setFocus(itemOrPosition, offset);\n        this._updateAttributes(true);\n        this.updateMarkers();\n    }\n    setAttribute(key, value) {\n        if (this._setAttribute(key, value)) {\n            // Fire event with exact data.\n            const attributeKeys = [key];\n            this.fire('change:attribute', { attributeKeys, directChange: true });\n        }\n    }\n    removeAttribute(key) {\n        if (this._removeAttribute(key)) {\n            // Fire event with exact data.\n            const attributeKeys = [key];\n            this.fire('change:attribute', { attributeKeys, directChange: true });\n        }\n    }\n    overrideGravity() {\n        const overrideUid = uid();\n        // Remember that another overriding has been requested. It will need to be removed\n        // before the gravity is to be restored.\n        this._overriddenGravityRegister.add(overrideUid);\n        if (this._overriddenGravityRegister.size === 1) {\n            this._updateAttributes(true);\n        }\n        return overrideUid;\n    }\n    restoreGravity(uid) {\n        if (!this._overriddenGravityRegister.has(uid)) {\n            /**\n             * Restoring gravity for an unknown UID is not possible. Make sure you are using a correct\n             * UID obtained from the {@link module:engine/model/writer~Writer#overrideSelectionGravity} to restore.\n             *\n             * @error document-selection-gravity-wrong-restore\n             * @param uid The unique identifier returned by\n             * {@link module:engine/model/documentselection~DocumentSelection#_overrideGravity}.\n             */\n            throw new CKEditorError('document-selection-gravity-wrong-restore', this, { uid });\n        }\n        this._overriddenGravityRegister.delete(uid);\n        // Restore gravity only when all overriding have been restored.\n        if (!this.isGravityOverridden) {\n            this._updateAttributes(true);\n        }\n    }\n    observeMarkers(prefixOrName) {\n        this._observedMarkers.add(prefixOrName);\n        this.updateMarkers();\n    }\n    _replaceAllRanges(ranges) {\n        this._validateSelectionRanges(ranges);\n        super._replaceAllRanges(ranges);\n    }\n    _popRange() {\n        this._ranges.pop().detach();\n    }\n    _pushRange(range) {\n        const liveRange = this._prepareRange(range);\n        // `undefined` is returned when given `range` is in graveyard root.\n        if (liveRange) {\n            this._ranges.push(liveRange);\n        }\n    }\n    _validateSelectionRanges(ranges) {\n        for (const range of ranges) {\n            if (!this._document._validateSelectionRange(range)) {\n                /**\n                 * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n                 * starts or ends at incorrect position.\n                 *\n                 * @error document-selection-wrong-position\n                 * @param range\n                 */\n                throw new CKEditorError('document-selection-wrong-position', this, { range });\n            }\n        }\n    }\n    /**\n     * Prepares given range to be added to selection. Checks if it is correct,\n     * converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n     * and sets listeners listening to the range's change event.\n     */\n    _prepareRange(range) {\n        this._checkRange(range);\n        if (range.root == this._document.graveyard) {\n            // @if CK_DEBUG // console.warn( 'Trying to add a Range that is in the graveyard root. Range rejected.' );\n            return;\n        }\n        const liveRange = LiveRange.fromRange(range);\n        // If selection range is moved to the graveyard remove it from the selection object.\n        // Also, save some data that can be used to restore selection later, on `Model#applyOperation` event.\n        liveRange.on('change:range', (evt, oldRange, data) => {\n            this._hasChangedRange = true;\n            if (liveRange.root == this._document.graveyard) {\n                this._selectionRestorePosition = data.deletionPosition;\n                const index = this._ranges.indexOf(liveRange);\n                this._ranges.splice(index, 1);\n                liveRange.detach();\n            }\n        });\n        return liveRange;\n    }\n    updateMarkers() {\n        if (!this._observedMarkers.size) {\n            return;\n        }\n        const markers = [];\n        let changed = false;\n        for (const marker of this._model.markers) {\n            const markerGroup = marker.name.split(':', 1)[0];\n            if (!this._observedMarkers.has(markerGroup)) {\n                continue;\n            }\n            const markerRange = marker.getRange();\n            for (const selectionRange of this.getRanges()) {\n                if (markerRange.containsRange(selectionRange, !selectionRange.isCollapsed)) {\n                    markers.push(marker);\n                }\n            }\n        }\n        const oldMarkers = Array.from(this.markers);\n        for (const marker of markers) {\n            if (!this.markers.has(marker)) {\n                this.markers.add(marker);\n                changed = true;\n            }\n        }\n        for (const marker of Array.from(this.markers)) {\n            if (!markers.includes(marker)) {\n                this.markers.remove(marker);\n                changed = true;\n            }\n        }\n        if (changed) {\n            this.fire('change:marker', { oldMarkers, directChange: false });\n        }\n    }\n    _updateMarker(marker, markerRange) {\n        const markerGroup = marker.name.split(':', 1)[0];\n        if (!this._observedMarkers.has(markerGroup)) {\n            return;\n        }\n        let changed = false;\n        const oldMarkers = Array.from(this.markers);\n        const hasMarker = this.markers.has(marker);\n        if (!markerRange) {\n            if (hasMarker) {\n                this.markers.remove(marker);\n                changed = true;\n            }\n        }\n        else {\n            let contained = false;\n            for (const selectionRange of this.getRanges()) {\n                if (markerRange.containsRange(selectionRange, !selectionRange.isCollapsed)) {\n                    contained = true;\n                    break;\n                }\n            }\n            if (contained && !hasMarker) {\n                this.markers.add(marker);\n                changed = true;\n            }\n            else if (!contained && hasMarker) {\n                this.markers.remove(marker);\n                changed = true;\n            }\n        }\n        if (changed) {\n            this.fire('change:marker', { oldMarkers, directChange: false });\n        }\n    }\n    /**\n     * Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n     */\n    _updateAttributes(clearAll) {\n        const newAttributes = toMap(this._getSurroundingAttributes());\n        const oldAttributes = toMap(this.getAttributes());\n        if (clearAll) {\n            // If `clearAll` remove all attributes and reset priorities.\n            this._attributePriority = new Map();\n            this._attrs = new Map();\n        }\n        else {\n            // If not, remove only attributes added with `low` priority.\n            for (const [key, priority] of this._attributePriority) {\n                if (priority == 'low') {\n                    this._attrs.delete(key);\n                    this._attributePriority.delete(key);\n                }\n            }\n        }\n        this._setAttributesTo(newAttributes);\n        // Let's evaluate which attributes really changed.\n        const changed = [];\n        // First, loop through all attributes that are set on selection right now.\n        // Check which of them are different than old attributes.\n        for (const [newKey, newValue] of this.getAttributes()) {\n            if (!oldAttributes.has(newKey) || oldAttributes.get(newKey) !== newValue) {\n                changed.push(newKey);\n            }\n        }\n        // Then, check which of old attributes got removed.\n        for (const [oldKey] of oldAttributes) {\n            if (!this.hasAttribute(oldKey)) {\n                changed.push(oldKey);\n            }\n        }\n        // Fire event with exact data (fire only if anything changed).\n        if (changed.length > 0) {\n            this.fire('change:attribute', { attributeKeys: changed, directChange: false });\n        }\n    }\n    /**\n     * Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n     * parameter).\n     */\n    _setAttribute(key, value, directChange = true) {\n        const priority = directChange ? 'normal' : 'low';\n        if (priority == 'low' && this._attributePriority.get(key) == 'normal') {\n            // Priority too low.\n            return false;\n        }\n        const oldValue = super.getAttribute(key);\n        // Don't do anything if value has not changed.\n        if (oldValue === value) {\n            return false;\n        }\n        this._attrs.set(key, value);\n        // Update priorities map.\n        this._attributePriority.set(key, priority);\n        return true;\n    }\n    /**\n     * Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n     * parameter).\n     *\n     * NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\n     * be changed according to `directChange` parameter.\n     */\n    _removeAttribute(key, directChange = true) {\n        const priority = directChange ? 'normal' : 'low';\n        if (priority == 'low' && this._attributePriority.get(key) == 'normal') {\n            // Priority too low.\n            return false;\n        }\n        // Update priorities map.\n        this._attributePriority.set(key, priority);\n        // Don't do anything if value has not changed.\n        if (!super.hasAttribute(key)) {\n            return false;\n        }\n        this._attrs.delete(key);\n        return true;\n    }\n    /**\n     * Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n     * `directChange` parameter).\n     */\n    _setAttributesTo(attrs) {\n        const changed = new Set();\n        for (const [oldKey, oldValue] of this.getAttributes()) {\n            // Do not remove attribute if attribute with same key and value is about to be set.\n            if (attrs.get(oldKey) === oldValue) {\n                continue;\n            }\n            // All rest attributes will be removed so changed attributes won't change .\n            this._removeAttribute(oldKey, false);\n        }\n        for (const [key, value] of attrs) {\n            // Attribute may not be set because of attributes or because same key/value is already added.\n            const gotAdded = this._setAttribute(key, value, false);\n            if (gotAdded) {\n                changed.add(key);\n            }\n        }\n        return changed;\n    }\n    /**\n     * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n     */\n    *getStoredAttributes() {\n        const selectionParent = this.getFirstPosition().parent;\n        if (this.isCollapsed && selectionParent.isEmpty) {\n            for (const key of selectionParent.getAttributeKeys()) {\n                if (key.startsWith(storePrefix)) {\n                    const realKey = key.substr(storePrefix.length);\n                    yield [realKey, selectionParent.getAttribute(key)];\n                }\n            }\n        }\n    }\n    /**\n     * Checks model text nodes that are closest to the selection's first position and returns attributes of first\n     * found element. If there are no text nodes in selection's first position parent, it returns selection\n     * attributes stored in that parent.\n     */\n    _getSurroundingAttributes() {\n        const position = this.getFirstPosition();\n        const schema = this._model.schema;\n        if (position.root.rootName == '$graveyard') {\n            return null;\n        }\n        let attrs = null;\n        if (!this.isCollapsed) {\n            // 1. If selection is a range...\n            const range = this.getFirstRange();\n            // ...look for a first character node in that range and take attributes from it.\n            for (const value of range) {\n                // If the item is an object, we don't want to get attributes from its children...\n                if (value.item.is('element') && schema.isObject(value.item)) {\n                    // ...but collect attributes from inline object.\n                    attrs = getTextAttributes(value.item, schema);\n                    break;\n                }\n                if (value.type == 'text') {\n                    attrs = value.item.getAttributes();\n                    break;\n                }\n            }\n        }\n        else {\n            // 2. If the selection is a caret or the range does not contain a character node...\n            const nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n            const nodeAfter = position.textNode ? position.textNode : position.nodeAfter;\n            // When gravity is overridden then don't take node before into consideration.\n            if (!this.isGravityOverridden) {\n                // ...look at the node before caret and take attributes from it if it is a character node.\n                attrs = getTextAttributes(nodeBefore, schema);\n            }\n            // 3. If not, look at the node after caret...\n            if (!attrs) {\n                attrs = getTextAttributes(nodeAfter, schema);\n            }\n            // 4. If not, try to find the first character on the left, that is in the same node.\n            // When gravity is overridden then don't take node before into consideration.\n            if (!this.isGravityOverridden && !attrs) {\n                let node = nodeBefore;\n                while (node && !attrs) {\n                    node = node.previousSibling;\n                    attrs = getTextAttributes(node, schema);\n                }\n            }\n            // 5. If not found, try to find the first character on the right, that is in the same node.\n            if (!attrs) {\n                let node = nodeAfter;\n                while (node && !attrs) {\n                    node = node.nextSibling;\n                    attrs = getTextAttributes(node, schema);\n                }\n            }\n            // 6. If not found, selection should retrieve attributes from parent.\n            if (!attrs) {\n                attrs = this.getStoredAttributes();\n            }\n        }\n        return attrs;\n    }\n    /**\n     * Fixes the selection after all its ranges got removed.\n     * @param deletionPosition Position where the deletion happened.\n     */\n    _fixGraveyardSelection(deletionPosition) {\n        // Find a range that is a correct selection range and is closest to the position where the deletion happened.\n        const selectionRange = this._model.schema.getNearestSelectionRange(deletionPosition);\n        // If nearest valid selection range has been found - add it in the place of old range.\n        if (selectionRange) {\n            // Check the range, convert it to live range, bind events, etc.\n            this._pushRange(selectionRange);\n        }\n        // If nearest valid selection range cannot be found don't add any range. Selection will be set to the default range.\n    }\n}\n/**\n * Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n *\n * It checks if the passed model item is a text node (or text proxy) and, if so, returns it's attributes.\n * If not, it checks if item is an inline object and does the same. Otherwise it returns `null`.\n */\nfunction getTextAttributes(node, schema) {\n    if (!node) {\n        return null;\n    }\n    if (node instanceof TextProxy || node instanceof Text) {\n        return node.getAttributes();\n    }\n    if (!schema.isInline(node)) {\n        return null;\n    }\n    // Stop on inline elements (such as `<softBreak>`) that are not objects (such as `<imageInline>` or `<mathml>`).\n    if (!schema.isObject(node)) {\n        return [];\n    }\n    const attributes = [];\n    // Collect all attributes that can be applied to the text node.\n    for (const [key, value] of node.getAttributes()) {\n        if (schema.checkAttribute('$text', key) &&\n            schema.getAttributeProperties(key).copyFromObject !== false) {\n            attributes.push([key, value]);\n        }\n    }\n    return attributes;\n}\n/**\n * Removes selection attributes from element which is not empty anymore.\n */\nfunction clearAttributesStoredInElement(model, batch) {\n    const differ = model.document.differ;\n    for (const entry of differ.getChanges()) {\n        if (entry.type != 'insert') {\n            continue;\n        }\n        const changeParent = entry.position.parent;\n        const isNoLongerEmpty = entry.length === changeParent.maxOffset;\n        if (isNoLongerEmpty) {\n            model.enqueueChange(batch, writer => {\n                const storedAttributes = Array.from(changeParent.getAttributeKeys())\n                    .filter(key => key.startsWith(storePrefix));\n                for (const key of storedAttributes) {\n                    writer.removeAttribute(key, changeParent);\n                }\n            });\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/conversionhelpers\n */\n/**\n * Base class for conversion helpers.\n */\nexport default class ConversionHelpers {\n    /**\n     * Creates a conversion helpers instance.\n     */\n    constructor(dispatchers) {\n        this._dispatchers = dispatchers;\n    }\n    /**\n     * Registers a conversion helper.\n     *\n     * **Note**: See full usage example in the `{@link module:engine/conversion/conversion~Conversion#for conversion.for()}`\n     * method description.\n     *\n     * @param conversionHelper The function to be called on event.\n     */\n    add(conversionHelper) {\n        for (const dispatcher of this._dispatchers) {\n            conversionHelper(dispatcher);\n        }\n        return this;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Contains downcast (model-to-view) converters for {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\n *\n * @module engine/conversion/downcasthelpers\n */\nimport ModelRange from '../model/range.js';\nimport ModelSelection from '../model/selection.js';\nimport ModelDocumentSelection from '../model/documentselection.js';\nimport ModelElement from '../model/element.js';\nimport ModelPosition from '../model/position.js';\nimport ViewAttributeElement from '../view/attributeelement.js';\nimport ConversionHelpers from './conversionhelpers.js';\nimport StylesMap from '../view/stylesmap.js';\nimport { CKEditorError, toArray } from '@ckeditor/ckeditor5-utils';\nimport { cloneDeep } from 'lodash-es';\n/**\n * Downcast conversion helper functions.\n *\n * Learn more about {@glink framework/deep-dive/conversion/downcast downcast helpers}.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class DowncastHelpers extends ConversionHelpers {\n    /**\n     * Model element to view element conversion helper.\n     *\n     * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: 'paragraph',\n     * \tview: 'p'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: 'paragraph',\n     * \tview: 'div',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: 'fancyParagraph',\n     * \tview: {\n     * \t\tname: 'p',\n     * \t\tclasses: 'fancy'\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: 'heading',\n     * \tview: ( modelElement, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) );\n     * \t}\n     * } );\n     * ```\n     *\n     * The element-to-element conversion supports the reconversion mechanism. It can be enabled by using either the `attributes` or\n     * the `children` props on a model description. You will find a couple examples below.\n     *\n     * In order to reconvert an element if any of its direct children have been added or removed, use the `children` property on a `model`\n     * description. For example, this model:\n     *\n     * ```xml\n     * <box>\n     * \t<paragraph>Some text.</paragraph>\n     * </box>\n     * ```\n     *\n     * will be converted into this structure in the view:\n     *\n     * ```html\n     * <div class=\"box\" data-type=\"single\">\n     * \t<p>Some text.</p>\n     * </div>\n     * ```\n     *\n     * But if more items were inserted in the model:\n     *\n     * ```xml\n     * <box>\n     * \t<paragraph>Some text.</paragraph>\n     * \t<paragraph>Other item.</paragraph>\n     * </box>\n     * ```\n     *\n     * it will be converted into this structure in the view (note the element `data-type` change):\n     *\n     * ```html\n     * <div class=\"box\" data-type=\"multiple\">\n     * \t<p>Some text.</p>\n     * \t<p>Other item.</p>\n     * </div>\n     * ```\n     *\n     * Such a converter would look like this (note that the `paragraph` elements are converted separately):\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: {\n     * \t\tname: 'box',\n     * \t\tchildren: true\n     * \t},\n     * \tview: ( modelElement, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createContainerElement( 'div', {\n     * \t\t\tclass: 'box',\n     * \t\t\t'data-type': modelElement.childCount == 1 ? 'single' : 'multiple'\n     * \t\t} );\n     * \t}\n     * } );\n     * ```\n     *\n     * In order to reconvert element if any of its attributes have been updated, use the `attributes` property on a `model`\n     * description. For example, this model:\n     *\n     * ```xml\n     * <heading level=\"2\">Some text.</heading>\n     * ```\n     *\n     * will be converted into this structure in the view:\n     *\n     * ```html\n     * <h2>Some text.</h2>\n     * ```\n     *\n     * But if the `heading` element's `level` attribute has been updated to `3` for example, then\n     * it will be converted into this structure in the view:\n     *\n     * ```html\n     * <h3>Some text.</h3>\n     * ```\n     *\n     * Such a converter would look as follows:\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: {\n     * \t\tname: 'heading',\n     * \t\tattributes: 'level'\n     * \t},\n     * \tview: ( modelElement, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) );\n     * \t}\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * You can read more about the element-to-element conversion in the\n     * {@glink framework/deep-dive/conversion/downcast downcast conversion} guide.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The description or a name of the model element to convert.\n     * @param config.model.attributes The list of attribute names that should be consumed while creating\n     * the view element. Note that the view will be reconverted if any of the listed attributes changes.\n     * @param config.model.children Specifies whether the view element requires reconversion if the list\n     * of the model child nodes changed.\n     * @param config.view A view element definition or a function that takes the model element and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n     * as parameters and returns a view container element.\n     */\n    elementToElement(config) {\n        return this.add(downcastElementToElement(config));\n    }\n    /**\n     * The model element to view structure (several elements) conversion helper.\n     *\n     * This conversion results in creating a view structure with one or more slots defined for the child nodes.\n     * For example, a model `<table>` may become this structure in the view:\n     *\n     * ```html\n     * <figure class=\"table\">\n     * \t<table>\n     * \t\t<tbody>${ slot for table rows }</tbody>\n     * \t</table>\n     * </figure>\n     * ```\n     *\n     * The children of the model's `<table>` element will be inserted into the `<tbody>` element.\n     * If the `elementToElement()` helper was used, the children would be inserted into the `<figure>`.\n     *\n     * Imagine a table feature where for this model structure:\n     *\n     * ```xml\n     * <table headingRows=\"1\">\n     * \t<tableRow> ... table cells 1 ... </tableRow>\n     * \t<tableRow> ... table cells 2 ... </tableRow>\n     * \t<tableRow> ... table cells 3 ... </tableRow>\n     * \t<caption>Caption text</caption>\n     * </table>\n     * ```\n     *\n     * we want to generate this view structure:\n     *\n     * ```html\n     * <figure class=\"table\">\n     * \t<table>\n     * \t\t<thead>\n     * \t\t\t<tr> ... table cells 1 ... </tr>\n     * \t\t</thead>\n     * \t\t<tbody>\n     * \t\t\t<tr> ... table cells 2 ... </tr>\n     * \t\t\t<tr> ... table cells 3 ... </tr>\n     * \t\t</tbody>\n     * \t</table>\n     * \t<figcaption>Caption text</figcaption>\n     * </figure>\n     * ```\n     *\n     * The converter has to take the `headingRows` attribute into consideration when allocating the `<tableRow>` elements\n     * into the `<tbody>` and `<thead>` elements. Hence, we need two slots and need to define proper filter callbacks for them.\n     *\n     * Additionally, all elements other than `<tableRow>` should be placed outside the `<table>` tag.\n     * In the example above, this will handle the table caption.\n     *\n     * Such a converter would look like this:\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).elementToStructure( {\n     * \tmodel: {\n     * \t\tname: 'table',\n     * \t\tattributes: [ 'headingRows' ]\n     * \t},\n     * \tview: ( modelElement, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\tconst figureElement = writer.createContainerElement( 'figure', { class: 'table' } );\n     * \t\tconst tableElement = writer.createContainerElement( 'table' );\n     *\n     * \t\twriter.insert( writer.createPositionAt( figureElement, 0 ), tableElement );\n     *\n     * \t\tconst headingRows = modelElement.getAttribute( 'headingRows' ) || 0;\n     *\n     * \t\tif ( headingRows > 0 ) {\n     * \t\t\tconst tableHead = writer.createContainerElement( 'thead' );\n     *\n     * \t\t\tconst headSlot = writer.createSlot( node => node.is( 'element', 'tableRow' ) && node.index < headingRows );\n     *\n     * \t\t\twriter.insert( writer.createPositionAt( tableElement, 'end' ), tableHead );\n     * \t\t\twriter.insert( writer.createPositionAt( tableHead, 0 ), headSlot );\n     * \t\t}\n     *\n     * \t\tif ( headingRows < tableUtils.getRows( table ) ) {\n     * \t\t\tconst tableBody = writer.createContainerElement( 'tbody' );\n     *\n     * \t\t\tconst bodySlot = writer.createSlot( node => node.is( 'element', 'tableRow' ) && node.index >= headingRows );\n     *\n     * \t\t\twriter.insert( writer.createPositionAt( tableElement, 'end' ), tableBody );\n     * \t\t\twriter.insert( writer.createPositionAt( tableBody, 0 ), bodySlot );\n     * \t\t}\n     *\n     * \t\tconst restSlot = writer.createSlot( node => !node.is( 'element', 'tableRow' ) );\n     *\n     * \t\twriter.insert( writer.createPositionAt( figureElement, 'end' ), restSlot );\n     *\n     * \t\treturn figureElement;\n     * \t}\n     * } );\n     * ```\n     *\n     * Note: The children of a model element that's being converted must be allocated in the same order in the view\n     * in which they are placed in the model.\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The description or a name of the model element to convert.\n     * @param config.model.name The name of the model element to convert.\n     * @param config.model.attributes The list of attribute names that should be consumed while creating\n     * the view structure. Note that the view will be reconverted if any of the listed attributes will change.\n     * @param config.view A function that takes the model element and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as parameters\n     * and returns a view container element with slots for model child nodes to be converted into.\n     */\n    elementToStructure(config) {\n        return this.add(downcastElementToStructure(config));\n    }\n    /**\n     * Model attribute to view element conversion helper.\n     *\n     * This conversion results in wrapping view nodes with a view attribute element. For example, a model text node with\n     * `\"Foo\"` as data and the `bold` attribute becomes `<strong>Foo</strong>` in the view.\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: 'bold',\n     * \tview: 'strong'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: 'bold',\n     * \tview: 'b',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: 'invert',\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tclasses: [ 'font-light', 'bg-dark' ]\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: {\n     * \t\tkey: 'fontSize',\n     * \t\tvalues: [ 'big', 'small' ]\n     * \t},\n     * \tview: {\n     * \t\tbig: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'font-size': '1.2em'\n     * \t\t\t}\n     * \t\t},\n     * \t\tsmall: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'font-size': '0.8em'\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: 'bold',\n     * \tview: ( modelAttributeValue, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createAttributeElement( 'span', {\n     * \t\t\tstyle: 'font-weight:' + modelAttributeValue\n     * \t\t} );\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: {\n     * \t\tkey: 'color',\n     * \t\tname: '$text'\n     * \t},\n     * \tview: ( modelAttributeValue, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createAttributeElement( 'span', {\n     * \t\t\tstyle: 'color:' + modelAttributeValue\n     * \t\t} );\n     * \t}\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n     * of `String`s with possible values if the model attribute is an enumerable.\n     * @param config.view A view element definition or a function\n     * that takes the model attribute value and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as parameters and returns a view\n     * attribute element. If `config.model.values` is given, `config.view` should be an object assigning values from `config.model.values`\n     * to view element definitions or functions.\n     * @param config.converterPriority Converter priority.\n     */\n    attributeToElement(config) {\n        return this.add(downcastAttributeToElement(config));\n    }\n    /**\n     * Model attribute to view attribute conversion helper.\n     *\n     * This conversion results in adding an attribute to a view node, basing on an attribute from a model node. For example,\n     * `<imageInline src='foo.jpg'></imageInline>` is converted to `<img src='foo.jpg'></img>`.\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: 'source',\n     * \tview: 'src'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: 'source',\n     * \tview: 'href',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: {\n     * \t\tname: 'imageInline',\n     * \t\tkey: 'source'\n     * \t},\n     * \tview: 'src'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: {\n     * \t\tname: 'styled',\n     * \t\tvalues: [ 'dark', 'light' ]\n     * \t},\n     * \tview: {\n     * \t\tdark: {\n     * \t\t\tkey: 'class',\n     * \t\t\tvalue: [ 'styled', 'styled-dark' ]\n     * \t\t},\n     * \t\tlight: {\n     * \t\t\tkey: 'class',\n     * \t\t\tvalue: [ 'styled', 'styled-light' ]\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: 'styled',\n     * \tview: modelAttributeValue => ( {\n     * \t\tkey: 'class',\n     * \t\tvalue: 'styled-' + modelAttributeValue\n     * \t} )\n     * } );\n     * ```\n     *\n     * **Note**: Downcasting to a style property requires providing `value` as an object:\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: 'lineHeight',\n     * \tview: modelAttributeValue => ( {\n     * \t\tkey: 'style',\n     * \t\tvalue: {\n     * \t\t\t'line-height': modelAttributeValue,\n     * \t\t\t'border-bottom': '1px dotted #ba2'\n     * \t\t}\n     * \t} )\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n     * the attribute key, possible values and, optionally, an element name to convert from.\n     * @param config.view A view attribute key, or a `{ key, value }` object or a function that takes the model attribute value and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n     * as parameters and returns a `{ key, value }` object. If the `key` is `'class'`, the `value` can be a `String` or an\n     * array of `String`s. If the `key` is `'style'`, the `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n     * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n     * `{ key, value }` objects or a functions.\n     * @param config.converterPriority Converter priority.\n     */\n    attributeToAttribute(config) {\n        return this.add(downcastAttributeToAttribute(config));\n    }\n    /**\n     * Model marker to view element conversion helper.\n     *\n     * **Note**: This method should be used mainly for editing the downcast and it is recommended\n     * to use the {@link #markerToData `#markerToData()`} helper instead.\n     *\n     * This helper may produce invalid HTML code (e.g. a span between table cells).\n     * It should only be used when you are sure that the produced HTML will be semantically correct.\n     *\n     * This conversion results in creating a view element on the boundaries of the converted marker. If the converted marker\n     * is collapsed, only one element is created. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>`\n     * becomes `<p>F<span data-marker=\"search\"></span>oo b<span data-marker=\"search\"></span>ar</p>` in the view.\n     *\n     * ```ts\n     * editor.conversion.for( 'editingDowncast' ).markerToElement( {\n     * \tmodel: 'search',\n     * \tview: 'marker-search'\n     * } );\n     *\n     * editor.conversion.for( 'editingDowncast' ).markerToElement( {\n     * \tmodel: 'search',\n     * \tview: 'search-result',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'editingDowncast' ).markerToElement( {\n     * \tmodel: 'search',\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tattributes: {\n     * \t\t\t'data-marker': 'search'\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'editingDowncast' ).markerToElement( {\n     * \tmodel: 'search',\n     * \tview: ( markerData, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createUIElement( 'span', {\n     * \t\t\t'data-marker': 'search',\n     * \t\t\t'data-start': markerData.isOpening\n     * \t\t} );\n     * \t}\n     * } );\n     * ```\n     *\n     * If a function is passed as the `config.view` parameter, it will be used to generate both boundary elements. The function\n     * receives the `data` object and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n     * as a parameters and should return an instance of the\n     * {@link module:engine/view/uielement~UIElement view UI element}. The `data` object and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi `conversionApi`} are passed from\n     * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,\n     * the `data.isOpening` parameter is passed, which is set to `true` for the marker start boundary element, and `false` for\n     * the marker end boundary element.\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The name of the model marker (or model marker group) to convert.\n     * @param config.view A view element definition or a function that takes the model marker data and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as a parameters\n     * and returns a view UI element.\n     * @param config.converterPriority Converter priority.\n     */\n    markerToElement(config) {\n        return this.add(downcastMarkerToElement(config));\n    }\n    /**\n     * Model marker to highlight conversion helper.\n     *\n     * This conversion results in creating a highlight on view nodes. For this kind of conversion,\n     * the {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} should be provided.\n     *\n     * For text nodes, a `<span>` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes\n     * in the converted marker range. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>` becomes\n     * `<p>F<span class=\"comment\">oo b</span>ar</p>` in the view.\n     *\n     * {@link module:engine/view/containerelement~ContainerElement} may provide a custom way of handling highlight. Most often,\n     * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `<span>`).\n     * For example, a model marker set like this:\n     * `[<imageInline src=\"foo.jpg\"></imageInline>]` becomes `<img src=\"foo.jpg\" class=\"comment\"></img>` in the view.\n     *\n     * For container elements, the conversion is two-step. While the converter processes the highlight descriptor and passes it\n     * to a container element, it is the container element instance itself that applies values from the highlight descriptor.\n     * So, in a sense, the converter takes care of stating what should be applied on what, while the element decides how to apply that.\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).markerToHighlight( { model: 'comment', view: { classes: 'comment' } } );\n     *\n     * editor.conversion.for( 'downcast' ).markerToHighlight( {\n     * \tmodel: 'comment',\n     * \tview: { classes: 'comment' },\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).markerToHighlight( {\n     * \tmodel: 'comment',\n     * \tview: ( data, conversionApi ) => {\n     * \t\t// Assuming that the marker name is in a form of comment:commentType:commentId.\n     * \t\tconst [ , commentType, commentId ] = data.markerName.split( ':' );\n     *\n     * \t\treturn {\n     * \t\t\tclasses: [ 'comment', 'comment-' + commentType ],\n     * \t\t\tattributes: { 'data-comment-id': commentId }\n     * \t\t};\n     * \t}\n     * } );\n     * ```\n     *\n     * If a function is passed as the `config.view` parameter, it will be used to generate the highlight descriptor. The function\n     * receives the `data` object and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n     * as the parameters and should return a\n     * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor}.\n     * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The name of the model marker (or model marker group) to convert.\n     * @param config.view A highlight descriptor that will be used for highlighting or a function that takes the model marker data and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as a parameters\n     * and returns a highlight descriptor.\n     * @param config.converterPriority Converter priority.\n     */\n    markerToHighlight(config) {\n        return this.add(downcastMarkerToHighlight(config));\n    }\n    /**\n     * Model marker converter for data downcast.\n     *\n     * This conversion creates a representation for model marker boundaries in the view:\n     *\n     * * If the marker boundary is before or after a model element, a view attribute is set on a corresponding view element.\n     * * In other cases, a view element with the specified tag name is inserted at the corresponding view position.\n     *\n     * Typically, the marker names use the `group:uniqueId:otherData` convention. For example: `comment:e34zfk9k2n459df53sjl34:zx32c`.\n     * The default configuration for this conversion is that the first part is the `group` part and the rest of\n     * the marker name becomes the `name` part.\n     *\n     * Tag and attribute names and values are generated from the marker name:\n     *\n     * * The templates for attributes are `data-[group]-start-before=\"[name]\"`, `data-[group]-start-after=\"[name]\"`,\n     * `data-[group]-end-before=\"[name]\"` and `data-[group]-end-after=\"[name]\"`.\n     * * The templates for view elements are `<[group]-start name=\"[name]\">` and `<[group]-end name=\"[name]\">`.\n     *\n     * Attributes mark whether the given marker's start or end boundary is before or after the given element.\n     * The `data-[group]-start-before` and `data-[group]-end-after` attributes are favored.\n     * The other two are used when the former two cannot be used.\n     *\n     * The conversion configuration can take a function that will generate different group and name parts.\n     * If such a function is set as the `config.view` parameter, it is passed a marker name and it is expected to return an object with two\n     * properties: `group` and `name`. If the function returns a falsy value, the conversion will not take place.\n     *\n     * Basic usage:\n     *\n     * ```ts\n     * // Using the default conversion.\n     * // In this case, all markers with names starting with 'comment:' will be converted.\n     * // The `group` parameter will be set to `comment`.\n     * // The `name` parameter will be the rest of the marker name (without the `:`).\n     * editor.conversion.for( 'dataDowncast' ).markerToData( {\n     * \tmodel: 'comment'\n     * } );\n     * ```\n     *\n     * An example of a view that may be generated by this conversion (assuming a marker with the name `comment:commentId:uid` marked\n     * by `[]`):\n     *\n     * ```\n     * // Model:\n     * <paragraph>Foo[bar</paragraph>\n     * <imageBlock src=\"abc.jpg\"></imageBlock>]\n     *\n     * // View:\n     * <p>Foo<comment-start name=\"commentId:uid\"></comment-start>bar</p>\n     * <figure data-comment-end-after=\"commentId:uid\" class=\"image\"><img src=\"abc.jpg\" /></figure>\n     * ```\n     *\n     * In the example above, the comment starts before \"bar\" and ends after the image.\n     *\n     * If the `name` part is empty, the following view may be generated:\n     *\n     * ```html\n     * <p>Foo <myMarker-start></myMarker-start>bar</p>\n     * <figure data-myMarker-end-after=\"\" class=\"image\"><img src=\"abc.jpg\" /></figure>\n     * ```\n     *\n     * **Note:** A situation where some markers have the `name` part and some do not, is incorrect and should be avoided.\n     *\n     * Examples where `data-group-start-after` and `data-group-end-before` are used:\n     *\n     * ```\n     * // Model:\n     * <blockQuote>[]<paragraph>Foo</paragraph></blockQuote>\n     *\n     * // View:\n     * <blockquote><p data-group-end-before=\"name\" data-group-start-before=\"name\">Foo</p></blockquote>\n     * ```\n     *\n     * Similarly, when a marker is collapsed after the last element:\n     *\n     * ```\n     * // Model:\n     * <blockQuote><paragraph>Foo</paragraph>[]</blockQuote>\n     *\n     * // View:\n     * <blockquote><p data-group-end-after=\"name\" data-group-start-after=\"name\">Foo</p></blockquote>\n     * ```\n     *\n     * When there are multiple markers from the same group stored in the same attribute of the same element, their\n     * name parts are put together in the attribute value, for example: `data-group-start-before=\"name1,name2,name3\"`.\n     *\n     * Other examples of usage:\n     *\n     * ```ts\n     * // Using a custom function which is the same as the default conversion:\n     * editor.conversion.for( 'dataDowncast' ).markerToData( {\n     * \tmodel: 'comment',\n     * \tview: markerName => ( {\n     * \t\tgroup: 'comment',\n     * \t\tname: markerName.substr( 8 ) // Removes 'comment:' part.\n     * \t} )\n     * } );\n     *\n     * // Using the converter priority:\n     * editor.conversion.for( 'dataDowncast' ).markerToData( {\n     * \tmodel: 'comment',\n     * \tview: markerName => ( {\n     * \t\tgroup: 'comment',\n     * \t\tname: markerName.substr( 8 ) // Removes 'comment:' part.\n     * \t} ),\n     * \tconverterPriority: 'high'\n     * } );\n     * ```\n     *\n     * This kind of conversion is useful for saving data into the database, so it should be used in the data conversion pipeline.\n     *\n     * See the {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} API guide to learn how to\n     * add a converter to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The name of the model marker (or the model marker group) to convert.\n     * @param config.view A function that takes the model marker name and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as the parameters\n     * and returns an object with the `group` and `name` properties.\n     * @param config.converterPriority Converter priority.\n     */\n    markerToData(config) {\n        return this.add(downcastMarkerToData(config));\n    }\n}\n/**\n * Function factory that creates a default downcast converter for text insertion changes.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n * ```ts\n * modelDispatcher.on( 'insert:$text', insertText() );\n * ```\n *\n * @returns Insert text event converter.\n */\nexport function insertText() {\n    return (evt, data, conversionApi) => {\n        if (!conversionApi.consumable.consume(data.item, evt.name)) {\n            return;\n        }\n        const viewWriter = conversionApi.writer;\n        const viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n        const viewText = viewWriter.createText(data.item.data);\n        viewWriter.insert(viewPosition, viewText);\n    };\n}\n/**\n * Function factory that creates a default downcast converter for triggering attributes and children conversion.\n *\n * @returns The converter.\n */\nexport function insertAttributesAndChildren() {\n    return (evt, data, conversionApi) => {\n        conversionApi.convertAttributes(data.item);\n        // Start converting children of the current item.\n        // In case of reconversion children were already re-inserted or converted separately.\n        if (!data.reconversion && data.item.is('element') && !data.item.isEmpty) {\n            conversionApi.convertChildren(data.item);\n        }\n    };\n}\n/**\n * Function factory that creates a default downcast converter for node remove changes.\n *\n * ```ts\n * modelDispatcher.on( 'remove', remove() );\n * ```\n *\n * @returns Remove event converter.\n */\nexport function remove() {\n    return (evt, data, conversionApi) => {\n        // Find the view range start position by mapping the model position at which the remove happened.\n        const viewStart = conversionApi.mapper.toViewPosition(data.position);\n        const modelEnd = data.position.getShiftedBy(data.length);\n        const viewEnd = conversionApi.mapper.toViewPosition(modelEnd, { isPhantom: true });\n        const viewRange = conversionApi.writer.createRange(viewStart, viewEnd);\n        // Trim the range to remove in case some UI elements are on the view range boundaries.\n        const removed = conversionApi.writer.remove(viewRange.getTrimmed());\n        // After the range is removed, unbind all view elements from the model.\n        // Range inside view document fragment is used to unbind deeply.\n        for (const child of conversionApi.writer.createRangeIn(removed).getItems()) {\n            conversionApi.mapper.unbindViewElement(child, { defer: true });\n        }\n    };\n}\n/**\n * Creates a `<span>` {@link module:engine/view/attributeelement~AttributeElement view attribute element} from the information\n * provided by the {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor} object. If the priority\n * is not provided in the descriptor, the default priority will be used.\n */\nexport function createViewElementFromHighlightDescriptor(writer, descriptor) {\n    const viewElement = writer.createAttributeElement('span', descriptor.attributes);\n    if (descriptor.classes) {\n        viewElement._addClass(descriptor.classes);\n    }\n    if (typeof descriptor.priority === 'number') {\n        viewElement._priority = descriptor.priority;\n    }\n    viewElement._id = descriptor.id;\n    return viewElement;\n}\n/**\n * Function factory that creates a converter which converts a non-collapsed {@link module:engine/model/selection~Selection model selection}\n * to a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object and maps model positions from the selection to view positions.\n *\n * ```ts\n * modelDispatcher.on( 'selection', convertRangeSelection() );\n * ```\n *\n * @returns Selection converter.\n */\nexport function convertRangeSelection() {\n    return (evt, data, conversionApi) => {\n        const selection = data.selection;\n        if (selection.isCollapsed) {\n            return;\n        }\n        if (!conversionApi.consumable.consume(selection, 'selection')) {\n            return;\n        }\n        const viewRanges = [];\n        for (const range of selection.getRanges()) {\n            viewRanges.push(conversionApi.mapper.toViewRange(range));\n        }\n        conversionApi.writer.setSelection(viewRanges, { backward: selection.isBackward });\n    };\n}\n/**\n * Function factory that creates a converter which converts a collapsed {@link module:engine/model/selection~Selection model selection} to\n * a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object, maps the model selection position to the view position and breaks\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements} at the selection position.\n *\n * ```ts\n * modelDispatcher.on( 'selection', convertCollapsedSelection() );\n * ```\n *\n * An example of the view state before and after converting the collapsed selection:\n *\n * ```\n *    <p><strong>f^oo<strong>bar</p>\n * -> <p><strong>f</strong>^<strong>oo</strong>bar</p>\n * ```\n *\n * By breaking attribute elements like `<strong>`, the selection is in a correct element. Then, when the selection attribute is\n * converted, broken attributes might be merged again, or the position where the selection is may be wrapped\n * with different, appropriate attribute elements.\n *\n * See also {@link module:engine/conversion/downcasthelpers~cleanSelection} which does a clean-up\n * by merging attributes.\n *\n * @returns Selection converter.\n */\nexport function convertCollapsedSelection() {\n    return (evt, data, conversionApi) => {\n        const selection = data.selection;\n        if (!selection.isCollapsed) {\n            return;\n        }\n        if (!conversionApi.consumable.consume(selection, 'selection')) {\n            return;\n        }\n        const viewWriter = conversionApi.writer;\n        const modelPosition = selection.getFirstPosition();\n        const viewPosition = conversionApi.mapper.toViewPosition(modelPosition);\n        const brokenPosition = viewWriter.breakAttributes(viewPosition);\n        viewWriter.setSelection(brokenPosition);\n    };\n}\n/**\n * Function factory that creates a converter which cleans artifacts after the previous\n * {@link module:engine/model/selection~Selection model selection} conversion. It removes all empty\n * {@link module:engine/view/attributeelement~AttributeElement view attribute elements} and merges sibling attributes at all start and end\n * positions of all ranges.\n *\n * ```\n *    <p><strong>^</strong></p>\n * -> <p>^</p>\n *\n *    <p><strong>foo</strong>^<strong>bar</strong>bar</p>\n * -> <p><strong>foo^bar<strong>bar</p>\n *\n *    <p><strong>foo</strong><em>^</em><strong>bar</strong>bar</p>\n * -> <p><strong>foo^bar<strong>bar</p>\n * ```\n *\n * This listener should be assigned before any converter for the new selection:\n *\n * ```ts\n * modelDispatcher.on( 'cleanSelection', cleanSelection() );\n * ```\n *\n * See {@link module:engine/conversion/downcasthelpers~convertCollapsedSelection}\n * which does the opposite by breaking attributes in the selection position.\n *\n * @returns Selection converter.\n */\nexport function cleanSelection() {\n    return (evt, data, conversionApi) => {\n        const viewWriter = conversionApi.writer;\n        const viewSelection = viewWriter.document.selection;\n        for (const range of viewSelection.getRanges()) {\n            // Not collapsed selection should not have artifacts.\n            if (range.isCollapsed) {\n                // Position might be in the node removed by the view writer.\n                if (range.end.parent.isAttached()) {\n                    conversionApi.writer.mergeAttributes(range.start);\n                }\n            }\n        }\n        viewWriter.setSelection(null);\n    };\n}\n/**\n * Function factory that creates a converter which converts the set/change/remove attribute changes from the model to the view.\n * It can also be used to convert selection attributes. In that case, an empty attribute element will be created and the\n * selection will be put inside it.\n *\n * Attributes from the model are converted to a view element that will be wrapping these view nodes that are bound to\n * model elements having the given attribute. This is useful for attributes like `bold` that may be set on text nodes in the model\n * but are represented as an element in the view:\n *\n * ```\n * [paragraph]              MODEL ====> VIEW        <p>\n * \t|- a {bold: true}                             |- <b>\n * \t|- b {bold: true}                             |   |- ab\n * \t|- c                                          |- c\n * \t```\n *\n * Passed `Function` will be provided with the attribute value and then all the parameters of the\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be the wrapping element.\n * When the provided `Function` does not return any element, no conversion will take place.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n * ```ts\n * modelDispatcher.on( 'attribute:bold', wrap( ( modelAttributeValue, { writer } ) => {\n * \treturn writer.createAttributeElement( 'strong' );\n * } );\n * ```\n *\n * @internal\n * @param elementCreator Function returning a view element that will be used for wrapping.\n * @returns Set/change attribute converter.\n */\nexport function wrap(elementCreator) {\n    return (evt, data, conversionApi) => {\n        if (!conversionApi.consumable.test(data.item, evt.name)) {\n            return;\n        }\n        // Recreate current wrapping node. It will be used to unwrap view range if the attribute value has changed\n        // or the attribute was removed.\n        const oldViewElement = elementCreator(data.attributeOldValue, conversionApi, data);\n        // Create node to wrap with.\n        const newViewElement = elementCreator(data.attributeNewValue, conversionApi, data);\n        if (!oldViewElement && !newViewElement) {\n            return;\n        }\n        conversionApi.consumable.consume(data.item, evt.name);\n        const viewWriter = conversionApi.writer;\n        const viewSelection = viewWriter.document.selection;\n        if (data.item instanceof ModelSelection || data.item instanceof ModelDocumentSelection) {\n            // Selection attribute conversion.\n            viewWriter.wrap(viewSelection.getFirstRange(), newViewElement);\n        }\n        else {\n            // Node attribute conversion.\n            let viewRange = conversionApi.mapper.toViewRange(data.range);\n            // First, unwrap the range from current wrapper.\n            if (data.attributeOldValue !== null && oldViewElement) {\n                viewRange = viewWriter.unwrap(viewRange, oldViewElement);\n            }\n            if (data.attributeNewValue !== null && newViewElement) {\n                viewWriter.wrap(viewRange, newViewElement);\n            }\n        }\n    };\n}\n/**\n * Function factory that creates a converter which converts node insertion changes from the model to the view.\n * The function passed will be provided with all the parameters of the dispatcher's\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be inserted into the view.\n *\n * The converter automatically consumes the corresponding value from the consumables list and binds the model and view elements.\n *\n * ```ts\n * downcastDispatcher.on(\n * \t'insert:myElem',\n * \tinsertElement( ( modelItem, { writer } ) => {\n * \t\tconst text = writer.createText( 'myText' );\n * \t\tconst myElem = writer.createElement( 'myElem', { myAttr: 'my-' + modelItem.getAttribute( 'myAttr' ) }, text );\n *\n * \t\t// Do something fancy with `myElem` using `modelItem` or other parameters.\n *\n * \t\treturn myElem;\n * \t}\n * ) );\n * ```\n *\n * @internal\n * @param  elementCreator Function returning a view element, which will be inserted.\n * @param consumer Function defining element consumption process.\n * By default this function just consume passed item insertion.\n * @returns Insert element event converter.\n */\nexport function insertElement(elementCreator, consumer = defaultConsumer) {\n    return (evt, data, conversionApi) => {\n        if (!consumer(data.item, conversionApi.consumable, { preflight: true })) {\n            return;\n        }\n        const viewElement = elementCreator(data.item, conversionApi, data);\n        if (!viewElement) {\n            return;\n        }\n        // Consume an element insertion and all present attributes that are specified as a reconversion triggers.\n        consumer(data.item, conversionApi.consumable);\n        const viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n        conversionApi.mapper.bindElements(data.item, viewElement);\n        conversionApi.writer.insert(viewPosition, viewElement);\n        // Convert attributes before converting children.\n        conversionApi.convertAttributes(data.item);\n        // Convert children or reinsert previous view elements.\n        reinsertOrConvertNodes(viewElement, data.item.getChildren(), conversionApi, { reconversion: data.reconversion });\n    };\n}\n/**\n * Function factory that creates a converter which converts a single model node insertion to a view structure.\n *\n * It is expected that the passed element creator function returns an {@link module:engine/view/element~Element} with attached slots\n * created with `writer.createSlot()` to indicate where child nodes should be converted.\n *\n * @see module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure\n *\n * @internal\n * @param elementCreator Function returning a view structure, which will be inserted.\n * @param consumer A callback that is expected to consume all the consumables\n * that were used by the element creator.\n * @returns Insert element event converter.\n*/\nexport function insertStructure(elementCreator, consumer) {\n    return (evt, data, conversionApi) => {\n        if (!consumer(data.item, conversionApi.consumable, { preflight: true })) {\n            return;\n        }\n        const slotsMap = new Map();\n        conversionApi.writer._registerSlotFactory(createSlotFactory(data.item, slotsMap, conversionApi));\n        // View creation.\n        const viewElement = elementCreator(data.item, conversionApi, data);\n        conversionApi.writer._clearSlotFactory();\n        if (!viewElement) {\n            return;\n        }\n        // Check if all children are covered by slots and there is no child that landed in multiple slots.\n        validateSlotsChildren(data.item, slotsMap, conversionApi);\n        // Consume an element insertion and all present attributes that are specified as a reconversion triggers.\n        consumer(data.item, conversionApi.consumable);\n        const viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n        conversionApi.mapper.bindElements(data.item, viewElement);\n        conversionApi.writer.insert(viewPosition, viewElement);\n        // Convert attributes before converting children.\n        conversionApi.convertAttributes(data.item);\n        // Fill view slots with previous view elements or create new ones.\n        fillSlots(viewElement, slotsMap, conversionApi, { reconversion: data.reconversion });\n    };\n}\n/**\n * Function factory that creates a converter which converts marker adding change to the\n * {@link module:engine/view/uielement~UIElement view UI element}.\n *\n * The view UI element that will be added to the view depends on the passed parameter. See {@link ~insertElement}.\n * In case of a non-collapsed range, the UI element will not wrap nodes but separate elements will be placed at the beginning\n * and at the end of the range.\n *\n * This converter binds created UI elements with the marker name using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n *\n * @internal\n * @param elementCreator A view UI element or a function returning the view element that will be inserted.\n * @returns Insert element event converter.\n */\nexport function insertUIElement(elementCreator) {\n    return (evt, data, conversionApi) => {\n        // Create two view elements. One will be inserted at the beginning of marker, one at the end.\n        // If marker is collapsed, only \"opening\" element will be inserted.\n        data.isOpening = true;\n        const viewStartElement = elementCreator(data, conversionApi);\n        data.isOpening = false;\n        const viewEndElement = elementCreator(data, conversionApi);\n        if (!viewStartElement || !viewEndElement) {\n            return;\n        }\n        const markerRange = data.markerRange;\n        // Marker that is collapsed has consumable build differently that non-collapsed one.\n        // For more information see `addMarker` event description.\n        // If marker's range is collapsed - check if it can be consumed.\n        if (markerRange.isCollapsed && !conversionApi.consumable.consume(markerRange, evt.name)) {\n            return;\n        }\n        // If marker's range is not collapsed - consume all items inside.\n        for (const value of markerRange) {\n            if (!conversionApi.consumable.consume(value.item, evt.name)) {\n                return;\n            }\n        }\n        const mapper = conversionApi.mapper;\n        const viewWriter = conversionApi.writer;\n        // Add \"opening\" element.\n        viewWriter.insert(mapper.toViewPosition(markerRange.start), viewStartElement);\n        conversionApi.mapper.bindElementToMarker(viewStartElement, data.markerName);\n        // Add \"closing\" element only if range is not collapsed.\n        if (!markerRange.isCollapsed) {\n            viewWriter.insert(mapper.toViewPosition(markerRange.end), viewEndElement);\n            conversionApi.mapper.bindElementToMarker(viewEndElement, data.markerName);\n        }\n        evt.stop();\n    };\n}\n/**\n * Function factory that returns a default downcast converter for removing a {@link module:engine/view/uielement~UIElement UI element}\n * based on marker remove change.\n *\n * This converter unbinds elements from the marker name.\n *\n * @returns Removed UI element converter.\n */\nfunction removeUIElement() {\n    return (evt, data, conversionApi) => {\n        const elements = conversionApi.mapper.markerNameToElements(data.markerName);\n        if (!elements) {\n            return;\n        }\n        for (const element of elements) {\n            conversionApi.mapper.unbindElementFromMarkerName(element, data.markerName);\n            conversionApi.writer.clear(conversionApi.writer.createRangeOn(element), element);\n        }\n        conversionApi.writer.clearClonedElementsGroup(data.markerName);\n        evt.stop();\n    };\n}\n/**\n * Function factory that creates a default converter for model markers.\n *\n * See {@link DowncastHelpers#markerToData} for more information what type of view is generated.\n *\n * This converter binds created UI elements and affected view elements with the marker name\n * using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n *\n * @returns Add marker converter.\n */\nfunction insertMarkerData(viewCreator) {\n    return (evt, data, conversionApi) => {\n        const viewMarkerData = viewCreator(data.markerName, conversionApi);\n        if (!viewMarkerData) {\n            return;\n        }\n        const markerRange = data.markerRange;\n        if (!conversionApi.consumable.consume(markerRange, evt.name)) {\n            return;\n        }\n        // Adding closing data first to keep the proper order in the view.\n        handleMarkerBoundary(markerRange, false, conversionApi, data, viewMarkerData);\n        handleMarkerBoundary(markerRange, true, conversionApi, data, viewMarkerData);\n        evt.stop();\n    };\n}\n/**\n * Helper function for `insertMarkerData()` that marks a marker boundary at the beginning or end of given `range`.\n */\nfunction handleMarkerBoundary(range, isStart, conversionApi, data, viewMarkerData) {\n    const modelPosition = isStart ? range.start : range.end;\n    const elementAfter = modelPosition.nodeAfter && modelPosition.nodeAfter.is('element') ? modelPosition.nodeAfter : null;\n    const elementBefore = modelPosition.nodeBefore && modelPosition.nodeBefore.is('element') ? modelPosition.nodeBefore : null;\n    if (elementAfter || elementBefore) {\n        let modelElement;\n        let isBefore;\n        // If possible, we want to add `data-group-start-before` and `data-group-end-after` attributes.\n        if (isStart && elementAfter || !isStart && !elementBefore) {\n            // [<elementAfter>...</elementAfter> -> <elementAfter data-group-start-before=\"...\">...</elementAfter>\n            // <parent>]<elementAfter> -> <parent><elementAfter data-group-end-before=\"...\">\n            modelElement = elementAfter;\n            isBefore = true;\n        }\n        else {\n            // <elementBefore>...</elementBefore>] -> <elementBefore data-group-end-after=\"...\">...</elementBefore>\n            // </elementBefore>[</parent> -> </elementBefore data-group-start-after=\"...\"></parent>\n            modelElement = elementBefore;\n            isBefore = false;\n        }\n        const viewElement = conversionApi.mapper.toViewElement(modelElement);\n        // In rare circumstances, the model element may be not mapped to any view element and that would cause an error.\n        // One of those situations is a soft break inside code block.\n        if (viewElement) {\n            insertMarkerAsAttribute(viewElement, isStart, isBefore, conversionApi, data, viewMarkerData);\n            return;\n        }\n    }\n    const viewPosition = conversionApi.mapper.toViewPosition(modelPosition);\n    insertMarkerAsElement(viewPosition, isStart, conversionApi, data, viewMarkerData);\n}\n/**\n * Helper function for `insertMarkerData()` that marks a marker boundary in the view as an attribute on a view element.\n */\nfunction insertMarkerAsAttribute(viewElement, isStart, isBefore, conversionApi, data, viewMarkerData) {\n    const attributeName = `data-${viewMarkerData.group}-${isStart ? 'start' : 'end'}-${isBefore ? 'before' : 'after'}`;\n    const markerNames = viewElement.hasAttribute(attributeName) ? viewElement.getAttribute(attributeName).split(',') : [];\n    // Adding marker name at the beginning to have the same order in the attribute as there is with marker elements.\n    markerNames.unshift(viewMarkerData.name);\n    conversionApi.writer.setAttribute(attributeName, markerNames.join(','), viewElement);\n    conversionApi.mapper.bindElementToMarker(viewElement, data.markerName);\n}\n/**\n * Helper function for `insertMarkerData()` that marks a marker boundary in the view as a separate view ui element.\n */\nfunction insertMarkerAsElement(position, isStart, conversionApi, data, viewMarkerData) {\n    const viewElementName = `${viewMarkerData.group}-${isStart ? 'start' : 'end'}`;\n    const attrs = viewMarkerData.name ? { 'name': viewMarkerData.name } : null;\n    const viewElement = conversionApi.writer.createUIElement(viewElementName, attrs);\n    conversionApi.writer.insert(position, viewElement);\n    conversionApi.mapper.bindElementToMarker(viewElement, data.markerName);\n}\n/**\n * Function factory that creates a converter for removing a model marker data added by the {@link #insertMarkerData} converter.\n *\n * @returns Remove marker converter.\n */\nfunction removeMarkerData(viewCreator) {\n    return (evt, data, conversionApi) => {\n        const viewData = viewCreator(data.markerName, conversionApi);\n        if (!viewData) {\n            return;\n        }\n        const elements = conversionApi.mapper.markerNameToElements(data.markerName);\n        if (!elements) {\n            return;\n        }\n        for (const element of elements) {\n            conversionApi.mapper.unbindElementFromMarkerName(element, data.markerName);\n            if (element.is('containerElement')) {\n                removeMarkerFromAttribute(`data-${viewData.group}-start-before`, element);\n                removeMarkerFromAttribute(`data-${viewData.group}-start-after`, element);\n                removeMarkerFromAttribute(`data-${viewData.group}-end-before`, element);\n                removeMarkerFromAttribute(`data-${viewData.group}-end-after`, element);\n            }\n            else {\n                conversionApi.writer.clear(conversionApi.writer.createRangeOn(element), element);\n            }\n        }\n        conversionApi.writer.clearClonedElementsGroup(data.markerName);\n        evt.stop();\n        function removeMarkerFromAttribute(attributeName, element) {\n            if (element.hasAttribute(attributeName)) {\n                const markerNames = new Set(element.getAttribute(attributeName).split(','));\n                markerNames.delete(viewData.name);\n                if (markerNames.size == 0) {\n                    conversionApi.writer.removeAttribute(attributeName, element);\n                }\n                else {\n                    conversionApi.writer.setAttribute(attributeName, Array.from(markerNames).join(','), element);\n                }\n            }\n        }\n    };\n}\n/**\n * Function factory that creates a converter which converts the set/change/remove attribute changes from the model to the view.\n *\n * Attributes from the model are converted to the view element attributes in the view. You may provide a custom function to generate\n * a key-value attribute pair to add/change/remove. If not provided, model attributes will be converted to view element\n * attributes on a one-to-one basis.\n *\n * *Note:** The provided attribute creator should always return the same `key` for a given attribute from the model.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n * ```ts\n * modelDispatcher.on( 'attribute:customAttr:myElem', changeAttribute( ( value, data ) => {\n * \t// Change attribute key from `customAttr` to `class` in the view.\n * \tconst key = 'class';\n * \tlet value = data.attributeNewValue;\n *\n * \t// Force attribute value to 'empty' if the model element is empty.\n * \tif ( data.item.childCount === 0 ) {\n * \t\tvalue = 'empty';\n * \t}\n *\n * \t// Return the key-value pair.\n * \treturn { key, value };\n * } ) );\n * ```\n *\n * @param attributeCreator Function returning an object with two properties: `key` and `value`, which\n * represent the attribute key and attribute value to be set on a {@link module:engine/view/element~Element view element}.\n * The function is passed the model attribute value as the first parameter and additional data about the change as the second parameter.\n * @returns Set/change attribute converter.\n */\nfunction changeAttribute(attributeCreator) {\n    return (evt, data, conversionApi) => {\n        if (!conversionApi.consumable.test(data.item, evt.name)) {\n            return;\n        }\n        const oldAttribute = attributeCreator(data.attributeOldValue, conversionApi, data);\n        const newAttribute = attributeCreator(data.attributeNewValue, conversionApi, data);\n        if (!oldAttribute && !newAttribute) {\n            return;\n        }\n        conversionApi.consumable.consume(data.item, evt.name);\n        const viewElement = conversionApi.mapper.toViewElement(data.item);\n        const viewWriter = conversionApi.writer;\n        // If model item cannot be mapped to a view element, it means item is not an `Element` instance but a `TextProxy` node.\n        // Only elements can have attributes in a view so do not proceed for anything else (#1587).\n        if (!viewElement) {\n            /**\n             * This error occurs when a {@link module:engine/model/textproxy~TextProxy text node's} attribute is to be downcasted\n             * by an {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `Attribute to Attribute converter`}.\n             * In most cases it is caused by converters misconfiguration when only \"generic\" converter is defined:\n             *\n             * ```ts\n             * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n             * \tmodel: 'attribute-name',\n             * \tview: 'attribute-name'\n             * } ) );\n             * ```\n             *\n             * and given attribute is used on text node, for example:\n             *\n             * ```ts\n             * model.change( writer => {\n             * \twriter.insertText( 'Foo', { 'attribute-name': 'bar' }, parent, 0 );\n             * } );\n             * ```\n             *\n             * In such cases, to convert the same attribute for both {@link module:engine/model/element~Element}\n             * and {@link module:engine/model/textproxy~TextProxy `Text`} nodes, text specific\n             * {@link module:engine/conversion/conversion~Conversion#attributeToElement `Attribute to Element converter`}\n             * with higher {@link module:utils/priorities~PriorityString priority} must also be defined:\n             *\n             * ```ts\n             * editor.conversion.for( 'downcast' ).attributeToElement( {\n             * \tmodel: {\n             * \t\tkey: 'attribute-name',\n             * \t\tname: '$text'\n             * \t},\n             * \tview: ( value, { writer } ) => {\n             * \t\treturn writer.createAttributeElement( 'span', { 'attribute-name': value } );\n             * \t},\n             * \tconverterPriority: 'high'\n             * } ) );\n             * ```\n             *\n             * @error conversion-attribute-to-attribute-on-text\n             */\n            throw new CKEditorError('conversion-attribute-to-attribute-on-text', conversionApi.dispatcher, data);\n        }\n        // First remove the old attribute if there was one.\n        if (data.attributeOldValue !== null && oldAttribute) {\n            if (oldAttribute.key == 'class') {\n                const classes = typeof oldAttribute.value == 'string' ? oldAttribute.value.split(/\\s+/) : oldAttribute.value;\n                for (const className of classes) {\n                    viewWriter.removeClass(className, viewElement);\n                }\n            }\n            else if (oldAttribute.key == 'style') {\n                if (typeof oldAttribute.value == 'string') {\n                    const styles = new StylesMap(viewWriter.document.stylesProcessor);\n                    styles.setTo(oldAttribute.value);\n                    for (const [key] of styles.getStylesEntries()) {\n                        viewWriter.removeStyle(key, viewElement);\n                    }\n                }\n                else {\n                    const keys = Object.keys(oldAttribute.value);\n                    for (const key of keys) {\n                        viewWriter.removeStyle(key, viewElement);\n                    }\n                }\n            }\n            else {\n                viewWriter.removeAttribute(oldAttribute.key, viewElement);\n            }\n        }\n        // Then set the new attribute.\n        if (data.attributeNewValue !== null && newAttribute) {\n            if (newAttribute.key == 'class') {\n                const classes = typeof newAttribute.value == 'string' ? newAttribute.value.split(/\\s+/) : newAttribute.value;\n                for (const className of classes) {\n                    viewWriter.addClass(className, viewElement);\n                }\n            }\n            else if (newAttribute.key == 'style') {\n                if (typeof newAttribute.value == 'string') {\n                    const styles = new StylesMap(viewWriter.document.stylesProcessor);\n                    styles.setTo(newAttribute.value);\n                    for (const [key, value] of styles.getStylesEntries()) {\n                        viewWriter.setStyle(key, value, viewElement);\n                    }\n                }\n                else {\n                    const keys = Object.keys(newAttribute.value);\n                    for (const key of keys) {\n                        viewWriter.setStyle(key, newAttribute.value[key], viewElement);\n                    }\n                }\n            }\n            else {\n                viewWriter.setAttribute(newAttribute.key, newAttribute.value, viewElement);\n            }\n        }\n    };\n}\n/**\n * Function factory that creates a converter which converts the text inside marker's range. The converter wraps the text with\n * {@link module:engine/view/attributeelement~AttributeElement} created from the provided descriptor.\n * See {link module:engine/conversion/downcasthelpers~createViewElementFromHighlightDescriptor}.\n *\n * It can also be used to convert the selection that is inside a marker. In that case, an empty attribute element will be\n * created and the selection will be put inside it.\n *\n * If the highlight descriptor does not provide the `priority` property, `10` will be used.\n *\n * If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n *\n * This converter binds the created {@link module:engine/view/attributeelement~AttributeElement attribute elemens} with the marker name\n * using the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n */\nfunction highlightText(highlightDescriptor) {\n    return (evt, data, conversionApi) => {\n        if (!data.item) {\n            return;\n        }\n        if (!(data.item instanceof ModelSelection || data.item instanceof ModelDocumentSelection) && !data.item.is('$textProxy')) {\n            return;\n        }\n        const descriptor = prepareDescriptor(highlightDescriptor, data, conversionApi);\n        if (!descriptor) {\n            return;\n        }\n        if (!conversionApi.consumable.consume(data.item, evt.name)) {\n            return;\n        }\n        const viewWriter = conversionApi.writer;\n        const viewElement = createViewElementFromHighlightDescriptor(viewWriter, descriptor);\n        const viewSelection = viewWriter.document.selection;\n        if (data.item instanceof ModelSelection || data.item instanceof ModelDocumentSelection) {\n            viewWriter.wrap(viewSelection.getFirstRange(), viewElement);\n        }\n        else {\n            const viewRange = conversionApi.mapper.toViewRange(data.range);\n            const rangeAfterWrap = viewWriter.wrap(viewRange, viewElement);\n            for (const element of rangeAfterWrap.getItems()) {\n                if (element.is('attributeElement') && element.isSimilar(viewElement)) {\n                    conversionApi.mapper.bindElementToMarker(element, data.markerName);\n                    // One attribute element is enough, because all of them are bound together by the view writer.\n                    // Mapper uses this binding to get all the elements no matter how many of them are registered in the mapper.\n                    break;\n                }\n            }\n        }\n    };\n}\n/**\n * Converter function factory. It creates a function which applies the marker's highlight to an element inside the marker's range.\n *\n * The converter checks if an element has the `addHighlight` function stored as a\n * {@link module:engine/view/element~Element#_setCustomProperty custom property} and, if so, uses it to apply the highlight.\n * In such case the converter will consume all element's children, assuming that they were handled by the element itself.\n *\n * When the `addHighlight` custom property is not present, the element is not converted in any special way.\n * This means that converters will proceed to convert the element's child nodes.\n *\n * If the highlight descriptor does not provide the `priority` property, `10` will be used.\n *\n * If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n *\n * This converter binds altered {@link module:engine/view/containerelement~ContainerElement container elements} with the marker name using\n * the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n */\nfunction highlightElement(highlightDescriptor) {\n    return (evt, data, conversionApi) => {\n        if (!data.item) {\n            return;\n        }\n        if (!(data.item instanceof ModelElement)) {\n            return;\n        }\n        const descriptor = prepareDescriptor(highlightDescriptor, data, conversionApi);\n        if (!descriptor) {\n            return;\n        }\n        if (!conversionApi.consumable.test(data.item, evt.name)) {\n            return;\n        }\n        const viewElement = conversionApi.mapper.toViewElement(data.item);\n        if (viewElement && viewElement.getCustomProperty('addHighlight')) {\n            // Consume element itself.\n            conversionApi.consumable.consume(data.item, evt.name);\n            // Consume all children nodes.\n            for (const value of ModelRange._createIn(data.item)) {\n                conversionApi.consumable.consume(value.item, evt.name);\n            }\n            const addHighlightCallback = viewElement.getCustomProperty('addHighlight');\n            addHighlightCallback(viewElement, descriptor, conversionApi.writer);\n            conversionApi.mapper.bindElementToMarker(viewElement, data.markerName);\n        }\n    };\n}\n/**\n * Function factory that creates a converter which converts the removing model marker to the view.\n *\n * Both text nodes and elements are handled by this converter but they are handled a bit differently.\n *\n * Text nodes are unwrapped using the {@link module:engine/view/attributeelement~AttributeElement attribute element} created from the\n * provided highlight descriptor. See {link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * For elements, the converter checks if an element has the `removeHighlight` function stored as a\n * {@link module:engine/view/element~Element#_setCustomProperty custom property}. If so, it uses it to remove the highlight.\n * In such case, the children of that element will not be converted.\n *\n * When `removeHighlight` is not present, the element is not converted in any special way.\n * The converter will proceed to convert the element's child nodes instead.\n *\n * If the highlight descriptor does not provide the `priority` property, `10` will be used.\n *\n * If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n *\n * This converter unbinds elements from the marker name.\n */\nfunction removeHighlight(highlightDescriptor) {\n    return (evt, data, conversionApi) => {\n        // This conversion makes sense only for non-collapsed range.\n        if (data.markerRange.isCollapsed) {\n            return;\n        }\n        const descriptor = prepareDescriptor(highlightDescriptor, data, conversionApi);\n        if (!descriptor) {\n            return;\n        }\n        // View element that will be used to unwrap `AttributeElement`s.\n        const viewHighlightElement = createViewElementFromHighlightDescriptor(conversionApi.writer, descriptor);\n        // Get all elements bound with given marker name.\n        const elements = conversionApi.mapper.markerNameToElements(data.markerName);\n        if (!elements) {\n            return;\n        }\n        for (const element of elements) {\n            conversionApi.mapper.unbindElementFromMarkerName(element, data.markerName);\n            if (element.is('attributeElement')) {\n                conversionApi.writer.unwrap(conversionApi.writer.createRangeOn(element), viewHighlightElement);\n            }\n            else {\n                // if element.is( 'containerElement' ).\n                const removeHighlightCallback = element.getCustomProperty('removeHighlight');\n                removeHighlightCallback(element, descriptor.id, conversionApi.writer);\n            }\n        }\n        conversionApi.writer.clearClonedElementsGroup(data.markerName);\n        evt.stop();\n    };\n}\n/**\n * Model element to view element conversion helper.\n *\n * See {@link ~DowncastHelpers#elementToElement `.elementToElement()` downcast helper} for examples and config params description.\n *\n * @param config Conversion configuration.\n * @param config.model The description or a name of the model element to convert.\n * @param config.model.attributes List of attributes triggering element reconversion.\n * @param config.model.children Should reconvert element if the list of model child nodes changed.\n * @returns Conversion helper.\n */\nfunction downcastElementToElement(config) {\n    const model = normalizeModelElementConfig(config.model);\n    const view = normalizeToElementConfig(config.view, 'container');\n    // Trigger reconversion on children list change if element is a subject to any reconversion.\n    // This is required to be able to trigger Differ#refreshItem() on a direct child of the reconverted element.\n    if (model.attributes.length) {\n        model.children = true;\n    }\n    return (dispatcher) => {\n        dispatcher.on(`insert:${model.name}`, insertElement(view, createConsumer(model)), { priority: config.converterPriority || 'normal' });\n        if (model.children || model.attributes.length) {\n            dispatcher.on('reduceChanges', createChangeReducer(model), { priority: 'low' });\n        }\n    };\n}\n/**\n * Model element to view structure conversion helper.\n *\n * See {@link ~DowncastHelpers#elementToStructure `.elementToStructure()` downcast helper} for examples and config params description.\n *\n * @param config Conversion configuration.\n * @returns Conversion helper.\n */\nfunction downcastElementToStructure(config) {\n    const model = normalizeModelElementConfig(config.model);\n    const view = normalizeToElementConfig(config.view, 'container');\n    // Trigger reconversion on children list change because it always needs to use slots to put children in proper places.\n    // This is required to be able to trigger Differ#refreshItem() on a direct child of the reconverted element.\n    model.children = true;\n    return (dispatcher) => {\n        if (dispatcher._conversionApi.schema.checkChild(model.name, '$text')) {\n            /**\n             * This error occurs when a {@link module:engine/model/element~Element model element} is downcasted\n             * via {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure} helper but the element was\n             * allowed to host `$text` by the {@link module:engine/model/schema~Schema model schema}.\n             *\n             * For instance, this may be the result of `myElement` allowing the content of\n             * {@glink framework/deep-dive/schema#generic-items `$block`} in its schema definition:\n             *\n             * ```ts\n             * // Element definition in schema.\n             * schema.register( 'myElement', {\n             * \tallowContentOf: '$block',\n             *\n             * \t// ...\n             * } );\n             *\n             * // ...\n             *\n             * // Conversion of myElement with the use of elementToStructure().\n             * editor.conversion.for( 'downcast' ).elementToStructure( {\n             * \tmodel: 'myElement',\n             * \tview: ( modelElement, { writer } ) => {\n             * \t\t// ...\n             * \t}\n             * } );\n             * ```\n             *\n             * In such case, {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`} helper\n             * can be used instead to get around this problem:\n             *\n             * ```ts\n             * editor.conversion.for( 'downcast' ).elementToElement( {\n             * \tmodel: 'myElement',\n             * \tview: ( modelElement, { writer } ) => {\n             * \t\t// ...\n             * \t}\n             * } );\n             * ```\n             *\n             * @error conversion-element-to-structure-disallowed-text\n             * @param {String} elementName The name of the element the structure is to be created for.\n             */\n            throw new CKEditorError('conversion-element-to-structure-disallowed-text', dispatcher, { elementName: model.name });\n        }\n        dispatcher.on(`insert:${model.name}`, insertStructure(view, createConsumer(model)), { priority: config.converterPriority || 'normal' });\n        dispatcher.on('reduceChanges', createChangeReducer(model), { priority: 'low' });\n    };\n}\n/**\n * Model attribute to view element conversion helper.\n *\n * See {@link ~DowncastHelpers#attributeToElement `.attributeToElement()` downcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n * of `String`s with possible values if the model attribute is an enumerable.\n * @param config.view A view element definition or a function that takes the model attribute value and\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} as parameters and returns a view attribute element.\n * If `config.model.values` is given, `config.view` should be an object assigning values from `config.model.values` to view element\n * definitions or functions.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction downcastAttributeToElement(config) {\n    config = cloneDeep(config);\n    let model = config.model;\n    if (typeof model == 'string') {\n        model = { key: model };\n    }\n    let eventName = `attribute:${model.key}`;\n    if (model.name) {\n        eventName += ':' + model.name;\n    }\n    if (model.values) {\n        for (const modelValue of model.values) {\n            config.view[modelValue] = normalizeToElementConfig(config.view[modelValue], 'attribute');\n        }\n    }\n    else {\n        config.view = normalizeToElementConfig(config.view, 'attribute');\n    }\n    const elementCreator = getFromAttributeCreator(config);\n    return (dispatcher) => {\n        dispatcher.on(eventName, wrap(elementCreator), { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * Model attribute to view attribute conversion helper.\n *\n * See {@link ~DowncastHelpers#attributeToAttribute `.attributeToAttribute()` downcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n * the attribute key, possible values and, optionally, an element name to convert from.\n * @param config.view A view attribute key, or a `{ key, value }` object or a function that takes the model attribute value and returns\n * a `{ key, value }` object.\n * If `key` is `'class'`, `value` can be a `String` or an array of `String`s. If `key` is `'style'`, `value` is an object with\n * key-value pairs. In other cases, `value` is a `String`.\n * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n * `{ key, value }` objects or a functions.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction downcastAttributeToAttribute(config) {\n    config = cloneDeep(config);\n    let model = config.model;\n    if (typeof model == 'string') {\n        model = { key: model };\n    }\n    let eventName = `attribute:${model.key}`;\n    if (model.name) {\n        eventName += ':' + model.name;\n    }\n    if (model.values) {\n        for (const modelValue of model.values) {\n            config.view[modelValue] = normalizeToAttributeConfig(config.view[modelValue]);\n        }\n    }\n    else {\n        config.view = normalizeToAttributeConfig(config.view);\n    }\n    const elementCreator = getFromAttributeCreator(config);\n    return (dispatcher) => {\n        dispatcher.on(eventName, changeAttribute(elementCreator), { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * Model marker to view element conversion helper.\n *\n * See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.model The name of the model marker (or model marker group) to convert.\n * @param config.view A view element definition or a function that takes the model marker data as a parameter and returns a view UI element.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction downcastMarkerToElement(config) {\n    const view = normalizeToElementConfig(config.view, 'ui');\n    return (dispatcher) => {\n        dispatcher.on(`addMarker:${config.model}`, insertUIElement(view), { priority: config.converterPriority || 'normal' });\n        dispatcher.on(`removeMarker:${config.model}`, removeUIElement(), { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * Model marker to view data conversion helper.\n *\n * See {@link ~DowncastHelpers#markerToData `markerToData()` downcast helper} to learn more.\n *\n * @returns Conversion helper.\n */\nfunction downcastMarkerToData(config) {\n    config = cloneDeep(config);\n    const group = config.model;\n    let view = config.view;\n    // Default conversion.\n    if (!view) {\n        view = markerName => ({\n            group,\n            name: markerName.substr(config.model.length + 1)\n        });\n    }\n    return (dispatcher) => {\n        dispatcher.on(`addMarker:${group}`, insertMarkerData(view), { priority: config.converterPriority || 'normal' });\n        dispatcher.on(`removeMarker:${group}`, removeMarkerData(view), { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * Model marker to highlight conversion helper.\n *\n * See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.model The name of the model marker (or model marker group) to convert.\n * @param config.view A highlight descriptor that will be used for highlighting or a function that takes\n * the model marker data as a parameter and returns a highlight descriptor.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction downcastMarkerToHighlight(config) {\n    return (dispatcher) => {\n        dispatcher.on(`addMarker:${config.model}`, highlightText(config.view), { priority: config.converterPriority || 'normal' });\n        dispatcher.on(`addMarker:${config.model}`, highlightElement(config.view), { priority: config.converterPriority || 'normal' });\n        dispatcher.on(`removeMarker:${config.model}`, removeHighlight(config.view), { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * Takes `config.model`, and converts it to an object with normalized structure.\n *\n * @param model Model configuration or element name.\n */\nfunction normalizeModelElementConfig(model) {\n    if (typeof model == 'string') {\n        model = { name: model };\n    }\n    return {\n        name: model.name,\n        attributes: model.attributes ? toArray(model.attributes) : [],\n        children: !!model.children\n    };\n}\n/**\n * Takes `config.view`, and if it is an {@link module:engine/view/elementdefinition~ElementDefinition}, converts it\n * to a function (because lower level converters accept only element creator functions).\n *\n * @param view View configuration.\n * @param viewElementType View element type to create.\n * @returns Element creator function to use in lower level converters.\n */\nfunction normalizeToElementConfig(view, viewElementType) {\n    if (typeof view == 'function') {\n        // If `view` is already a function, don't do anything.\n        return view;\n    }\n    return ((modelData, conversionApi) => createViewElementFromDefinition(view, conversionApi, viewElementType));\n}\n/**\n * Creates a view element instance from the provided {@link module:engine/view/elementdefinition~ElementDefinition} and class.\n */\nfunction createViewElementFromDefinition(viewElementDefinition, conversionApi, viewElementType) {\n    if (typeof viewElementDefinition == 'string') {\n        // If `viewElementDefinition` is given as a `String`, normalize it to an object with `name` property.\n        viewElementDefinition = { name: viewElementDefinition };\n    }\n    let element;\n    const viewWriter = conversionApi.writer;\n    const attributes = Object.assign({}, viewElementDefinition.attributes);\n    if (viewElementType == 'container') {\n        element = viewWriter.createContainerElement(viewElementDefinition.name, attributes);\n    }\n    else if (viewElementType == 'attribute') {\n        const options = {\n            priority: viewElementDefinition.priority || ViewAttributeElement.DEFAULT_PRIORITY\n        };\n        element = viewWriter.createAttributeElement(viewElementDefinition.name, attributes, options);\n    }\n    else {\n        // 'ui'.\n        element = viewWriter.createUIElement(viewElementDefinition.name, attributes);\n    }\n    if (viewElementDefinition.styles) {\n        const keys = Object.keys(viewElementDefinition.styles);\n        for (const key of keys) {\n            viewWriter.setStyle(key, viewElementDefinition.styles[key], element);\n        }\n    }\n    if (viewElementDefinition.classes) {\n        const classes = viewElementDefinition.classes;\n        if (typeof classes == 'string') {\n            viewWriter.addClass(classes, element);\n        }\n        else {\n            for (const className of classes) {\n                viewWriter.addClass(className, element);\n            }\n        }\n    }\n    return element;\n}\nfunction getFromAttributeCreator(config) {\n    if (config.model.values) {\n        return ((modelAttributeValue, conversionApi, data) => {\n            const view = config.view[modelAttributeValue];\n            if (view) {\n                return view(modelAttributeValue, conversionApi, data);\n            }\n            return null;\n        });\n    }\n    else {\n        return config.view;\n    }\n}\n/**\n * Takes the configuration, adds default parameters if they do not exist and normalizes other parameters to be used in downcast converters\n * for generating a view attribute.\n *\n * @param view View configuration.\n */\nfunction normalizeToAttributeConfig(view) {\n    if (typeof view == 'string') {\n        return modelAttributeValue => ({ key: view, value: modelAttributeValue });\n    }\n    else if (typeof view == 'object') {\n        // { key, value, ... }\n        if (view.value) {\n            return () => view;\n        }\n        // { key, ... }\n        else {\n            return modelAttributeValue => ({ key: view.key, value: modelAttributeValue });\n        }\n    }\n    else {\n        // function.\n        return view;\n    }\n}\n/**\n * Helper function for `highlight`. Prepares the actual descriptor object using value passed to the converter.\n */\nfunction prepareDescriptor(highlightDescriptor, data, conversionApi) {\n    // If passed descriptor is a creator function, call it. If not, just use passed value.\n    const descriptor = typeof highlightDescriptor == 'function' ?\n        highlightDescriptor(data, conversionApi) :\n        highlightDescriptor;\n    if (!descriptor) {\n        return null;\n    }\n    // Apply default descriptor priority.\n    if (!descriptor.priority) {\n        descriptor.priority = 10;\n    }\n    // Default descriptor id is marker name.\n    if (!descriptor.id) {\n        descriptor.id = data.markerName;\n    }\n    return descriptor;\n}\n/**\n * Creates a function that checks a single differ diff item whether it should trigger reconversion.\n *\n * @param model A normalized `config.model` converter configuration.\n * @param model.name The name of element.\n * @param model.attributes The list of attribute names that should trigger reconversion.\n * @param model.children Whether the child list change should trigger reconversion.\n */\nfunction createChangeReducerCallback(model) {\n    return (node, change) => {\n        if (!node.is('element', model.name)) {\n            return false;\n        }\n        if (change.type == 'attribute') {\n            if (model.attributes.includes(change.attributeKey)) {\n                return true;\n            }\n        }\n        else {\n            /* istanbul ignore else: This is always true because otherwise it would not register a reducer callback. -- @preserve */\n            if (model.children) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\n/**\n * Creates a `reduceChanges` event handler for reconversion.\n *\n * @param model A normalized `config.model` converter configuration.\n * @param model.name The name of element.\n * @param model.attributes The list of attribute names that should trigger reconversion.\n * @param model.children Whether the child list change should trigger reconversion.\n */\nfunction createChangeReducer(model) {\n    const shouldReplace = createChangeReducerCallback(model);\n    return (evt, data) => {\n        const reducedChanges = [];\n        if (!data.reconvertedElements) {\n            data.reconvertedElements = new Set();\n        }\n        for (const change of data.changes) {\n            // For attribute use node affected by the change.\n            // For insert or remove use parent element because we need to check if it's added/removed child.\n            const node = change.type == 'attribute' ? change.range.start.nodeAfter : change.position.parent;\n            if (!node || !shouldReplace(node, change)) {\n                reducedChanges.push(change);\n                continue;\n            }\n            // If it's already marked for reconversion, so skip this change, otherwise add the diff items.\n            if (!data.reconvertedElements.has(node)) {\n                data.reconvertedElements.add(node);\n                const position = ModelPosition._createBefore(node);\n                let changeIndex = reducedChanges.length;\n                // We need to insert remove+reinsert before any other change on and inside the re-converted element.\n                // This is important because otherwise we would remove element that had already been modified by the previous change.\n                // Note that there could be some element removed before the re-converted element, so we must not break this behavior.\n                for (let i = reducedChanges.length - 1; i >= 0; i--) {\n                    const change = reducedChanges[i];\n                    const changePosition = change.type == 'attribute' ? change.range.start : change.position;\n                    const positionRelation = changePosition.compareWith(position);\n                    if (positionRelation == 'before' || change.type == 'remove' && positionRelation == 'same') {\n                        break;\n                    }\n                    changeIndex = i;\n                }\n                reducedChanges.splice(changeIndex, 0, {\n                    type: 'remove',\n                    name: node.name,\n                    position,\n                    length: 1\n                }, {\n                    type: 'reinsert',\n                    name: node.name,\n                    position,\n                    length: 1\n                });\n            }\n        }\n        data.changes = reducedChanges;\n    };\n}\n/**\n * Creates a function that checks if an element and its watched attributes can be consumed and consumes them.\n *\n * @param model A normalized `config.model` converter configuration.\n * @param model.name The name of element.\n * @param model.attributes The list of attribute names that should trigger reconversion.\n * @param model.children Whether the child list change should trigger reconversion.\n */\nfunction createConsumer(model) {\n    return (node, consumable, options = {}) => {\n        const events = ['insert'];\n        // Collect all set attributes that are triggering conversion.\n        for (const attributeName of model.attributes) {\n            if (node.hasAttribute(attributeName)) {\n                events.push(`attribute:${attributeName}`);\n            }\n        }\n        if (!events.every(event => consumable.test(node, event))) {\n            return false;\n        }\n        if (!options.preflight) {\n            events.forEach(event => consumable.consume(node, event));\n        }\n        return true;\n    };\n}\n/**\n * Creates a function that create view slots.\n *\n * @returns Function exposed by writer as createSlot().\n */\nfunction createSlotFactory(element, slotsMap, conversionApi) {\n    return (writer, modeOrFilter) => {\n        const slot = writer.createContainerElement('$slot');\n        let children = null;\n        if (modeOrFilter === 'children') {\n            children = Array.from(element.getChildren());\n        }\n        else if (typeof modeOrFilter == 'function') {\n            children = Array.from(element.getChildren()).filter(element => modeOrFilter(element));\n        }\n        else {\n            /**\n             * Unknown slot mode was provided to `writer.createSlot()` in downcast converter.\n             *\n             * @error conversion-slot-mode-unknown\n             */\n            throw new CKEditorError('conversion-slot-mode-unknown', conversionApi.dispatcher, { modeOrFilter });\n        }\n        slotsMap.set(slot, children);\n        return slot;\n    };\n}\n/**\n * Checks if all children are covered by slots and there is no child that landed in multiple slots.\n */\nfunction validateSlotsChildren(element, slotsMap, conversionApi) {\n    const childrenInSlots = Array.from(slotsMap.values()).flat();\n    const uniqueChildrenInSlots = new Set(childrenInSlots);\n    if (uniqueChildrenInSlots.size != childrenInSlots.length) {\n        /**\n         * Filters provided to `writer.createSlot()` overlap (at least two filters accept the same child element).\n         *\n         * @error conversion-slot-filter-overlap\n         * @param {module:engine/model/element~Element} element The element of which children would not be properly\n         * allocated to multiple slots.\n         */\n        throw new CKEditorError('conversion-slot-filter-overlap', conversionApi.dispatcher, { element });\n    }\n    if (uniqueChildrenInSlots.size != element.childCount) {\n        /**\n         * Filters provided to `writer.createSlot()` are incomplete and exclude at least one children element (one of\n         * the children elements would not be assigned to any of the slots).\n         *\n         * @error conversion-slot-filter-incomplete\n         * @param {module:engine/model/element~Element} element The element of which children would not be properly\n         * allocated to multiple slots.\n         */\n        throw new CKEditorError('conversion-slot-filter-incomplete', conversionApi.dispatcher, { element });\n    }\n}\n/**\n * Fill slots with appropriate view elements.\n */\nfunction fillSlots(viewElement, slotsMap, conversionApi, options) {\n    // Set temporary position mapping to redirect child view elements into a proper slots.\n    conversionApi.mapper.on('modelToViewPosition', toViewPositionMapping, { priority: 'highest' });\n    let currentSlot = null;\n    let currentSlotNodes = null;\n    // Fill slots with nested view nodes.\n    for ([currentSlot, currentSlotNodes] of slotsMap) {\n        reinsertOrConvertNodes(viewElement, currentSlotNodes, conversionApi, options);\n        conversionApi.writer.move(conversionApi.writer.createRangeIn(currentSlot), conversionApi.writer.createPositionBefore(currentSlot));\n        conversionApi.writer.remove(currentSlot);\n    }\n    conversionApi.mapper.off('modelToViewPosition', toViewPositionMapping);\n    function toViewPositionMapping(evt, data) {\n        const element = data.modelPosition.nodeAfter;\n        // Find the proper offset within the slot.\n        const index = currentSlotNodes.indexOf(element);\n        if (index < 0) {\n            return;\n        }\n        data.viewPosition = data.mapper.findPositionIn(currentSlot, index);\n    }\n}\n/**\n * Inserts view representation of `nodes` into the `viewElement` either by bringing back just removed view nodes\n * or by triggering conversion for them.\n */\nfunction reinsertOrConvertNodes(viewElement, modelNodes, conversionApi, options) {\n    // Fill with nested view nodes.\n    for (const modelChildNode of modelNodes) {\n        // Try reinserting the view node for the specified model node...\n        if (!reinsertNode(viewElement.root, modelChildNode, conversionApi, options)) {\n            // ...or else convert the model element to the view.\n            conversionApi.convertItem(modelChildNode);\n        }\n    }\n}\n/**\n * Checks if the view for the given model element could be reused and reinserts it to the view.\n *\n * @returns `false` if view element can't be reused.\n */\nfunction reinsertNode(viewRoot, modelNode, conversionApi, options) {\n    const { writer, mapper } = conversionApi;\n    // Don't reinsert if this is not a reconversion...\n    if (!options.reconversion) {\n        return false;\n    }\n    const viewChildNode = mapper.toViewElement(modelNode);\n    // ...or there is no view to reinsert or it was already inserted to the view structure...\n    if (!viewChildNode || viewChildNode.root == viewRoot) {\n        return false;\n    }\n    // ...or it was strictly marked as not to be reused.\n    if (!conversionApi.canReuseView(viewChildNode)) {\n        return false;\n    }\n    // Otherwise reinsert the view node.\n    writer.move(writer.createRangeOn(viewChildNode), mapper.toViewPosition(ModelPosition._createBefore(modelNode)));\n    return true;\n}\n/**\n * The default consumer for insert events.\n *\n * @param item Model item.\n * @param consumable The model consumable.\n * @param options.preflight Whether should consume or just check if can be consumed.\n */\nfunction defaultConsumer(item, consumable, { preflight } = {}) {\n    if (preflight) {\n        return consumable.test(item, 'insert');\n    }\n    else {\n        return consumable.consume(item, 'insert');\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/autoparagraphing\n */\n/**\n * Fixes all empty roots.\n *\n * @internal\n * @param writer The model writer.\n * @returns `true` if any change has been applied, `false` otherwise.\n */\nexport function autoParagraphEmptyRoots(writer) {\n    const { schema, document } = writer.model;\n    for (const root of document.getRoots()) {\n        if (root.isEmpty && !schema.checkChild(root, '$text')) {\n            // If paragraph element is allowed in the root, create paragraph element.\n            if (schema.checkChild(root, 'paragraph')) {\n                writer.insertElement('paragraph', root);\n                // Other roots will get fixed in the next post-fixer round. Those will be triggered\n                // in the same batch no matter if this method was triggered by the post-fixing or not\n                // (the above insertElement call will trigger the post-fixers).\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * Checks if the given node wrapped with a paragraph would be accepted by the schema in the given position.\n *\n * @internal\n * @param position The position at which to check.\n * @param nodeOrType The child node or child type to check.\n * @param schema A schema instance used for element validation.\n */\nexport function isParagraphable(position, nodeOrType, schema) {\n    const context = schema.createContext(position);\n    // When paragraph is allowed in this context...\n    if (!schema.checkChild(context, 'paragraph')) {\n        return false;\n    }\n    // And a node would be allowed in this paragraph...\n    if (!schema.checkChild(context.push('paragraph'), nodeOrType)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Inserts a new paragraph at the given position and returns a position inside that paragraph.\n *\n * @internal\n * @param position The position where a paragraph should be inserted.\n * @param writer The model writer.\n * @returns  Position inside the created paragraph.\n */\nexport function wrapInParagraph(position, writer) {\n    const paragraph = writer.createElement('paragraph');\n    writer.insert(paragraph, position);\n    return writer.createPositionAt(paragraph, 0);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Matcher from '../view/matcher.js';\nimport ConversionHelpers from './conversionhelpers.js';\nimport { isParagraphable, wrapInParagraph } from '../model/utils/autoparagraphing.js';\nimport { priorities } from '@ckeditor/ckeditor5-utils';\nimport { cloneDeep } from 'lodash-es';\n/**\n * Contains the {@link module:engine/view/view view} to {@link module:engine/model/model model} converters for\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}.\n *\n * @module engine/conversion/upcasthelpers\n */\n/**\n * Upcast conversion helper functions.\n *\n * Learn more about {@glink framework/deep-dive/conversion/upcast upcast helpers}.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class UpcastHelpers extends ConversionHelpers {\n    /**\n     * View element to model element conversion helper.\n     *\n     * This conversion results in creating a model element. For example,\n     * view `<p>Foo</p>` becomes `<paragraph>Foo</paragraph>` in the model.\n     *\n     * Keep in mind that the element will be inserted only if it is allowed\n     * by {@link module:engine/model/schema~Schema schema} configuration.\n     *\n     * ```ts\n     * editor.conversion.for( 'upcast' ).elementToElement( {\n     * \tview: 'p',\n     * \tmodel: 'paragraph'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToElement( {\n     * \tview: 'p',\n     * \tmodel: 'paragraph',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToElement( {\n     * \tview: {\n     * \t\tname: 'p',\n     * \t\tclasses: 'fancy'\n     * \t},\n     * \tmodel: 'fancyParagraph'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToElement( {\n     * \tview: {\n     * \t\tname: 'p',\n     * \t\tclasses: 'heading'\n     * \t},\n     * \tmodel: ( viewElement, conversionApi ) => {\n     * \t\tconst modelWriter = conversionApi.writer;\n     *\n     * \t\treturn modelWriter.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );\n     * \t}\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.view Pattern matching all view elements which should be converted. If not set, the converter\n     * will fire for every view element.\n     * @param config.model Name of the model element, a model element instance or a function that takes a view element\n     * and {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API}\n     * and returns a model element. The model element will be inserted in the model.\n     * @param config.converterPriority Converter priority.\n     */\n    elementToElement(config) {\n        return this.add(upcastElementToElement(config));\n    }\n    /**\n     * View element to model attribute conversion helper.\n     *\n     * This conversion results in setting an attribute on a model node. For example, view `<strong>Foo</strong>` becomes\n     * `Foo` {@link module:engine/model/text~Text model text node} with `bold` attribute set to `true`.\n     *\n     * This helper is meant to set a model attribute on all the elements that are inside the converted element:\n     *\n     * ```\n     * <strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n     * ```\n     *\n     * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n     * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text. See\n     * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute} for comparison.\n     *\n     * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n     *\n     * ```ts\n     * editor.conversion.for( 'upcast' ).elementToAttribute( {\n     * \tview: 'strong',\n     * \tmodel: 'bold'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToAttribute( {\n     * \tview: 'strong',\n     * \tmodel: 'bold',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToAttribute( {\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tclasses: 'bold'\n     * \t},\n     * \tmodel: 'bold'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToAttribute( {\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tclasses: [ 'styled', 'styled-dark' ]\n     * \t},\n     * \tmodel: {\n     * \t\tkey: 'styled',\n     * \t\tvalue: 'dark'\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToAttribute( {\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tstyles: {\n     * \t\t\t'font-size': /[\\s\\S]+/\n     * \t\t}\n     * \t},\n     * \tmodel: {\n     * \t\tkey: 'fontSize',\n     * \t\tvalue: ( viewElement, conversionApi ) => {\n     * \t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n     * \t\t\tconst value = fontSize.substr( 0, fontSize.length - 2 );\n     *\n     * \t\t\tif ( value <= 10 ) {\n     * \t\t\t\treturn 'small';\n     * \t\t\t} else if ( value > 12 ) {\n     * \t\t\t\treturn 'big';\n     * \t\t\t}\n     *\n     * \t\t\treturn null;\n     * \t\t}\n     * \t}\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.view Pattern matching all view elements which should be converted.\n     * @param config.model Model attribute key or an object with `key` and `value` properties, describing\n     * the model attribute. `value` property may be set as a function that takes a view element and\n     * {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API} and returns the value.\n     * If `String` is given, the model attribute value will be set to `true`.\n     * @param config.converterPriority Converter priority. Defaults to `low`.\n     */\n    elementToAttribute(config) {\n        return this.add(upcastElementToAttribute(config));\n    }\n    /**\n     * View attribute to model attribute conversion helper.\n     *\n     * This conversion results in setting an attribute on a model node. For example, view `<img src=\"foo.jpg\"></img>` becomes\n     * `<imageBlock source=\"foo.jpg\"></imageBlock>` in the model.\n     *\n     * This helper is meant to convert view attributes from view elements which got converted to the model, so the view attribute\n     * is set only on the corresponding model node:\n     *\n     * ```\n     * <div class=\"dark\"><div>foo</div></div>    -->    <div dark=\"true\"><div>foo</div></div>\n     * ```\n     *\n     * Above, `class=\"dark\"` attribute is added only to the `<div>` elements that has it. This is in contrast to\n     * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute} which sets attributes for\n     * all the children in the model:\n     *\n     * ```\n     * <strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n     * ```\n     *\n     * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n     * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text.\n     *\n     * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n     *\n     * ```ts\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: 'src',\n     * \tmodel: 'source'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: { key: 'src' },\n     * \tmodel: 'source'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: { key: 'src' },\n     * \tmodel: 'source',\n     * \tconverterPriority: 'normal'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: {\n     * \t\tkey: 'data-style',\n     * \t\tvalue: /[\\s\\S]+/\n     * \t},\n     * \tmodel: 'styled'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: {\n     * \t\tname: 'img',\n     * \t\tkey: 'class',\n     * \t\tvalue: 'styled-dark'\n     * \t},\n     * \tmodel: {\n     * \t\tkey: 'styled',\n     * \t\tvalue: 'dark'\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: {\n     * \t\tkey: 'class',\n     * \t\tvalue: /styled-[\\S]+/\n     * \t},\n     * \tmodel: {\n     * \t\tkey: 'styled'\n     * \t\tvalue: ( viewElement, conversionApi ) => {\n     * \t\t\tconst regexp = /styled-([\\S]+)/;\n     * \t\t\tconst match = viewElement.getAttribute( 'class' ).match( regexp );\n     *\n     * \t\t\treturn match[ 1 ];\n     * \t\t}\n     * \t}\n     * } );\n     * ```\n     *\n     * Converting styles works a bit differently as it requires `view.styles` to be an object and by default\n     * a model attribute will be set to `true` by such a converter. You can set the model attribute to any value by providing the `value`\n     * callback that returns the desired value.\n     *\n     * ```ts\n     * // Default conversion of font-weight style will result in setting bold attribute to true.\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: {\n     * \t\tstyles: {\n     * \t\t\t'font-weight': 'bold'\n     * \t\t}\n     * \t},\n     * \tmodel: 'bold'\n     * } );\n     *\n     * // This converter will pass any style value to the `lineHeight` model attribute.\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: {\n     * \t\tstyles: {\n     * \t\t\t'line-height': /[\\s\\S]+/\n     * \t\t}\n     * \t},\n     * \tmodel: {\n     * \t\tkey: 'lineHeight',\n     * \t\tvalue: ( viewElement, conversionApi ) => viewElement.getStyle( 'line-height' )\n     * \t}\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.view Specifies which view attribute will be converted. If a `String` is passed,\n     * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n     * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n     * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n     * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n     * @param config.model Model attribute key or an object with `key` and `value` properties, describing\n     * the model attribute. `value` property may be set as a function that takes a view element and\n     * {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API} and returns the value.\n     * If `String` is given, the model attribute value will be same as view attribute value.\n     * @param config.converterPriority Converter priority. Defaults to `low`.\n     */\n    attributeToAttribute(config) {\n        return this.add(upcastAttributeToAttribute(config));\n    }\n    /**\n     * View element to model marker conversion helper.\n     *\n     * This conversion results in creating a model marker. For example, if the marker was stored in a view as an element:\n     * `<p>Fo<span data-marker=\"comment\" data-comment-id=\"7\"></span>o</p><p>B<span data-marker=\"comment\" data-comment-id=\"7\"></span>ar</p>`,\n     * after the conversion is done, the marker will be available in\n     * {@link module:engine/model/model~Model#markers model document markers}.\n     *\n     * **Note**: When this helper is used in the data upcast in combination with\n     * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToData `#markerToData()`} in the data downcast,\n     * then invalid HTML code (e.g. a span between table cells) may be produced by the latter converter.\n     *\n     * In most of the cases, the {@link #dataToMarker} should be used instead.\n     *\n     * ```ts\n     * editor.conversion.for( 'upcast' ).elementToMarker( {\n     * \tview: 'marker-search',\n     * \tmodel: 'search'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToMarker( {\n     * \tview: 'marker-search',\n     * \tmodel: 'search',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToMarker( {\n     * \tview: 'marker-search',\n     * \tmodel: ( viewElement, conversionApi ) => 'comment:' + viewElement.getAttribute( 'data-comment-id' )\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToMarker( {\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tattributes: {\n     * \t\t\t'data-marker': 'search'\n     * \t\t}\n     * \t},\n     * \tmodel: 'search'\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.view Pattern matching all view elements which should be converted.\n     * @param config.model Name of the model marker, or a function that takes a view element and returns\n     * a model marker name.\n     * @param config.converterPriority Converter priority.\n     */\n    elementToMarker(config) {\n        return this.add(upcastElementToMarker(config));\n    }\n    /**\n     * View-to-model marker conversion helper.\n     *\n     * Converts view data created by {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToData `#markerToData()`}\n     * back to a model marker.\n     *\n     * This converter looks for specific view elements and view attributes that mark marker boundaries. See\n     * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToData `#markerToData()`} to learn what view data\n     * is expected by this converter.\n     *\n     * The `config.view` property is equal to the marker group name to convert.\n     *\n     * By default, this converter creates markers with the `group:name` name convention (to match the default `markerToData` conversion).\n     *\n     * The conversion configuration can take a function that will generate a marker name.\n     * If such function is set as the `config.model` parameter, it is passed the `name` part from the view element or attribute and it is\n     * expected to return a string with the marker name.\n     *\n     * Basic usage:\n     *\n     * ```ts\n     * // Using the default conversion.\n     * // In this case, all markers from the `comment` group will be converted.\n     * // The conversion will look for `<comment-start>` and `<comment-end>` tags and\n     * // `data-comment-start-before`, `data-comment-start-after`,\n     * // `data-comment-end-before` and `data-comment-end-after` attributes.\n     * editor.conversion.for( 'upcast' ).dataToMarker( {\n     * \tview: 'comment'\n     * } );\n     * ```\n     *\n     * An example of a model that may be generated by this conversion:\n     *\n     * ```\n     * // View:\n     * <p>Foo<comment-start name=\"commentId:uid\"></comment-start>bar</p>\n     * <figure data-comment-end-after=\"commentId:uid\" class=\"image\"><img src=\"abc.jpg\" /></figure>\n     *\n     * // Model:\n     * <paragraph>Foo[bar</paragraph>\n     * <imageBlock src=\"abc.jpg\"></imageBlock>]\n     * ```\n     *\n     * Where `[]` are boundaries of a marker that will receive the `comment:commentId:uid` name.\n     *\n     * Other examples of usage:\n     *\n     * ```ts\n     * // Using a custom function which is the same as the default conversion:\n     * editor.conversion.for( 'upcast' ).dataToMarker( {\n     * \tview: 'comment',\n     * \tmodel: ( name, conversionApi ) => 'comment:' + name,\n     * } );\n     *\n     * // Using the converter priority:\n     * editor.conversion.for( 'upcast' ).dataToMarker( {\n     * \tview: 'comment',\n     * \tmodel: ( name, conversionApi ) => 'comment:' + name,\n     * \tconverterPriority: 'high'\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.view The marker group name to convert.\n     * @param config.model A function that takes the `name` part from the view element or attribute and\n     * {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API} and returns the marker name.\n     * @param config.converterPriority Converter priority.\n     */\n    dataToMarker(config) {\n        return this.add(upcastDataToMarker(config));\n    }\n}\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * or all children of {@link module:engine/view/element~Element} into\n * {@link module:engine/model/documentfragment~DocumentFragment model document fragment}.\n * This is the \"entry-point\" converter for upcast (view to model conversion). This converter starts the conversion of all children\n * of passed view document fragment. Those children {@link module:engine/view/node~Node view nodes} are then handled by other converters.\n *\n * This also a \"default\", last resort converter for all view elements that has not been converted by other converters.\n * When a view element is being converted to the model but it does not have converter specified, that view element\n * will be converted to {@link module:engine/model/documentfragment~DocumentFragment model document fragment} and returned.\n *\n * @returns Universal converter for view {@link module:engine/view/documentfragment~DocumentFragment fragments} and\n * {@link module:engine/view/element~Element elements} that returns\n * {@link module:engine/model/documentfragment~DocumentFragment model fragment} with children of converted view item.\n */\nexport function convertToModelFragment() {\n    return (evt, data, conversionApi) => {\n        // Second argument in `consumable.consume` is discarded for ViewDocumentFragment but is needed for ViewElement.\n        if (!data.modelRange && conversionApi.consumable.consume(data.viewItem, { name: true })) {\n            const { modelRange, modelCursor } = conversionApi.convertChildren(data.viewItem, data.modelCursor);\n            data.modelRange = modelRange;\n            data.modelCursor = modelCursor;\n        }\n    };\n}\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/text~Text} to {@link module:engine/model/text~Text}.\n *\n * @returns {@link module:engine/view/text~Text View text} converter.\n */\nexport function convertText() {\n    return (evt, data, { schema, consumable, writer }) => {\n        let position = data.modelCursor;\n        // When node is already converted then do nothing.\n        if (!consumable.test(data.viewItem)) {\n            return;\n        }\n        if (!schema.checkChild(position, '$text')) {\n            if (!isParagraphable(position, '$text', schema)) {\n                return;\n            }\n            // Do not auto-paragraph whitespaces.\n            if (data.viewItem.data.trim().length == 0) {\n                return;\n            }\n            position = wrapInParagraph(position, writer);\n        }\n        consumable.consume(data.viewItem);\n        const text = writer.createText(data.viewItem.data);\n        writer.insert(text, position);\n        data.modelRange = writer.createRange(position, position.getShiftedBy(text.offsetSize));\n        data.modelCursor = data.modelRange.end;\n    };\n}\n/**\n * Function factory, creates a callback function which converts a {@link module:engine/view/selection~Selection\n * view selection} taken from the {@link module:engine/view/document~Document#event:selectionChange} event\n * and sets in on the {@link module:engine/model/document~Document#selection model}.\n *\n * **Note**: because there is no view selection change dispatcher nor any other advanced view selection to model\n * conversion mechanism, the callback should be set directly on view document.\n *\n * ```ts\n * view.document.on( 'selectionChange', convertSelectionChange( modelDocument, mapper ) );\n * ```\n *\n * @param model Data model.\n * @param mapper Conversion mapper.\n * @returns {@link module:engine/view/document~Document#event:selectionChange} callback function.\n */\nexport function convertSelectionChange(model, mapper) {\n    return (evt, data) => {\n        const viewSelection = data.newSelection;\n        const ranges = [];\n        for (const viewRange of viewSelection.getRanges()) {\n            ranges.push(mapper.toModelRange(viewRange));\n        }\n        const modelSelection = model.createSelection(ranges, { backward: viewSelection.isBackward });\n        if (!modelSelection.isEqual(model.document.selection)) {\n            model.change(writer => {\n                writer.setSelection(modelSelection);\n            });\n        }\n    };\n}\n/**\n * View element to model element conversion helper.\n *\n * See {@link ~UpcastHelpers#elementToElement `.elementToElement()` upcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.view Pattern matching all view elements which should be converted. If not\n * set, the converter will fire for every view element.\n * @param config.model Name of the model element, a model element\n * instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction upcastElementToElement(config) {\n    config = cloneDeep(config);\n    const converter = prepareToElementConverter(config);\n    const elementName = getViewElementNameFromConfig(config.view);\n    const eventName = elementName ? `element:${elementName}` : 'element';\n    return (dispatcher) => {\n        dispatcher.on(eventName, converter, { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * View element to model attribute conversion helper.\n *\n * See {@link ~UpcastHelpers#elementToAttribute `.elementToAttribute()` upcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.view Pattern matching all view elements which should be converted.\n * @param config.model Model attribute key or an object with `key` and `value` properties, describing\n * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n * If `String` is given, the model attribute value will be set to `true`.\n * @param config.converterPriority Converter priority. Defaults to `low`.\n * @returns Conversion helper.\n */\nfunction upcastElementToAttribute(config) {\n    config = cloneDeep(config);\n    normalizeModelAttributeConfig(config);\n    const converter = prepareToAttributeConverter(config, false);\n    const elementName = getViewElementNameFromConfig(config.view);\n    const eventName = elementName ? `element:${elementName}` : 'element';\n    return (dispatcher) => {\n        dispatcher.on(eventName, converter, { priority: config.converterPriority || 'low' });\n    };\n}\n/**\n * View attribute to model attribute conversion helper.\n *\n * See {@link ~UpcastHelpers#attributeToAttribute `.attributeToAttribute()` upcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.view Specifies which view attribute will be converted. If a `String` is passed,\n * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n * @param config.model Model attribute key or an object with `key` and `value` properties, describing\n * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n * If `String` is given, the model attribute value will be same as view attribute value.\n * @param config.converterPriority Converter priority. Defaults to `low`.\n * @returns Conversion helper.\n */\nfunction upcastAttributeToAttribute(config) {\n    config = cloneDeep(config);\n    let viewKey = null;\n    if (typeof config.view == 'string' || config.view.key) {\n        viewKey = normalizeViewAttributeKeyValueConfig(config);\n    }\n    normalizeModelAttributeConfig(config, viewKey);\n    const converter = prepareToAttributeConverter(config, true);\n    return (dispatcher) => {\n        dispatcher.on('element', converter, { priority: config.converterPriority || 'low' });\n    };\n}\n/**\n * View element to model marker conversion helper.\n *\n * See {@link ~UpcastHelpers#elementToMarker `.elementToMarker()` upcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.view Pattern matching all view elements which should be converted.\n * @param config.model Name of the model marker, or a function that takes a view element and returns\n * a model marker name.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction upcastElementToMarker(config) {\n    const model = normalizeElementToMarkerModelConfig(config.model);\n    return upcastElementToElement({ ...config, model });\n}\n/**\n * View data to model marker conversion helper.\n *\n * See {@link ~UpcastHelpers#dataToMarker} to learn more.\n *\n * @returns Conversion helper.\n */\nfunction upcastDataToMarker(config) {\n    config = cloneDeep(config);\n    // Default conversion.\n    if (!config.model) {\n        config.model = name => {\n            return name ? config.view + ':' + name : config.view;\n        };\n    }\n    const normalizedConfig = {\n        view: config.view,\n        model: config.model\n    };\n    const converterStart = prepareToElementConverter(normalizeDataToMarkerConfig(normalizedConfig, 'start'));\n    const converterEnd = prepareToElementConverter(normalizeDataToMarkerConfig(normalizedConfig, 'end'));\n    return (dispatcher) => {\n        dispatcher.on(`element:${config.view}-start`, converterStart, { priority: config.converterPriority || 'normal' });\n        dispatcher.on(`element:${config.view}-end`, converterEnd, { priority: config.converterPriority || 'normal' });\n        // Below is a hack that is needed to properly handle `converterPriority` for both elements and attributes.\n        // Attribute conversion needs to be performed *after* element conversion.\n        // This converter handles both element conversion and attribute conversion, which means that if a single\n        // `config.converterPriority` is used, it will lead to problems. For example, if the `'high'` priority is used,\n        // the attribute conversion will be performed before a lot of element upcast converters.\n        // On the other hand, we want to support `config.converterPriority` and converter overwriting.\n        //\n        // To make it work, we need to do some extra processing for priority for attribute converter.\n        // Priority `'low'` value should be the base value and then we will change it depending on `config.converterPriority` value.\n        //\n        // This hack probably would not be needed if attributes are upcasted separately.\n        //\n        const basePriority = priorities.low;\n        const maxPriority = priorities.highest;\n        const priorityFactor = priorities.get(config.converterPriority) / maxPriority; // Number in range [ -1, 1 ].\n        dispatcher.on('element', upcastAttributeToMarker(normalizedConfig), { priority: basePriority + priorityFactor });\n    };\n}\n/**\n * Function factory, returns a callback function which converts view attributes to a model marker.\n *\n * The converter looks for elements with `data-group-start-before`, `data-group-start-after`, `data-group-end-before`\n * and `data-group-end-after` attributes and inserts `$marker` model elements before/after those elements.\n * `group` part is specified in `config.view`.\n *\n * @returns Marker converter.\n */\nfunction upcastAttributeToMarker(config) {\n    return (evt, data, conversionApi) => {\n        const attrName = `data-${config.view}`;\n        // Check if any attribute for the given view item can be consumed before changing the conversion data\n        // and consuming view items with these attributes.\n        if (!conversionApi.consumable.test(data.viewItem, { attributes: attrName + '-end-after' }) &&\n            !conversionApi.consumable.test(data.viewItem, { attributes: attrName + '-start-after' }) &&\n            !conversionApi.consumable.test(data.viewItem, { attributes: attrName + '-end-before' }) &&\n            !conversionApi.consumable.test(data.viewItem, { attributes: attrName + '-start-before' })) {\n            return;\n        }\n        // This converter wants to add a model element, marking a marker, before/after an element (or maybe even group of elements).\n        // To do that, we can use `data.modelRange` which is set on an element (or a group of elements) that has been upcasted.\n        // But, if the processed view element has not been upcasted yet (it does not have been converted), we need to\n        // fire conversion for its children first, then we will have `data.modelRange` available.\n        if (!data.modelRange) {\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        if (conversionApi.consumable.consume(data.viewItem, { attributes: attrName + '-end-after' })) {\n            addMarkerElements(data.modelRange.end, data.viewItem.getAttribute(attrName + '-end-after').split(','));\n        }\n        if (conversionApi.consumable.consume(data.viewItem, { attributes: attrName + '-start-after' })) {\n            addMarkerElements(data.modelRange.end, data.viewItem.getAttribute(attrName + '-start-after').split(','));\n        }\n        if (conversionApi.consumable.consume(data.viewItem, { attributes: attrName + '-end-before' })) {\n            addMarkerElements(data.modelRange.start, data.viewItem.getAttribute(attrName + '-end-before').split(','));\n        }\n        if (conversionApi.consumable.consume(data.viewItem, { attributes: attrName + '-start-before' })) {\n            addMarkerElements(data.modelRange.start, data.viewItem.getAttribute(attrName + '-start-before').split(','));\n        }\n        function addMarkerElements(position, markerViewNames) {\n            for (const markerViewName of markerViewNames) {\n                const markerName = config.model(markerViewName, conversionApi);\n                const element = conversionApi.writer.createElement('$marker', { 'data-name': markerName });\n                conversionApi.writer.insert(element, position);\n                if (data.modelCursor.isEqual(position)) {\n                    data.modelCursor = data.modelCursor.getShiftedBy(1);\n                }\n                else {\n                    data.modelCursor = data.modelCursor._getTransformedByInsertion(position, 1);\n                }\n                data.modelRange = data.modelRange._getTransformedByInsertion(position, 1)[0];\n            }\n        }\n    };\n}\n/**\n * Helper function for from-view-element conversion. Checks if `config.view` directly specifies converted view element's name\n * and if so, returns it.\n *\n * @param config Conversion view config.\n * @returns View element name or `null` if name is not directly set.\n */\nfunction getViewElementNameFromConfig(viewConfig) {\n    if (typeof viewConfig == 'string') {\n        return viewConfig;\n    }\n    if (typeof viewConfig == 'object' && typeof viewConfig.name == 'string') {\n        return viewConfig.name;\n    }\n    return null;\n}\n/**\n * Helper for to-model-element conversion. Takes a config object and returns a proper converter function.\n *\n * @param config Conversion configuration.\n * @returns View to model converter.\n */\nfunction prepareToElementConverter(config) {\n    const matcher = new Matcher(config.view);\n    return (evt, data, conversionApi) => {\n        const matcherResult = matcher.match(data.viewItem);\n        if (!matcherResult) {\n            return;\n        }\n        const match = matcherResult.match;\n        // Force consuming element's name.\n        match.name = true;\n        if (!conversionApi.consumable.test(data.viewItem, match)) {\n            return;\n        }\n        const modelElement = getModelElement(config.model, data.viewItem, conversionApi);\n        if (!modelElement) {\n            return;\n        }\n        if (!conversionApi.safeInsert(modelElement, data.modelCursor)) {\n            return;\n        }\n        conversionApi.consumable.consume(data.viewItem, match);\n        conversionApi.convertChildren(data.viewItem, modelElement);\n        conversionApi.updateConversionResult(modelElement, data);\n    };\n}\n/**\n * Helper function for upcasting-to-element converter. Takes the model configuration, the converted view element\n * and a writer instance and returns a model element instance to be inserted in the model.\n *\n * @param model Model conversion configuration.\n * @param input The converted view node.\n * @param conversionApi The upcast conversion API.\n */\nfunction getModelElement(model, input, conversionApi) {\n    if (model instanceof Function) {\n        return model(input, conversionApi);\n    }\n    else {\n        return conversionApi.writer.createElement(model);\n    }\n}\n/**\n * Helper function view-attribute-to-model-attribute helper. Normalizes `config.view` which was set as `String` or\n * as an `Object` with `key`, `value` and `name` properties. Normalized `config.view` has is compatible with\n * {@link module:engine/view/matcher~MatcherPattern}.\n *\n * @param config Conversion config.\n * @returns Key of the converted view attribute.\n */\nfunction normalizeViewAttributeKeyValueConfig(config) {\n    if (typeof config.view == 'string') {\n        config.view = { key: config.view };\n    }\n    const key = config.view.key;\n    const value = typeof config.view.value == 'undefined' ? /[\\s\\S]*/ : config.view.value;\n    let normalized;\n    if (key == 'class' || key == 'style') {\n        const keyName = key == 'class' ? 'classes' : 'styles';\n        normalized = {\n            [keyName]: value\n        };\n    }\n    else {\n        normalized = {\n            attributes: {\n                [key]: value\n            }\n        };\n    }\n    if (config.view.name) {\n        normalized.name = config.view.name;\n    }\n    config.view = normalized;\n    return key;\n}\n/**\n * Helper function that normalizes `config.model` in from-model-attribute conversion. `config.model` can be set\n * as a `String`, an `Object` with only `key` property or an `Object` with `key` and `value` properties. Normalized\n * `config.model` is an `Object` with `key` and `value` properties.\n *\n * @param config Conversion config.\n * @param viewAttributeKeyToCopy Key of the converted view attribute. If it is set, model attribute value\n * will be equal to view attribute value.\n */\nfunction normalizeModelAttributeConfig(config, viewAttributeKeyToCopy = null) {\n    const defaultModelValue = viewAttributeKeyToCopy === null ? true :\n        (viewElement) => viewElement.getAttribute(viewAttributeKeyToCopy);\n    const key = typeof config.model != 'object' ? config.model : config.model.key;\n    const value = typeof config.model != 'object' || typeof config.model.value == 'undefined' ? defaultModelValue : config.model.value;\n    config.model = { key, value };\n}\n/**\n * Helper for to-model-attribute conversion. Takes the model attribute name and conversion configuration and returns\n * a proper converter function.\n *\n * @param config Conversion configuration. It is possible to provide multiple configurations in an array.\n * @param shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n * on all elements in the range.\n */\nfunction prepareToAttributeConverter(config, shallow) {\n    const matcher = new Matcher(config.view);\n    return (evt, data, conversionApi) => {\n        // Converting an attribute of an element that has not been converted to anything does not make sense\n        // because there will be nowhere to set that attribute on. At this stage, the element should've already\n        // been converted (https://github.com/ckeditor/ckeditor5/issues/11000).\n        if (!data.modelRange && shallow) {\n            return;\n        }\n        const match = matcher.match(data.viewItem);\n        // If there is no match, this callback should not do anything.\n        if (!match) {\n            return;\n        }\n        if (onlyViewNameIsDefined(config.view, data.viewItem)) {\n            match.match.name = true;\n        }\n        else {\n            // Do not test `name` consumable because it could get consumed already while upcasting some other attribute\n            // on the same element (for example <span class=\"big\" style=\"color: red\">foo</span>).\n            delete match.match.name;\n        }\n        // Try to consume appropriate values from consumable values list.\n        if (!conversionApi.consumable.test(data.viewItem, match.match)) {\n            return;\n        }\n        const modelKey = config.model.key;\n        const modelValue = typeof config.model.value == 'function' ?\n            config.model.value(data.viewItem, conversionApi) : config.model.value;\n        // Do not convert if attribute building function returned falsy value.\n        if (modelValue === null) {\n            return;\n        }\n        // Since we are converting to attribute we need a range on which we will set the attribute.\n        // If the range is not created yet, let's create it by converting children of the current node first.\n        if (!data.modelRange) {\n            // Convert children and set conversion result as a current data.\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        // Set attribute on current `output`. `Schema` is checked inside this helper function.\n        const attributeWasSet = setAttributeOn(data.modelRange, { key: modelKey, value: modelValue }, shallow, conversionApi);\n        // It may happen that a converter will try to set an attribute that is not allowed in the given context.\n        // In such a situation we cannot consume the attribute. See: https://github.com/ckeditor/ckeditor5/pull/9249#issuecomment-815658459.\n        if (attributeWasSet) {\n            // Verify if the element itself wasn't consumed yet. It could be consumed already while upcasting some other attribute\n            // on the same element (for example <span class=\"big\" style=\"color: red\">foo</span>).\n            // We need to consume it so other features (especially GHS) won't try to convert it.\n            // Note that it's not tested by the other element-to-attribute converters whether an element was consumed before\n            // (in case of converters that the element itself is just a context and not the primary information to convert).\n            if (conversionApi.consumable.test(data.viewItem, { name: true })) {\n                match.match.name = true;\n            }\n            conversionApi.consumable.consume(data.viewItem, match.match);\n        }\n    };\n}\n/**\n * Helper function that checks if element name should be consumed in attribute converters.\n *\n * @param viewConfig Conversion view config.\n */\nfunction onlyViewNameIsDefined(viewConfig, viewItem) {\n    // https://github.com/ckeditor/ckeditor5-engine/issues/1786\n    const configToTest = typeof viewConfig == 'function' ? viewConfig(viewItem) : viewConfig;\n    if (typeof configToTest == 'object' && !getViewElementNameFromConfig(configToTest)) {\n        return false;\n    }\n    return !configToTest.classes && !configToTest.attributes && !configToTest.styles;\n}\n/**\n * Helper function for to-model-attribute converter. Sets model attribute on given range. Checks {@link module:engine/model/schema~Schema}\n * to ensure proper model structure.\n *\n * If any node on the given range has already defined an attribute with the same name, its value will not be updated.\n *\n * @param modelRange Model range on which attribute should be set.\n * @param modelAttribute Model attribute to set.\n * @param conversionApi Conversion API.\n * @param shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n * on all elements in the range.\n * @returns `true` if attribute was set on at least one node from given `modelRange`.\n */\nfunction setAttributeOn(modelRange, modelAttribute, shallow, conversionApi) {\n    let result = false;\n    // Set attribute on each item in range according to Schema.\n    for (const node of Array.from(modelRange.getItems({ shallow }))) {\n        // Skip if not allowed.\n        if (!conversionApi.schema.checkAttribute(node, modelAttribute.key)) {\n            continue;\n        }\n        // Mark the node as consumed even if the attribute will not be updated because it's in a valid context (schema)\n        // and would be converted if the attribute wouldn't be present. See #8921.\n        result = true;\n        // Do not override the attribute if it's already present.\n        if (node.hasAttribute(modelAttribute.key)) {\n            continue;\n        }\n        conversionApi.writer.setAttribute(modelAttribute.key, modelAttribute.value, node);\n    }\n    return result;\n}\n/**\n * Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastElementToMarker()`\n * function and converts it to a format that is supported by `upcastElementToElement()` function.\n */\nfunction normalizeElementToMarkerModelConfig(model) {\n    return (viewElement, conversionApi) => {\n        const markerName = typeof model == 'string' ? model : model(viewElement, conversionApi);\n        return conversionApi.writer.createElement('$marker', { 'data-name': markerName });\n    };\n}\n/**\n * Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastDataToMarker()`\n * function and converts it to a format that is supported by `upcastElementToElement()` function.\n */\nfunction normalizeDataToMarkerConfig(config, type) {\n    const elementCreatorFunction = (viewElement, conversionApi) => {\n        const viewName = viewElement.getAttribute('name');\n        const markerName = config.model(viewName, conversionApi);\n        return conversionApi.writer.createElement('$marker', { 'data-name': markerName });\n    };\n    return {\n        // Upcast <markerGroup-start> and <markerGroup-end> elements.\n        view: `${config.view}-${type}`,\n        model: elementCreatorFunction\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/selection-post-fixer\n */\nimport Position from '../position.js';\nimport Range from '../range.js';\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isSelectable selectable elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><imageBlock></imageBlock>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n * ```\n * root\n *  |- element P1\n *  |   |- \"foo\"                                      root\n *  |- element TABLE (l)                   P1         TABLE             P2\n *  |   |- element TR (l)                 f o[o     TR      TR         b a r\n *  |   |   |- element TD (l)                       TD      TD\n *  |   |       |- \"aaa\"                          a]a a    b b b\n *  |   |- element TR (l)\n *  |   |   |- element TD (l)                           ||\n *  |   |       |- \"bbb\"                                ||\n *  |- element P2                                       VV\n *  |   |- \"bar\"\n *                                                    root\n *                                         P1         TABLE]            P2\n *                                        f o[o     TR      TR         b a r\n *                                                  TD      TD\n *                                                a a a    b b b\n * ```\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n */\nexport function injectSelectionPostFixer(model) {\n    model.document.registerPostFixer(writer => selectionPostFixer(writer, model));\n}\n/**\n * The selection post-fixer.\n */\nfunction selectionPostFixer(writer, model) {\n    const selection = model.document.selection;\n    const schema = model.schema;\n    const ranges = [];\n    let wasFixed = false;\n    for (const modelRange of selection.getRanges()) {\n        // Go through all ranges in selection and try fixing each of them.\n        // Those ranges might overlap but will be corrected later.\n        const correctedRange = tryFixingRange(modelRange, schema);\n        // \"Selection fixing\" algorithms sometimes get lost. In consequence, it may happen\n        // that a new range is returned but, in fact, it has the same positions as the original\n        // range anyway. If this range is not discarded, a new selection will be set and that,\n        // for instance, would destroy the selection attributes. Let's make sure that the post-fixer\n        // actually worked first before setting a new selection.\n        //\n        // https://github.com/ckeditor/ckeditor5/issues/6693\n        if (correctedRange && !correctedRange.isEqual(modelRange)) {\n            ranges.push(correctedRange);\n            wasFixed = true;\n        }\n        else {\n            ranges.push(modelRange);\n        }\n    }\n    // If any of ranges were corrected update the selection.\n    if (wasFixed) {\n        writer.setSelection(mergeIntersectingRanges(ranges), { backward: selection.isBackward });\n    }\n    return false;\n}\n/**\n * Tries fixing a range if it's incorrect.\n *\n * **Note:** This helper is used by the selection post-fixer and to fix the `beforeinput` target ranges.\n *\n * @returns Returns fixed range or null if range is valid.\n */\nexport function tryFixingRange(range, schema) {\n    if (range.isCollapsed) {\n        return tryFixingCollapsedRange(range, schema);\n    }\n    return tryFixingNonCollapsedRage(range, schema);\n}\n/**\n * Tries to fix collapsed ranges.\n *\n * * Fixes situation when a range is in a place where $text is not allowed\n *\n * @param range Collapsed range to fix.\n * @returns Returns fixed range or null if range is valid.\n */\nfunction tryFixingCollapsedRange(range, schema) {\n    const originalPosition = range.start;\n    const nearestSelectionRange = schema.getNearestSelectionRange(originalPosition);\n    // This might be null, i.e. when the editor data is empty or the selection is inside a limit element\n    // that doesn't allow text inside.\n    // In the first case, there is no need to fix the selection range.\n    // In the second, let's go up to the outer selectable element\n    if (!nearestSelectionRange) {\n        const ancestorObject = originalPosition.getAncestors().reverse().find((item) => schema.isObject(item));\n        if (ancestorObject) {\n            return Range._createOn(ancestorObject);\n        }\n        return null;\n    }\n    if (!nearestSelectionRange.isCollapsed) {\n        return nearestSelectionRange;\n    }\n    const fixedPosition = nearestSelectionRange.start;\n    // Fixed position is the same as original - no need to return corrected range.\n    if (originalPosition.isEqual(fixedPosition)) {\n        return null;\n    }\n    return new Range(fixedPosition);\n}\n/**\n * Tries to fix an expanded range.\n *\n * @param range Expanded range to fix.\n * @returns Returns fixed range or null if range is valid.\n */\nfunction tryFixingNonCollapsedRage(range, schema) {\n    const { start, end } = range;\n    const isTextAllowedOnStart = schema.checkChild(start, '$text');\n    const isTextAllowedOnEnd = schema.checkChild(end, '$text');\n    const startLimitElement = schema.getLimitElement(start);\n    const endLimitElement = schema.getLimitElement(end);\n    // Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n    if (startLimitElement === endLimitElement) {\n        // Range is valid when both position allows to place a text:\n        // - <block>f[oobarba]z</block>\n        // This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n        if (isTextAllowedOnStart && isTextAllowedOnEnd) {\n            return null;\n        }\n        // Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n        // - [<block>foo</block>]    ->    <block>[foo]</block>\n        // - [<block>foo]</block>    ->    <block>[foo]</block>\n        // - <block>f[oo</block>]    ->    <block>f[oo]</block>\n        // - [<block>foo</block><selectable></selectable>]    ->    <block>[foo</block><selectable></selectable>]\n        if (checkSelectionOnNonLimitElements(start, end, schema)) {\n            const isStartBeforeSelectable = start.nodeAfter && schema.isSelectable(start.nodeAfter);\n            const fixedStart = isStartBeforeSelectable ? null : schema.getNearestSelectionRange(start, 'forward');\n            const isEndAfterSelectable = end.nodeBefore && schema.isSelectable(end.nodeBefore);\n            const fixedEnd = isEndAfterSelectable ? null : schema.getNearestSelectionRange(end, 'backward');\n            // The schema.getNearestSelectionRange might return null - if that happens use original position.\n            const rangeStart = fixedStart ? fixedStart.start : start;\n            const rangeEnd = fixedEnd ? fixedEnd.end : end;\n            return new Range(rangeStart, rangeEnd);\n        }\n    }\n    const isStartInLimit = startLimitElement && !startLimitElement.is('rootElement');\n    const isEndInLimit = endLimitElement && !endLimitElement.is('rootElement');\n    // At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n    // then the range crossed limit element boundaries and needs to be fixed.\n    if (isStartInLimit || isEndInLimit) {\n        const bothInSameParent = (start.nodeAfter && end.nodeBefore) && start.nodeAfter.parent === end.nodeBefore.parent;\n        const expandStart = isStartInLimit && (!bothInSameParent || !isSelectable(start.nodeAfter, schema));\n        const expandEnd = isEndInLimit && (!bothInSameParent || !isSelectable(end.nodeBefore, schema));\n        // Although we've already found limit element on start/end positions we must find the outer-most limit element.\n        // as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n        let fixedStart = start;\n        let fixedEnd = end;\n        if (expandStart) {\n            fixedStart = Position._createBefore(findOutermostLimitAncestor(startLimitElement, schema));\n        }\n        if (expandEnd) {\n            fixedEnd = Position._createAfter(findOutermostLimitAncestor(endLimitElement, schema));\n        }\n        return new Range(fixedStart, fixedEnd);\n    }\n    // Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n    return null;\n}\n/**\n * Finds the outer-most ancestor.\n */\nfunction findOutermostLimitAncestor(startingNode, schema) {\n    let isLimitNode = startingNode;\n    let parent = isLimitNode;\n    // Find outer most isLimit block as such blocks might be nested (ie. in tables).\n    while (schema.isLimit(parent) && parent.parent) {\n        isLimitNode = parent;\n        parent = parent.parent;\n    }\n    return isLimitNode;\n}\n/**\n * Checks whether any of range boundaries is placed around non-limit elements.\n */\nfunction checkSelectionOnNonLimitElements(start, end, schema) {\n    const startIsOnBlock = (start.nodeAfter && !schema.isLimit(start.nodeAfter)) || schema.checkChild(start, '$text');\n    const endIsOnBlock = (end.nodeBefore && !schema.isLimit(end.nodeBefore)) || schema.checkChild(end, '$text');\n    // We should fix such selection when one of those nodes needs fixing.\n    return startIsOnBlock || endIsOnBlock;\n}\n/**\n * Returns a minimal non-intersecting array of ranges without duplicates.\n *\n * @param ranges Ranges to merge.\n * @returns Array of unique and non-intersecting ranges.\n */\nexport function mergeIntersectingRanges(ranges) {\n    const rangesToMerge = [...ranges];\n    const rangeIndexesToRemove = new Set();\n    let currentRangeIndex = 1;\n    while (currentRangeIndex < rangesToMerge.length) {\n        const currentRange = rangesToMerge[currentRangeIndex];\n        const previousRanges = rangesToMerge.slice(0, currentRangeIndex);\n        for (const [previousRangeIndex, previousRange] of previousRanges.entries()) {\n            if (rangeIndexesToRemove.has(previousRangeIndex)) {\n                continue;\n            }\n            if (currentRange.isEqual(previousRange)) {\n                rangeIndexesToRemove.add(previousRangeIndex);\n            }\n            else if (currentRange.isIntersecting(previousRange)) {\n                rangeIndexesToRemove.add(previousRangeIndex);\n                rangeIndexesToRemove.add(currentRangeIndex);\n                const mergedRange = currentRange.getJoined(previousRange);\n                rangesToMerge.push(mergedRange);\n            }\n        }\n        currentRangeIndex++;\n    }\n    const nonIntersectingRanges = rangesToMerge.filter((_, index) => !rangeIndexesToRemove.has(index));\n    return nonIntersectingRanges;\n}\n/**\n * Checks if node exists and if it's a selectable.\n */\nfunction isSelectable(node, schema) {\n    return node && schema.isSelectable(node);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/controller/editingcontroller\n */\nimport { CKEditorError, ObservableMixin, env } from '@ckeditor/ckeditor5-utils';\nimport RootEditableElement from '../view/rooteditableelement.js';\nimport View from '../view/view.js';\nimport Mapper from '../conversion/mapper.js';\nimport DowncastDispatcher from '../conversion/downcastdispatcher.js';\nimport { cleanSelection, convertCollapsedSelection, convertRangeSelection, insertAttributesAndChildren, insertText, remove } from '../conversion/downcasthelpers.js';\nimport { convertSelectionChange } from '../conversion/upcasthelpers.js';\nimport { tryFixingRange } from '../model/utils/selection-post-fixer.js';\n// @if CK_DEBUG_ENGINE // const { dumpTrees, initDocumentDumping } = require( '../dev-utils/utils' );\n/**\n * A controller for the editing pipeline. The editing pipeline controls the {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n */\nexport default class EditingController extends /* #__PURE__ */ ObservableMixin() {\n    /**\n     * Creates an editing controller instance.\n     *\n     * @param model Editing model.\n     * @param stylesProcessor The styles processor instance.\n     */\n    constructor(model, stylesProcessor) {\n        super();\n        this.model = model;\n        this.view = new View(stylesProcessor);\n        this.mapper = new Mapper();\n        this.downcastDispatcher = new DowncastDispatcher({\n            mapper: this.mapper,\n            schema: model.schema\n        });\n        const doc = this.model.document;\n        const selection = doc.selection;\n        const markers = this.model.markers;\n        // When plugins listen on model changes (on selection change, post fixers, etc.) and change the view as a result of\n        // the model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n        // is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n        //\n        // See https://github.com/ckeditor/ckeditor5-engine/issues/1528\n        this.listenTo(this.model, '_beforeChanges', () => {\n            this.view._disableRendering(true);\n        }, { priority: 'highest' });\n        this.listenTo(this.model, '_afterChanges', () => {\n            this.view._disableRendering(false);\n        }, { priority: 'lowest' });\n        // Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n        // Do it on 'low' priority, so changes are converted after other listeners did their job.\n        // Also convert model selection.\n        this.listenTo(doc, 'change', () => {\n            this.view.change(writer => {\n                this.downcastDispatcher.convertChanges(doc.differ, markers, writer);\n                this.downcastDispatcher.convertSelection(selection, markers, writer);\n            });\n        }, { priority: 'low' });\n        // Convert selection from the view to the model when it changes in the view.\n        this.listenTo(this.view.document, 'selectionChange', convertSelectionChange(this.model, this.mapper));\n        // Fix `beforeinput` target ranges so that they map to the valid model ranges.\n        this.listenTo(this.view.document, 'beforeinput', fixTargetRanges(this.mapper, this.model.schema, this.view), { priority: 'high' });\n        // Attach default model converters.\n        this.downcastDispatcher.on('insert:$text', insertText(), { priority: 'lowest' });\n        this.downcastDispatcher.on('insert', insertAttributesAndChildren(), { priority: 'lowest' });\n        this.downcastDispatcher.on('remove', remove(), { priority: 'low' });\n        // Attach default model selection converters.\n        this.downcastDispatcher.on('cleanSelection', cleanSelection());\n        this.downcastDispatcher.on('selection', convertRangeSelection(), { priority: 'low' });\n        this.downcastDispatcher.on('selection', convertCollapsedSelection(), { priority: 'low' });\n        // Binds {@link module:engine/view/document~Document#roots view roots collection} to\n        // {@link module:engine/model/document~Document#roots model roots collection} so creating\n        // model root automatically creates corresponding view root.\n        this.view.document.roots.bindTo(this.model.document.roots).using(root => {\n            // $graveyard is a special root that has no reflection in the view.\n            if (root.rootName == '$graveyard') {\n                return null;\n            }\n            const viewRoot = new RootEditableElement(this.view.document, root.name);\n            viewRoot.rootName = root.rootName;\n            this.mapper.bindElements(root, viewRoot);\n            return viewRoot;\n        });\n        // @if CK_DEBUG_ENGINE // initDocumentDumping( this.model.document );\n        // @if CK_DEBUG_ENGINE // initDocumentDumping( this.view.document );\n        // @if CK_DEBUG_ENGINE // dumpTrees( this.model.document, this.model.document.version );\n        // @if CK_DEBUG_ENGINE // dumpTrees( this.view.document, this.model.document.version );\n        // @if CK_DEBUG_ENGINE // this.model.document.on( 'change', () => {\n        // @if CK_DEBUG_ENGINE //\tdumpTrees( this.view.document, this.model.document.version );\n        // @if CK_DEBUG_ENGINE // }, { priority: 'lowest' } );\n    }\n    /**\n     * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n     * by `EditingController` that need to be destroyed.\n     */\n    destroy() {\n        this.view.destroy();\n        this.stopListening();\n    }\n    /**\n     * Calling this method will refresh the marker by triggering the downcast conversion for it.\n     *\n     * Reconverting the marker is useful when you want to change its {@link module:engine/view/element~Element view element}\n     * without changing any marker data. For instance:\n     *\n     * ```ts\n     * let isCommentActive = false;\n     *\n     * model.conversion.markerToHighlight( {\n     * \tmodel: 'comment',\n     * \tview: data => {\n     * \t\tconst classes = [ 'comment-marker' ];\n     *\n     * \t\tif ( isCommentActive ) {\n     * \t\t\tclasses.push( 'comment-marker--active' );\n     * \t\t}\n     *\n     * \t\treturn { classes };\n     * \t}\n     * } );\n     *\n     * // ...\n     *\n     * // Change the property that indicates if marker is displayed as active or not.\n     * isCommentActive = true;\n     *\n     * // Reconverting will downcast and synchronize the marker with the new isCommentActive state value.\n     * editor.editing.reconvertMarker( 'comment' );\n     * ```\n     *\n     * **Note**: If you want to reconvert a model item, use {@link #reconvertItem} instead.\n     *\n     * @param markerOrName Name of a marker to update, or a marker instance.\n     */\n    reconvertMarker(markerOrName) {\n        const markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n        const currentMarker = this.model.markers.get(markerName);\n        if (!currentMarker) {\n            /**\n             * The marker with the provided name does not exist and cannot be reconverted.\n             *\n             * @error editingcontroller-reconvertmarker-marker-not-exist\n             * @param {String} markerName The name of the reconverted marker.\n             */\n            throw new CKEditorError('editingcontroller-reconvertmarker-marker-not-exist', this, { markerName });\n        }\n        this.model.change(() => {\n            this.model.markers._refresh(currentMarker);\n        });\n    }\n    /**\n     * Calling this method will downcast a model item on demand (by requesting a refresh in the {@link module:engine/model/differ~Differ}).\n     *\n     * You can use it if you want the view representation of a specific item updated as a response to external modifications. For instance,\n     * when the view structure depends not only on the associated model data but also on some external state.\n     *\n     * **Note**: If you want to reconvert a model marker, use {@link #reconvertMarker} instead.\n     *\n     * @param item Item to refresh.\n     */\n    reconvertItem(item) {\n        this.model.change(() => {\n            this.model.document.differ._refreshItem(item);\n        });\n    }\n}\n/**\n * Checks whether the target ranges provided by the `beforeInput` event can be properly mapped to model ranges and fixes them if needed.\n *\n * This is using the same logic as the selection post-fixer.\n */\nfunction fixTargetRanges(mapper, schema, view) {\n    return (evt, data) => {\n        // The Renderer is disabled while composing on non-android browsers, so we can't be sure that target ranges\n        // could be properly mapped to view and model because the DOM and view tree drifted apart.\n        if (view.document.isComposing && !env.isAndroid) {\n            return;\n        }\n        for (let i = 0; i < data.targetRanges.length; i++) {\n            const viewRange = data.targetRanges[i];\n            const modelRange = mapper.toModelRange(viewRange);\n            const correctedRange = tryFixingRange(modelRange, schema);\n            if (!correctedRange || correctedRange.isEqual(modelRange)) {\n                continue;\n            }\n            data.targetRanges[i] = mapper.toViewRange(correctedRange);\n        }\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/viewconsumable\n */\nimport { CKEditorError, toArray } from '@ckeditor/ckeditor5-utils';\n/**\n * Class used for handling consumption of view {@link module:engine/view/element~Element elements},\n * {@link module:engine/view/text~Text text nodes} and {@link module:engine/view/documentfragment~DocumentFragment document fragments}.\n * Element's name and its parts (attributes, classes and styles) can be consumed separately. Consuming an element's name\n * does not consume its attributes, classes and styles.\n * To add items for consumption use {@link module:engine/conversion/viewconsumable~ViewConsumable#add add method}.\n * To test items use {@link module:engine/conversion/viewconsumable~ViewConsumable#test test method}.\n * To consume items use {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consume method}.\n * To revert already consumed items use {@link module:engine/conversion/viewconsumable~ViewConsumable#revert revert method}.\n *\n * ```ts\n * viewConsumable.add( element, { name: true } ); // Adds element's name as ready to be consumed.\n * viewConsumable.add( textNode ); // Adds text node for consumption.\n * viewConsumable.add( docFragment ); // Adds document fragment for consumption.\n * viewConsumable.test( element, { name: true }  ); // Tests if element's name can be consumed.\n * viewConsumable.test( textNode ); // Tests if text node can be consumed.\n * viewConsumable.test( docFragment ); // Tests if document fragment can be consumed.\n * viewConsumable.consume( element, { name: true }  ); // Consume element's name.\n * viewConsumable.consume( textNode ); // Consume text node.\n * viewConsumable.consume( docFragment ); // Consume document fragment.\n * viewConsumable.revert( element, { name: true }  ); // Revert already consumed element's name.\n * viewConsumable.revert( textNode ); // Revert already consumed text node.\n * viewConsumable.revert( docFragment ); // Revert already consumed document fragment.\n * ```\n */\nexport default class ViewConsumable {\n    constructor() {\n        /**\n         * Map of consumable elements. If {@link module:engine/view/element~Element element} is used as a key,\n         * {@link module:engine/conversion/viewconsumable~ViewElementConsumables ViewElementConsumables} instance is stored as value.\n         * For {@link module:engine/view/text~Text text nodes} and\n         * {@link module:engine/view/documentfragment~DocumentFragment document fragments} boolean value is stored as value.\n         */\n        this._consumables = new Map();\n    }\n    add(element, consumables) {\n        let elementConsumables;\n        // For text nodes and document fragments just mark them as consumable.\n        if (element.is('$text') || element.is('documentFragment')) {\n            this._consumables.set(element, true);\n            return;\n        }\n        // For elements create new ViewElementConsumables or update already existing one.\n        if (!this._consumables.has(element)) {\n            elementConsumables = new ViewElementConsumables(element);\n            this._consumables.set(element, elementConsumables);\n        }\n        else {\n            elementConsumables = this._consumables.get(element);\n        }\n        elementConsumables.add(consumables);\n    }\n    /**\n     * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n     * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.\n     * It returns `true` when all items included in method's call can be consumed. Returns `false` when\n     * first already consumed item is found and `null` when first non-consumable item is found.\n     *\n     * ```ts\n     * viewConsumable.test( p, { name: true } ); // Tests element's name.\n     * viewConsumable.test( p, { attributes: 'name' } ); // Tests attribute.\n     * viewConsumable.test( p, { classes: 'foobar' } ); // Tests class.\n     * viewConsumable.test( p, { styles: 'color' } ); // Tests style.\n     * viewConsumable.test( p, { attributes: 'name', styles: 'color' } ); // Tests attribute and style.\n     * viewConsumable.test( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.\n     * viewConsumable.test( textNode ); // Tests text node.\n     * viewConsumable.test( docFragment ); // Tests document fragment.\n     * ```\n     *\n     * Testing classes and styles as attribute will test if all added classes/styles can be consumed.\n     *\n     * ```ts\n     * viewConsumable.test( p, { attributes: 'class' } ); // Tests if all added classes can be consumed.\n     * viewConsumable.test( p, { attributes: 'style' } ); // Tests if all added styles can be consumed.\n     * ```\n     *\n     * @param consumables Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n     * @param consumables.name If set to true element's name will be included.\n     * @param consumables.attributes Attribute name or array of attribute names.\n     * @param consumables.classes Class name or array of class names.\n     * @param consumables.styles Style name or array of style names.\n     * @returns Returns `true` when all items included in method's call can be consumed. Returns `false`\n     * when first already consumed item is found and `null` when first non-consumable item is found.\n     */\n    test(element, consumables) {\n        const elementConsumables = this._consumables.get(element);\n        if (elementConsumables === undefined) {\n            return null;\n        }\n        // For text nodes and document fragments return stored boolean value.\n        if (element.is('$text') || element.is('documentFragment')) {\n            return elementConsumables;\n        }\n        // For elements test consumables object.\n        return elementConsumables.test(consumables);\n    }\n    /**\n     * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n     * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n     * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.\n     *\n     * ```ts\n     * viewConsumable.consume( p, { name: true } ); // Consumes element's name.\n     * viewConsumable.consume( p, { attributes: 'name' } ); // Consumes element's attribute.\n     * viewConsumable.consume( p, { classes: 'foobar' } ); // Consumes element's class.\n     * viewConsumable.consume( p, { styles: 'color' } ); // Consumes element's style.\n     * viewConsumable.consume( p, { attributes: 'name', styles: 'color' } ); // Consumes attribute and style.\n     * viewConsumable.consume( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.\n     * viewConsumable.consume( textNode ); // Consumes text node.\n     * viewConsumable.consume( docFragment ); // Consumes document fragment.\n     * ```\n     *\n     * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.\n     *\n     * ```ts\n     * viewConsumable.consume( p, { attributes: 'class' } ); // Consume only if all added classes can be consumed.\n     * viewConsumable.consume( p, { attributes: 'style' } ); // Consume only if all added styles can be consumed.\n     * ```\n     *\n     * @param consumables Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n     * @param consumables.name If set to true element's name will be included.\n     * @param consumables.attributes Attribute name or array of attribute names.\n     * @param consumables.classes Class name or array of class names.\n     * @param consumables.styles Style name or array of style names.\n     * @returns Returns `true` when all items included in method's call can be consumed,\n     * otherwise returns `false`.\n     */\n    consume(element, consumables) {\n        if (this.test(element, consumables)) {\n            if (element.is('$text') || element.is('documentFragment')) {\n                // For text nodes and document fragments set value to false.\n                this._consumables.set(element, false);\n            }\n            else {\n                // For elements - consume consumables object.\n                this._consumables.get(element).consume(consumables);\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n     * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.\n     * Method does not revert items that were never previously added for consumption, even if they are included in\n     * method's call.\n     *\n     * ```ts\n     * viewConsumable.revert( p, { name: true } ); // Reverts element's name.\n     * viewConsumable.revert( p, { attributes: 'name' } ); // Reverts element's attribute.\n     * viewConsumable.revert( p, { classes: 'foobar' } ); // Reverts element's class.\n     * viewConsumable.revert( p, { styles: 'color' } ); // Reverts element's style.\n     * viewConsumable.revert( p, { attributes: 'name', styles: 'color' } ); // Reverts attribute and style.\n     * viewConsumable.revert( p, { classes: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.\n     * viewConsumable.revert( textNode ); // Reverts text node.\n     * viewConsumable.revert( docFragment ); // Reverts document fragment.\n     * ```\n     *\n     * Reverting classes and styles as attribute will revert all classes/styles that were previously added for\n     * consumption.\n     *\n     * ```ts\n     * viewConsumable.revert( p, { attributes: 'class' } ); // Reverts all classes added for consumption.\n     * viewConsumable.revert( p, { attributes: 'style' } ); // Reverts all styles added for consumption.\n     * ```\n     *\n     * @param consumables Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n     * @param consumables.name If set to true element's name will be included.\n     * @param consumables.attributes Attribute name or array of attribute names.\n     * @param consumables.classes Class name or array of class names.\n     * @param consumables.styles Style name or array of style names.\n     */\n    revert(element, consumables) {\n        const elementConsumables = this._consumables.get(element);\n        if (elementConsumables !== undefined) {\n            if (element.is('$text') || element.is('documentFragment')) {\n                // For text nodes and document fragments - set consumable to true.\n                this._consumables.set(element, true);\n            }\n            else {\n                // For elements - revert items from consumables object.\n                elementConsumables.revert(consumables);\n            }\n        }\n    }\n    /**\n     * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include\n     * element's name and all its attributes, classes and styles.\n     */\n    static consumablesFromElement(element) {\n        const consumables = {\n            element,\n            name: true,\n            attributes: [],\n            classes: [],\n            styles: []\n        };\n        const attributes = element.getAttributeKeys();\n        for (const attribute of attributes) {\n            // Skip classes and styles - will be added separately.\n            if (attribute == 'style' || attribute == 'class') {\n                continue;\n            }\n            consumables.attributes.push(attribute);\n        }\n        const classes = element.getClassNames();\n        for (const className of classes) {\n            consumables.classes.push(className);\n        }\n        const styles = element.getStyleNames();\n        for (const style of styles) {\n            consumables.styles.push(style);\n        }\n        return consumables;\n    }\n    /**\n     * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from\n     * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n     * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.\n     *\n     * @param from View node or document fragment from which `ViewConsumable` will be created.\n     * @param instance If provided, given `ViewConsumable` instance will be used\n     * to add all consumables. It will be returned instead of a new instance.\n     */\n    static createFrom(from, instance) {\n        if (!instance) {\n            instance = new ViewConsumable();\n        }\n        if (from.is('$text')) {\n            instance.add(from);\n            return instance;\n        }\n        // Add `from` itself, if it is an element.\n        if (from.is('element')) {\n            instance.add(from, ViewConsumable.consumablesFromElement(from));\n        }\n        if (from.is('documentFragment')) {\n            instance.add(from);\n        }\n        for (const child of from.getChildren()) {\n            instance = ViewConsumable.createFrom(child, instance);\n        }\n        return instance;\n    }\n}\nconst CONSUMABLE_TYPES = ['attributes', 'classes', 'styles'];\n/**\n * This is a private helper-class for {@link module:engine/conversion/viewconsumable~ViewConsumable}.\n * It represents and manipulates consumable parts of a single {@link module:engine/view/element~Element}.\n */\nexport class ViewElementConsumables {\n    /**\n     * Creates ViewElementConsumables instance.\n     *\n     * @param from View node or document fragment from which `ViewElementConsumables` is being created.\n     */\n    constructor(from) {\n        this.element = from;\n        this._canConsumeName = null;\n        this._consumables = {\n            attributes: new Map(),\n            styles: new Map(),\n            classes: new Map()\n        };\n    }\n    /**\n     * Adds consumable parts of the {@link module:engine/view/element~Element view element}.\n     * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and\n     * styles still could be consumed):\n     *\n     * ```ts\n     * consumables.add( { name: true } );\n     * ```\n     *\n     * Attributes classes and styles:\n     *\n     * ```ts\n     * consumables.add( { attributes: 'title', classes: 'foo', styles: 'color' } );\n     * consumables.add( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n     * ```\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n     * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.\n     *\n     * @param consumables Object describing which parts of the element can be consumed.\n     * @param consumables.name If set to `true` element's name will be added as consumable.\n     * @param consumables.attributes Attribute name or array of attribute names to add as consumable.\n     * @param consumables.classes Class name or array of class names to add as consumable.\n     * @param consumables.styles Style name or array of style names to add as consumable.\n     */\n    add(consumables) {\n        if (consumables.name) {\n            this._canConsumeName = true;\n        }\n        for (const type of CONSUMABLE_TYPES) {\n            if (type in consumables) {\n                this._add(type, consumables[type]);\n            }\n        }\n    }\n    /**\n     * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.\n     *\n     * Element's name can be tested:\n     *\n     * ```ts\n     * consumables.test( { name: true } );\n     * ```\n     *\n     * Attributes classes and styles:\n     *\n     * ```ts\n     * consumables.test( { attributes: 'title', classes: 'foo', styles: 'color' } );\n     * consumables.test( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n     * ```\n     *\n     * @param consumables Object describing which parts of the element should be tested.\n     * @param consumables.name If set to `true` element's name will be tested.\n     * @param consumables.attributes Attribute name or array of attribute names to test.\n     * @param consumables.classes Class name or array of class names to test.\n     * @param consumables.styles Style name or array of style names to test.\n     * @returns `true` when all tested items can be consumed, `null` when even one of the items\n     * was never marked for consumption and `false` when even one of the items was already consumed.\n     */\n    test(consumables) {\n        // Check if name can be consumed.\n        if (consumables.name && !this._canConsumeName) {\n            return this._canConsumeName;\n        }\n        for (const type of CONSUMABLE_TYPES) {\n            if (type in consumables) {\n                const value = this._test(type, consumables[type]);\n                if (value !== true) {\n                    return value;\n                }\n            }\n        }\n        // Return true only if all can be consumed.\n        return true;\n    }\n    /**\n     * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item\n     * is already consumed - it consumes all consumable items provided.\n     * Element's name can be consumed:\n     *\n     * ```ts\n     * consumables.consume( { name: true } );\n     * ```\n     *\n     * Attributes classes and styles:\n     *\n     * ```ts\n     * consumables.consume( { attributes: 'title', classes: 'foo', styles: 'color' } );\n     * consumables.consume( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n     * ```\n     *\n     * @param consumables Object describing which parts of the element should be consumed.\n     * @param consumables.name If set to `true` element's name will be consumed.\n     * @param consumables.attributes Attribute name or array of attribute names to consume.\n     * @param consumables.classes Class name or array of class names to consume.\n     * @param consumables.styles Style name or array of style names to consume.\n     */\n    consume(consumables) {\n        if (consumables.name) {\n            this._canConsumeName = false;\n        }\n        for (const type of CONSUMABLE_TYPES) {\n            if (type in consumables) {\n                this._consume(type, consumables[type]);\n            }\n        }\n    }\n    /**\n     * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.\n     * Element's name can be reverted:\n     *\n     * ```ts\n     * consumables.revert( { name: true } );\n     * ```\n     *\n     * Attributes classes and styles:\n     *\n     * ```ts\n     * consumables.revert( { attributes: 'title', classes: 'foo', styles: 'color' } );\n     * consumables.revert( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n     * ```\n     *\n     * @param consumables Object describing which parts of the element should be reverted.\n     * @param consumables.name If set to `true` element's name will be reverted.\n     * @param consumables.attributes Attribute name or array of attribute names to revert.\n     * @param consumables.classes Class name or array of class names to revert.\n     * @param consumables.styles Style name or array of style names to revert.\n     */\n    revert(consumables) {\n        if (consumables.name) {\n            this._canConsumeName = true;\n        }\n        for (const type of CONSUMABLE_TYPES) {\n            if (type in consumables) {\n                this._revert(type, consumables[type]);\n            }\n        }\n    }\n    /**\n     * Helper method that adds consumables of a given type: attribute, class or style.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n     * type is provided - it should be handled separately by providing actual style/class type.\n     *\n     * @param type Type of the consumable item: `attributes`, `classes` or `styles`.\n     * @param item Consumable item or array of items.\n     */\n    _add(type, item) {\n        const items = toArray(item);\n        const consumables = this._consumables[type];\n        for (const name of items) {\n            if (type === 'attributes' && (name === 'class' || name === 'style')) {\n                /**\n                 * Class and style attributes should be handled separately in\n                 * {@link module:engine/conversion/viewconsumable~ViewConsumable#add `ViewConsumable#add()`}.\n                 *\n                 * What you have done is trying to use:\n                 *\n                 * ```ts\n                 * consumables.add( { attributes: [ 'class', 'style' ] } );\n                 * ```\n                 *\n                 * While each class and style should be registered separately:\n                 *\n                 * ```ts\n                 * consumables.add( { classes: 'some-class', styles: 'font-weight' } );\n                 * ```\n                 *\n                 * @error viewconsumable-invalid-attribute\n                 */\n                throw new CKEditorError('viewconsumable-invalid-attribute', this);\n            }\n            consumables.set(name, true);\n            if (type === 'styles') {\n                for (const alsoName of this.element.document.stylesProcessor.getRelatedStyles(name)) {\n                    consumables.set(alsoName, true);\n                }\n            }\n        }\n    }\n    /**\n     * Helper method that tests consumables of a given type: attribute, class or style.\n     *\n     * @param type Type of the consumable item: `attributes`, `classes` or `styles`.\n     * @param item Consumable item or array of items.\n     * @returns Returns `true` if all items can be consumed, `null` when one of the items cannot be\n     * consumed and `false` when one of the items is already consumed.\n     */\n    _test(type, item) {\n        const items = toArray(item);\n        const consumables = this._consumables[type];\n        for (const name of items) {\n            if (type === 'attributes' && (name === 'class' || name === 'style')) {\n                const consumableName = name == 'class' ? 'classes' : 'styles';\n                // Check all classes/styles if class/style attribute is tested.\n                const value = this._test(consumableName, [...this._consumables[consumableName].keys()]);\n                if (value !== true) {\n                    return value;\n                }\n            }\n            else {\n                const value = consumables.get(name);\n                // Return null if attribute is not found.\n                if (value === undefined) {\n                    return null;\n                }\n                if (!value) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Helper method that consumes items of a given type: attribute, class or style.\n     *\n     * @param type Type of the consumable item: `attributes`, `classes` or `styles`.\n     * @param item Consumable item or array of items.\n     */\n    _consume(type, item) {\n        const items = toArray(item);\n        const consumables = this._consumables[type];\n        for (const name of items) {\n            if (type === 'attributes' && (name === 'class' || name === 'style')) {\n                const consumableName = name == 'class' ? 'classes' : 'styles';\n                // If class or style is provided for consumption - consume them all.\n                this._consume(consumableName, [...this._consumables[consumableName].keys()]);\n            }\n            else {\n                consumables.set(name, false);\n                if (type == 'styles') {\n                    for (const toConsume of this.element.document.stylesProcessor.getRelatedStyles(name)) {\n                        consumables.set(toConsume, false);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Helper method that reverts items of a given type: attribute, class or style.\n     *\n     * @param type Type of the consumable item: `attributes`, `classes` or , `styles`.\n     * @param item Consumable item or array of items.\n     */\n    _revert(type, item) {\n        const items = toArray(item);\n        const consumables = this._consumables[type];\n        for (const name of items) {\n            if (type === 'attributes' && (name === 'class' || name === 'style')) {\n                const consumableName = name == 'class' ? 'classes' : 'styles';\n                // If class or style is provided for reverting - revert them all.\n                this._revert(consumableName, [...this._consumables[consumableName].keys()]);\n            }\n            else {\n                const value = consumables.get(name);\n                if (value === false) {\n                    consumables.set(name, true);\n                }\n            }\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/schema\n */\nimport Element from './element.js';\nimport Position from './position.js';\nimport Range from './range.js';\nimport Text from './text.js';\nimport TreeWalker from './treewalker.js';\nimport { CKEditorError, first, ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The model's schema. It defines the allowed and disallowed structures of nodes as well as nodes' attributes.\n * The schema is usually defined by the features and based on them, the editing framework and features\n * make decisions on how to change and process the model.\n *\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\n *\n * Read more about the schema in:\n *\n * * The {@glink framework/architecture/editing-engine#schema schema section} of the\n * {@glink framework/architecture/editing-engine Introduction to the Editing engine architecture} guide.\n * * The {@glink framework/deep-dive/schema Schema deep-dive} guide.\n */\nexport default class Schema extends /* #__PURE__ */ ObservableMixin() {\n    /**\n     * Creates a schema instance.\n     */\n    constructor() {\n        super();\n        this._sourceDefinitions = {};\n        /**\n         * A dictionary containing attribute properties.\n         */\n        this._attributeProperties = Object.create(null);\n        /**\n         * Stores additional callbacks registered for schema items, which are evaluated when {@link ~Schema#checkChild} is called.\n         *\n         * Keys are schema item names for which the callbacks are registered. Values are arrays with the callbacks.\n         *\n         * Some checks are added under {@link ~Schema#_genericCheckSymbol} key, these are evaluated for every {@link ~Schema#checkChild} call.\n         */\n        this._customChildChecks = new Map();\n        /**\n         * Stores additional callbacks registered for attribute names, which are evaluated when {@link ~Schema#checkAttribute} is called.\n         *\n         * Keys are schema attribute names for which the callbacks are registered. Values are arrays with the callbacks.\n         *\n         * Some checks are added under {@link ~Schema#_genericCheckSymbol} key, these are evaluated for every\n         * {@link ~Schema#checkAttribute} call.\n         */\n        this._customAttributeChecks = new Map();\n        this._genericCheckSymbol = Symbol('$generic');\n        this.decorate('checkChild');\n        this.decorate('checkAttribute');\n        this.on('checkAttribute', (evt, args) => {\n            args[0] = new SchemaContext(args[0]);\n        }, { priority: 'highest' });\n        this.on('checkChild', (evt, args) => {\n            args[0] = new SchemaContext(args[0]);\n            args[1] = this.getDefinition(args[1]);\n        }, { priority: 'highest' });\n    }\n    /**\n     * Registers a schema item. Can only be called once for every item name.\n     *\n     * ```ts\n     * schema.register( 'paragraph', {\n     * \tinheritAllFrom: '$block'\n     * } );\n     * ```\n     */\n    register(itemName, definition) {\n        if (this._sourceDefinitions[itemName]) {\n            /**\n             * A single item cannot be registered twice in the schema.\n             *\n             * This situation may happen when:\n             *\n             * * Two or more plugins called {@link module:engine/model/schema~Schema#register `register()`} with the same name.\n             * This will usually mean that there is a collision between plugins which try to use the same element in the model.\n             * Unfortunately, the only way to solve this is by modifying one of these plugins to use a unique model element name.\n             * * A single plugin was loaded twice. This happens when it is installed by npm/yarn in two versions\n             * and usually means one or more of the following issues:\n             *     * a version mismatch (two of your dependencies require two different versions of this plugin),\n             *     * incorrect imports (this plugin is somehow imported twice in a way which confuses webpack),\n             *     * mess in `node_modules/` (`rm -rf node_modules/` may help).\n             *\n             * **Note:** Check the logged `itemName` to better understand which plugin was duplicated/conflicting.\n             *\n             * @param itemName The name of the model element that is being registered twice.\n             * @error schema-cannot-register-item-twice\n             */\n            throw new CKEditorError('schema-cannot-register-item-twice', this, {\n                itemName\n            });\n        }\n        this._sourceDefinitions[itemName] = [\n            Object.assign({}, definition)\n        ];\n        this._clearCache();\n    }\n    /**\n     * Extends a {@link #register registered} item's definition.\n     *\n     * Extending properties such as `allowIn` will add more items to the existing properties,\n     * while redefining properties such as `isBlock` will override the previously defined ones.\n     *\n     * ```ts\n     * schema.register( 'foo', {\n     * \tallowIn: '$root',\n     * \tisBlock: true;\n     * } );\n     * schema.extend( 'foo', {\n     * \tallowIn: 'blockQuote',\n     * \tisBlock: false\n     * } );\n     *\n     * schema.getDefinition( 'foo' );\n     * //\t{\n     * //\t\tallowIn: [ '$root', 'blockQuote' ],\n     * // \t\tisBlock: false\n     * //\t}\n     * ```\n     */\n    extend(itemName, definition) {\n        if (!this._sourceDefinitions[itemName]) {\n            /**\n             * Cannot extend an item which was not registered yet.\n             *\n             * This error happens when a plugin tries to extend the schema definition of an item which was not\n             * {@link module:engine/model/schema~Schema#register registered} yet.\n             *\n             * @param itemName The name of the model element which is being extended.\n             * @error schema-cannot-extend-missing-item\n             */\n            throw new CKEditorError('schema-cannot-extend-missing-item', this, {\n                itemName\n            });\n        }\n        this._sourceDefinitions[itemName].push(Object.assign({}, definition));\n        this._clearCache();\n    }\n    /**\n     * Returns data of all registered items.\n     *\n     * This method should normally be used for reflection purposes (e.g. defining a clone of a certain element,\n     * checking a list of all block elements, etc).\n     * Use specific methods (such as {@link #checkChild `checkChild()`} or {@link #isLimit `isLimit()`})\n     * in other cases.\n     */\n    getDefinitions() {\n        if (!this._compiledDefinitions) {\n            this._compile();\n        }\n        return this._compiledDefinitions;\n    }\n    /**\n     * Returns a definition of the given item or `undefined` if an item is not registered.\n     *\n     * This method should normally be used for reflection purposes (e.g. defining a clone of a certain element,\n     * checking a list of all block elements, etc).\n     * Use specific methods (such as {@link #checkChild `checkChild()`} or {@link #isLimit `isLimit()`})\n     * in other cases.\n     */\n    getDefinition(item) {\n        let itemName;\n        if (typeof item == 'string') {\n            itemName = item;\n        }\n        else if ('is' in item && (item.is('$text') || item.is('$textProxy'))) {\n            itemName = '$text';\n        }\n        // Element or module:engine/model/schema~SchemaContextItem.\n        else {\n            itemName = item.name;\n        }\n        return this.getDefinitions()[itemName];\n    }\n    /**\n     * Returns `true` if the given item is registered in the schema.\n     *\n     * ```ts\n     * schema.isRegistered( 'paragraph' ); // -> true\n     * schema.isRegistered( editor.model.document.getRoot() ); // -> true\n     * schema.isRegistered( 'foo' ); // -> false\n     * ```\n     */\n    isRegistered(item) {\n        return !!this.getDefinition(item);\n    }\n    /**\n     * Returns `true` if the given item is defined to be\n     * a block by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\n     *\n     * ```ts\n     * schema.isBlock( 'paragraph' ); // -> true\n     * schema.isBlock( '$root' ); // -> false\n     *\n     * const paragraphElement = writer.createElement( 'paragraph' );\n     * schema.isBlock( paragraphElement ); // -> true\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#block-elements Block elements} section of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isBlock(item) {\n        const def = this.getDefinition(item);\n        return !!(def && def.isBlock);\n    }\n    /**\n     * Returns `true` if the given item should be treated as a limit element.\n     *\n     * It considers an item to be a limit element if its\n     * {@link module:engine/model/schema~SchemaItemDefinition}'s\n     * {@link module:engine/model/schema~SchemaItemDefinition#isLimit `isLimit`} or\n     * {@link module:engine/model/schema~SchemaItemDefinition#isObject `isObject`} property\n     * was set to `true`.\n     *\n     * ```ts\n     * schema.isLimit( 'paragraph' ); // -> false\n     * schema.isLimit( '$root' ); // -> true\n     * schema.isLimit( editor.model.document.getRoot() ); // -> true\n     * schema.isLimit( 'imageBlock' ); // -> true\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#limit-elements Limit elements} section of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isLimit(item) {\n        const def = this.getDefinition(item);\n        if (!def) {\n            return false;\n        }\n        return !!(def.isLimit || def.isObject);\n    }\n    /**\n     * Returns `true` if the given item should be treated as an object element.\n     *\n     * It considers an item to be an object element if its\n     * {@link module:engine/model/schema~SchemaItemDefinition}'s\n     * {@link module:engine/model/schema~SchemaItemDefinition#isObject `isObject`} property\n     * was set to `true`.\n     *\n     * ```ts\n     * schema.isObject( 'paragraph' ); // -> false\n     * schema.isObject( 'imageBlock' ); // -> true\n     *\n     * const imageElement = writer.createElement( 'imageBlock' );\n     * schema.isObject( imageElement ); // -> true\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#object-elements Object elements} section of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isObject(item) {\n        const def = this.getDefinition(item);\n        if (!def) {\n            return false;\n        }\n        // Note: Check out the implementation of #isLimit(), #isSelectable(), and #isContent()\n        // to understand why these three constitute an object.\n        return !!(def.isObject || (def.isLimit && def.isSelectable && def.isContent));\n    }\n    /**\n     * Returns `true` if the given item is defined to be\n     * an inline element by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isInline` property.\n     *\n     * ```ts\n     * schema.isInline( 'paragraph' ); // -> false\n     * schema.isInline( 'softBreak' ); // -> true\n     *\n     * const text = writer.createText( 'foo' );\n     * schema.isInline( text ); // -> true\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#inline-elements Inline elements} section of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isInline(item) {\n        const def = this.getDefinition(item);\n        return !!(def && def.isInline);\n    }\n    /**\n     * Returns `true` if the given item is defined to be\n     * a selectable element by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isSelectable` property.\n     *\n     * ```ts\n     * schema.isSelectable( 'paragraph' ); // -> false\n     * schema.isSelectable( 'heading1' ); // -> false\n     * schema.isSelectable( 'imageBlock' ); // -> true\n     * schema.isSelectable( 'tableCell' ); // -> true\n     *\n     * const text = writer.createText( 'foo' );\n     * schema.isSelectable( text ); // -> false\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#selectable-elements Selectable elements section} of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isSelectable(item) {\n        const def = this.getDefinition(item);\n        if (!def) {\n            return false;\n        }\n        return !!(def.isSelectable || def.isObject);\n    }\n    /**\n     * Returns `true` if the given item is defined to be\n     * a content by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isContent` property.\n     *\n     * ```ts\n     * schema.isContent( 'paragraph' ); // -> false\n     * schema.isContent( 'heading1' ); // -> false\n     * schema.isContent( 'imageBlock' ); // -> true\n     * schema.isContent( 'horizontalLine' ); // -> true\n     *\n     * const text = writer.createText( 'foo' );\n     * schema.isContent( text ); // -> true\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#content-elements Content elements section} of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isContent(item) {\n        const def = this.getDefinition(item);\n        if (!def) {\n            return false;\n        }\n        return !!(def.isContent || def.isObject);\n    }\n    /**\n     * Checks whether the given node can be a child of the given context.\n     *\n     * ```ts\n     * schema.checkChild( model.document.getRoot(), paragraph ); // -> false\n     *\n     * schema.register( 'paragraph', {\n     * \tallowIn: '$root'\n     * } );\n     *\n     * schema.checkChild( model.document.getRoot(), paragraph ); // -> true\n     * ```\n     *\n     * Both {@link module:engine/model/schema~Schema#addChildCheck callback checks} and declarative rules (added when\n     * {@link module:engine/model/schema~Schema#register registering} and {@link module:engine/model/schema~Schema#extend extending} items)\n     * are evaluated when this method is called.\n     *\n     * Note that callback checks have bigger priority than declarative rules checks and may overwrite them.\n     *\n     * Note that when verifying whether the given node can be a child of the given context, the schema also verifies the entire\n     * context &ndash; from its root to its last element. Therefore, it is possible for `checkChild()` to return `false` even though\n     * the `context` last element can contain the checked child. It happens if one of the `context` elements does not allow its child.\n     * When `context` is verified, {@link module:engine/model/schema~Schema#addChildCheck custom checks} are considered as well.\n     *\n     * @fires checkChild\n     * @param context The context in which the child will be checked.\n     * @param def The child to check.\n     */\n    checkChild(context, def) {\n        // Note: `context` and `def` are already normalized here to `SchemaContext` and `SchemaCompiledItemDefinition`.\n        if (!def) {\n            return false;\n        }\n        return this._checkContextMatch(context, def);\n    }\n    /**\n     * Checks whether the given attribute can be applied in the given context (on the last item of the context).\n     *\n     * ```ts\n     * schema.checkAttribute( textNode, 'bold' ); // -> false\n     *\n     * schema.extend( '$text', {\n     * \tallowAttributes: 'bold'\n     * } );\n     *\n     * schema.checkAttribute( textNode, 'bold' ); // -> true\n     * ```\n     *\n     * Both {@link module:engine/model/schema~Schema#addAttributeCheck callback checks} and declarative rules (added when\n     * {@link module:engine/model/schema~Schema#register registering} and {@link module:engine/model/schema~Schema#extend extending} items)\n     * are evaluated when this method is called.\n     *\n     * Note that callback checks have bigger priority than declarative rules checks and may overwrite them.\n     *\n     * @fires checkAttribute\n     * @param context The context in which the attribute will be checked.\n     * @param attributeName Name of attribute to check in the given context.\n     */\n    checkAttribute(context, attributeName) {\n        // Note: `context` is already normalized here to `SchemaContext`.\n        const def = this.getDefinition(context.last);\n        if (!def) {\n            return false;\n        }\n        // First, check all attribute checks declared as callbacks.\n        // Note that `_evaluateAttributeChecks()` will return `undefined` if neither child check was applicable (no decision was made).\n        const isAllowed = this._evaluateAttributeChecks(context, attributeName);\n        // If the decision was not made inside attribute check callbacks, then use declarative rules.\n        return isAllowed !== undefined ? isAllowed : def.allowAttributes.includes(attributeName);\n    }\n    /**\n     * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\n     *\n     * In other words &ndash; both elements are not a limit elements and whether `elementToMerge`'s children\n     * {@link #checkChild are allowed} in the `positionOrBaseElement`.\n     *\n     * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\n     * will be valid.\n     *\n     * Instead of elements, you can pass the instance of the {@link module:engine/model/position~Position} class as the\n     * `positionOrBaseElement`. It means that the elements before and after the position will be checked whether they can be merged.\n     *\n     * @param positionOrBaseElement The position or base element to which the `elementToMerge` will be merged.\n     * @param elementToMerge The element to merge. Required if `positionOrBaseElement` is an element.\n     */\n    checkMerge(positionOrBaseElement, elementToMerge) {\n        if (positionOrBaseElement instanceof Position) {\n            const nodeBefore = positionOrBaseElement.nodeBefore;\n            const nodeAfter = positionOrBaseElement.nodeAfter;\n            if (!(nodeBefore instanceof Element)) {\n                /**\n                 * The node before the merge position must be an element.\n                 *\n                 * @error schema-check-merge-no-element-before\n                 */\n                throw new CKEditorError('schema-check-merge-no-element-before', this);\n            }\n            if (!(nodeAfter instanceof Element)) {\n                /**\n                 * The node after the merge position must be an element.\n                 *\n                 * @error schema-check-merge-no-element-after\n                 */\n                throw new CKEditorError('schema-check-merge-no-element-after', this);\n            }\n            return this.checkMerge(nodeBefore, nodeAfter);\n        }\n        if (this.isLimit(positionOrBaseElement) || this.isLimit(elementToMerge)) {\n            return false;\n        }\n        for (const child of elementToMerge.getChildren()) {\n            if (!this.checkChild(positionOrBaseElement, child)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Allows registering a callback to the {@link #checkChild} method calls.\n     *\n     * Callbacks allow you to implement rules which are not otherwise possible to achieve\n     * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n     *\n     * Note that callback checks have bigger priority than declarative rules checks and may overwrite them.\n     *\n     * For example, by using this method you can disallow elements in specific contexts:\n     *\n     * ```ts\n     * // Disallow `heading1` inside a `blockQuote` that is inside a table.\n     * schema.addChildCheck( ( context, childDefinition ) => {\n     * \tif ( context.endsWith( 'tableCell blockQuote' ) ) {\n     * \t\treturn false;\n     * \t}\n     * }, 'heading1' );\n     * ```\n     *\n     * You can skip the optional `itemName` parameter to evaluate the callback for every `checkChild()` call.\n     *\n     * ```ts\n     * // Inside specific custom element, allow only children, which allows for a specific attribute.\n     * schema.addChildCheck( ( context, childDefinition ) => {\n     * \tif ( context.endsWith( 'myElement' ) ) {\n     * \t\treturn childDefinition.allowAttributes.includes( 'myAttribute' );\n     * \t}\n     * } );\n     * ```\n     *\n     * Please note that the generic callbacks may affect the editor performance and should be avoided if possible.\n     *\n     * When one of the callbacks makes a decision (returns `true` or `false`) the processing is finished and other callbacks are not fired.\n     * Callbacks are fired in the order they were added, however generic callbacks are fired before callbacks added for a specified item.\n     *\n     * You can also use `checkChild` event, if you need even better control. The result from the example above could also be\n     * achieved with following event callback:\n     *\n     * ```ts\n     * schema.on( 'checkChild', ( evt, args ) => {\n     * \tconst context = args[ 0 ];\n     * \tconst childDefinition = args[ 1 ];\n     *\n     * \tif ( context.endsWith( 'myElement' ) ) {\n     * \t\t// Prevent next listeners from being called.\n     * \t\tevt.stop();\n     * \t\t// Set the `checkChild()` return value.\n     * \t\tevt.return = childDefinition.allowAttributes.includes( 'myAttribute' );\n     * \t}\n     * }, { priority: 'high' } );\n     * ```\n     *\n     * Note that the callback checks and declarative rules checks are processed on `normal` priority.\n     *\n     * Adding callbacks this way can also negatively impact editor performance.\n     *\n     * @param callback The callback to be called. It is called with two parameters:\n     * {@link module:engine/model/schema~SchemaContext} (context) instance and\n     * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (definition). The callback may return `true/false` to override\n     * `checkChild()`'s return value. If it does not return a boolean value, the default algorithm (or other callbacks) will define\n     * `checkChild()`'s return value.\n     * @param itemName Name of the schema item for which the callback is registered. If specified, the callback will be run only for\n     * `checkChild()` calls which `def` parameter matches the `itemName`. Otherwise, the callback will run for every `checkChild` call.\n     */\n    addChildCheck(callback, itemName) {\n        const key = itemName !== undefined ? itemName : this._genericCheckSymbol;\n        const checks = this._customChildChecks.get(key) || [];\n        checks.push(callback);\n        this._customChildChecks.set(key, checks);\n    }\n    /**\n     * Allows registering a callback to the {@link #checkAttribute} method calls.\n     *\n     * Callbacks allow you to implement rules which are not otherwise possible to achieve\n     * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n     *\n     * Note that callback checks have bigger priority than declarative rules checks and may overwrite them.\n     *\n     * For example, by using this method you can disallow setting attributes on nodes in specific contexts:\n     *\n     * ```ts\n     * // Disallow setting `bold` on text inside `heading1` element:\n     * schema.addAttributeCheck( context => {\n     * \tif ( context.endsWith( 'heading1 $text' ) ) {\n     * \t\treturn false;\n     * \t}\n     * }, 'bold' );\n     * ```\n     *\n     * You can skip the optional `attributeName` parameter to evaluate the callback for every `checkAttribute()` call.\n     *\n     * ```ts\n     * // Disallow formatting attributes on text inside custom `myTitle` element:\n     * schema.addAttributeCheck( ( context, attributeName ) => {\n     * \tif ( context.endsWith( 'myTitle $text' ) && schema.getAttributeProperties( attributeName ).isFormatting ) {\n     * \t\treturn false;\n     * \t}\n     * } );\n     * ```\n     *\n     * Please note that the generic callbacks may affect the editor performance and should be avoided if possible.\n     *\n     * When one of the callbacks makes a decision (returns `true` or `false`) the processing is finished and other callbacks are not fired.\n     * Callbacks are fired in the order they were added, however generic callbacks are fired before callbacks added for a specified item.\n     *\n     * You can also use {@link #event:checkAttribute} event, if you need even better control. The result from the example above could also\n     * be achieved with following event callback:\n     *\n     * ```ts\n     * schema.on( 'checkAttribute', ( evt, args ) => {\n     * \tconst context = args[ 0 ];\n     * \tconst attributeName = args[ 1 ];\n     *\n     * \tif ( context.endsWith( 'myTitle $text' ) && schema.getAttributeProperties( attributeName ).isFormatting ) {\n     * \t\t// Prevent next listeners from being called.\n     * \t\tevt.stop();\n     * \t\t// Set the `checkAttribute()` return value.\n     * \t\tevt.return = false;\n     * \t}\n     * }, { priority: 'high' } );\n     * ```\n     *\n     * Note that the callback checks and declarative rules checks are processed on `normal` priority.\n     *\n     * Adding callbacks this way can also negatively impact editor performance.\n     *\n     * @param callback The callback to be called. It is called with two parameters:\n     * {@link module:engine/model/schema~SchemaContext `context`} and attribute name. The callback may return `true` or `false`, to\n     * override `checkAttribute()`'s return value. If it does not return a boolean value, the default algorithm (or other callbacks)\n     * will define `checkAttribute()`'s return value.\n     * @param attributeName Name of the attribute for which the callback is registered. If specified, the callback will be run only for\n     * `checkAttribute()` calls with matching `attributeName`. Otherwise, the callback will run for every `checkAttribute()` call.\n     */\n    addAttributeCheck(callback, attributeName) {\n        const key = attributeName !== undefined ? attributeName : this._genericCheckSymbol;\n        const checks = this._customAttributeChecks.get(key) || [];\n        checks.push(callback);\n        this._customAttributeChecks.set(key, checks);\n    }\n    /**\n     * This method allows assigning additional metadata to the model attributes. For example,\n     * {@link module:engine/model/schema~AttributeProperties `AttributeProperties#isFormatting` property} is\n     * used to mark formatting attributes (like `bold` or `italic`).\n     *\n     * ```ts\n     * // Mark bold as a formatting attribute.\n     * schema.setAttributeProperties( 'bold', {\n     * \tisFormatting: true\n     * } );\n     *\n     * // Override code not to be considered a formatting markup.\n     * schema.setAttributeProperties( 'code', {\n     * \tisFormatting: false\n     * } );\n     * ```\n     *\n     * Properties are not limited to members defined in the\n     * {@link module:engine/model/schema~AttributeProperties `AttributeProperties` type} and you can also use custom properties:\n     *\n     * ```ts\n     * schema.setAttributeProperties( 'blockQuote', {\n     * \tcustomProperty: 'value'\n     * } );\n     * ```\n     *\n     * Subsequent calls with the same attribute will extend its custom properties:\n     *\n     * ```ts\n     * schema.setAttributeProperties( 'blockQuote', {\n     * \tone: 1\n     * } );\n     *\n     * schema.setAttributeProperties( 'blockQuote', {\n     * \ttwo: 2\n     * } );\n     *\n     * console.log( schema.getAttributeProperties( 'blockQuote' ) );\n     * // Logs: { one: 1, two: 2 }\n     * ```\n     *\n     * @param attributeName A name of the attribute to receive the properties.\n     * @param properties A dictionary of properties.\n     */\n    setAttributeProperties(attributeName, properties) {\n        this._attributeProperties[attributeName] = Object.assign(this.getAttributeProperties(attributeName), properties);\n    }\n    /**\n     * Returns properties associated with a given model attribute. See {@link #setAttributeProperties `setAttributeProperties()`}.\n     *\n     * @param attributeName A name of the attribute.\n     */\n    getAttributeProperties(attributeName) {\n        return this._attributeProperties[attributeName] || Object.create(null);\n    }\n    /**\n     * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\n     * selection/range/position or the root otherwise.\n     *\n     * @param selectionOrRangeOrPosition The selection/range/position to check.\n     * @returns The lowest limit element containing the entire `selectionOrRangeOrPosition`.\n     */\n    getLimitElement(selectionOrRangeOrPosition) {\n        let element;\n        if (selectionOrRangeOrPosition instanceof Position) {\n            element = selectionOrRangeOrPosition.parent;\n        }\n        else {\n            const ranges = selectionOrRangeOrPosition instanceof Range ?\n                [selectionOrRangeOrPosition] :\n                Array.from(selectionOrRangeOrPosition.getRanges());\n            // Find the common ancestor for all selection's ranges.\n            element = ranges\n                .reduce((element, range) => {\n                const rangeCommonAncestor = range.getCommonAncestor();\n                if (!element) {\n                    return rangeCommonAncestor;\n                }\n                return element.getCommonAncestor(rangeCommonAncestor, { includeSelf: true });\n            }, null);\n        }\n        while (!this.isLimit(element)) {\n            if (element.parent) {\n                element = element.parent;\n            }\n            else {\n                break;\n            }\n        }\n        return element;\n    }\n    /**\n     * Checks whether the attribute is allowed in selection:\n     *\n     * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\n     * * if the selection is collapsed, then checks if on the selection position there's a text with the\n     * specified attribute allowed.\n     *\n     * @param selection Selection which will be checked.\n     * @param attribute The name of the attribute to check.\n     */\n    checkAttributeInSelection(selection, attribute) {\n        if (selection.isCollapsed) {\n            const firstPosition = selection.getFirstPosition();\n            const context = [\n                ...firstPosition.getAncestors(),\n                new Text('', selection.getAttributes())\n            ];\n            // Check whether schema allows for a text with the attribute in the selection.\n            return this.checkAttribute(context, attribute);\n        }\n        else {\n            const ranges = selection.getRanges();\n            // For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\n            for (const range of ranges) {\n                for (const value of range) {\n                    if (this.checkAttribute(value.item, attribute)) {\n                        // If we found a node that is allowed to have the attribute, return true.\n                        return true;\n                    }\n                }\n            }\n        }\n        // If we haven't found such node, return false.\n        return false;\n    }\n    /**\n     * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\n     *\n     * @param ranges Ranges to be validated.\n     * @param attribute The name of the attribute to check.\n     * @returns Ranges in which the attribute is allowed.\n     */\n    *getValidRanges(ranges, attribute) {\n        ranges = convertToMinimalFlatRanges(ranges);\n        for (const range of ranges) {\n            yield* this._getValidRangesForRange(range, attribute);\n        }\n    }\n    /**\n     * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range range} which is\n     * nearest to that `position` and is a correct range for selection.\n     *\n     * The correct selection range might be collapsed when it is located in a position where the text node can be placed.\n     * Non-collapsed range is returned when selection can be placed around element marked as an \"object\" in\n     * the {@link module:engine/model/schema~Schema schema}.\n     *\n     * Direction of searching for the nearest correct selection range can be specified as:\n     *\n     * * `both` - searching will be performed in both ways,\n     * * `forward` - searching will be performed only forward,\n     * * `backward` - searching will be performed only backward.\n     *\n     * When valid selection range cannot be found, `null` is returned.\n     *\n     * @param position Reference position where new selection range should be looked for.\n     * @param direction Search direction.\n     * @returns Nearest selection range or `null` if one cannot be found.\n     */\n    getNearestSelectionRange(position, direction = 'both') {\n        if (position.root.rootName == '$graveyard') {\n            // No valid selection range in the graveyard.\n            // This is important when getting the document selection default range.\n            return null;\n        }\n        // Return collapsed range if provided position is valid.\n        if (this.checkChild(position, '$text')) {\n            return new Range(position);\n        }\n        let backwardWalker, forwardWalker;\n        // Never leave a limit element.\n        const limitElement = position.getAncestors().reverse().find(item => this.isLimit(item)) ||\n            position.root;\n        if (direction == 'both' || direction == 'backward') {\n            backwardWalker = new TreeWalker({\n                boundaries: Range._createIn(limitElement),\n                startPosition: position,\n                direction: 'backward'\n            });\n        }\n        if (direction == 'both' || direction == 'forward') {\n            forwardWalker = new TreeWalker({\n                boundaries: Range._createIn(limitElement),\n                startPosition: position\n            });\n        }\n        for (const data of combineWalkers(backwardWalker, forwardWalker)) {\n            const type = (data.walker == backwardWalker ? 'elementEnd' : 'elementStart');\n            const value = data.value;\n            if (value.type == type && this.isObject(value.item)) {\n                return Range._createOn(value.item);\n            }\n            if (this.checkChild(value.nextPosition, '$text')) {\n                return new Range(value.nextPosition);\n            }\n        }\n        return null;\n    }\n    /**\n     * Tries to find position ancestors that allow to insert a given node.\n     * It starts searching from the given position and goes node by node to the top of the model tree\n     * as long as a {@link module:engine/model/schema~Schema#isLimit limit element}, an\n     * {@link module:engine/model/schema~Schema#isObject object element} or a topmost ancestor is not reached.\n     *\n     * @param position The position that the search will start from.\n     * @param node The node for which an allowed parent should be found or its name.\n     * @returns Allowed parent or null if nothing was found.\n     */\n    findAllowedParent(position, node) {\n        let parent = position.parent;\n        while (parent) {\n            if (this.checkChild(parent, node)) {\n                return parent;\n            }\n            // Do not split limit elements.\n            if (this.isLimit(parent)) {\n                return null;\n            }\n            parent = parent.parent;\n        }\n        return null;\n    }\n    /**\n     * Sets attributes allowed by the schema on a given node.\n     *\n     * @param node A node to set attributes on.\n     * @param attributes Attributes keys and values.\n     * @param writer An instance of the model writer.\n     */\n    setAllowedAttributes(node, attributes, writer) {\n        const model = writer.model;\n        for (const [attributeName, attributeValue] of Object.entries(attributes)) {\n            if (model.schema.checkAttribute(node, attributeName)) {\n                writer.setAttribute(attributeName, attributeValue, node);\n            }\n        }\n    }\n    /**\n     * Removes attributes disallowed by the schema.\n     *\n     * @param nodes Nodes that will be filtered.\n     */\n    removeDisallowedAttributes(nodes, writer) {\n        for (const node of nodes) {\n            // When node is a `Text` it has no children, so just filter it out.\n            if (node.is('$text')) {\n                removeDisallowedAttributeFromNode(this, node, writer);\n            }\n            // In a case of `Element` iterates through positions between nodes inside this element\n            // and filter out node before the current position, or position parent when position\n            // is at start of an element. Using positions prevent from omitting merged nodes\n            // see https://github.com/ckeditor/ckeditor5-engine/issues/1789.\n            else {\n                const rangeInNode = Range._createIn(node);\n                const positionsInRange = rangeInNode.getPositions();\n                for (const position of positionsInRange) {\n                    const item = position.nodeBefore || position.parent;\n                    removeDisallowedAttributeFromNode(this, item, writer);\n                }\n            }\n        }\n    }\n    /**\n     * Gets attributes of a node that have a given property.\n     *\n     * @param node Node to get attributes from.\n     * @param propertyName Name of the property that attribute must have to return it.\n     * @param propertyValue Desired value of the property that we want to check.\n     * When `undefined` attributes will be returned if they have set a given property no matter what the value is. If specified it will\n     * return attributes which given property's value is equal to this parameter.\n     * @returns Object with attributes' names as key and attributes' values as value.\n     */\n    getAttributesWithProperty(node, propertyName, propertyValue) {\n        const attributes = {};\n        for (const [attributeName, attributeValue] of node.getAttributes()) {\n            const attributeProperties = this.getAttributeProperties(attributeName);\n            if (attributeProperties[propertyName] === undefined) {\n                continue;\n            }\n            if (propertyValue === undefined || propertyValue === attributeProperties[propertyName]) {\n                attributes[attributeName] = attributeValue;\n            }\n        }\n        return attributes;\n    }\n    /**\n     * Creates an instance of the schema context.\n     */\n    createContext(context) {\n        return new SchemaContext(context);\n    }\n    _clearCache() {\n        this._compiledDefinitions = null;\n    }\n    _compile() {\n        const definitions = {};\n        const sourceRules = this._sourceDefinitions;\n        const itemNames = Object.keys(sourceRules);\n        for (const itemName of itemNames) {\n            definitions[itemName] = compileBaseItemRule(sourceRules[itemName], itemName);\n        }\n        const items = Object.values(definitions);\n        // Sometimes features add rules (allows, disallows) for items that has not been registered yet. We allow that, to make it easier\n        // to put the schema together. However, sometimes these items are never registered. To prevent operating\n        // removeUnregisteredEntries( definitions, items );\n        // 1. Propagate `childItem.allowIn` to `parentItem.allowChildren` and vice versa, so that these properties are completely mirrored\n        // for all children and parents. Do the same for `disallowIn` and `disallowChildren`.\n        for (const item of items) {\n            propagateAllowIn(definitions, item);\n            propagateAllowChildren(definitions, item);\n            propagateDisallowIn(definitions, item);\n            propagateDisallowChildren(definitions, item);\n        }\n        // 2. Remove from `allowIn` and `allowChildren` these items which where disallowed by `disallowIn` and `disallowChildren`.\n        // Do the same for attributes. Now we have a clear situation where which item/attribute is allowed. Inheritance is in next steps.\n        for (const item of items) {\n            resolveDisallows(definitions, item);\n        }\n        // 3. Compile `item.allowContentOf` property. For each entry in `allowContentOf`, we want to take `allowChildren` and rewrite\n        // them into `item.allowChildren`. `item.disallowChildren` is used to filter out some entries. This way \"own rules\" have higher\n        // priority than \"inherited rules\". Mirroring from step 1. is maintained.\n        for (const item of items) {\n            compileAllowContentOf(definitions, item);\n        }\n        // 4. Compile `item.allowWhere` property. For each entry in `allowWhere`, we want to take `allowIn` and rewrite them into\n        // `item.allowIn`. `item.disallowIn` is used to filter out some entries. This way \"own rules\" have higher priority than\n        // \"inherited rules\". Mirroring from step 1. is maintained.\n        for (const item of items) {\n            compileAllowWhere(definitions, item);\n        }\n        // 5. Compile `item.allowAttributesOf`. For each entry in `allowAttributesOf`, we want to take `allowAttributes` and rewrite them\n        // into `item.allowAttributes`. `item.disallowAttributes` is used to filter out some entries. This way \"own rules\" have higher\n        // priority than \"inherited rules\".\n        for (const item of items) {\n            compileAllowAttributesOf(definitions, item);\n        }\n        // 6. Compile `item.inheritTypesFrom` property. For each entry in `inheritTypesFrom`, we want to take `is*` properties and\n        // set them on `item` (if they are not set yet).\n        for (const item of items) {\n            compileInheritPropertiesFrom(definitions, item);\n        }\n        // Compile final definitions. Unnecessary properties are removed and some additional cleaning is applied.\n        this._compiledDefinitions = compileDefinitions(definitions);\n    }\n    _checkContextMatch(context, def) {\n        const parentItem = context.last;\n        // First, check all child checks declared as callbacks.\n        // Note that `_evaluateChildChecks()` will return `undefined` if neither child check was applicable (no decision was made).\n        let isAllowed = this._evaluateChildChecks(context, def);\n        // If the decision was not made inside child check callbacks, then use declarative rules.\n        isAllowed = isAllowed !== undefined ? isAllowed : def.allowIn.includes(parentItem.name);\n        // If the item is not allowed in the `context`, return `false`.\n        if (!isAllowed) {\n            return false;\n        }\n        // If the item is allowed, recursively verify the rest of the `context`.\n        const parentItemDefinition = this.getDefinition(parentItem);\n        const parentContext = context.trimLast();\n        // One of the items in the original `context` did not have a definition specified. In this case, the whole context is disallowed.\n        if (!parentItemDefinition) {\n            return false;\n        }\n        // Whole `context` was verified and passed checks.\n        if (parentContext.length == 0) {\n            return true;\n        }\n        // Verify \"truncated\" parent context. The last item of the original context is now the definition to check.\n        return this._checkContextMatch(parentContext, parentItemDefinition);\n    }\n    /**\n     * Calls child check callbacks to decide whether `def` is allowed in `context`. It uses both generic and specific (defined for `def`\n     * item) callbacks. If neither callback makes a decision, `undefined` is returned.\n     *\n     * Note that the first callback that makes a decision \"wins\", i.e., if any callback returns `true` or `false`, then the processing\n     * is over and that result is returned.\n     */\n    _evaluateChildChecks(context, def) {\n        const genericChecks = this._customChildChecks.get(this._genericCheckSymbol) || [];\n        const childChecks = this._customChildChecks.get(def.name) || [];\n        for (const check of [...genericChecks, ...childChecks]) {\n            const result = check(context, def);\n            if (result !== undefined) {\n                return result;\n            }\n        }\n    }\n    /**\n     * Calls attribute check callbacks to decide whether `attributeName` can be set on the last element of `context`. It uses both\n     * generic and specific (defined for `attributeName`) callbacks. If neither callback makes a decision, `undefined` is returned.\n     *\n     * Note that the first callback that makes a decision \"wins\", i.e., if any callback returns `true` or `false`, then the processing\n     * is over and that result is returned.\n     */\n    _evaluateAttributeChecks(context, attributeName) {\n        const genericChecks = this._customAttributeChecks.get(this._genericCheckSymbol) || [];\n        const childChecks = this._customAttributeChecks.get(attributeName) || [];\n        for (const check of [...genericChecks, ...childChecks]) {\n            const result = check(context, attributeName);\n            if (result !== undefined) {\n                return result;\n            }\n        }\n    }\n    /**\n     * Takes a flat range and an attribute name. Traverses the range recursively and deeply to find and return all ranges\n     * inside the given range on which the attribute can be applied.\n     *\n     * This is a helper function for {@link ~Schema#getValidRanges}.\n     *\n     * @param range The range to process.\n     * @param attribute The name of the attribute to check.\n     * @returns Ranges in which the attribute is allowed.\n     */\n    *_getValidRangesForRange(range, attribute) {\n        let start = range.start;\n        let end = range.start;\n        for (const item of range.getItems({ shallow: true })) {\n            if (item.is('element')) {\n                yield* this._getValidRangesForRange(Range._createIn(item), attribute);\n            }\n            if (!this.checkAttribute(item, attribute)) {\n                if (!start.isEqual(end)) {\n                    yield new Range(start, end);\n                }\n                start = Position._createAfter(item);\n            }\n            end = Position._createAfter(item);\n        }\n        if (!start.isEqual(end)) {\n            yield new Range(start, end);\n        }\n    }\n    /**\n     * Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n     *\n     * For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n     * will be returned so that it is not split. If the selection is at the end of a paragraph,\n     * the collapsed range after this paragraph will be returned.\n     *\n     * Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n     * is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n     * by the inserted widget block.\n     *\n     * @internal\n     * @param selection The selection based on which the insertion position should be calculated.\n     * @param place The place where to look for optimal insertion range.\n     * The `auto` value will determine itself the best position for insertion.\n     * The `before` value will try to find a position before selection.\n     * The `after` value will try to find a position after selection.\n     * @returns The optimal range.\n     */\n    findOptimalInsertionRange(selection, place) {\n        const selectedElement = selection.getSelectedElement();\n        if (selectedElement && this.isObject(selectedElement) && !this.isInline(selectedElement)) {\n            if (place == 'before' || place == 'after') {\n                return new Range(Position._createAt(selectedElement, place));\n            }\n            return Range._createOn(selectedElement);\n        }\n        const firstBlock = first(selection.getSelectedBlocks());\n        // There are no block elements within ancestors (in the current limit element).\n        if (!firstBlock) {\n            return new Range(selection.focus);\n        }\n        // If inserting into an empty block – return position in that block. It will get\n        // replaced with the image by insertContent(). #42.\n        if (firstBlock.isEmpty) {\n            return new Range(Position._createAt(firstBlock, 0));\n        }\n        const positionAfter = Position._createAfter(firstBlock);\n        // If selection is at the end of the block - return position after the block.\n        if (selection.focus.isTouching(positionAfter)) {\n            return new Range(positionAfter);\n        }\n        // Otherwise, return position before the block.\n        return new Range(Position._createBefore(firstBlock));\n    }\n}\n/**\n * A schema context &ndash; a list of ancestors of a given position in the document.\n *\n * Considering such position:\n *\n * ```xml\n * <$root>\n * \t<blockQuote>\n * \t\t<paragraph>\n * \t\t\t^\n * \t\t</paragraph>\n * \t</blockQuote>\n * </$root>\n * ```\n *\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\n *\n *\t\t[ rootElement, blockQuoteElement, paragraphElement ]\n *\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\n */\nexport class SchemaContext {\n    /**\n     * Creates an instance of the context.\n     */\n    constructor(context) {\n        if (context instanceof SchemaContext) {\n            return context;\n        }\n        let items;\n        if (typeof context == 'string') {\n            items = [context];\n        }\n        else if (!Array.isArray(context)) {\n            // `context` is item or position.\n            // Position#getAncestors() doesn't accept any parameters but it works just fine here.\n            items = context.getAncestors({ includeSelf: true });\n        }\n        else {\n            items = context;\n        }\n        this._items = items.map(mapContextItem);\n    }\n    /**\n     * The number of items.\n     */\n    get length() {\n        return this._items.length;\n    }\n    /**\n     * The last item (the lowest node).\n     */\n    get last() {\n        return this._items[this._items.length - 1];\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over all context items.\n     */\n    [Symbol.iterator]() {\n        return this._items[Symbol.iterator]();\n    }\n    /**\n     * Returns a new schema context instance with an additional item.\n     *\n     * Item can be added as:\n     *\n     * ```ts\n     * const context = new SchemaContext( [ '$root' ] );\n     *\n     * // An element.\n     * const fooElement = writer.createElement( 'fooElement' );\n     * const newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\n     *\n     * // A text node.\n     * const text = writer.createText( 'foobar' );\n     * const newContext = context.push( text ); // [ '$root', '$text' ]\n     *\n     * // A string (element name).\n     * const newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\n     * ```\n     *\n     * **Note** {@link module:engine/model/node~Node} that is already in the model tree will be added as the only item\n     * (without ancestors).\n     *\n     * @param item An item that will be added to the current context.\n     * @returns A new schema context instance with an additional item.\n     */\n    push(item) {\n        const ctx = new SchemaContext([item]);\n        ctx._items = [...this._items, ...ctx._items];\n        return ctx;\n    }\n    /**\n     * Returns a new schema context that is based on this context but has the last item removed.\n     *\n     * ```ts\n     * const ctxParagraph = new SchemaContext( [ '$root', 'blockQuote', 'paragraph' ] );\n     * const ctxBlockQuote = ctxParagraph.trimLast(); // Items in `ctxBlockQuote` are: `$root` an `blockQuote`.\n     * const ctxRoot = ctxBlockQuote.trimLast(); // Items in `ctxRoot` are: `$root`.\n     * ```\n     *\n     * @returns A new reduced schema context instance.\n     */\n    trimLast() {\n        const ctx = new SchemaContext([]);\n        ctx._items = this._items.slice(0, -1);\n        return ctx;\n    }\n    /**\n     * Gets an item on the given index.\n     */\n    getItem(index) {\n        return this._items[index];\n    }\n    /**\n     * Returns the names of items.\n     */\n    *getNames() {\n        yield* this._items.map(item => item.name);\n    }\n    /**\n     * Checks whether the context ends with the given nodes.\n     *\n     * ```ts\n     * const ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n     *\n     * ctx.endsWith( '$text' ); // -> true\n     * ctx.endsWith( 'paragraph $text' ); // -> true\n     * ctx.endsWith( '$root' ); // -> false\n     * ctx.endsWith( 'paragraph' ); // -> false\n     * ```\n     */\n    endsWith(query) {\n        return Array.from(this.getNames()).join(' ').endsWith(query);\n    }\n    /**\n     * Checks whether the context starts with the given nodes.\n     *\n     * ```ts\n     * const ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n     *\n     * ctx.endsWith( '$root' ); // -> true\n     * ctx.endsWith( '$root paragraph' ); // -> true\n     * ctx.endsWith( '$text' ); // -> false\n     * ctx.endsWith( 'paragraph' ); // -> false\n     * ```\n     */\n    startsWith(query) {\n        return Array.from(this.getNames()).join(' ').startsWith(query);\n    }\n}\nfunction compileBaseItemRule(sourceItemRules, itemName) {\n    const itemRule = {\n        name: itemName,\n        allowIn: new Set(),\n        allowChildren: new Set(),\n        disallowIn: new Set(),\n        disallowChildren: new Set(),\n        allowContentOf: new Set(),\n        allowWhere: new Set(),\n        allowAttributes: new Set(),\n        disallowAttributes: new Set(),\n        allowAttributesOf: new Set(),\n        inheritTypesFrom: new Set()\n    };\n    copyTypes(sourceItemRules, itemRule);\n    copyProperty(sourceItemRules, itemRule, 'allowIn');\n    copyProperty(sourceItemRules, itemRule, 'allowChildren');\n    copyProperty(sourceItemRules, itemRule, 'disallowIn');\n    copyProperty(sourceItemRules, itemRule, 'disallowChildren');\n    copyProperty(sourceItemRules, itemRule, 'allowContentOf');\n    copyProperty(sourceItemRules, itemRule, 'allowWhere');\n    copyProperty(sourceItemRules, itemRule, 'allowAttributes');\n    copyProperty(sourceItemRules, itemRule, 'disallowAttributes');\n    copyProperty(sourceItemRules, itemRule, 'allowAttributesOf');\n    copyProperty(sourceItemRules, itemRule, 'inheritTypesFrom');\n    resolveInheritAll(sourceItemRules, itemRule);\n    return itemRule;\n}\nfunction propagateAllowIn(definitions, item) {\n    for (const parentName of item.allowIn) {\n        const parentItem = definitions[parentName];\n        if (parentItem) {\n            parentItem.allowChildren.add(item.name);\n        }\n        else {\n            item.allowIn.delete(parentName);\n        }\n    }\n}\nfunction propagateAllowChildren(definitions, item) {\n    for (const childName of item.allowChildren) {\n        const childItem = definitions[childName];\n        if (childItem) {\n            childItem.allowIn.add(item.name);\n        }\n        else {\n            item.allowChildren.delete(childName);\n        }\n    }\n}\nfunction propagateDisallowIn(definitions, item) {\n    for (const parentName of item.disallowIn) {\n        const parentItem = definitions[parentName];\n        if (parentItem) {\n            parentItem.disallowChildren.add(item.name);\n        }\n        else {\n            item.disallowIn.delete(parentName);\n        }\n    }\n}\nfunction propagateDisallowChildren(definitions, item) {\n    for (const childName of item.disallowChildren) {\n        const childItem = definitions[childName];\n        if (childItem) {\n            childItem.disallowIn.add(item.name);\n        }\n        else {\n            item.disallowChildren.delete(childName);\n        }\n    }\n}\nfunction resolveDisallows(definitions, item) {\n    for (const childName of item.disallowChildren) {\n        item.allowChildren.delete(childName);\n    }\n    for (const parentName of item.disallowIn) {\n        item.allowIn.delete(parentName);\n    }\n    for (const attributeName of item.disallowAttributes) {\n        item.allowAttributes.delete(attributeName);\n    }\n}\nfunction compileAllowContentOf(definitions, item) {\n    for (const allowContentOfItemName of item.allowContentOf) {\n        const baseItem = definitions[allowContentOfItemName];\n        if (!baseItem) {\n            continue;\n        }\n        // Copy `disallowChildren` to propagate this \"knowledge\" down the inheritance chain. The inheritance may involve multiple items and\n        // if this is not propagated, then items down the chain may start to allow for items that were disallowed by previous base items.\n        //\n        // The scenarios were it is important involves multiple inherits both on parent items side and on the child items side.\n        baseItem.disallowChildren.forEach(childName => {\n            // Own item's rules takes precedence before inherited.\n            // If the item directly allows for given child, ignore that base item disallowed that child.\n            if (item.allowChildren.has(childName)) {\n                return;\n            }\n            item.disallowChildren.add(childName);\n            definitions[childName].disallowIn.add(item.name);\n        });\n        // Copy `allowChildren` from the base item to allow for the same items.\n        baseItem.allowChildren.forEach(childName => {\n            // Own item's rules takes precedence before inherited.\n            // Also, `item.disallowChildren` might get some new items during inheritance process.\n            if (item.disallowChildren.has(childName)) {\n                return;\n            }\n            item.allowChildren.add(childName);\n            definitions[childName].allowIn.add(item.name);\n        });\n    }\n}\nfunction compileAllowWhere(definitions, item) {\n    for (const allowWhereItemName of item.allowWhere) {\n        const baseItem = definitions[allowWhereItemName];\n        if (!baseItem) {\n            continue;\n        }\n        // Copy `disallowIn` to propagate this \"knowledge\" down the inheritance chain. The inheritance may involve multiple items and\n        // if this is not propagated, then items down the chain may start to be allowed in items in which they were disallowed previously.\n        //\n        // The scenarios were it is important involves multiple inherits both on parent items side and on the child items side.\n        baseItem.disallowIn.forEach(parentName => {\n            // Own item's rules takes precedence before inherited.\n            // If the item is directly allowed in given parent, ignore that base item was disallowed in it.\n            if (item.allowIn.has(parentName)) {\n                return;\n            }\n            item.disallowIn.add(parentName);\n            definitions[parentName].disallowChildren.add(item.name);\n        });\n        // Copy `allowIn` from the base item to allow item in same parents.\n        baseItem.allowIn.forEach(parentName => {\n            // Own item's rules takes precedence before inherited.\n            // Also, `item.disallowIn` might get some new items during inheritance process.\n            if (item.disallowIn.has(parentName)) {\n                return;\n            }\n            item.allowIn.add(parentName);\n            definitions[parentName].allowChildren.add(item.name);\n        });\n    }\n}\nfunction compileDefinitions(definitions) {\n    const finalDefinitions = {};\n    for (const item of Object.values(definitions)) {\n        finalDefinitions[item.name] = {\n            name: item.name,\n            // `is*` properties may not be set - convert `undefined` to `false`.\n            isBlock: !!item.isBlock,\n            isContent: !!item.isContent,\n            isInline: !!item.isInline,\n            isLimit: !!item.isLimit,\n            isObject: !!item.isObject,\n            isSelectable: !!item.isSelectable,\n            // Filter out non-existing items.\n            allowIn: Array.from(item.allowIn).filter(name => !!definitions[name]),\n            allowChildren: Array.from(item.allowChildren).filter(name => !!definitions[name]),\n            allowAttributes: Array.from(item.allowAttributes)\n        };\n    }\n    return finalDefinitions;\n}\nfunction compileAllowAttributesOf(definitions, item) {\n    for (const allowAttributeOfItemName of item.allowAttributesOf) {\n        const baseItem = definitions[allowAttributeOfItemName];\n        if (!baseItem) {\n            return;\n        }\n        baseItem.allowAttributes.forEach(attributeName => {\n            if (item.disallowAttributes.has(attributeName)) {\n                return;\n            }\n            item.allowAttributes.add(attributeName);\n        });\n    }\n}\nfunction compileInheritPropertiesFrom(definitions, item) {\n    for (const inheritPropertiesOfItemName of item.inheritTypesFrom) {\n        const inheritFrom = definitions[inheritPropertiesOfItemName];\n        if (inheritFrom) {\n            const typeNames = Object.keys(inheritFrom).filter(name => name.startsWith('is'));\n            for (const name of typeNames) {\n                if (!(name in item)) {\n                    item[name] = inheritFrom[name];\n                }\n            }\n        }\n    }\n}\nfunction copyTypes(sourceItemRules, itemRule) {\n    for (const sourceItemRule of sourceItemRules) {\n        const typeNames = Object.keys(sourceItemRule).filter(name => name.startsWith('is'));\n        for (const name of typeNames) {\n            itemRule[name] = !!sourceItemRule[name];\n        }\n    }\n}\nfunction copyProperty(sourceItemRules, itemRule, propertyName) {\n    for (const sourceItemRule of sourceItemRules) {\n        let value = sourceItemRule[propertyName];\n        // `value` can be a string, an array or undefined.\n        // Convert a string to an array with one item, then handle an array. Skip undefined this way.\n        if (typeof value == 'string') {\n            value = [value];\n        }\n        if (Array.isArray(value)) {\n            value.forEach(singleValue => itemRule[propertyName].add(singleValue));\n        }\n    }\n}\nfunction resolveInheritAll(sourceItemRules, itemRule) {\n    for (const sourceItemRule of sourceItemRules) {\n        const inheritFrom = sourceItemRule.inheritAllFrom;\n        if (inheritFrom) {\n            itemRule.allowContentOf.add(inheritFrom);\n            itemRule.allowWhere.add(inheritFrom);\n            itemRule.allowAttributesOf.add(inheritFrom);\n            itemRule.inheritTypesFrom.add(inheritFrom);\n        }\n    }\n}\nfunction mapContextItem(ctxItem) {\n    if (typeof ctxItem == 'string' || ctxItem.is('documentFragment')) {\n        return {\n            name: typeof ctxItem == 'string' ? ctxItem : '$documentFragment',\n            *getAttributeKeys() { },\n            getAttribute() { }\n        };\n    }\n    else {\n        return {\n            // '$text' means text nodes and text proxies.\n            name: ctxItem.is('element') ? ctxItem.name : '$text',\n            *getAttributeKeys() {\n                yield* ctxItem.getAttributeKeys();\n            },\n            getAttribute(key) {\n                return ctxItem.getAttribute(key);\n            }\n        };\n    }\n}\n/**\n * Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\n * is provided it will return data only from that walker.\n *\n * @param backward Walker iterating in backward direction.\n * @param forward Walker iterating in forward direction.\n * @returns Object returned at each iteration contains `value` and `walker` (informing which walker returned\n * given value) fields.\n */\nfunction* combineWalkers(backward, forward) {\n    let done = false;\n    while (!done) {\n        done = true;\n        if (backward) {\n            const step = backward.next();\n            if (!step.done) {\n                done = false;\n                yield {\n                    walker: backward,\n                    value: step.value\n                };\n            }\n        }\n        if (forward) {\n            const step = forward.next();\n            if (!step.done) {\n                done = false;\n                yield {\n                    walker: forward,\n                    value: step.value\n                };\n            }\n        }\n    }\n}\n/**\n * Takes an array of non-intersecting ranges. For each of them gets minimal flat ranges covering that range and returns\n * all those minimal flat ranges.\n *\n * @param ranges Ranges to process.\n * @returns Minimal flat ranges of given `ranges`.\n */\nfunction* convertToMinimalFlatRanges(ranges) {\n    for (const range of ranges) {\n        yield* range.getMinimalFlatRanges();\n    }\n}\nfunction removeDisallowedAttributeFromNode(schema, node, writer) {\n    for (const attribute of node.getAttributeKeys()) {\n        if (!schema.checkAttribute(node, attribute)) {\n            writer.removeAttribute(attribute, node);\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/upcastdispatcher\n */\nimport ViewConsumable from './viewconsumable.js';\nimport ModelRange from '../model/range.js';\nimport ModelPosition from '../model/position.js';\nimport { SchemaContext } from '../model/schema.js'; // eslint-disable-line no-duplicate-imports\nimport { isParagraphable, wrapInParagraph } from '../model/utils/autoparagraphing.js';\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Upcast dispatcher is a central point of the view-to-model conversion, which is a process of\n * converting a given {@link module:engine/view/documentfragment~DocumentFragment view document fragment} or\n * {@link module:engine/view/element~Element view element} into a correct model structure.\n *\n * During the conversion process, the dispatcher fires events for all {@link module:engine/view/node~Node view nodes}\n * from the converted view document fragment.\n * Special callbacks called \"converters\" should listen to these events in order to convert the view nodes.\n *\n * The second parameter of the callback is the `data` object with the following properties:\n *\n * * `data.viewItem` contains a {@link module:engine/view/node~Node view node} or a\n * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * that is converted at the moment and might be handled by the callback.\n * * `data.modelRange` is used to point to the result\n * of the current conversion (e.g. the element that is being inserted)\n * and is always a {@link module:engine/model/range~Range} when the conversion succeeds.\n * * `data.modelCursor` is a {@link module:engine/model/position~Position position} on which the converter should insert\n * the newly created items.\n *\n * The third parameter of the callback is an instance of {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi}\n * which provides additional tools for converters.\n *\n * You can read more about conversion in the {@glink framework/deep-dive/conversion/upcast Upcast conversion} guide.\n *\n * Examples of event-based converters:\n *\n * ```ts\n * // A converter for links (<a>).\n * editor.data.upcastDispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\n * \tif ( conversionApi.consumable.consume( data.viewItem, { name: true, attributes: [ 'href' ] } ) ) {\n * \t\t// The <a> element is inline and is represented by an attribute in the model.\n * \t\t// This is why you need to convert only children.\n * \t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n *\n * \t\tfor ( let item of modelRange.getItems() ) {\n * \t\t\tif ( conversionApi.schema.checkAttribute( item, 'linkHref' ) ) {\n * \t\t\t\tconversionApi.writer.setAttribute( 'linkHref', data.viewItem.getAttribute( 'href' ), item );\n * \t\t\t}\n * \t\t}\n * \t}\n * } );\n *\n * // Convert <p> element's font-size style.\n * // Note: You should use a low-priority observer in order to ensure that\n * // it is executed after the element-to-element converter.\n * editor.data.upcastDispatcher.on( 'element:p', ( evt, data, conversionApi ) => {\n * \tconst { consumable, schema, writer } = conversionApi;\n *\n * \tif ( !consumable.consume( data.viewItem, { style: 'font-size' } ) ) {\n * \t\treturn;\n * \t}\n *\n * \tconst fontSize = data.viewItem.getStyle( 'font-size' );\n *\n * \t// Do not go for the model element after data.modelCursor because it might happen\n * \t// that a single view element was converted to multiple model elements. Get all of them.\n * \tfor ( const item of data.modelRange.getItems( { shallow: true } ) ) {\n * \t\tif ( schema.checkAttribute( item, 'fontSize' ) ) {\n * \t\t\twriter.setAttribute( 'fontSize', fontSize, item );\n * \t\t}\n * \t}\n * }, { priority: 'low' } );\n *\n * // Convert all elements which have no custom converter into a paragraph (autoparagraphing).\n * editor.data.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n * \t// Check if an element can be converted.\n * \tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n * \t\t// When an element is already consumed by higher priority converters, do nothing.\n * \t\treturn;\n * \t}\n *\n * \tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n *\n * \t// Try to safely insert a paragraph at the model cursor - it will find an allowed parent for the current element.\n * \tif ( !conversionApi.safeInsert( paragraph, data.modelCursor ) ) {\n * \t\t// When an element was not inserted, it means that you cannot insert a paragraph at this position.\n * \t\treturn;\n * \t}\n *\n * \t// Consume the inserted element.\n * \tconversionApi.consumable.consume( data.viewItem, { name: data.viewItem.name } ) );\n *\n * \t// Convert the children to a paragraph.\n * \tconst { modelRange } = conversionApi.convertChildren( data.viewItem,  paragraph ) );\n *\n * \t// Update `modelRange` and `modelCursor` in the `data` as a conversion result.\n * \tconversionApi.updateConversionResult( paragraph, data );\n * }, { priority: 'low' } );\n * ```\n *\n * @fires viewCleanup\n * @fires element\n * @fires text\n * @fires documentFragment\n */\nexport default class UpcastDispatcher extends /* #__PURE__ */ EmitterMixin() {\n    /**\n     * Creates an upcast dispatcher that operates using the passed API.\n     *\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi\n     * @param conversionApi Additional properties for an interface that will be passed to events fired\n     * by the upcast dispatcher.\n     */\n    constructor(conversionApi) {\n        super();\n        /**\n         * The list of elements that were created during splitting.\n         *\n         * After the conversion process, the list is cleared.\n         */\n        this._splitParts = new Map();\n        /**\n         * The list of cursor parent elements that were created during splitting.\n         *\n         * After the conversion process the list is cleared.\n         */\n        this._cursorParents = new Map();\n        /**\n         * The position in the temporary structure where the converted content is inserted. The structure reflects the context of\n         * the target position where the content will be inserted. This property is built based on the context parameter of the\n         * convert method.\n         */\n        this._modelCursor = null;\n        /**\n         * The list of elements that were created during the splitting but should not get removed on conversion end even if they are empty.\n         *\n         * The list is cleared after the conversion process.\n         */\n        this._emptyElementsToKeep = new Set();\n        this.conversionApi = {\n            ...conversionApi,\n            consumable: null,\n            writer: null,\n            store: null,\n            convertItem: (viewItem, modelCursor) => this._convertItem(viewItem, modelCursor),\n            convertChildren: (viewElement, positionOrElement) => this._convertChildren(viewElement, positionOrElement),\n            safeInsert: (modelNode, position) => this._safeInsert(modelNode, position),\n            updateConversionResult: (modelElement, data) => this._updateConversionResult(modelElement, data),\n            // Advanced API - use only if custom position handling is needed.\n            splitToAllowedParent: (modelNode, modelCursor) => this._splitToAllowedParent(modelNode, modelCursor),\n            getSplitParts: modelElement => this._getSplitParts(modelElement),\n            keepEmptyElement: modelElement => this._keepEmptyElement(modelElement)\n        };\n    }\n    /**\n     * Starts the conversion process. The entry point for the conversion.\n     *\n     * @fires element\n     * @fires text\n     * @fires documentFragment\n     * @param viewElement The part of the view to be converted.\n     * @param writer An instance of the model writer.\n     * @param context Elements will be converted according to this context.\n     * @returns Model data that is the result of the conversion process\n     * wrapped in `DocumentFragment`. Converted marker elements will be set as the document fragment's\n     * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n     */\n    convert(viewElement, writer, context = ['$root']) {\n        this.fire('viewCleanup', viewElement);\n        // Create context tree and set position in the top element.\n        // Items will be converted according to this position.\n        this._modelCursor = createContextTree(context, writer);\n        // Store writer in conversion as a conversion API\n        // to be sure that conversion process will use the same batch.\n        this.conversionApi.writer = writer;\n        // Create consumable values list for conversion process.\n        this.conversionApi.consumable = ViewConsumable.createFrom(viewElement);\n        // Custom data stored by converter for conversion process.\n        this.conversionApi.store = {};\n        // Do the conversion.\n        const { modelRange } = this._convertItem(viewElement, this._modelCursor);\n        // Conversion result is always a document fragment so let's create it.\n        const documentFragment = writer.createDocumentFragment();\n        // When there is a conversion result.\n        if (modelRange) {\n            // Remove all empty elements that were created while splitting.\n            this._removeEmptyElements();\n            // Move all items that were converted in context tree to the document fragment.\n            for (const item of Array.from(this._modelCursor.parent.getChildren())) {\n                writer.append(item, documentFragment);\n            }\n            // Extract temporary markers elements from model and set as static markers collection.\n            documentFragment.markers = extractMarkersFromModelFragment(documentFragment, writer);\n        }\n        // Clear context position.\n        this._modelCursor = null;\n        // Clear split elements & parents lists.\n        this._splitParts.clear();\n        this._cursorParents.clear();\n        this._emptyElementsToKeep.clear();\n        // Clear conversion API.\n        this.conversionApi.writer = null;\n        this.conversionApi.store = null;\n        // Return fragment as conversion result.\n        return documentFragment;\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertItem\n     */\n    _convertItem(viewItem, modelCursor) {\n        const data = { viewItem, modelCursor, modelRange: null };\n        if (viewItem.is('element')) {\n            this.fire(`element:${viewItem.name}`, data, this.conversionApi);\n        }\n        else if (viewItem.is('$text')) {\n            this.fire('text', data, this.conversionApi);\n        }\n        else {\n            this.fire('documentFragment', data, this.conversionApi);\n        }\n        // Handle incorrect conversion result.\n        if (data.modelRange && !(data.modelRange instanceof ModelRange)) {\n            /**\n             * Incorrect conversion result was dropped.\n             *\n             * {@link module:engine/model/range~Range Model range} should be a conversion result.\n             *\n             * @error view-conversion-dispatcher-incorrect-result\n             */\n            throw new CKEditorError('view-conversion-dispatcher-incorrect-result', this);\n        }\n        return { modelRange: data.modelRange, modelCursor: data.modelCursor };\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertChildren\n     */\n    _convertChildren(viewItem, elementOrModelCursor) {\n        let nextModelCursor = elementOrModelCursor.is('position') ?\n            elementOrModelCursor : ModelPosition._createAt(elementOrModelCursor, 0);\n        const modelRange = new ModelRange(nextModelCursor);\n        for (const viewChild of Array.from(viewItem.getChildren())) {\n            const result = this._convertItem(viewChild, nextModelCursor);\n            if (result.modelRange instanceof ModelRange) {\n                modelRange.end = result.modelRange.end;\n                nextModelCursor = result.modelCursor;\n            }\n        }\n        return { modelRange, modelCursor: nextModelCursor };\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#safeInsert\n     */\n    _safeInsert(modelNode, position) {\n        // Find allowed parent for element that we are going to insert.\n        // If current parent does not allow to insert element but one of the ancestors does\n        // then split nodes to allowed parent.\n        const splitResult = this._splitToAllowedParent(modelNode, position);\n        // When there is no split result it means that we can't insert element to model tree, so let's skip it.\n        if (!splitResult) {\n            return false;\n        }\n        // Insert element on allowed position.\n        this.conversionApi.writer.insert(modelNode, splitResult.position);\n        return true;\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#updateConversionResult\n     */\n    _updateConversionResult(modelElement, data) {\n        const parts = this._getSplitParts(modelElement);\n        const writer = this.conversionApi.writer;\n        // Set conversion result range - only if not set already.\n        if (!data.modelRange) {\n            data.modelRange = writer.createRange(writer.createPositionBefore(modelElement), writer.createPositionAfter(parts[parts.length - 1]));\n        }\n        const savedCursorParent = this._cursorParents.get(modelElement);\n        // Now we need to check where the `modelCursor` should be.\n        if (savedCursorParent) {\n            // If we split parent to insert our element then we want to continue conversion in the new part of the split parent.\n            //\n            // before: <allowed><notAllowed>foo[]</notAllowed></allowed>\n            // after:  <allowed><notAllowed>foo</notAllowed> <converted></converted> <notAllowed>[]</notAllowed></allowed>\n            data.modelCursor = writer.createPositionAt(savedCursorParent, 0);\n        }\n        else {\n            // Otherwise just continue after inserted element.\n            data.modelCursor = data.modelRange.end;\n        }\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#splitToAllowedParent\n     */\n    _splitToAllowedParent(node, modelCursor) {\n        const { schema, writer } = this.conversionApi;\n        // Try to find allowed parent.\n        let allowedParent = schema.findAllowedParent(modelCursor, node);\n        if (allowedParent) {\n            // When current position parent allows to insert node then return this position.\n            if (allowedParent === modelCursor.parent) {\n                return { position: modelCursor };\n            }\n            // When allowed parent is in context tree (it's outside the converted tree).\n            if (this._modelCursor.parent.getAncestors().includes(allowedParent)) {\n                allowedParent = null;\n            }\n        }\n        if (!allowedParent) {\n            // Check if the node wrapped with a paragraph would be accepted by the schema.\n            if (!isParagraphable(modelCursor, node, schema)) {\n                return null;\n            }\n            return {\n                position: wrapInParagraph(modelCursor, writer)\n            };\n        }\n        // Split element to allowed parent.\n        const splitResult = this.conversionApi.writer.split(modelCursor, allowedParent);\n        // Using the range returned by `model.Writer#split`, we will pair original elements with their split parts.\n        //\n        // The range returned from the writer spans \"over the split\" or, precisely saying, from the end of the original element (the one\n        // that got split) to the beginning of the other part of that element:\n        //\n        // <limit><a><b><c>X[]Y</c></b><a></limit> ->\n        // <limit><a><b><c>X[</c></b></a><a><b><c>]Y</c></b></a>\n        //\n        // After the split there cannot be any full node between the positions in `splitRange`. The positions are touching.\n        // Also, because of how splitting works, it is easy to notice, that \"closing tags\" are in the reverse order than \"opening tags\".\n        // Also, since we split all those elements, each of them has to have the other part.\n        //\n        // With those observations in mind, we will pair the original elements with their split parts by saving \"closing tags\" and matching\n        // them with \"opening tags\" in the reverse order. For that we can use a stack.\n        const stack = [];\n        for (const treeWalkerValue of splitResult.range.getWalker()) {\n            if (treeWalkerValue.type == 'elementEnd') {\n                stack.push(treeWalkerValue.item);\n            }\n            else {\n                // There should not be any text nodes after the element is split, so the only other value is `elementStart`.\n                const originalPart = stack.pop();\n                const splitPart = treeWalkerValue.item;\n                this._registerSplitPair(originalPart, splitPart);\n            }\n        }\n        const cursorParent = splitResult.range.end.parent;\n        this._cursorParents.set(node, cursorParent);\n        return {\n            position: splitResult.position,\n            cursorParent\n        };\n    }\n    /**\n     * Registers that a `splitPart` element is a split part of the `originalPart` element.\n     *\n     * The data set by this method is used by {@link #_getSplitParts} and {@link #_removeEmptyElements}.\n     */\n    _registerSplitPair(originalPart, splitPart) {\n        if (!this._splitParts.has(originalPart)) {\n            this._splitParts.set(originalPart, [originalPart]);\n        }\n        const list = this._splitParts.get(originalPart);\n        this._splitParts.set(splitPart, list);\n        list.push(splitPart);\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#getSplitParts\n     */\n    _getSplitParts(element) {\n        let parts;\n        if (!this._splitParts.has(element)) {\n            parts = [element];\n        }\n        else {\n            parts = this._splitParts.get(element);\n        }\n        return parts;\n    }\n    /**\n     * Mark an element that were created during the splitting to not get removed on conversion end even if it is empty.\n     */\n    _keepEmptyElement(element) {\n        this._emptyElementsToKeep.add(element);\n    }\n    /**\n     * Checks if there are any empty elements created while splitting and removes them.\n     *\n     * This method works recursively to re-check empty elements again after at least one element was removed in the initial call,\n     * as some elements might have become empty after other empty elements were removed from them.\n     */\n    _removeEmptyElements() {\n        let anyRemoved = false;\n        for (const element of this._splitParts.keys()) {\n            if (element.isEmpty && !this._emptyElementsToKeep.has(element)) {\n                this.conversionApi.writer.remove(element);\n                this._splitParts.delete(element);\n                anyRemoved = true;\n            }\n        }\n        if (anyRemoved) {\n            this._removeEmptyElements();\n        }\n    }\n}\n/**\n * Traverses given model item and searches elements which marks marker range. Found element is removed from\n * DocumentFragment but path of this element is stored in a Map which is then returned.\n *\n * @param modelItem Fragment of model.\n * @returns List of static markers.\n */\nfunction extractMarkersFromModelFragment(modelItem, writer) {\n    const markerElements = new Set();\n    const markers = new Map();\n    // Create ModelTreeWalker.\n    const range = ModelRange._createIn(modelItem).getItems();\n    // Walk through DocumentFragment and collect marker elements.\n    for (const item of range) {\n        // Check if current element is a marker.\n        if (item.is('element', '$marker')) {\n            markerElements.add(item);\n        }\n    }\n    // Walk through collected marker elements store its path and remove its from the DocumentFragment.\n    for (const markerElement of markerElements) {\n        const markerName = markerElement.getAttribute('data-name');\n        const currentPosition = writer.createPositionBefore(markerElement);\n        // When marker of given name is not stored it means that we have found the beginning of the range.\n        if (!markers.has(markerName)) {\n            markers.set(markerName, new ModelRange(currentPosition.clone()));\n            // Otherwise is means that we have found end of the marker range.\n        }\n        else {\n            markers.get(markerName).end = currentPosition.clone();\n        }\n        // Remove marker element from DocumentFragment.\n        writer.remove(markerElement);\n    }\n    return markers;\n}\n/**\n * Creates model fragment according to given context and returns position in the bottom (the deepest) element.\n */\nfunction createContextTree(contextDefinition, writer) {\n    let position;\n    for (const item of new SchemaContext(contextDefinition)) {\n        const attributes = {};\n        for (const key of item.getAttributeKeys()) {\n            attributes[key] = item.getAttribute(key);\n        }\n        const current = writer.createElement(item.name, attributes);\n        if (position) {\n            writer.insert(current, position);\n        }\n        position = ModelPosition._createAt(current, 0);\n    }\n    return position;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { global } from '@ckeditor/ckeditor5-utils';\n/**\n * Basic HTML writer. It uses the native `innerHTML` property for basic conversion\n * from a document fragment to an HTML string.\n */\nexport default class BasicHtmlWriter {\n    /**\n     * Returns an HTML string created from the document fragment.\n     */\n    getHtml(fragment) {\n        const doc = global.document.implementation.createHTMLDocument('');\n        const container = doc.createElement('div');\n        container.appendChild(fragment);\n        return container.innerHTML;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n/* globals DOMParser */\nimport BasicHtmlWriter from './basichtmlwriter.js';\nimport DomConverter from '../view/domconverter.js';\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n */\nexport default class HtmlDataProcessor {\n    /**\n     * Creates a new instance of the HTML data processor class.\n     *\n     * @param document The view document instance.\n     */\n    constructor(document) {\n        this.skipComments = true;\n        this.domParser = new DOMParser();\n        this.domConverter = new DomConverter(document, { renderingMode: 'data' });\n        this.htmlWriter = new BasicHtmlWriter();\n    }\n    /**\n     * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n     * to data format &ndash; in this case to an HTML string.\n     *\n     * @returns HTML string.\n     */\n    toData(viewFragment) {\n        // Convert view DocumentFragment to DOM DocumentFragment.\n        const domFragment = this.domConverter.viewToDom(viewFragment);\n        // Convert DOM DocumentFragment to HTML output.\n        return this.htmlWriter.getHtml(domFragment);\n    }\n    /**\n     * Converts the provided HTML string to a view tree.\n     *\n     * @param data An HTML string.\n     * @returns A converted view element.\n     */\n    toView(data) {\n        // Convert input HTML data to DOM DocumentFragment.\n        const domFragment = this._toDom(data);\n        // Convert DOM DocumentFragment to view DocumentFragment.\n        return this.domConverter.domToView(domFragment, { skipComments: this.skipComments });\n    }\n    /**\n     * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n     * and not processed during the conversion from the DOM to the view elements.\n     *\n     * The raw data can be later accessed by a\n     * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n     *\n     * @param pattern Pattern matching all view elements whose content should be treated as raw data.\n     */\n    registerRawContentMatcher(pattern) {\n        this.domConverter.registerRawContentMatcher(pattern);\n    }\n    /**\n     * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements\n     * (`<span data-cke-filler=\"true\">&nbsp;</span>`) instead of regular `&nbsp;` characters.\n     *\n     * This mode allows for a more precise handling of the block fillers (so they do not leak into the editor content) but\n     * bloats the editor data with additional markup.\n     *\n     * This mode may be required by some features and will be turned on by them automatically.\n     *\n     * @param type Whether to use the default or the marked `&nbsp;` block fillers.\n     */\n    useFillerType(type) {\n        this.domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n    }\n    /**\n     * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n     * the provided data.\n     */\n    _toDom(data) {\n        // Wrap data with a <body> tag so leading non-layout nodes (like <script>, <style>, HTML comment)\n        // will be preserved in the body collection.\n        // Do it only for data that is not a full HTML document.\n        if (!/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i.test(data.trim().slice(0, 10000))) {\n            data = `<body>${data}</body>`;\n        }\n        const document = this.domParser.parseFromString(data, 'text/html');\n        const fragment = document.createDocumentFragment();\n        const bodyChildNodes = document.body.childNodes;\n        while (bodyChildNodes.length > 0) {\n            fragment.appendChild(bodyChildNodes[0]);\n        }\n        return fragment;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/controller/datacontroller\n */\nimport { CKEditorError, EmitterMixin, ObservableMixin, logWarning } from '@ckeditor/ckeditor5-utils';\nimport Mapper from '../conversion/mapper.js';\nimport DowncastDispatcher from '../conversion/downcastdispatcher.js';\nimport { insertAttributesAndChildren, insertText } from '../conversion/downcasthelpers.js';\nimport UpcastDispatcher from '../conversion/upcastdispatcher.js';\nimport { convertText, convertToModelFragment } from '../conversion/upcasthelpers.js';\nimport ViewDocumentFragment from '../view/documentfragment.js';\nimport ViewDocument from '../view/document.js';\nimport ViewDowncastWriter from '../view/downcastwriter.js';\nimport ModelRange from '../model/range.js';\nimport { autoParagraphEmptyRoots } from '../model/utils/autoparagraphing.js';\nimport HtmlDataProcessor from '../dataprocessor/htmldataprocessor.js';\n/**\n * Controller for the data pipeline. The data pipeline controls how data is retrieved from the document\n * and set inside it. Hence, the controller features two methods which allow to {@link ~DataController#get get}\n * and {@link ~DataController#set set} data of the {@link ~DataController#model model}\n * using the given:\n *\n * * {@link module:engine/dataprocessor/dataprocessor~DataProcessor data processor},\n * * downcast converters,\n * * upcast converters.\n *\n * An instance of the data controller is always available in the {@link module:core/editor/editor~Editor#data `editor.data`}\n * property:\n *\n * ```ts\n * editor.data.get( { rootName: 'customRoot' } ); // -> '<p>Hello!</p>'\n * ```\n */\nexport default class DataController extends /* #__PURE__ */ EmitterMixin() {\n    /**\n     * Creates a data controller instance.\n     *\n     * @param model Data model.\n     * @param stylesProcessor The styles processor instance.\n     */\n    constructor(model, stylesProcessor) {\n        super();\n        this.model = model;\n        this.mapper = new Mapper();\n        this.downcastDispatcher = new DowncastDispatcher({\n            mapper: this.mapper,\n            schema: model.schema\n        });\n        this.downcastDispatcher.on('insert:$text', insertText(), { priority: 'lowest' });\n        this.downcastDispatcher.on('insert', insertAttributesAndChildren(), { priority: 'lowest' });\n        this.upcastDispatcher = new UpcastDispatcher({\n            schema: model.schema\n        });\n        this.viewDocument = new ViewDocument(stylesProcessor);\n        this.stylesProcessor = stylesProcessor;\n        this.htmlProcessor = new HtmlDataProcessor(this.viewDocument);\n        this.processor = this.htmlProcessor;\n        this._viewWriter = new ViewDowncastWriter(this.viewDocument);\n        // Define default converters for text and elements.\n        //\n        // Note that if there is no default converter for the element it will be skipped, for instance `<b>foo</b>` will be\n        // converted to nothing. We therefore add `convertToModelFragment` as a last converter so it converts children of that\n        // element to the document fragment so `<b>foo</b>` will still be converted to `foo` even if there is no converter for `<b>`.\n        this.upcastDispatcher.on('text', convertText(), { priority: 'lowest' });\n        this.upcastDispatcher.on('element', convertToModelFragment(), { priority: 'lowest' });\n        this.upcastDispatcher.on('documentFragment', convertToModelFragment(), { priority: 'lowest' });\n        ObservableMixin().prototype.decorate.call(this, 'init');\n        ObservableMixin().prototype.decorate.call(this, 'set');\n        ObservableMixin().prototype.decorate.call(this, 'get');\n        ObservableMixin().prototype.decorate.call(this, 'toView');\n        ObservableMixin().prototype.decorate.call(this, 'toModel');\n        // Fire the `ready` event when the initialization has completed. Such low-level listener offers the possibility\n        // to plug into the initialization pipeline without interrupting the initialization flow.\n        this.on('init', () => {\n            this.fire('ready');\n        }, { priority: 'lowest' });\n        // Fix empty roots after DataController is 'ready' (note that the init method could be decorated and stopped).\n        // We need to handle this event because initial data could be empty and the post-fixer would not get triggered.\n        this.on('ready', () => {\n            this.model.enqueueChange({ isUndoable: false }, autoParagraphEmptyRoots);\n        }, { priority: 'lowest' });\n    }\n    /**\n     * Returns the model's data converted by downcast dispatchers attached to {@link #downcastDispatcher} and\n     * formatted by the {@link #processor data processor}.\n     *\n     * A warning is logged when you try to retrieve data for a detached root, as most probably this is a mistake. A detached root should\n     * be treated like it is removed, and you should not save its data. Note, that the detached root data is always an empty string.\n     *\n     * @fires get\n     * @param options Additional configuration for the retrieved data. `DataController` provides two optional\n     * properties: `rootName` and `trim`. Other properties of this object are specified by various editor features.\n     * @param options.rootName Root name. Default 'main'.\n     * @param options.trim Whether returned data should be trimmed. This option is set to `empty` by default,\n     * which means whenever editor content is considered empty, an empty string will be returned. To turn off trimming completely\n     * use `'none'`. In such cases the exact content will be returned (for example a `<p>&nbsp;</p>` for an empty editor).\n     * @returns Output data.\n     */\n    get(options = {}) {\n        const { rootName = 'main', trim = 'empty' } = options;\n        if (!this._checkIfRootsExists([rootName])) {\n            /**\n             * Cannot get data from a non-existing root. This error is thrown when\n             * {@link module:engine/controller/datacontroller~DataController#get `DataController#get()` method}\n             * is called with a non-existent root name. For example, if there is an editor instance with only `main` root,\n             * calling {@link module:engine/controller/datacontroller~DataController#get} like:\n             *\n             * ```ts\n             * data.get( { rootName: 'root2' } );\n             * ```\n             *\n             * will throw this error.\n             *\n             * @error datacontroller-get-non-existent-root\n             */\n            throw new CKEditorError('datacontroller-get-non-existent-root', this);\n        }\n        const root = this.model.document.getRoot(rootName);\n        if (!root.isAttached()) {\n            /**\n             * Retrieving document data for a detached root.\n             *\n             * This usually indicates an error as a detached root should be considered \"removed\" and should not be included in the\n             * document data.\n             *\n             * @error datacontroller-get-detached-root\n             */\n            logWarning('datacontroller-get-detached-root', this);\n        }\n        if (trim === 'empty' && !this.model.hasContent(root, { ignoreWhitespaces: true })) {\n            return '';\n        }\n        return this.stringify(root, options);\n    }\n    /**\n     * Returns the content of the given {@link module:engine/model/element~Element model's element} or\n     * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast converters\n     * attached to the {@link #downcastDispatcher} and formatted by the {@link #processor data processor}.\n     *\n     * @param modelElementOrFragment The element whose content will be stringified.\n     * @param options Additional configuration passed to the conversion process.\n     * @returns Output data.\n     */\n    stringify(modelElementOrFragment, options = {}) {\n        // Model -> view.\n        const viewDocumentFragment = this.toView(modelElementOrFragment, options);\n        // View -> data.\n        return this.processor.toData(viewDocumentFragment);\n    }\n    /**\n     * Returns the content of the given {@link module:engine/model/element~Element model element} or\n     * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast\n     * converters attached to {@link #downcastDispatcher} into a\n     * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\n     *\n     * @fires toView\n     * @param modelElementOrFragment Element or document fragment whose content will be converted.\n     * @param options Additional configuration that will be available through the\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi#options} during the conversion process.\n     * @returns Output view DocumentFragment.\n     */\n    toView(modelElementOrFragment, options = {}) {\n        const viewDocument = this.viewDocument;\n        const viewWriter = this._viewWriter;\n        // Clear bindings so the call to this method returns correct results.\n        this.mapper.clearBindings();\n        // First, convert elements.\n        const modelRange = ModelRange._createIn(modelElementOrFragment);\n        const viewDocumentFragment = new ViewDocumentFragment(viewDocument);\n        this.mapper.bindElements(modelElementOrFragment, viewDocumentFragment);\n        // Prepare list of markers.\n        // For document fragment, simply take the markers assigned to this document fragment.\n        // For model root, all markers in that root will be taken.\n        // For model element, we need to check which markers are intersecting with this element and relatively modify the markers' ranges.\n        // Collapsed markers at element boundary, although considered as not intersecting with the element, will also be returned.\n        const markers = modelElementOrFragment.is('documentFragment') ?\n            modelElementOrFragment.markers :\n            _getMarkersRelativeToElement(modelElementOrFragment);\n        this.downcastDispatcher.convert(modelRange, markers, viewWriter, options);\n        return viewDocumentFragment;\n    }\n    /**\n     * Sets the initial input data parsed by the {@link #processor data processor} and\n     * converted by the {@link #upcastDispatcher view-to-model converters}.\n     * Initial data can be only set to a document whose {@link module:engine/model/document~Document#version} is equal 0.\n     *\n     * **Note** This method is {@link module:utils/observablemixin~Observable#decorate decorated} which is\n     * used by e.g. collaborative editing plugin that syncs remote data on init.\n     *\n     * When data is passed as a string, it is initialized on the default `main` root:\n     *\n     * ```ts\n     * dataController.init( '<p>Foo</p>' ); // Initializes data on the `main` root only, as no other is specified.\n     * ```\n     *\n     * To initialize data on a different root or multiple roots at once, an object containing `rootName` - `data` pairs should be passed:\n     *\n     * ```ts\n     * dataController.init( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Initializes data on both the `main` and `title` roots.\n     * ```\n     *\n     * @fires init\n     * @param data Input data as a string or an object containing the `rootName` - `data`\n     * pairs to initialize data on multiple roots at once.\n     * @returns Promise that is resolved after the data is set on the editor.\n     */\n    init(data) {\n        if (this.model.document.version) {\n            /**\n             * Cannot set initial data to a non-empty {@link module:engine/model/document~Document}.\n             * Initial data should be set once, during the {@link module:core/editor/editor~Editor} initialization,\n             * when the {@link module:engine/model/document~Document#version} is equal 0.\n             *\n             * @error datacontroller-init-document-not-empty\n             */\n            throw new CKEditorError('datacontroller-init-document-not-empty', this);\n        }\n        let initialData = {};\n        if (typeof data === 'string') {\n            initialData.main = data; // Default root is 'main'. To initiate data on a different root, object should be passed.\n        }\n        else {\n            initialData = data;\n        }\n        if (!this._checkIfRootsExists(Object.keys(initialData))) {\n            /**\n             * Cannot init data on a non-existent root. This error is thrown when\n             * {@link module:engine/controller/datacontroller~DataController#init DataController#init() method}\n             * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n             * calling {@link module:engine/controller/datacontroller~DataController#init} like:\n             *\n             * ```ts\n             * data.init( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n             * ```\n             *\n             * will throw this error.\n             *\n             * @error datacontroller-init-non-existent-root\n             */\n            throw new CKEditorError('datacontroller-init-non-existent-root', this);\n        }\n        this.model.enqueueChange({ isUndoable: false }, writer => {\n            for (const rootName of Object.keys(initialData)) {\n                const modelRoot = this.model.document.getRoot(rootName);\n                writer.insert(this.parse(initialData[rootName], modelRoot), modelRoot, 0);\n            }\n        });\n        return Promise.resolve();\n    }\n    /**\n     * Sets the input data parsed by the {@link #processor data processor} and\n     * converted by the {@link #upcastDispatcher view-to-model converters}.\n     * This method can be used any time to replace existing editor data with the new one without clearing the\n     * {@link module:engine/model/document~Document#history document history}.\n     *\n     * This method also creates a batch with all the changes applied. If all you need is to parse data, use\n     * the {@link #parse} method.\n     *\n     * When data is passed as a string it is set on the default `main` root:\n     *\n     * ```ts\n     * dataController.set( '<p>Foo</p>' ); // Sets data on the `main` root, as no other is specified.\n     * ```\n     *\n     * To set data on a different root or multiple roots at once, an object containing `rootName` - `data` pairs should be passed:\n     *\n     * ```ts\n     * dataController.set( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Sets data on the `main` and `title` roots as specified.\n     * ```\n     *\n     * To set the data with a preserved undo stack and add the change to the undo stack, set `{ isUndoable: true }` as a `batchType` option.\n     *\n     * ```ts\n     * dataController.set( '<p>Foo</p>', { batchType: { isUndoable: true } } );\n     * ```\n     *\n     * @fires set\n     * @param data Input data as a string or an object containing the `rootName` - `data`\n     * pairs to set data on multiple roots at once.\n     * @param options Options for setting data.\n     * @param options.batchType The batch type that will be used to create a batch for the changes applied by this method.\n     * By default, the batch will be set as {@link module:engine/model/batch~Batch#isUndoable not undoable} and the undo stack will be\n     * cleared after the new data is applied (all undo steps will be removed). If the batch type `isUndoable` flag is be set to `true`,\n     * the undo stack will be preserved instead and not cleared when new data is applied.\n     */\n    set(data, options = {}) {\n        let newData = {};\n        if (typeof data === 'string') {\n            newData.main = data; // The default root is 'main'. To set data on a different root, an object should be passed.\n        }\n        else {\n            newData = data;\n        }\n        if (!this._checkIfRootsExists(Object.keys(newData))) {\n            /**\n             * Cannot set data on a non-existent root. This error is thrown when the\n             * {@link module:engine/controller/datacontroller~DataController#set DataController#set() method}\n             * is called with non-existent root name. For example, if there is an editor instance with only the default `main` root,\n             * calling {@link module:engine/controller/datacontroller~DataController#set} like:\n             *\n             * ```ts\n             * data.set( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n             * ```\n             *\n             * will throw this error.\n             *\n             * @error datacontroller-set-non-existent-root\n             */\n            throw new CKEditorError('datacontroller-set-non-existent-root', this);\n        }\n        this.model.enqueueChange(options.batchType || {}, writer => {\n            writer.setSelection(null);\n            writer.removeSelectionAttribute(this.model.document.selection.getAttributeKeys());\n            for (const rootName of Object.keys(newData)) {\n                // Save to model.\n                const modelRoot = this.model.document.getRoot(rootName);\n                writer.remove(writer.createRangeIn(modelRoot));\n                writer.insert(this.parse(newData[rootName], modelRoot), modelRoot, 0);\n            }\n        });\n    }\n    /**\n     * Returns the data parsed by the {@link #processor data processor} and then converted by upcast converters\n     * attached to the {@link #upcastDispatcher}.\n     *\n     * @see #set\n     * @param data Data to parse.\n     * @param context Base context in which the view will be converted to the model.\n     * See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n     * @returns Parsed data.\n     */\n    parse(data, context = '$root') {\n        // data -> view\n        const viewDocumentFragment = this.processor.toView(data);\n        // view -> model\n        return this.toModel(viewDocumentFragment, context);\n    }\n    /**\n     * Returns the result of the given {@link module:engine/view/element~Element view element} or\n     * {@link module:engine/view/documentfragment~DocumentFragment view document fragment} converted by the\n     * {@link #upcastDispatcher view-to-model converters}, wrapped by {@link module:engine/model/documentfragment~DocumentFragment}.\n     *\n     * When marker elements were converted during the conversion process, it will be set as a document fragment's\n     * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n     *\n     * @fires toModel\n     * @param viewElementOrFragment The element or document fragment whose content will be converted.\n     * @param context Base context in which the view will be converted to the model.\n     * See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n     * @returns Output document fragment.\n     */\n    toModel(viewElementOrFragment, context = '$root') {\n        return this.model.change(writer => {\n            return this.upcastDispatcher.convert(viewElementOrFragment, writer, context);\n        });\n    }\n    /**\n     * Adds the style processor normalization rules.\n     *\n     * You can implement your own rules as well as use one of the available processor rules:\n     *\n     * * background: {@link module:engine/view/styles/background~addBackgroundRules}\n     * * border: {@link module:engine/view/styles/border~addBorderRules}\n     * * margin: {@link module:engine/view/styles/margin~addMarginRules}\n     * * padding: {@link module:engine/view/styles/padding~addPaddingRules}\n     */\n    addStyleProcessorRules(callback) {\n        callback(this.stylesProcessor);\n    }\n    /**\n     * Registers a {@link module:engine/view/matcher~MatcherPattern} on an {@link #htmlProcessor htmlProcessor}\n     * and a {@link #processor processor} for view elements whose content should be treated as raw data\n     * and not processed during the conversion from DOM to view elements.\n     *\n     * The raw data can be later accessed by the {@link module:engine/view/element~Element#getCustomProperty view element custom property}\n     * `\"$rawContent\"`.\n     *\n     * @param pattern Pattern matching all view elements whose content should be treated as a raw data.\n     */\n    registerRawContentMatcher(pattern) {\n        // No need to register the pattern if both the `htmlProcessor` and `processor` are the same instances.\n        if (this.processor && this.processor !== this.htmlProcessor) {\n            this.processor.registerRawContentMatcher(pattern);\n        }\n        this.htmlProcessor.registerRawContentMatcher(pattern);\n    }\n    /**\n     * Removes all event listeners set by the DataController.\n     */\n    destroy() {\n        this.stopListening();\n    }\n    /**\n     * Checks whether all provided root names are actually existing editor roots.\n     *\n     * @param rootNames Root names to check.\n     * @returns Whether all provided root names are existing editor roots.\n     */\n    _checkIfRootsExists(rootNames) {\n        for (const rootName of rootNames) {\n            if (!this.model.document.getRoot(rootName)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n/**\n * Helper function for downcast conversion.\n *\n * Takes a document element (element that is added to a model document) and checks which markers are inside it. If the marker is collapsed\n * at element boundary, it is considered as contained inside the element and marker range is returned. Otherwise, if the marker is\n * intersecting with the element, the intersection is returned.\n */\nfunction _getMarkersRelativeToElement(element) {\n    const result = [];\n    const doc = element.root.document;\n    if (!doc) {\n        return new Map();\n    }\n    const elementRange = ModelRange._createIn(element);\n    for (const marker of doc.model.markers) {\n        const markerRange = marker.getRange();\n        const isMarkerCollapsed = markerRange.isCollapsed;\n        const isMarkerAtElementBoundary = markerRange.start.isEqual(elementRange.start) || markerRange.end.isEqual(elementRange.end);\n        if (isMarkerCollapsed && isMarkerAtElementBoundary) {\n            result.push([marker.name, markerRange]);\n        }\n        else {\n            const updatedMarkerRange = elementRange.getIntersection(markerRange);\n            if (updatedMarkerRange) {\n                result.push([marker.name, updatedMarkerRange]);\n            }\n        }\n    }\n    // Sort the markers in a stable fashion to ensure that the order in which they are\n    // added to the model's marker collection does not affect how they are\n    // downcast. One particular use case that we are targeting here, is one where\n    // two markers are adjacent but not overlapping, such as an insertion/deletion\n    // suggestion pair representing the replacement of a range of text. In this\n    // case, putting the markers in DOM order causes the first marker's end to be\n    // serialized right after the second marker's start, while putting the markers\n    // in reverse DOM order causes it to be right before the second marker's\n    // start. So, we sort these in a way that ensures non-intersecting ranges are in\n    // reverse DOM order, and intersecting ranges are in something approximating\n    // reverse DOM order (since reverse DOM order doesn't have a precise meaning\n    // when working with intersecting ranges).\n    result.sort(([n1, r1], [n2, r2]) => {\n        if (r1.end.compareWith(r2.start) !== 'after') {\n            // m1.end <= m2.start -- m1 is entirely <= m2\n            return 1;\n        }\n        else if (r1.start.compareWith(r2.end) !== 'before') {\n            // m1.start >= m2.end -- m1 is entirely >= m2\n            return -1;\n        }\n        else {\n            // they overlap, so use their start positions as the primary sort key and\n            // end positions as the secondary sort key\n            switch (r1.start.compareWith(r2.start)) {\n                case 'before':\n                    return 1;\n                case 'after':\n                    return -1;\n                default:\n                    switch (r1.end.compareWith(r2.end)) {\n                        case 'before':\n                            return 1;\n                        case 'after':\n                            return -1;\n                        default:\n                            return n2.localeCompare(n1);\n                    }\n            }\n        }\n    });\n    return new Map(result);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/conversion\n */\nimport { CKEditorError, toArray } from '@ckeditor/ckeditor5-utils';\nimport UpcastHelpers from './upcasthelpers.js';\nimport DowncastHelpers from './downcasthelpers.js';\n/**\n * A utility class that helps add converters to upcast and downcast dispatchers.\n *\n * We recommend reading the {@glink framework/deep-dive/conversion/intro editor conversion} guide first to\n * understand the core concepts of the conversion mechanisms.\n *\n * An instance of the conversion manager is available in the\n * {@link module:core/editor/editor~Editor#conversion `editor.conversion`} property\n * and by default has the following groups of dispatchers (i.e. directions of conversion):\n *\n * * `downcast` (editing and data downcasts)\n * * `editingDowncast`\n * * `dataDowncast`\n * * `upcast`\n *\n * # One-way converters\n *\n * To add a converter to a specific group, use the {@link module:engine/conversion/conversion~Conversion#for `for()`}\n * method:\n *\n * ```ts\n * // Add a converter to editing downcast and data downcast.\n * editor.conversion.for( 'downcast' ).elementToElement( config ) );\n *\n * // Add a converter to the data pipepline only:\n * editor.conversion.for( 'dataDowncast' ).elementToElement( dataConversionConfig ) );\n *\n * // And a slightly different one for the editing pipeline:\n * editor.conversion.for( 'editingDowncast' ).elementToElement( editingConversionConfig ) );\n * ```\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `for()`} method documentation to learn more about\n * available conversion helpers and how to use your custom ones.\n *\n * # Two-way converters\n *\n * Besides using one-way converters via the `for()` method, you can also use other methods available in this\n * class to add two-way converters (upcast and downcast):\n *\n * * {@link module:engine/conversion/conversion~Conversion#elementToElement `elementToElement()`} &ndash;\n * Model element to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement()`} &ndash;\n * Model attribute to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `attributeToAttribute()`} &ndash;\n * Model attribute to view attribute and vice versa.\n */\nexport default class Conversion {\n    /**\n     * Creates a new conversion instance.\n     */\n    constructor(downcastDispatchers, upcastDispatchers) {\n        /**\n         * Maps dispatchers group name to ConversionHelpers instances.\n         */\n        this._helpers = new Map();\n        // Define default 'downcast' & 'upcast' dispatchers groups. Those groups are always available as two-way converters needs them.\n        this._downcast = toArray(downcastDispatchers);\n        this._createConversionHelpers({ name: 'downcast', dispatchers: this._downcast, isDowncast: true });\n        this._upcast = toArray(upcastDispatchers);\n        this._createConversionHelpers({ name: 'upcast', dispatchers: this._upcast, isDowncast: false });\n    }\n    /**\n     * Define an alias for registered dispatcher.\n     *\n     * ```ts\n     * const conversion = new Conversion(\n     * \t[ dataDowncastDispatcher, editingDowncastDispatcher ],\n     * \tupcastDispatcher\n     * );\n     *\n     * conversion.addAlias( 'dataDowncast', dataDowncastDispatcher );\n     * ```\n     *\n     * @param alias An alias of a dispatcher.\n     * @param dispatcher Dispatcher which should have an alias.\n     */\n    addAlias(alias, dispatcher) {\n        const isDowncast = this._downcast.includes(dispatcher);\n        const isUpcast = this._upcast.includes(dispatcher);\n        if (!isUpcast && !isDowncast) {\n            /**\n             * Trying to register an alias for a dispatcher that nas not been registered.\n             *\n             * @error conversion-add-alias-dispatcher-not-registered\n             */\n            throw new CKEditorError('conversion-add-alias-dispatcher-not-registered', this);\n        }\n        this._createConversionHelpers({ name: alias, dispatchers: [dispatcher], isDowncast });\n    }\n    /**\n     * Provides a chainable API to assign converters to a conversion dispatchers group.\n     *\n     * If the given group name has not been registered, the\n     * {@link module:utils/ckeditorerror~CKEditorError `conversion-for-unknown-group` error} is thrown.\n     *\n     * You can use conversion helpers available directly in the `for()` chain or your custom ones via\n     * the {@link module:engine/conversion/conversionhelpers~ConversionHelpers#add `add()`} method.\n     *\n     * # Using built-in conversion helpers\n     *\n     * The `for()` chain comes with a set of conversion helpers which you can use like this:\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' )\n     * \t.elementToElement( config1 )        // Adds an element-to-element downcast converter.\n     * \t.attributeToElement( config2 );     // Adds an attribute-to-element downcast converter.\n     *\n     * editor.conversion.for( 'upcast' )\n     * \t.elementToAttribute( config3 );     // Adds an element-to-attribute upcast converter.\n     * ```\n     *\n     * Refer to the documentation of built-in conversion helpers to learn about their configuration options.\n     *\n     * * downcast (model-to-view) conversion helpers:\n     *\n     *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`},\n     *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement `attributeToElement()`},\n     *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToAttribute `attributeToAttribute()`}.\n     *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToElement `markerToElement()`}.\n     *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToHighlight `markerToHighlight()`}.\n     *\n     * * upcast (view-to-model) conversion helpers:\n     *\n     *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToElement `elementToElement()`},\n     *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute `elementToAttribute()`},\n     *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute `attributeToAttribute()`}.\n     *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToMarker `elementToMarker()`}.\n     *\n     * # Using custom conversion helpers\n     *\n     * If you need to implement an atypical converter, you can do so by calling:\n     *\n     * ```ts\n     * editor.conversion.for( direction ).add( customHelper );\n     * ```\n     *\n     * The `.add()` method takes exactly one parameter, which is a function. This function should accept one parameter that\n     * is a dispatcher instance. The function should add an actual converter to the passed dispatcher instance.\n     *\n     * Example:\n     *\n     * ```ts\n     * editor.conversion.for( 'upcast' ).add( dispatcher => {\n     * \tdispatcher.on( 'element:a',  ( evt, data, conversionApi ) => {\n     * \t\t// Do something with a view <a> element.\n     * \t} );\n     * } );\n     * ```\n     *\n     * Refer to the documentation of {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n     * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} to learn how to write\n     * custom converters.\n     *\n     * @param groupName The name of dispatchers group to add the converters to.\n     */\n    for(groupName) {\n        if (!this._helpers.has(groupName)) {\n            /**\n             * Trying to add a converter to an unknown dispatchers group.\n             *\n             * @error conversion-for-unknown-group\n             */\n            throw new CKEditorError('conversion-for-unknown-group', this);\n        }\n        return this._helpers.get(groupName);\n    }\n    /**\n     * Sets up converters between the model and the view that convert a model element to a view element (and vice versa).\n     * For example, the model `<paragraph>Foo</paragraph>` is turned into `<p>Foo</p>` in the view.\n     *\n     * ```ts\n     * // A simple conversion from the `paragraph` model element to the `<p>` view element (and vice versa).\n     * editor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n     *\n     * // Override other converters by specifying a converter definition with a higher priority.\n     * editor.conversion.elementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );\n     *\n     * // View specified as an object instead of a string.\n     * editor.conversion.elementToElement( {\n     * \tmodel: 'fancyParagraph',\n     * \tview: {\n     * \t\tname: 'p',\n     * \t\tclasses: 'fancy'\n     * \t}\n     * } );\n     *\n     * // Use `upcastAlso` to define other view elements that should also be converted to a `paragraph` element.\n     * editor.conversion.elementToElement( {\n     * \tmodel: 'paragraph',\n     * \tview: 'p',\n     * \tupcastAlso: [\n     * \t\t'div',\n     * \t\t{\n     * \t\t\t// Any element with the `display: block` style.\n     * \t\t\tstyles: {\n     * \t\t\t\tdisplay: 'block'\n     * \t\t\t}\n     * \t\t}\n     * \t]\n     * } );\n     *\n     * // `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n     * editor.conversion.elementToElement( {\n     * \tmodel: 'heading',\n     * \tview: 'h2',\n     * \t// Convert \"heading-like\" paragraphs to headings.\n     * \tupcastAlso: viewElement => {\n     * \t\tconst fontSize = viewElement.getStyle( 'font-size' );\n     *\n     * \t\tif ( !fontSize ) {\n     * \t\t\treturn null;\n     * \t\t}\n     *\n     * \t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n     *\n     * \t\tif ( !match ) {\n     * \t\t\treturn null;\n     * \t\t}\n     *\n     * \t\tconst size = Number( match[ 1 ] );\n     *\n     * \t\tif ( size > 26 ) {\n     * \t\t\t// Returned value can be an object with the matched properties.\n     * \t\t\t// These properties will be \"consumed\" during the conversion.\n     * \t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n     *\n     * \t\t\treturn { name: true, styles: [ 'font-size' ] };\n     * \t\t}\n     *\n     * \t\treturn null;\n     * \t}\n     * } );\n     * ```\n     *\n     * `definition.model` is a `String` with a model element name to convert from or to.\n     *\n     * @param definition The converter definition.\n     */\n    elementToElement(definition) {\n        // Set up downcast converter.\n        this.for('downcast').elementToElement(definition);\n        // Set up upcast converter.\n        for (const { model, view } of _getAllUpcastDefinitions(definition)) {\n            this.for('upcast')\n                .elementToElement({\n                model,\n                view,\n                converterPriority: definition.converterPriority\n            });\n        }\n    }\n    /**\n     * Sets up converters between the model and the view that convert a model attribute to a view element (and vice versa).\n     * For example, a model text node with `\"Foo\"` as data and the `bold` attribute will be turned to `<strong>Foo</strong>` in the view.\n     *\n     * ```ts\n     * // A simple conversion from the `bold=true` attribute to the `<strong>` view element (and vice versa).\n     * editor.conversion.attributeToElement( { model: 'bold', view: 'strong' } );\n     *\n     * // Override other converters by specifying a converter definition with a higher priority.\n     * editor.conversion.attributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );\n     *\n     * // View specified as an object instead of a string.\n     * editor.conversion.attributeToElement( {\n     * \tmodel: 'bold',\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tclasses: 'bold'\n     * \t}\n     * } );\n     *\n     * // Use `config.model.name` to define the conversion only from a given node type, `$text` in this case.\n     * // The same attribute on different elements may then be handled by a different converter.\n     * editor.conversion.attributeToElement( {\n     * \tmodel: {\n     * \t\tkey: 'textDecoration',\n     * \t\tvalues: [ 'underline', 'lineThrough' ],\n     * \t\tname: '$text'\n     * \t},\n     * \tview: {\n     * \t\tunderline: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'text-decoration': 'underline'\n     * \t\t\t}\n     * \t\t},\n     * \t\tlineThrough: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'text-decoration': 'line-through'\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * // Use `upcastAlso` to define other view elements that should also be converted to the `bold` attribute.\n     * editor.conversion.attributeToElement( {\n     * \tmodel: 'bold',\n     * \tview: 'strong',\n     * \tupcastAlso: [\n     * \t\t'b',\n     * \t\t{\n     * \t\t\tname: 'span',\n     * \t\t\tclasses: 'bold'\n     * \t\t},\n     * \t\t{\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'font-weight': 'bold'\n     * \t\t\t}\n     * \t\t},\n     * \t\tviewElement => {\n     * \t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n     *\n     * \t\t\tif ( viewElement.is( 'element', 'span' ) && fontWeight && /\\d+/.test() && Number( fontWeight ) > 500 ) {\n     * \t\t\t\t// Returned value can be an object with the matched properties.\n     * \t\t\t\t// These properties will be \"consumed\" during the conversion.\n     * \t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n     *\n     * \t\t\t\treturn {\n     * \t\t\t\t\tname: true,\n     * \t\t\t\t\tstyles: [ 'font-weight' ]\n     * \t\t\t\t};\n     * \t\t\t}\n     * \t\t}\n     * \t]\n     * } );\n     *\n     * // Conversion from and to a model attribute key whose value is an enum (`fontSize=big|small`).\n     * // `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n     * editor.conversion.attributeToElement( {\n     * \tmodel: {\n     * \t\tkey: 'fontSize',\n     * \t\tvalues: [ 'big', 'small' ]\n     * \t},\n     * \tview: {\n     * \t\tbig: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'font-size': '1.2em'\n     * \t\t\t}\n     * \t\t},\n     * \t\tsmall: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'font-size': '0.8em'\n     * \t\t\t}\n     * \t\t}\n     * \t},\n     * \tupcastAlso: {\n     * \t\tbig: viewElement => {\n     * \t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n     *\n     * \t\t\tif ( !fontSize ) {\n     * \t\t\t\treturn null;\n     * \t\t\t}\n     *\n     * \t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n     *\n     * \t\t\tif ( !match ) {\n     * \t\t\t\treturn null;\n     * \t\t\t}\n     *\n     * \t\t\tconst size = Number( match[ 1 ] );\n     *\n     * \t\t\tif ( viewElement.is( 'element', 'span' ) && size > 10 ) {\n     * \t\t\t\t// Returned value can be an object with the matched properties.\n     * \t\t\t\t// These properties will be \"consumed\" during the conversion.\n     * \t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n     *\n     * \t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n     * \t\t\t}\n     *\n     * \t\t\treturn null;\n     * \t\t},\n     * \t\tsmall: viewElement => {\n     * \t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n     *\n     * \t\t\tif ( !fontSize ) {\n     * \t\t\t\treturn null;\n     * \t\t\t}\n     *\n     * \t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n     *\n     * \t\t\tif ( !match ) {\n     * \t\t\t\treturn null;\n     * \t\t\t}\n     *\n     * \t\t\tconst size = Number( match[ 1 ] );\n     *\n     * \t\t\tif ( viewElement.is( 'element', 'span' ) && size < 10 ) {\n     * \t\t\t\t// Returned value can be an object with the matched properties.\n     * \t\t\t\t// These properties will be \"consumed\" during the conversion.\n     * \t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n     *\n     * \t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n     * \t\t\t}\n     *\n     * \t\t\treturn null;\n     * \t\t}\n     * \t}\n     * } );\n     * ```\n     *\n     * The `definition.model` parameter specifies which model attribute should be converted from or to. It can be a `{ key, value }` object\n     * describing the attribute key and value to convert or a `String` specifying just the attribute key (in such a case\n     * `value` is set to `true`).\n     *\n     * @param definition The converter definition.\n     */\n    attributeToElement(definition) {\n        // Set up downcast converter.\n        this.for('downcast').attributeToElement(definition);\n        // Set up upcast converter.\n        for (const { model, view } of _getAllUpcastDefinitions(definition)) {\n            this.for('upcast')\n                .elementToAttribute({\n                view,\n                model,\n                converterPriority: definition.converterPriority\n            });\n        }\n    }\n    /**\n     * Sets up converters between the model and the view that convert a model attribute to a view attribute (and vice versa). For example,\n     * `<imageBlock src='foo.jpg'></imageBlock>` is converted to `<img src='foo.jpg'></img>` (the same attribute key and value).\n     * This type of converters is intended to be used with {@link module:engine/model/element~Element model element} nodes.\n     * To convert the text attributes,\n     * the {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement converter`}should be set up.\n     *\n     * ```ts\n     * // A simple conversion from the `source` model attribute to the `src` view attribute (and vice versa).\n     * editor.conversion.attributeToAttribute( { model: 'source', view: 'src' } );\n     *\n     * // Attribute values are strictly specified.\n     * editor.conversion.attributeToAttribute( {\n     * \tmodel: {\n     * \t\tname: 'imageInline',\n     * \t\tkey: 'aside',\n     * \t\tvalues: [ 'aside' ]\n     * \t},\n     * \tview: {\n     * \t\taside: {\n     * \t\t\tname: 'img',\n     * \t\t\tkey: 'class',\n     * \t\t\tvalue: [ 'aside', 'half-size' ]\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * // Set the style attribute.\n     * editor.conversion.attributeToAttribute( {\n     * \tmodel: {\n     * \t\tname: 'imageInline',\n     * \t\tkey: 'aside',\n     * \t\tvalues: [ 'aside' ]\n     * \t},\n     * \tview: {\n     * \t\taside: {\n     * \t\t\tname: 'img',\n     * \t\t\tkey: 'style',\n     * \t\t\tvalue: {\n     * \t\t\t\tfloat: 'right',\n     * \t\t\t\twidth: '50%',\n     * \t\t\t\tmargin: '5px'\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * // Conversion from and to a model attribute key whose value is an enum (`align=right|center`).\n     * // Use `upcastAlso` to define other view elements that should also be converted to the `align=right` attribute.\n     * editor.conversion.attributeToAttribute( {\n     * \tmodel: {\n     * \t\tkey: 'align',\n     * \t\tvalues: [ 'right', 'center' ]\n     * \t},\n     * \tview: {\n     * \t\tright: {\n     * \t\t\tkey: 'class',\n     * \t\t\tvalue: 'align-right'\n     * \t\t},\n     * \t\tcenter: {\n     * \t\t\tkey: 'class',\n     * \t\t\tvalue: 'align-center'\n     * \t\t}\n     * \t},\n     * \tupcastAlso: {\n     * \t\tright: {\n     * \t\t\tstyles: {\n     * \t\t\t\t'text-align': 'right'\n     * \t\t\t}\n     * \t\t},\n     * \t\tcenter: {\n     * \t\t\tstyles: {\n     * \t\t\t\t'text-align': 'center'\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     * } );\n     * ```\n     *\n     * The `definition.model` parameter specifies which model attribute should be converted from and to.\n     * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\n     * The `key` property is the model attribute key to convert from and to.\n     * The `values` are the possible model attribute values. If the `values` parameter is not set, the model attribute value\n     * will be the same as the view attribute value.\n     * If `name` is set, the conversion will be set up only for model elements with the given name.\n     *\n     * The `definition.view` parameter specifies which view attribute should be converted from and to.\n     * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\n     * The `key` property is the view attribute key to convert from and to.\n     * The `value` is the view attribute value to convert from and to. If `definition.value` is not set, the view attribute value will be\n     * the same as the model attribute value.\n     * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\n     * If `key` is `'style'`, `value` is an object with key-value pairs.\n     * In other cases, `value` is a `String`.\n     * If `name` is set, the conversion will be set up only for model elements with the given name.\n     * If `definition.model.values` is set, `definition.view` is an object that assigns values from `definition.model.values`\n     * to `{ key, value, [ name ] }` objects.\n     *\n     * `definition.upcastAlso` specifies which other matching view elements should also be upcast to the given model configuration.\n     * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\n     * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\n     *\n     * **Note:** `definition.model` and `definition.view` form should be mirrored, so the same types of parameters should\n     * be given in both parameters.\n     *\n     * @param definition The converter definition.\n     * @param definition.model The model attribute to convert from and to.\n     * @param definition.view The view attribute to convert from and to.\n     * @param definition.upcastAlso Any view element matching `definition.upcastAlso` will also be converted to the given model attribute.\n     * `definition.upcastAlso` is used only if `config.model.values` is specified.\n     */\n    attributeToAttribute(definition) {\n        // Set up downcast converter.\n        this.for('downcast').attributeToAttribute(definition);\n        // Set up upcast converter.\n        for (const { model, view } of _getAllUpcastDefinitions(definition)) {\n            this.for('upcast')\n                .attributeToAttribute({\n                view,\n                model\n            });\n        }\n    }\n    /**\n     * Creates and caches conversion helpers for given dispatchers group.\n     *\n     * @param options.name Group name.\n     */\n    _createConversionHelpers({ name, dispatchers, isDowncast }) {\n        if (this._helpers.has(name)) {\n            /**\n             * Trying to register a group name that has already been registered.\n             *\n             * @error conversion-group-exists\n             */\n            throw new CKEditorError('conversion-group-exists', this);\n        }\n        const helpers = isDowncast ?\n            new DowncastHelpers(dispatchers) :\n            new UpcastHelpers(dispatchers);\n        this._helpers.set(name, helpers);\n    }\n}\n/**\n * Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\n * `definition.upcastAlso`.\n */\nfunction* _getAllUpcastDefinitions(definition) {\n    if (definition.model.values) {\n        for (const value of definition.model.values) {\n            const model = { key: definition.model.key, value };\n            const view = definition.view[value];\n            const upcastAlso = definition.upcastAlso ? definition.upcastAlso[value] : undefined;\n            yield* _getUpcastDefinition(model, view, upcastAlso);\n        }\n    }\n    else {\n        yield* _getUpcastDefinition(definition.model, definition.view, definition.upcastAlso);\n    }\n}\nfunction* _getUpcastDefinition(model, view, upcastAlso) {\n    yield { model, view };\n    if (upcastAlso) {\n        for (const upcastAlsoItem of toArray(upcastAlso)) {\n            yield { model, view: upcastAlsoItem };\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/dataprocessor/xmldataprocessor\n */\n/* globals DOMParser */\nimport BasicHtmlWriter from './basichtmlwriter.js';\nimport DomConverter from '../view/domconverter.js';\n/**\n * The XML data processor class.\n * This data processor implementation uses XML as input and output data.\n * This class is needed because unlike HTML, XML allows to use any tag with any value.\n * For example, `<link>Text</link>` is a valid XML but invalid HTML.\n */\nexport default class XmlDataProcessor {\n    /**\n     * Creates a new instance of the XML data processor class.\n     *\n     * @param document The view document instance.\n     * @param options Configuration options.\n     * @param options.namespaces A list of namespaces allowed to use in the XML input.\n     */\n    constructor(document, options = {}) {\n        this.skipComments = true;\n        this.namespaces = options.namespaces || [];\n        this.domParser = new DOMParser();\n        this.domConverter = new DomConverter(document, { renderingMode: 'data' });\n        this.htmlWriter = new BasicHtmlWriter();\n    }\n    /**\n     * Converts the provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n     * to data format &ndash; in this case an XML string.\n     *\n     * @returns An XML string.\n     */\n    toData(viewFragment) {\n        // Convert view DocumentFragment to DOM DocumentFragment.\n        const domFragment = this.domConverter.viewToDom(viewFragment);\n        // Convert DOM DocumentFragment to XML output.\n        // There is no need to use dedicated for XML serializing method because BasicHtmlWriter works well in this case.\n        return this.htmlWriter.getHtml(domFragment);\n    }\n    /**\n     * Converts the provided XML string to a view tree.\n     *\n     * @param data An XML string.\n     * @returns A converted view element.\n     */\n    toView(data) {\n        // Convert input XML data to DOM DocumentFragment.\n        const domFragment = this._toDom(data);\n        // Convert DOM DocumentFragment to view DocumentFragment.\n        return this.domConverter.domToView(domFragment, {\n            keepOriginalCase: true,\n            skipComments: this.skipComments\n        });\n    }\n    /**\n     * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n     * and not processed during the conversion from XML to view elements.\n     *\n     * The raw data can be later accessed by a\n     * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n     *\n     * @param pattern Pattern matching all view elements whose content should be treated as raw data.\n     */\n    registerRawContentMatcher(pattern) {\n        this.domConverter.registerRawContentMatcher(pattern);\n    }\n    /**\n     * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements\n     * (`<span data-cke-filler=\"true\">&nbsp;</span>`) instead of regular `&nbsp;` characters.\n     *\n     * This mode allows for a more precise handling of block fillers (so they do not leak into editor content) but\n     * bloats the editor data with additional markup.\n     *\n     * This mode may be required by some features and will be turned on by them automatically.\n     *\n     * @param type Whether to use the default or the marked `&nbsp;` block fillers.\n     */\n    useFillerType(type) {\n        this.domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n    }\n    /**\n     * Converts an XML string to its DOM representation. Returns a document fragment containing nodes parsed from\n     * the provided data.\n     */\n    _toDom(data) {\n        // Stringify namespaces.\n        const namespaces = this.namespaces.map(nsp => `xmlns:${nsp}=\"nsp\"`).join(' ');\n        // Wrap data into root element with optional namespace definitions.\n        data = `<xml ${namespaces}>${data}</xml>`;\n        const parsedDocument = this.domParser.parseFromString(data, 'text/xml');\n        // Parse validation.\n        const parserError = parsedDocument.querySelector('parsererror');\n        if (parserError) {\n            throw new Error('Parse error - ' + parserError.textContent);\n        }\n        const fragment = parsedDocument.createDocumentFragment();\n        const nodes = parsedDocument.documentElement.childNodes;\n        while (nodes.length > 0) {\n            fragment.appendChild(nodes[0]);\n        }\n        return fragment;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Abstract base operation class.\n */\nexport default class Operation {\n    /**\n     * Base operation constructor.\n     *\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(baseVersion) {\n        this.baseVersion = baseVersion;\n        this.isDocumentOperation = this.baseVersion !== null;\n        this.batch = null;\n    }\n    /**\n     * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws\n     * an error if operation is not valid.\n     *\n     * @internal\n     */\n    _validate() {\n    }\n    /**\n     * Custom toJSON method to solve child-parent circular dependencies.\n     *\n     * @returns Clone of this object with the operation property replaced with string.\n     */\n    toJSON() {\n        // This method creates only a shallow copy, all nested objects should be defined separately.\n        // See https://github.com/ckeditor/ckeditor5-engine/issues/1477.\n        const json = Object.assign({}, this);\n        json.__className = this.constructor.className;\n        // Remove reference to the parent `Batch` to avoid circular dependencies.\n        delete json.batch;\n        // Only document operations are shared with other clients so it is not necessary to keep this information.\n        delete json.isDocumentOperation;\n        return json;\n    }\n    /**\n     * Name of the operation class used for serialization.\n     */\n    static get className() {\n        return 'Operation';\n    }\n    /**\n     * Creates `Operation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param doc Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return new this(json.baseVersion);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/utils\n */\nimport Node from '../node.js';\nimport Range from '../range.js';\nimport Text from '../text.js';\nimport TextProxy from '../textproxy.js';\nimport { CKEditorError, isIterable } from '@ckeditor/ckeditor5-utils';\n/**\n * Inserts given nodes at given position.\n *\n * @internal\n * @param position Position at which nodes should be inserted.\n * @param normalizedNodes Nodes to insert.\n * @returns Range spanning over inserted elements.\n */\nexport function _insert(position, nodes) {\n    const normalizedNodes = _normalizeNodes(nodes);\n    // We have to count offset before inserting nodes because they can get merged and we would get wrong offsets.\n    const offset = normalizedNodes.reduce((sum, node) => sum + node.offsetSize, 0);\n    const parent = position.parent;\n    // Insertion might be in a text node, we should split it if that's the case.\n    _splitNodeAtPosition(position);\n    const index = position.index;\n    // Insert nodes at given index. After splitting we have a proper index and insertion is between nodes,\n    // using basic `Element` API.\n    parent._insertChild(index, normalizedNodes);\n    // Merge text nodes, if possible. Merging is needed only at points where inserted nodes \"touch\" \"old\" nodes.\n    _mergeNodesAtIndex(parent, index + normalizedNodes.length);\n    _mergeNodesAtIndex(parent, index);\n    return new Range(position, position.getShiftedBy(offset));\n}\n/**\n * Removed nodes in given range. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @internal\n * @param range Range containing nodes to remove.\n */\nexport function _remove(range) {\n    if (!range.isFlat) {\n        /**\n         * Trying to remove a range which starts and ends in different element.\n         *\n         * @error operation-utils-remove-range-not-flat\n         */\n        throw new CKEditorError('operation-utils-remove-range-not-flat', this);\n    }\n    const parent = range.start.parent;\n    // Range may be inside text nodes, we have to split them if that's the case.\n    _splitNodeAtPosition(range.start);\n    _splitNodeAtPosition(range.end);\n    // Remove the text nodes using basic `Element` API.\n    const removed = parent._removeChildren(range.start.index, range.end.index - range.start.index);\n    // Merge text nodes, if possible. After some nodes were removed, node before and after removed range will be\n    // touching at the position equal to the removed range beginning. We check merging possibility there.\n    _mergeNodesAtIndex(parent, range.start.index);\n    return removed;\n}\n/**\n * Moves nodes in given range to given target position. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @internal\n * @param sourceRange Range containing nodes to move.\n * @param targetPosition Position to which nodes should be moved.\n * @returns Range containing moved nodes.\n */\nexport function _move(sourceRange, targetPosition) {\n    if (!sourceRange.isFlat) {\n        /**\n         * Trying to move a range which starts and ends in different element.\n         *\n         * @error operation-utils-move-range-not-flat\n         */\n        throw new CKEditorError('operation-utils-move-range-not-flat', this);\n    }\n    const nodes = _remove(sourceRange);\n    // We have to fix `targetPosition` because model changed after nodes from `sourceRange` got removed and\n    // that change might have an impact on `targetPosition`.\n    targetPosition = targetPosition._getTransformedByDeletion(sourceRange.start, sourceRange.end.offset - sourceRange.start.offset);\n    return _insert(targetPosition, nodes);\n}\n/**\n * Sets given attribute on nodes in given range. The attributes are only set on top-level nodes of the range, not on its children.\n *\n * @internal\n * @param range Range containing nodes that should have the attribute set. Must be a flat range.\n * @param key Key of attribute to set.\n * @param value Attribute value.\n */\nexport function _setAttribute(range, key, value) {\n    // Range might start or end in text nodes, so we have to split them.\n    _splitNodeAtPosition(range.start);\n    _splitNodeAtPosition(range.end);\n    // Iterate over all items in the range.\n    for (const item of range.getItems({ shallow: true })) {\n        // Iterator will return `TextProxy` instances but we know that those text proxies will\n        // always represent full text nodes (this is guaranteed thanks to splitting we did before).\n        // So, we can operate on those text proxies' text nodes.\n        const node = item.is('$textProxy') ? item.textNode : item;\n        if (value !== null) {\n            node._setAttribute(key, value);\n        }\n        else {\n            node._removeAttribute(key);\n        }\n        // After attributes changing it may happen that some text nodes can be merged. Try to merge with previous node.\n        _mergeNodesAtIndex(node.parent, node.index);\n    }\n    // Try to merge last changed node with it's previous sibling (not covered by the loop above).\n    _mergeNodesAtIndex(range.end.parent, range.end.index);\n}\n/**\n * Normalizes given object or an array of objects to an array of {@link module:engine/model/node~Node nodes}. See\n * {@link ~NodeSet NodeSet} for details on how normalization is performed.\n *\n * @internal\n * @param nodes Objects to normalize.\n * @returns Normalized nodes.\n */\nexport function _normalizeNodes(nodes) {\n    const normalized = [];\n    function convert(nodes) {\n        if (typeof nodes == 'string') {\n            normalized.push(new Text(nodes));\n        }\n        else if (nodes instanceof TextProxy) {\n            normalized.push(new Text(nodes.data, nodes.getAttributes()));\n        }\n        else if (nodes instanceof Node) {\n            normalized.push(nodes);\n        }\n        else if (isIterable(nodes)) {\n            for (const node of nodes) {\n                convert(node);\n            }\n        }\n        else {\n            // Skip unrecognized type.\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const unreachable = nodes;\n        }\n    }\n    convert(nodes);\n    // Merge text nodes.\n    for (let i = 1; i < normalized.length; i++) {\n        const node = normalized[i];\n        const prev = normalized[i - 1];\n        if (node instanceof Text && prev instanceof Text && _haveSameAttributes(node, prev)) {\n            // Doing this instead changing `prev.data` because `data` is readonly.\n            normalized.splice(i - 1, 2, new Text(prev.data + node.data, prev.getAttributes()));\n            i--;\n        }\n    }\n    return normalized;\n}\n/**\n * Checks if nodes before and after given index in given element are {@link module:engine/model/text~Text text nodes} and\n * merges them into one node if they have same attributes.\n *\n * Merging is done by removing two text nodes and inserting a new text node containing data from both merged text nodes.\n *\n * @param element Parent element of nodes to merge.\n * @param index Index between nodes to merge.\n */\nfunction _mergeNodesAtIndex(element, index) {\n    const nodeBefore = element.getChild(index - 1);\n    const nodeAfter = element.getChild(index);\n    // Check if both of those nodes are text objects with same attributes.\n    if (nodeBefore && nodeAfter && nodeBefore.is('$text') && nodeAfter.is('$text') && _haveSameAttributes(nodeBefore, nodeAfter)) {\n        // Append text of text node after index to the before one.\n        const mergedNode = new Text(nodeBefore.data + nodeAfter.data, nodeBefore.getAttributes());\n        // Remove separate text nodes.\n        element._removeChildren(index - 1, 2);\n        // Insert merged text node.\n        element._insertChild(index - 1, mergedNode);\n    }\n}\n/**\n * Checks if given position is in a text node, and if so, splits the text node in two text nodes, each of them\n * containing a part of original text node.\n *\n * @param position Position at which node should be split.\n */\nfunction _splitNodeAtPosition(position) {\n    const textNode = position.textNode;\n    const element = position.parent;\n    if (textNode) {\n        const offsetDiff = position.offset - textNode.startOffset;\n        const index = textNode.index;\n        element._removeChildren(index, 1);\n        const firstPart = new Text(textNode.data.substr(0, offsetDiff), textNode.getAttributes());\n        const secondPart = new Text(textNode.data.substr(offsetDiff), textNode.getAttributes());\n        element._insertChild(index, [firstPart, secondPart]);\n    }\n}\n/**\n * Checks whether two given nodes have same attributes.\n *\n * @param nodeA Node to check.\n * @param nodeB Node to check.\n * @returns `true` if nodes have same attributes, `false` otherwise.\n */\nfunction _haveSameAttributes(nodeA, nodeB) {\n    const iteratorA = nodeA.getAttributes();\n    const iteratorB = nodeB.getAttributes();\n    for (const attr of iteratorA) {\n        if (attr[1] !== nodeB.getAttribute(attr[0])) {\n            return false;\n        }\n        iteratorB.next();\n    }\n    return iteratorB.next().done;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/moveoperation\n */\nimport Operation from './operation.js';\nimport Position from '../position.js';\nimport Range from '../range.js';\nimport { _move } from './utils.js';\nimport { CKEditorError, compareArrays } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const ModelRange = require( '../range' ).default;\n/**\n * Operation to move a range of {@link module:engine/model/item~Item model items}\n * to given {@link module:engine/model/position~Position target position}.\n */\nexport default class MoveOperation extends Operation {\n    /**\n     * Creates a move operation.\n     *\n     * @param sourcePosition Position before the first {@link module:engine/model/item~Item model item} to move.\n     * @param howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n     * `sourcePosition` with offset shifted by `howMany`.\n     * @param targetPosition Position at which moved nodes will be inserted.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(sourcePosition, howMany, targetPosition, baseVersion) {\n        super(baseVersion);\n        this.sourcePosition = sourcePosition.clone();\n        // `'toNext'` because `sourcePosition` is a bit like a start of the moved range.\n        this.sourcePosition.stickiness = 'toNext';\n        this.howMany = howMany;\n        this.targetPosition = targetPosition.clone();\n        this.targetPosition.stickiness = 'toNone';\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        if (this.targetPosition.root.rootName == '$graveyard') {\n            return 'remove';\n        }\n        else if (this.sourcePosition.root.rootName == '$graveyard') {\n            return 'reinsert';\n        }\n        return 'move';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return [\n            Range._createFromPositionAndShift(this.sourcePosition, this.howMany),\n            Range._createFromPositionAndShift(this.targetPosition, 0)\n        ];\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        return new MoveOperation(this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion);\n    }\n    /**\n     * Returns the start position of the moved range after it got moved. This may be different than\n     * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\n     * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\n     * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\n     *\n     * ```\n     *  vv              vv\n     * abcdefg ===> adefbcg\n     *      ^          ^\n     *      targetPos  movedRangeStart\n     *      offset 6   offset 4\n     *```\n     */\n    getMovedRangeStart() {\n        return this.targetPosition._getTransformedByDeletion(this.sourcePosition, this.howMany);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        const newTargetPosition = this.sourcePosition._getTransformedByInsertion(this.targetPosition, this.howMany);\n        return new MoveOperation(this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const sourceElement = this.sourcePosition.parent;\n        const targetElement = this.targetPosition.parent;\n        const sourceOffset = this.sourcePosition.offset;\n        const targetOffset = this.targetPosition.offset;\n        // Validate whether move operation has correct parameters.\n        // Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\n        // We expect that many errors might be connected with one of scenarios described below.\n        if (sourceOffset + this.howMany > sourceElement.maxOffset) {\n            /**\n             * The nodes which should be moved do not exist.\n             *\n             * @error move-operation-nodes-do-not-exist\n             */\n            throw new CKEditorError('move-operation-nodes-do-not-exist', this);\n        }\n        else if (sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany) {\n            /**\n             * Trying to move a range of nodes into the middle of that range.\n             *\n             * @error move-operation-range-into-itself\n             */\n            throw new CKEditorError('move-operation-range-into-itself', this);\n        }\n        else if (this.sourcePosition.root == this.targetPosition.root) {\n            if (compareArrays(this.sourcePosition.getParentPath(), this.targetPosition.getParentPath()) == 'prefix') {\n                const i = this.sourcePosition.path.length - 1;\n                if (this.targetPosition.path[i] >= sourceOffset && this.targetPosition.path[i] < sourceOffset + this.howMany) {\n                    /**\n                     * Trying to move a range of nodes into one of nodes from that range.\n                     *\n                     * @error move-operation-node-into-itself\n                     */\n                    throw new CKEditorError('move-operation-node-into-itself', this);\n                }\n            }\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        _move(Range._createFromPositionAndShift(this.sourcePosition, this.howMany), this.targetPosition);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.sourcePosition = this.sourcePosition.toJSON();\n        json.targetPosition = this.targetPosition.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'MoveOperation';\n    }\n    /**\n     * Creates `MoveOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        const sourcePosition = Position.fromJSON(json.sourcePosition, document);\n        const targetPosition = Position.fromJSON(json.targetPosition, document);\n        return new this(sourcePosition, json.howMany, targetPosition, json.baseVersion);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/insertoperation\n */\nimport Operation from './operation.js';\nimport Position from '../position.js';\nimport NodeList from '../nodelist.js';\nimport MoveOperation from './moveoperation.js';\nimport { _insert, _normalizeNodes } from './utils.js';\nimport Text from '../text.js';\nimport Element from '../element.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation to insert one or more nodes at given position in the model.\n */\nexport default class InsertOperation extends Operation {\n    /**\n     * Creates an insert operation.\n     *\n     * @param position Position of insertion.\n     * @param nodes The list of nodes to be inserted.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(position, nodes, baseVersion) {\n        super(baseVersion);\n        this.position = position.clone();\n        this.position.stickiness = 'toNone';\n        this.nodes = new NodeList(_normalizeNodes(nodes));\n        this.shouldReceiveAttributes = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'insert';\n    }\n    /**\n     * Total offset size of inserted nodes.\n     */\n    get howMany() {\n        return this.nodes.maxOffset;\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return this.position.clone();\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        const nodes = new NodeList([...this.nodes].map(node => node._clone(true)));\n        const insert = new InsertOperation(this.position, nodes, this.baseVersion);\n        insert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n        return insert;\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        const graveyard = this.position.root.document.graveyard;\n        const gyPosition = new Position(graveyard, [0]);\n        return new MoveOperation(this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const targetElement = this.position.parent;\n        if (!targetElement || targetElement.maxOffset < this.position.offset) {\n            /**\n             * Insertion position is invalid.\n             *\n             * @error insert-operation-position-invalid\n             */\n            throw new CKEditorError('insert-operation-position-invalid', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        // What happens here is that we want original nodes be passed to writer because we want original nodes\n        // to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n        // to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n        // get children. It is important that InsertOperation has the copy of original nodes in intact state.\n        const originalNodes = this.nodes;\n        this.nodes = new NodeList([...originalNodes].map(node => node._clone(true)));\n        _insert(this.position, originalNodes);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.position = this.position.toJSON();\n        json.nodes = this.nodes.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'InsertOperation';\n    }\n    /**\n     * Creates `InsertOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        const children = [];\n        for (const child of json.nodes) {\n            if (child.name) {\n                // If child has name property, it is an Element.\n                children.push(Element.fromJSON(child));\n            }\n            else {\n                // Otherwise, it is a Text node.\n                children.push(Text.fromJSON(child));\n            }\n        }\n        const insert = new InsertOperation(Position.fromJSON(json.position, document), children, json.baseVersion);\n        insert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n        return insert;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/splitoperation\n */\nimport Operation from './operation.js';\nimport MergeOperation from './mergeoperation.js';\nimport Position from '../position.js';\nimport Range from '../range.js';\nimport { _insert, _move } from './utils.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation to split {@link module:engine/model/element~Element an element} at given\n * {@link module:engine/model/operation/splitoperation~SplitOperation#splitPosition split position} into two elements,\n * both containing a part of the element's original content.\n */\nexport default class SplitOperation extends Operation {\n    /**\n     * Creates a split operation.\n     *\n     * @param splitPosition Position at which an element should be split.\n     * @param howMany Total offset size of elements that are in the split element after `position`.\n     * @param insertionPosition Position at which the clone of split element (or element from graveyard) will be inserted.\n     * @param graveyardPosition Position in the graveyard root before the element which\n     * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(splitPosition, howMany, insertionPosition, graveyardPosition, baseVersion) {\n        super(baseVersion);\n        this.splitPosition = splitPosition.clone();\n        // Keep position sticking to the next node. This way any new content added at the place where the element is split\n        // will be left in the original element.\n        this.splitPosition.stickiness = 'toNext';\n        this.howMany = howMany;\n        this.insertionPosition = insertionPosition;\n        this.graveyardPosition = graveyardPosition ? graveyardPosition.clone() : null;\n        if (this.graveyardPosition) {\n            this.graveyardPosition.stickiness = 'toNext';\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'split';\n    }\n    /**\n     * Position inside the new clone of a split element.\n     *\n     * This is a position where nodes that are after the split position will be moved to.\n     */\n    get moveTargetPosition() {\n        const path = this.insertionPosition.path.slice();\n        path.push(0);\n        return new Position(this.insertionPosition.root, path);\n    }\n    /**\n     * Artificial range that contains all the nodes from the split element that will be moved to the new element.\n     * The range starts at {@link #splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n     */\n    get movedRange() {\n        const end = this.splitPosition.getShiftedBy(Number.POSITIVE_INFINITY);\n        return new Range(this.splitPosition, end);\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        // These could be positions but `Selectable` type only supports `Iterable<Range>`.\n        const ranges = [\n            Range._createFromPositionAndShift(this.splitPosition, 0),\n            Range._createFromPositionAndShift(this.insertionPosition, 0)\n        ];\n        if (this.graveyardPosition) {\n            ranges.push(Range._createFromPositionAndShift(this.graveyardPosition, 0));\n        }\n        return ranges;\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns Clone of this operation.\n     */\n    clone() {\n        return new SplitOperation(this.splitPosition, this.howMany, this.insertionPosition, this.graveyardPosition, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        const graveyard = this.splitPosition.root.document.graveyard;\n        const graveyardPosition = new Position(graveyard, [0]);\n        return new MergeOperation(this.moveTargetPosition, this.howMany, this.splitPosition, graveyardPosition, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const element = this.splitPosition.parent;\n        const offset = this.splitPosition.offset;\n        // Validate whether split operation has correct parameters.\n        if (!element || element.maxOffset < offset) {\n            /**\n             * Split position is invalid.\n             *\n             * @error split-operation-position-invalid\n             */\n            throw new CKEditorError('split-operation-position-invalid', this);\n        }\n        else if (!element.parent) {\n            /**\n             * Cannot split root element.\n             *\n             * @error split-operation-split-in-root\n             */\n            throw new CKEditorError('split-operation-split-in-root', this);\n        }\n        else if (this.howMany != element.maxOffset - this.splitPosition.offset) {\n            /**\n             * Split operation specifies wrong number of nodes to move.\n             *\n             * @error split-operation-how-many-invalid\n             */\n            throw new CKEditorError('split-operation-how-many-invalid', this);\n        }\n        else if (this.graveyardPosition && !this.graveyardPosition.nodeAfter) {\n            /**\n             * Graveyard position invalid.\n             *\n             * @error split-operation-graveyard-position-invalid\n             */\n            throw new CKEditorError('split-operation-graveyard-position-invalid', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        const splitElement = this.splitPosition.parent;\n        if (this.graveyardPosition) {\n            _move(Range._createFromPositionAndShift(this.graveyardPosition, 1), this.insertionPosition);\n        }\n        else {\n            const newElement = splitElement._clone();\n            _insert(this.insertionPosition, newElement);\n        }\n        const sourceRange = new Range(Position._createAt(splitElement, this.splitPosition.offset), Position._createAt(splitElement, splitElement.maxOffset));\n        _move(sourceRange, this.moveTargetPosition);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.splitPosition = this.splitPosition.toJSON();\n        json.insertionPosition = this.insertionPosition.toJSON();\n        if (this.graveyardPosition) {\n            json.graveyardPosition = this.graveyardPosition.toJSON();\n        }\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'SplitOperation';\n    }\n    /**\n     * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion\n     * position is after the split element.\n     */\n    static getInsertionPosition(splitPosition) {\n        const path = splitPosition.path.slice(0, -1);\n        path[path.length - 1]++;\n        return new Position(splitPosition.root, path, 'toPrevious');\n    }\n    /**\n     * Creates `SplitOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        const splitPosition = Position.fromJSON(json.splitPosition, document);\n        const insertionPosition = Position.fromJSON(json.insertionPosition, document);\n        const graveyardPosition = json.graveyardPosition ? Position.fromJSON(json.graveyardPosition, document) : null;\n        return new this(splitPosition, json.howMany, insertionPosition, graveyardPosition, json.baseVersion);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/mergeoperation\n */\nimport Operation from './operation.js';\nimport SplitOperation from './splitoperation.js';\nimport Position from '../position.js';\nimport Range from '../range.js';\nimport { _move } from './utils.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation to merge two {@link module:engine/model/element~Element elements}.\n *\n * The merged element is the parent of {@link ~MergeOperation#sourcePosition} and it is merged into the parent of\n * {@link ~MergeOperation#targetPosition}. All nodes from the merged element are moved to {@link ~MergeOperation#targetPosition}.\n *\n * The merged element is moved to the graveyard at {@link ~MergeOperation#graveyardPosition}.\n */\nexport default class MergeOperation extends Operation {\n    /**\n     * Creates a merge operation.\n     *\n     * @param sourcePosition Position inside the merged element. All nodes from that\n     * element after that position will be moved to {@link #targetPosition}.\n     * @param howMany Summary offset size of nodes which will be moved from the merged element to the new parent.\n     * @param targetPosition Position which the nodes from the merged elements will be moved to.\n     * @param graveyardPosition Position in graveyard to which the merged element will be moved.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(sourcePosition, howMany, targetPosition, graveyardPosition, baseVersion) {\n        super(baseVersion);\n        this.sourcePosition = sourcePosition.clone();\n        // This is, and should always remain, the first position in its parent.\n        this.sourcePosition.stickiness = 'toPrevious';\n        this.howMany = howMany;\n        this.targetPosition = targetPosition.clone();\n        // Except of a rare scenario in `MergeOperation` x `MergeOperation` transformation,\n        // this is, and should always remain, the last position in its parent.\n        this.targetPosition.stickiness = 'toNext';\n        this.graveyardPosition = graveyardPosition.clone();\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'merge';\n    }\n    /**\n     * Position before the merged element (which will be deleted).\n     */\n    get deletionPosition() {\n        return new Position(this.sourcePosition.root, this.sourcePosition.path.slice(0, -1));\n    }\n    /**\n     * Artificial range that contains all the nodes from the merged element that will be moved to {@link ~MergeOperation#sourcePosition}.\n     * The range starts at {@link ~MergeOperation#sourcePosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n     */\n    get movedRange() {\n        const end = this.sourcePosition.getShiftedBy(Number.POSITIVE_INFINITY);\n        return new Range(this.sourcePosition, end);\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        const mergedElement = this.sourcePosition.parent;\n        return [\n            Range._createOn(mergedElement),\n            // These could be positions but `Selectable` type only supports `Iterable<Range>`.\n            Range._createFromPositionAndShift(this.targetPosition, 0),\n            Range._createFromPositionAndShift(this.graveyardPosition, 0)\n        ];\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        return new MergeOperation(this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        // Positions in this method are transformed by this merge operation because the split operation bases on\n        // the context after this merge operation happened (because split operation reverses it).\n        // So we need to acknowledge that the merge operation happened and those positions changed a little.\n        const targetPosition = this.targetPosition._getTransformedByMergeOperation(this);\n        const path = this.sourcePosition.path.slice(0, -1);\n        const insertionPosition = new Position(this.sourcePosition.root, path)._getTransformedByMergeOperation(this);\n        return new SplitOperation(targetPosition, this.howMany, insertionPosition, this.graveyardPosition, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const sourceElement = this.sourcePosition.parent;\n        const targetElement = this.targetPosition.parent;\n        // Validate whether merge operation has correct parameters.\n        if (!sourceElement.parent) {\n            /**\n             * Merge source position is invalid. The element to be merged must have a parent node.\n             *\n             * @error merge-operation-source-position-invalid\n             */\n            throw new CKEditorError('merge-operation-source-position-invalid', this);\n        }\n        else if (!targetElement.parent) {\n            /**\n             * Merge target position is invalid. The element to be merged must have a parent node.\n             *\n             * @error merge-operation-target-position-invalid\n             */\n            throw new CKEditorError('merge-operation-target-position-invalid', this);\n        }\n        else if (this.howMany != sourceElement.maxOffset) {\n            /**\n             * Merge operation specifies wrong number of nodes to move.\n             *\n             * @error merge-operation-how-many-invalid\n             */\n            throw new CKEditorError('merge-operation-how-many-invalid', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        const mergedElement = this.sourcePosition.parent;\n        const sourceRange = Range._createIn(mergedElement);\n        _move(sourceRange, this.targetPosition);\n        _move(Range._createOn(mergedElement), this.graveyardPosition);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.sourcePosition = json.sourcePosition.toJSON();\n        json.targetPosition = json.targetPosition.toJSON();\n        json.graveyardPosition = json.graveyardPosition.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'MergeOperation';\n    }\n    /**\n     * Creates `MergeOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        const sourcePosition = Position.fromJSON(json.sourcePosition, document);\n        const targetPosition = Position.fromJSON(json.targetPosition, document);\n        const graveyardPosition = Position.fromJSON(json.graveyardPosition, document);\n        return new this(sourcePosition, json.howMany, targetPosition, graveyardPosition, json.baseVersion);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/markeroperation\n */\nimport Operation from './operation.js';\nimport Range from '../range.js';\nexport default class MarkerOperation extends Operation {\n    /**\n     * @param name Marker name.\n     * @param oldRange Marker range before the change.\n     * @param newRange Marker range after the change.\n     * @param markers Marker collection on which change should be executed.\n     * @param affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n     * (is persisted in the editor's data).\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(name, oldRange, newRange, markers, affectsData, baseVersion) {\n        super(baseVersion);\n        this.name = name;\n        this.oldRange = oldRange ? oldRange.clone() : null;\n        this.newRange = newRange ? newRange.clone() : null;\n        this.affectsData = affectsData;\n        this._markers = markers;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'marker';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        const ranges = [];\n        if (this.oldRange) {\n            ranges.push(this.oldRange.clone());\n        }\n        if (this.newRange) {\n            if (this.oldRange) {\n                ranges.push(...this.newRange.getDifference(this.oldRange));\n            }\n            else {\n                ranges.push(this.newRange.clone());\n            }\n        }\n        return ranges;\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        return new MarkerOperation(this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        return new MarkerOperation(this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        if (this.newRange) {\n            this._markers._set(this.name, this.newRange, true, this.affectsData);\n        }\n        else {\n            this._markers._remove(this.name);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    toJSON() {\n        const json = super.toJSON();\n        if (this.oldRange) {\n            json.oldRange = this.oldRange.toJSON();\n        }\n        if (this.newRange) {\n            json.newRange = this.newRange.toJSON();\n        }\n        delete json._markers;\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'MarkerOperation';\n    }\n    /**\n     * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return new MarkerOperation(json.name, json.oldRange ? Range.fromJSON(json.oldRange, document) : null, json.newRange ? Range.fromJSON(json.newRange, document) : null, document.model.markers, json.affectsData, json.baseVersion);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/attributeoperation\n */\nimport Operation from './operation.js';\nimport { _setAttribute } from './utils.js';\nimport Range from '../range.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\nimport { isEqual } from 'lodash-es';\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n */\nexport default class AttributeOperation extends Operation {\n    /**\n     * Creates an operation that changes, removes or adds attributes.\n     *\n     * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n     * have an attribute with the same key as the added attribute.\n     *\n     * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n     * must have an attribute with that key added.\n     *\n     * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n     * operation's ranges must already have an attribute with given key and `oldValue` as value\n     *\n     * @param range Range on which the operation should be applied. Must be a flat range.\n     * @param key Key of an attribute to change or remove.\n     * @param oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n     * @param newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(range, key, oldValue, newValue, baseVersion) {\n        super(baseVersion);\n        this.range = range.clone();\n        this.key = key;\n        this.oldValue = oldValue === undefined ? null : oldValue;\n        this.newValue = newValue === undefined ? null : newValue;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        if (this.oldValue === null) {\n            return 'addAttribute';\n        }\n        else if (this.newValue === null) {\n            return 'removeAttribute';\n        }\n        else {\n            return 'changeAttribute';\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return this.range.clone();\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        return new AttributeOperation(this.range, this.key, this.oldValue, this.newValue, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        return new AttributeOperation(this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.range = this.range.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        if (!this.range.isFlat) {\n            /**\n             * The range to change is not flat.\n             *\n             * @error attribute-operation-range-not-flat\n             */\n            throw new CKEditorError('attribute-operation-range-not-flat', this);\n        }\n        for (const item of this.range.getItems({ shallow: true })) {\n            if (this.oldValue !== null && !isEqual(item.getAttribute(this.key), this.oldValue)) {\n                /**\n                 * Changed node has different attribute value than operation's old attribute value.\n                 *\n                 * @error attribute-operation-wrong-old-value\n                 * @param item\n                 * @param key\n                 * @param value\n                 */\n                throw new CKEditorError('attribute-operation-wrong-old-value', this, { item, key: this.key, value: this.oldValue });\n            }\n            if (this.oldValue === null && this.newValue !== null && item.hasAttribute(this.key)) {\n                /**\n                 * The attribute with given key already exists for the given node.\n                 *\n                 * @error attribute-operation-attribute-exists\n                 * @param node\n                 * @param key\n                 */\n                throw new CKEditorError('attribute-operation-attribute-exists', this, { node: item, key: this.key });\n            }\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        // If value to set is same as old value, don't do anything.\n        if (!isEqual(this.oldValue, this.newValue)) {\n            // Execution.\n            _setAttribute(this.range, this.key, this.newValue);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'AttributeOperation';\n    }\n    /**\n     * Creates `AttributeOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return new AttributeOperation(Range.fromJSON(json.range, document), json.key, json.oldValue, json.newValue, json.baseVersion);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/nooperation\n */\nimport Operation from './operation.js';\n/**\n * Operation which is doing nothing (\"empty operation\", \"do-nothing operation\", \"noop\"). This is an operation,\n * which when executed does not change the tree model. It still has some parameters defined for transformation purposes.\n *\n * In most cases this operation is a result of transforming operations. When transformation returns\n * {@link module:engine/model/operation/nooperation~NoOperation} it means that changes done by the transformed operation\n * have already been applied.\n */\nexport default class NoOperation extends Operation {\n    get type() {\n        return 'noop';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return null;\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        return new NoOperation(this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        return new NoOperation(this.baseVersion + 1);\n    }\n    /** @internal */\n    _execute() {\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'NoOperation';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/renameoperation\n */\nimport Operation from './operation.js';\nimport Element from '../element.js';\nimport Position from '../position.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n */\nexport default class RenameOperation extends Operation {\n    /**\n     * Creates an operation that changes element's name.\n     *\n     * @param position Position before an element to change.\n     * @param oldName Current name of the element.\n     * @param newName New name for the element.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(position, oldName, newName, baseVersion) {\n        super(baseVersion);\n        this.position = position;\n        // This position sticks to the next node because it is a position before the node that we want to change.\n        this.position.stickiness = 'toNext';\n        this.oldName = oldName;\n        this.newName = newName;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'rename';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return this.position.nodeAfter;\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns Clone of this operation.\n     */\n    clone() {\n        return new RenameOperation(this.position.clone(), this.oldName, this.newName, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        return new RenameOperation(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const element = this.position.nodeAfter;\n        if (!(element instanceof Element)) {\n            /**\n             * Given position is invalid or node after it is not instance of Element.\n             *\n             * @error rename-operation-wrong-position\n             */\n            throw new CKEditorError('rename-operation-wrong-position', this);\n        }\n        else if (element.name !== this.oldName) {\n            /**\n             * Element to change has different name than operation's old name.\n             *\n             * @error rename-operation-wrong-name\n             */\n            throw new CKEditorError('rename-operation-wrong-name', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        const element = this.position.nodeAfter;\n        element.name = this.newName;\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.position = this.position.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'RenameOperation';\n    }\n    /**\n     * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return new RenameOperation(Position.fromJSON(json.position, document), json.oldName, json.newName, json.baseVersion);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/rootattributeoperation\n */\nimport Operation from './operation.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * {@link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n */\nexport default class RootAttributeOperation extends Operation {\n    /**\n     * Creates an operation that changes, removes or adds attributes on root element.\n     *\n     * @see module:engine/model/operation/attributeoperation~AttributeOperation\n     * @param root Root element to change.\n     * @param key Key of an attribute to change or remove.\n     * @param oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n     * @param newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(root, key, oldValue, newValue, baseVersion) {\n        super(baseVersion);\n        this.root = root;\n        this.key = key;\n        this.oldValue = oldValue === undefined ? null : oldValue;\n        this.newValue = newValue === undefined ? null : newValue;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        if (this.oldValue === null) {\n            return 'addRootAttribute';\n        }\n        else if (this.newValue === null) {\n            return 'removeRootAttribute';\n        }\n        else {\n            return 'changeRootAttribute';\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return this.root;\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns Clone of this operation.\n     */\n    clone() {\n        return new RootAttributeOperation(this.root, this.key, this.oldValue, this.newValue, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        return new RootAttributeOperation(this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        if (this.root != this.root.root || this.root.is('documentFragment')) {\n            /**\n             * The element to change is not a root element.\n             *\n             * @error rootattribute-operation-not-a-root\n             * @param root\n             * @param key\n             * @param value\n             */\n            throw new CKEditorError('rootattribute-operation-not-a-root', this, { root: this.root, key: this.key });\n        }\n        if (this.oldValue !== null && this.root.getAttribute(this.key) !== this.oldValue) {\n            /**\n             * The attribute which should be removed does not exist for the given node.\n             *\n             * @error rootattribute-operation-wrong-old-value\n             * @param root\n             * @param key\n             * @param value\n             */\n            throw new CKEditorError('rootattribute-operation-wrong-old-value', this, { root: this.root, key: this.key });\n        }\n        if (this.oldValue === null && this.newValue !== null && this.root.hasAttribute(this.key)) {\n            /**\n             * The attribute with given key already exists for the given node.\n             *\n             * @error rootattribute-operation-attribute-exists\n             * @param root\n             * @param key\n             */\n            throw new CKEditorError('rootattribute-operation-attribute-exists', this, { root: this.root, key: this.key });\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        if (this.newValue !== null) {\n            this.root._setAttribute(this.key, this.newValue);\n        }\n        else {\n            this.root._removeAttribute(this.key);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.root = this.root.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'RootAttributeOperation';\n    }\n    /**\n     * Creates `RootAttributeOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        if (!document.getRoot(json.root)) {\n            /**\n             * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n             *\n             * @error rootattribute-operation-fromjson-no-root\n             * @param rootName\n             */\n            throw new CKEditorError('rootattribute-operation-fromjson-no-root', this, { rootName: json.root });\n        }\n        return new RootAttributeOperation(document.getRoot(json.root), json.key, json.oldValue, json.newValue, json.baseVersion);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/rootoperation\n */\nimport Operation from './operation.js';\n/**\n * Operation that creates (or attaches) or detaches a root element.\n */\nexport default class RootOperation extends Operation {\n    /**\n     * Creates an operation that creates or removes a root element.\n     *\n     * @param rootName Root name to create or detach.\n     * @param elementName Root element name.\n     * @param isAdd Specifies whether the operation adds (`true`) or detaches the root (`false`).\n     * @param document Document which owns the root.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation can be applied.\n     */\n    constructor(rootName, elementName, isAdd, document, baseVersion) {\n        super(baseVersion);\n        this.rootName = rootName;\n        this.elementName = elementName;\n        this.isAdd = isAdd;\n        this._document = document;\n        // Make sure that the root exists ASAP, this is important for RTC.\n        // If the root was dynamically added, there will be more operations that operate on/in this root.\n        // These operations will require root element instance (in operation property or in position instance).\n        // If the root is not created ahead of time, instantiating such operations may fail.\n        if (!this._document.getRoot(this.rootName)) {\n            const root = this._document.createRoot(this.elementName, this.rootName);\n            root._isAttached = false;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return this.isAdd ? 'addRoot' : 'detachRoot';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return this._document.getRoot(this.rootName);\n    }\n    /**\n     * @inheritDoc\n     */\n    clone() {\n        return new RootOperation(this.rootName, this.elementName, this.isAdd, this._document, this.baseVersion);\n    }\n    /**\n     * @inheritDoc\n     */\n    getReversed() {\n        return new RootOperation(this.rootName, this.elementName, !this.isAdd, this._document, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     */\n    _execute() {\n        this._document.getRoot(this.rootName)._isAttached = this.isAdd;\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        delete json._document;\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'RootOperation';\n    }\n    /**\n     * Creates `RootOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return new RootOperation(json.rootName, json.elementName, json.isAdd, document, json.baseVersion);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/operationfactory\n */\nimport AttributeOperation from './attributeoperation.js';\nimport InsertOperation from './insertoperation.js';\nimport MarkerOperation from './markeroperation.js';\nimport MoveOperation from './moveoperation.js';\nimport NoOperation from './nooperation.js';\nimport Operation from './operation.js';\nimport RenameOperation from './renameoperation.js';\nimport RootAttributeOperation from './rootattributeoperation.js';\nimport RootOperation from './rootoperation.js';\nimport SplitOperation from './splitoperation.js';\nimport MergeOperation from './mergeoperation.js';\nconst operations = {};\noperations[AttributeOperation.className] = AttributeOperation;\noperations[InsertOperation.className] = InsertOperation;\noperations[MarkerOperation.className] = MarkerOperation;\noperations[MoveOperation.className] = MoveOperation;\noperations[NoOperation.className] = NoOperation;\noperations[Operation.className] = Operation;\noperations[RenameOperation.className] = RenameOperation;\noperations[RootAttributeOperation.className] = RootAttributeOperation;\noperations[RootOperation.className] = RootOperation;\noperations[SplitOperation.className] = SplitOperation;\noperations[MergeOperation.className] = MergeOperation;\n/**\n * A factory class for creating operations.\n */\nexport default class OperationFactory {\n    /**\n     * Creates an operation instance from a JSON object (parsed JSON string).\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return operations[json.__className].fromJSON(json, document);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/transform\n */\nimport InsertOperation from './insertoperation.js';\nimport AttributeOperation from './attributeoperation.js';\nimport RenameOperation from './renameoperation.js';\nimport MarkerOperation from './markeroperation.js';\nimport MoveOperation from './moveoperation.js';\nimport RootAttributeOperation from './rootattributeoperation.js';\nimport RootOperation from './rootoperation.js';\nimport MergeOperation from './mergeoperation.js';\nimport SplitOperation from './splitoperation.js';\nimport NoOperation from './nooperation.js';\nimport Range from '../range.js';\nimport Position from '../position.js';\nimport { compareArrays } from '@ckeditor/ckeditor5-utils';\nconst transformations = new Map();\n/**\n * Sets a transformation function to be be used to transform instances of class `OperationA` by instances of class `OperationB`.\n *\n * The `transformationFunction` is passed three parameters:\n *\n * * `a` - operation to be transformed, an instance of `OperationA`,\n * * `b` - operation to be transformed by, an instance of `OperationB`,\n * * {@link module:engine/model/operation/transform~TransformationContext `context`} - object with additional information about\n * transformation context.\n *\n * The `transformationFunction` should return transformation result, which is an array with one or multiple\n * {@link module:engine/model/operation/operation~Operation operation} instances.\n *\n * @param transformationFunction Function to use for transforming.\n */\nfunction setTransformation(OperationA, OperationB, transformationFunction) {\n    let aGroup = transformations.get(OperationA);\n    if (!aGroup) {\n        aGroup = new Map();\n        transformations.set(OperationA, aGroup);\n    }\n    aGroup.set(OperationB, transformationFunction);\n}\n/**\n * Returns a previously set transformation function for transforming an instance of `OperationA` by an instance of `OperationB`.\n *\n * If no transformation was set for given pair of operations, {@link module:engine/model/operation/transform~noUpdateTransformation}\n * is returned. This means that if no transformation was set, the `OperationA` instance will not change when transformed\n * by the `OperationB` instance.\n *\n * @returns Function set to transform an instance of `OperationA` by an instance of `OperationB`.\n */\nfunction getTransformation(OperationA, OperationB) {\n    const aGroup = transformations.get(OperationA);\n    if (aGroup && aGroup.has(OperationB)) {\n        return aGroup.get(OperationB);\n    }\n    return noUpdateTransformation;\n}\n/**\n * A transformation function that only clones operation to transform, without changing it.\n */\nfunction noUpdateTransformation(a) {\n    return [a];\n}\n/**\n * Transforms operation `a` by operation `b`.\n *\n * @param a Operation to be transformed.\n * @param b Operation to transform by.\n * @param context Transformation context for this transformation.\n * @returns Transformation result.\n */\nexport function transform(a, b, context = {}) {\n    const transformationFunction = getTransformation(a.constructor, b.constructor);\n    /* eslint-disable no-useless-catch */\n    try {\n        a = a.clone();\n        return transformationFunction(a, b, context);\n    }\n    catch (e) {\n        // @if CK_DEBUG // console.warn( 'Error during operation transformation!', e.message );\n        // @if CK_DEBUG // console.warn( 'Transformed operation', a );\n        // @if CK_DEBUG // console.warn( 'Operation transformed by', b );\n        // @if CK_DEBUG // console.warn( 'context.aIsStrong', context.aIsStrong );\n        // @if CK_DEBUG // console.warn( 'context.aWasUndone', context.aWasUndone );\n        // @if CK_DEBUG // console.warn( 'context.bWasUndone', context.bWasUndone );\n        // @if CK_DEBUG // console.warn( 'context.abRelation', context.abRelation );\n        // @if CK_DEBUG // console.warn( 'context.baRelation', context.baRelation );\n        throw e;\n    }\n    /* eslint-enable no-useless-catch */\n}\n/**\n * Performs a transformation of two sets of operations - `operationsA` and `operationsB`. The transformation is two-way -\n * both transformed `operationsA` and transformed `operationsB` are returned.\n *\n * Note, that the first operation in each set should base on the same document state (\n * {@link module:engine/model/document~Document#version document version}).\n *\n * It is assumed that `operationsA` are \"more important\" during conflict resolution between two operations.\n *\n * New copies of both passed arrays and operations inside them are returned. Passed arguments are not altered.\n *\n * Base versions of the transformed operations sets are updated accordingly. For example, assume that base versions are `4`\n * and there are `3` operations in `operationsA` and `5` operations in `operationsB`. Then:\n *\n * * transformed `operationsA` will start from base version `9` (`4` base version + `5` operations B),\n * * transformed `operationsB` will start from base version `7` (`4` base version + `3` operations A).\n *\n * If no operation was broken into two during transformation, then both sets will end up with an operation that bases on version `11`:\n *\n * * transformed `operationsA` start from `9` and there are `3` of them, so the last will have `baseVersion` equal to `11`,\n * * transformed `operationsB` start from `7` and there are `5` of them, so the last will have `baseVersion` equal to `11`.\n *\n * @param operationsA\n * @param operationsB\n * @param options Additional transformation options.\n * @param options.document Document which the operations change.\n * @param options.useRelations Whether during transformation relations should be used (used during undo for better conflict resolution).\n * @param options.padWithNoOps Whether additional {@link module:engine/model/operation/nooperation~NoOperation}s\n * should be added to the transformation results to force the same last base version for both transformed sets (in case\n * if some operations got broken into multiple operations during transformation).\n * @param options.forceWeakRemove If set to `false`, remove operation will be always stronger than move operation,\n * so the removed nodes won't end up back in the document root. When set to `true`, context data will be used.\n * @returns Transformation result.\n */\nexport function transformSets(operationsA, operationsB, options) {\n    // Create new arrays so the originally passed arguments are not changed.\n    // No need to clone operations, they are cloned as they are transformed.\n    operationsA = operationsA.slice();\n    operationsB = operationsB.slice();\n    const contextFactory = new ContextFactory(options.document, options.useRelations, options.forceWeakRemove);\n    contextFactory.setOriginalOperations(operationsA);\n    contextFactory.setOriginalOperations(operationsB);\n    const originalOperations = contextFactory.originalOperations;\n    // If one of sets is empty there is simply nothing to transform, so return sets as they are.\n    if (operationsA.length == 0 || operationsB.length == 0) {\n        return { operationsA, operationsB, originalOperations };\n    }\n    //\n    // Following is a description of transformation process:\n    //\n    // There are `operationsA` and `operationsB` to be transformed, both by both.\n    //\n    // So, suppose we have sets of two operations each: `operationsA` = `[ a1, a2 ]`, `operationsB` = `[ b1, b2 ]`.\n    //\n    // Remember, that we can only transform operations that base on the same context. We assert that `a1` and `b1` base on\n    // the same context and we transform them. Then, we get `a1'` and `b1'`. `a2` bases on a context with `a1` -- `a2`\n    // is an operation that followed `a1`. Similarly, `b2` bases on a context with `b1`.\n    //\n    // However, since `a1'` is a result of transformation by `b1`, `a1'` now also has a context with `b1`. This means that\n    // we can safely transform `a1'` by `b2`. As we finish transforming `a1`, we also transformed all `operationsB`.\n    // All `operationsB` also have context including `a1`. Now, we can properly transform `a2` by those operations.\n    //\n    // The transformation process can be visualized on a transformation diagram (\"diamond diagram\"):\n    //\n    //          [the initial state]\n    //         [common for a1 and b1]\n    //\n    //                   *\n    //                  / \\\n    //                 /   \\\n    //               b1     a1\n    //               /       \\\n    //              /         \\\n    //             *           *\n    //            / \\         / \\\n    //           /   \\       /   \\\n    //         b2    a1'   b1'    a2\n    //         /       \\   /       \\\n    //        /         \\ /         \\\n    //       *           *           *\n    //        \\         / \\         /\n    //         \\       /   \\       /\n    //        a1''   b2'   a2'   b1''\n    //           \\   /       \\   /\n    //            \\ /         \\ /\n    //             *           *\n    //              \\         /\n    //               \\       /\n    //              a2''   b2''\n    //                 \\   /\n    //                  \\ /\n    //                   *\n    //\n    //           [the final state]\n    //\n    // The final state can be reached from the initial state by applying `a1`, `a2`, `b1''` and `b2''`, as well as by\n    // applying `b1`, `b2`, `a1''`, `a2''`. Note how the operations get to a proper common state before each pair is\n    // transformed.\n    //\n    // Another thing to consider is that an operation during transformation can be broken into multiple operations.\n    // Suppose that `a1` * `b1` = `[ a11', a12' ]` (instead of `a1'` that we considered previously).\n    //\n    // In that case, we leave `a12'` for later and we continue transforming `a11'` until it is transformed by all `operationsB`\n    // (in our case it is just `b2`). At this point, `b1` is transformed by \"whole\" `a1`, while `b2` is only transformed\n    // by `a11'`. Similarly, `a12'` is only transformed by `b1`. This leads to a conclusion that we need to start transforming `a12'`\n    // from the moment just after it was broken. So, `a12'` is transformed by `b2`. Now, \"the whole\" `a1` is transformed\n    // by `operationsB`, while all `operationsB` are transformed by \"the whole\" `a1`. This means that we can continue with\n    // following `operationsA` (in our case it is just `a2`).\n    //\n    // Of course, also `operationsB` can be broken. However, since we focus on transforming operation `a` to the end,\n    // the only thing to do is to store both pieces of operation `b`, so that the next transformed operation `a` will\n    // be transformed by both of them.\n    //\n    //                       *\n    //                      / \\\n    //                     /   \\\n    //                    /     \\\n    //                  b1       a1\n    //                  /         \\\n    //                 /           \\\n    //                /             \\\n    //               *               *\n    //              / \\             / \\\n    //             /  a11'         /   \\\n    //            /     \\         /     \\\n    //          b2       *      b1'      a2\n    //          /       / \\     /         \\\n    //         /       /  a12' /           \\\n    //        /       /     \\ /             \\\n    //       *       b2'     *               *\n    //        \\     /       / \\             /\n    //       a11'' /     b21'' \\           /\n    //          \\ /       /     \\         /\n    //           *       *      a2'     b1''\n    //            \\     / \\       \\     /\n    //          a12'' b22''\\       \\   /\n    //              \\ /     \\       \\ /\n    //               *      a2''     *\n    //                \\       \\     /\n    //                 \\       \\  b21'''\n    //                  \\       \\ /\n    //                a2'''      *\n    //                    \\     /\n    //                     \\  b22'''\n    //                      \\ /\n    //                       *\n    //\n    // Note, how `a1` is broken and transformed into `a11'` and `a12'`, while `b2'` got broken and transformed into `b21''` and `b22''`.\n    //\n    // Having all that on mind, here is an outline for the transformation process algorithm:\n    //\n    // 1. We have `operationsA` and `operationsB` array, which we dynamically update as the transformation process goes.\n    //\n    // 2. We take next (or first) operation from `operationsA` and check from which operation `b` we need to start transforming it.\n    // All original `operationsA` are set to be transformed starting from the first operation `b`.\n    //\n    // 3. We take operations from `operationsB`, one by one, starting from the correct one, and transform operation `a`\n    // by operation `b` (and vice versa). We update `operationsA` and `operationsB` by replacing the original operations\n    // with the transformation results.\n    //\n    // 4. If operation is broken into multiple operations, we save all the new operations in the place of the\n    // original operation.\n    //\n    // 5. Additionally, if operation `a` was broken, for the \"new\" operation, we remember from which operation `b` it should\n    // be transformed by.\n    //\n    // 6. We continue transforming \"current\" operation `a` until it is transformed by all `operationsB`. Then, go to 2.\n    // unless the last operation `a` was transformed.\n    //\n    // The actual implementation of the above algorithm is slightly different, as only one loop (while) is used.\n    // The difference is that we have \"current\" `a` operation to transform and we store the index of the next `b` operation\n    // to transform by. Each loop operates on two indexes then: index pointing to currently processed `a` operation and\n    // index pointing to next `b` operation. Each loop is just one `a * b` + `b * a` transformation. After each loop\n    // operation `b` index is updated. If all `b` operations were visited for the current `a` operation, we change\n    // current `a` operation index to the next one.\n    //\n    // For each operation `a`, keeps information what is the index in `operationsB` from which the transformation should start.\n    const nextTransformIndex = new WeakMap();\n    // For all the original `operationsA`, set that they should be transformed starting from the first of `operationsB`.\n    for (const op of operationsA) {\n        nextTransformIndex.set(op, 0);\n    }\n    // Additional data that is used for some postprocessing after the main transformation process is done.\n    const data = {\n        nextBaseVersionA: operationsA[operationsA.length - 1].baseVersion + 1,\n        nextBaseVersionB: operationsB[operationsB.length - 1].baseVersion + 1,\n        originalOperationsACount: operationsA.length,\n        originalOperationsBCount: operationsB.length\n    };\n    // Index of currently transformed operation `a`.\n    let i = 0;\n    // While not all `operationsA` are transformed...\n    while (i < operationsA.length) {\n        // Get \"current\" operation `a`.\n        const opA = operationsA[i];\n        // For the \"current\" operation `a`, get the index of the next operation `b` to transform by.\n        const indexB = nextTransformIndex.get(opA);\n        // If operation `a` was already transformed by every operation `b`, change \"current\" operation `a` to the next one.\n        if (indexB == operationsB.length) {\n            i++;\n            continue;\n        }\n        const opB = operationsB[indexB];\n        // Transform `a` by `b` and `b` by `a`.\n        const newOpsA = transform(opA, opB, contextFactory.getContext(opA, opB, true));\n        const newOpsB = transform(opB, opA, contextFactory.getContext(opB, opA, false));\n        // As a result we get one or more `newOpsA` and one or more `newOpsB` operations.\n        // Update contextual information about operations.\n        contextFactory.updateRelation(opA, opB);\n        contextFactory.setOriginalOperations(newOpsA, opA);\n        contextFactory.setOriginalOperations(newOpsB, opB);\n        // For new `a` operations, update their index of the next operation `b` to transform them by.\n        //\n        // This is needed even if there was only one result (`a` was not broken) because that information is used\n        // at the beginning of this loop every time.\n        for (const newOpA of newOpsA) {\n            // Acknowledge, that operation `b` also might be broken into multiple operations.\n            //\n            // This is why we raise `indexB` not just by 1. If `newOpsB` are multiple operations, they will be\n            // spliced in the place of `opB`. So we need to change `transformBy` accordingly, so that an operation won't\n            // be transformed by the same operation (part of it) again.\n            nextTransformIndex.set(newOpA, indexB + newOpsB.length);\n        }\n        // Update `operationsA` and `operationsB` with the transformed versions.\n        operationsA.splice(i, 1, ...newOpsA);\n        operationsB.splice(indexB, 1, ...newOpsB);\n    }\n    handlePartialMarkerOperations(operationsA);\n    handlePartialMarkerOperations(operationsB);\n    if (options.padWithNoOps) {\n        // If no-operations padding is enabled, count how many extra `a` and `b` operations were generated.\n        const brokenOperationsACount = operationsA.length - data.originalOperationsACount;\n        const brokenOperationsBCount = operationsB.length - data.originalOperationsBCount;\n        // Then, if that number is not the same, pad `operationsA` or `operationsB` with correct number of no-ops so\n        // that the base versions are equalled.\n        //\n        // Note that only one array will be updated, as only one of those subtractions can be greater than zero.\n        padWithNoOps(operationsA, brokenOperationsBCount - brokenOperationsACount);\n        padWithNoOps(operationsB, brokenOperationsACount - brokenOperationsBCount);\n    }\n    // Finally, update base versions of transformed operations.\n    updateBaseVersions(operationsA, data.nextBaseVersionB);\n    updateBaseVersions(operationsB, data.nextBaseVersionA);\n    return { operationsA, operationsB, originalOperations };\n}\n/**\n * Gathers additional data about operations processed during transformation. Can be used to obtain contextual information\n * about two operations that are about to be transformed. This contextual information can be used for better conflict resolution.\n */\nclass ContextFactory {\n    /**\n     * Creates `ContextFactory` instance.\n     *\n     * @param document Document which the operations change.\n     * @param useRelations Whether during transformation relations should be used (used during undo for\n     * better conflict resolution).\n     * @param forceWeakRemove If set to `false`, remove operation will be always stronger than move operation,\n     * so the removed nodes won't end up back in the document root. When set to `true`, context data will be used.\n     */\n    constructor(document, useRelations, forceWeakRemove = false) {\n        // For each operation that is created during transformation process, we keep a reference to the original operation\n        // which it comes from. The original operation works as a kind of \"identifier\". Every contextual information\n        // gathered during transformation that we want to save for given operation, is actually saved for the original operation.\n        // This way no matter if operation `a` is cloned, then transformed, even breaks, we still have access to the previously\n        // gathered data through original operation reference.\n        this.originalOperations = new Map();\n        // `model.History` instance which information about undone operations will be taken from.\n        this._history = document.history;\n        // Whether additional context should be used.\n        this._useRelations = useRelations;\n        this._forceWeakRemove = !!forceWeakRemove;\n        // Relations is a double-map structure (maps in map) where for two operations we store how those operations were related\n        // to each other. Those relations are evaluated during transformation process. For every transformated pair of operations\n        // we keep relations between them.\n        this._relations = new Map();\n    }\n    /**\n     * Sets \"original operation\" for given operations.\n     *\n     * During transformation process, operations are cloned, then changed, then processed again, sometimes broken into two\n     * or multiple operations. When gathering additional data it is important that all operations can be somehow linked\n     * so a cloned and transformed \"version\" still kept track of the data assigned earlier to it.\n     *\n     * The original operation object will be used as such an universal linking id. Throughout the transformation process\n     * all cloned operations will refer to \"the original operation\" when storing and reading additional data.\n     *\n     * If `takeFrom` is not set, each operation from `operations` array will be assigned itself as \"the original operation\".\n     * This should be used as an initialization step.\n     *\n     * If `takeFrom` is set, each operation from `operations` will be assigned the same original operation as assigned\n     * for `takeFrom` operation. This should be used to update original operations. It should be used in a way that\n     * `operations` are the result of `takeFrom` transformation to ensure proper \"original operation propagation\".\n     */\n    setOriginalOperations(operations, takeFrom = null) {\n        const originalOperation = takeFrom ? this.originalOperations.get(takeFrom) : null;\n        for (const operation of operations) {\n            this.originalOperations.set(operation, originalOperation || operation);\n        }\n    }\n    /**\n     * Saves a relation between operations `opA` and `opB`.\n     *\n     * Relations are then later used to help solve conflicts when operations are transformed.\n     */\n    updateRelation(opA, opB) {\n        // The use of relations is described in a bigger detail in transformation functions.\n        //\n        // In brief, this function, for specified pairs of operation types, checks how positions defined in those operations relate.\n        // Then those relations are saved. For example, for two move operations, it is saved if one of those operations target\n        // position is before the other operation source position. This kind of information gives contextual information when\n        // transformation is used during undo. Similar checks are done for other pairs of operations.\n        //\n        if (opA instanceof MoveOperation) {\n            if (opB instanceof MergeOperation) {\n                if (opA.targetPosition.isEqual(opB.sourcePosition) || opB.movedRange.containsPosition(opA.targetPosition)) {\n                    this._setRelation(opA, opB, 'insertAtSource');\n                }\n                else if (opA.targetPosition.isEqual(opB.deletionPosition)) {\n                    this._setRelation(opA, opB, 'insertBetween');\n                }\n                else if (opA.targetPosition.isAfter(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'moveTargetAfter');\n                }\n            }\n            else if (opB instanceof MoveOperation) {\n                if (opA.targetPosition.isEqual(opB.sourcePosition) || opA.targetPosition.isBefore(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'insertBefore');\n                }\n                else {\n                    this._setRelation(opA, opB, 'insertAfter');\n                }\n            }\n        }\n        else if (opA instanceof SplitOperation) {\n            if (opB instanceof MergeOperation) {\n                if (opA.splitPosition.isBefore(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'splitBefore');\n                }\n            }\n            else if (opB instanceof MoveOperation) {\n                if (opA.splitPosition.isEqual(opB.sourcePosition) || opA.splitPosition.isBefore(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'splitBefore');\n                }\n                else {\n                    const range = Range._createFromPositionAndShift(opB.sourcePosition, opB.howMany);\n                    if (opA.splitPosition.hasSameParentAs(opB.sourcePosition) && range.containsPosition(opA.splitPosition)) {\n                        // TODO: Potential bug -- we are saving offset value directly and it is not later updated during OT.\n                        // TODO: This may cause a bug it here was an non-undone operation that may have impacted this offset.\n                        // TODO: Similar error was with MarkerOperation relations, where full path was saved and never updated.\n                        const howMany = range.end.offset - opA.splitPosition.offset;\n                        const offset = opA.splitPosition.offset - range.start.offset;\n                        this._setRelation(opA, opB, { howMany, offset });\n                    }\n                }\n            }\n        }\n        else if (opA instanceof MergeOperation) {\n            if (opB instanceof MergeOperation) {\n                if (!opA.targetPosition.isEqual(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'mergeTargetNotMoved');\n                }\n                if (opA.sourcePosition.isEqual(opB.targetPosition)) {\n                    this._setRelation(opA, opB, 'mergeSourceNotMoved');\n                }\n                if (opA.sourcePosition.isEqual(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'mergeSameElement');\n                }\n            }\n            else if (opB instanceof SplitOperation) {\n                if (opA.sourcePosition.isEqual(opB.splitPosition)) {\n                    this._setRelation(opA, opB, 'splitAtSource');\n                }\n            }\n            else if (opB instanceof MoveOperation && opB.howMany > 0) {\n                if (opA.sourcePosition.isEqual(opB.sourcePosition.getShiftedBy(opB.howMany))) {\n                    this._setRelation(opA, opB, 'mergeSourceAffected');\n                }\n                if (opA.targetPosition.isEqual(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'mergeTargetWasBefore');\n                }\n            }\n        }\n        else if (opA instanceof MarkerOperation) {\n            const markerRange = opA.newRange;\n            if (!markerRange) {\n                return;\n            }\n            if (opB instanceof MergeOperation) {\n                const wasInLeftElement = markerRange.start.isEqual(opB.targetPosition);\n                const wasStartBeforeMergedElement = markerRange.start.isEqual(opB.deletionPosition);\n                const wasEndBeforeMergedElement = markerRange.end.isEqual(opB.deletionPosition);\n                const wasInRightElement = markerRange.end.isEqual(opB.sourcePosition);\n                if (wasInLeftElement || wasStartBeforeMergedElement || wasEndBeforeMergedElement || wasInRightElement) {\n                    this._setRelation(opA, opB, {\n                        wasInLeftElement,\n                        wasStartBeforeMergedElement,\n                        wasEndBeforeMergedElement,\n                        wasInRightElement\n                    });\n                }\n            }\n        }\n    }\n    /**\n     * Evaluates and returns contextual information about two given operations `opA` and `opB` which are about to be transformed.\n     */\n    getContext(opA, opB, aIsStrong) {\n        return {\n            aIsStrong,\n            aWasUndone: this._wasUndone(opA),\n            bWasUndone: this._wasUndone(opB),\n            abRelation: this._useRelations ? this._getRelation(opA, opB) : null,\n            baRelation: this._useRelations ? this._getRelation(opB, opA) : null,\n            forceWeakRemove: this._forceWeakRemove\n        };\n    }\n    /**\n     * Returns whether given operation `op` has already been undone.\n     *\n     * Information whether an operation was undone gives more context when making a decision when two operations are in conflict.\n     */\n    _wasUndone(op) {\n        // For `op`, get its original operation. After all, if `op` is a clone (or even transformed clone) of another\n        // operation, literally `op` couldn't be undone. It was just generated. If anything, it was the operation it origins\n        // from which was undone. So get that original operation.\n        const originalOp = this.originalOperations.get(op);\n        // And check with the document if the original operation was undone.\n        return originalOp.wasUndone || this._history.isUndoneOperation(originalOp);\n    }\n    /**\n     * Returns a relation between `opA` and an operation which is undone by `opB`. This can be `String` value if a relation\n     * was set earlier or `null` if there was no relation between those operations.\n     *\n     * This is a little tricky to understand, so let's compare it to `ContextFactory#_wasUndone`.\n     *\n     * When `wasUndone( opB )` is used, we check if the `opB` has already been undone. It is obvious, that the\n     * undoing operation must happen after the undone operation. So, essentially, we have `opB`, we take document history,\n     * we look forward in the future and ask if in that future `opB` was undone.\n     *\n     * Relations is a backward process to `wasUndone()`.\n     *\n     * Long story short - using relations is asking what happened in the past. Looking back. This time we have an undoing\n     * operation `opB` which has undone some other operation. When there is a transformation `opA` x `opB` and there is\n     * a conflict to solve and `opB` is an undoing operation, we can look back in the history and see what was a relation\n     * between `opA` and the operation which `opB` undone. Basing on that relation from the past, we can now make\n     * a better decision when resolving a conflict between two operations, because we know more about the context of\n     * those two operations.\n     *\n     * This is why this function does not return a relation directly between `opA` and `opB` because we need to look\n     * back to search for a meaningful contextual information.\n     */\n    _getRelation(opA, opB) {\n        // Get the original operation. Similarly as in `wasUndone()` it is used as an universal identifier for stored data.\n        const origB = this.originalOperations.get(opB);\n        const undoneB = this._history.getUndoneOperation(origB);\n        // If `opB` is not undoing any operation, there is no relation.\n        if (!undoneB) {\n            return null;\n        }\n        const origA = this.originalOperations.get(opA);\n        const relationsA = this._relations.get(origA);\n        // Get all relations for `opA`, and check if there is a relation with `opB`-undone-counterpart. If so, return it.\n        if (relationsA) {\n            return relationsA.get(undoneB) || null;\n        }\n        return null;\n    }\n    /**\n     * Helper function for `ContextFactory#updateRelations`.\n     */\n    _setRelation(opA, opB, relation) {\n        // As always, setting is for original operations, not the clones/transformed operations.\n        const origA = this.originalOperations.get(opA);\n        const origB = this.originalOperations.get(opB);\n        let relationsA = this._relations.get(origA);\n        if (!relationsA) {\n            relationsA = new Map();\n            this._relations.set(origA, relationsA);\n        }\n        relationsA.set(origB, relation);\n    }\n}\n/**\n * An utility function that updates {@link module:engine/model/operation/operation~Operation#baseVersion base versions}\n * of passed operations.\n *\n * The function simply sets `baseVersion` as a base version of the first passed operation and then increments it for\n * each following operation in `operations`.\n *\n * @param operations Operations to update.\n * @param baseVersion Base version to set for the first operation in `operations`.\n */\nfunction updateBaseVersions(operations, baseVersion) {\n    for (const operation of operations) {\n        operation.baseVersion = baseVersion++;\n    }\n}\n/**\n * Adds `howMany` instances of {@link module:engine/model/operation/nooperation~NoOperation} to `operations` set.\n */\nfunction padWithNoOps(operations, howMany) {\n    for (let i = 0; i < howMany; i++) {\n        operations.push(new NoOperation(0));\n    }\n}\n/**\n * Transformed operations set may include marker operations which were broken into multiple marker operations during transformation.\n * It represents marker range being broken into multiple pieces as the transformation was processed. Each partial marker operation is\n * a piece of the original marker range.\n *\n * These partial marker operations (\"marker range pieces\") should be \"glued\" together if, after transformations, the ranges ended up\n * next to each other.\n *\n * If the ranges did not end up next to each other, then partial marker operations should be discarded, as the marker range cannot\n * be broken into two pieces.\n *\n * There is always one \"reference\" marker operation (the original operation) and there may be some partial marker operations. Partial\n * marker operations have base version set to `-1`. If the `operations` set includes partial marker operations, then they are always\n * after the original marker operation.\n *\n * See also `MarkerOperation` x `MoveOperation` transformation.\n * See also https://github.com/ckeditor/ckeditor5/pull/17071.\n */\nfunction handlePartialMarkerOperations(operations) {\n    const markerOps = new Map();\n    for (let i = 0; i < operations.length; i++) {\n        const op = operations[i];\n        if (!(op instanceof MarkerOperation)) {\n            continue;\n        }\n        if (op.baseVersion !== -1) {\n            markerOps.set(op.name, {\n                op,\n                ranges: op.newRange ? [op.newRange] : []\n            });\n        }\n        else {\n            if (op.newRange) {\n                // `markerOps.get( op.name )` must exist because original marker operation is always before partial marker operations.\n                // If the original marker operation was changed to `NoOperation`, then the partial marker operations would be changed\n                // to `NoOperation` as well, so this is not a case.\n                markerOps.get(op.name).ranges.push(op.newRange);\n            }\n            operations.splice(i, 1);\n            i--;\n        }\n    }\n    for (const { op, ranges } of markerOps.values()) {\n        if (ranges.length) {\n            op.newRange = Range._createFromRanges(ranges);\n        }\n        else {\n            op.newRange = null;\n        }\n    }\n}\n// -----------------------\nsetTransformation(AttributeOperation, AttributeOperation, (a, b, context) => {\n    // If operations in conflict, check if their ranges intersect and manage them properly.\n    //\n    // Operations can be in conflict only if:\n    //\n    // * their key is the same (they change the same attribute), and\n    // * they are in the same parent (operations for ranges [ 1 ] - [ 3 ] and [ 2, 0 ] - [ 2, 5 ] change different\n    // elements and can't be in conflict).\n    if (a.key === b.key && a.range.start.hasSameParentAs(b.range.start)) {\n        // First, we want to apply change to the part of a range that has not been changed by the other operation.\n        const operations = a.range.getDifference(b.range).map(range => {\n            return new AttributeOperation(range, a.key, a.oldValue, a.newValue, 0);\n        });\n        // Then we take care of the common part of ranges.\n        const common = a.range.getIntersection(b.range);\n        if (common) {\n            // If this operation is more important, we also want to apply change to the part of the\n            // original range that has already been changed by the other operation. Since that range\n            // got changed we also have to update `oldValue`.\n            if (context.aIsStrong) {\n                operations.push(new AttributeOperation(common, b.key, b.newValue, a.newValue, 0));\n            }\n        }\n        if (operations.length == 0) {\n            return [new NoOperation(0)];\n        }\n        return operations;\n    }\n    else {\n        // If operations don't conflict, simply return an array containing just a clone of this operation.\n        return [a];\n    }\n});\nsetTransformation(AttributeOperation, InsertOperation, (a, b) => {\n    // Case 1:\n    //\n    // The attribute operation range includes the position where nodes were inserted.\n    // There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n    // the inserted nodes were elements and they should not receive attributes.\n    //\n    if (a.range.start.hasSameParentAs(b.position) && a.range.containsPosition(b.position)) {\n        // If new nodes should not receive attributes, two separated ranges will be returned.\n        // Otherwise, one expanded range will be returned.\n        const range = a.range._getTransformedByInsertion(b.position, b.howMany, !b.shouldReceiveAttributes);\n        const result = range.map(r => {\n            return new AttributeOperation(r, a.key, a.oldValue, a.newValue, a.baseVersion);\n        });\n        if (b.shouldReceiveAttributes) {\n            // `AttributeOperation#range` includes some newly inserted text.\n            // The operation should also change the attribute of that text. An example:\n            //\n            // Bold should be applied on the following range:\n            // <p>Fo[zb]ar</p>\n            //\n            // In meantime, new text is typed:\n            // <p>Fozxxbar</p>\n            //\n            // Bold should be applied also on the new text:\n            // <p>Fo[zxxb]ar</p>\n            // <p>Fo<$text bold=\"true\">zxxb</$text>ar</p>\n            //\n            // There is a special case to consider here to consider.\n            //\n            // Consider setting an attribute with multiple possible values, for example `highlight`. The inserted text might\n            // have already an attribute value applied and the `oldValue` property of the attribute operation might be wrong:\n            //\n            // Attribute `highlight=\"yellow\"` should be applied on the following range:\n            // <p>Fo[zb]ar<p>\n            //\n            // In meantime, character `x` with `highlight=\"red\"` is typed:\n            // <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>\n            //\n            // In this case we cannot simply apply operation changing the attribute value from `null` to `\"yellow\"` for the whole range\n            // because that would lead to an exception (`oldValue` is incorrect for `x`).\n            //\n            // We also cannot break the original range as this would mess up a scenario when there are multiple following\n            // insert operations, because then only the first inserted character is included in those ranges:\n            // <p>Fo[z][x][b]ar</p>   -->   <p>Fo[z][x]x[b]ar</p>   -->   <p>Fo[z][x]xx[b]ar</p>\n            //\n            // So, the attribute range needs be expanded, no matter what attributes are set on the inserted nodes:\n            //\n            // <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>      <--- Change from `null` to `yellow`, throwing an exception.\n            //\n            // But before that operation would be applied, we will add an additional attribute operation that will change\n            // attributes on the inserted nodes in a way which would make the original operation correct:\n            //\n            // <p>Fo[z{<$text highlight=\"red\">}x</$text>b]ar</p>    <--- Change range `{}` from `red` to `null`.\n            // <p>Fo[zxb]ar</p>                                     <--- Now change from `null` to `yellow` is completely fine.\n            //\n            // Generate complementary attribute operation. Be sure to add it before the original operation.\n            const op = _getComplementaryAttributeOperations(b, a.key, a.oldValue);\n            if (op) {\n                result.unshift(op);\n            }\n        }\n        // If nodes should not receive new attribute, we are done here.\n        return result;\n    }\n    // If insert operation is not expanding the attribute operation range, simply transform the range.\n    a.range = a.range._getTransformedByInsertion(b.position, b.howMany, false)[0];\n    return [a];\n});\n/**\n * Helper function for `AttributeOperation` x `InsertOperation` (and reverse) transformation.\n *\n * For given `insertOperation` it checks the inserted node if it has an attribute `key` set to a value different\n * than `newValue`. If so, it generates an `AttributeOperation` which changes the value of `key` attribute to `newValue`.\n */\nfunction _getComplementaryAttributeOperations(insertOperation, key, newValue) {\n    const nodes = insertOperation.nodes;\n    // At the beginning we store the attribute value from the first node.\n    const insertValue = nodes.getNode(0).getAttribute(key);\n    if (insertValue == newValue) {\n        return null;\n    }\n    const range = new Range(insertOperation.position, insertOperation.position.getShiftedBy(insertOperation.howMany));\n    return new AttributeOperation(range, key, insertValue, newValue, 0);\n}\nsetTransformation(AttributeOperation, MergeOperation, (a, b) => {\n    const ranges = [];\n    // Case 1:\n    //\n    // Attribute change on the merged element. In this case, the merged element was moved to the graveyard.\n    // An additional attribute operation that will change the (re)moved element needs to be generated.\n    //\n    if (a.range.start.hasSameParentAs(b.deletionPosition)) {\n        if (a.range.containsPosition(b.deletionPosition) || a.range.start.isEqual(b.deletionPosition)) {\n            ranges.push(Range._createFromPositionAndShift(b.graveyardPosition, 1));\n        }\n    }\n    const range = a.range._getTransformedByMergeOperation(b);\n    // Do not add empty (collapsed) ranges to the result. `range` may be collapsed if it contained only the merged element.\n    if (!range.isCollapsed) {\n        ranges.push(range);\n    }\n    // Create `AttributeOperation`s out of the ranges.\n    return ranges.map(range => {\n        return new AttributeOperation(range, a.key, a.oldValue, a.newValue, a.baseVersion);\n    });\n});\nsetTransformation(AttributeOperation, MoveOperation, (a, b) => {\n    const ranges = _breakRangeByMoveOperation(a.range, b);\n    // Create `AttributeOperation`s out of the ranges.\n    return ranges.map(range => new AttributeOperation(range, a.key, a.oldValue, a.newValue, a.baseVersion));\n});\n/**\n * Helper function for `AttributeOperation` x `MoveOperation` transformation.\n *\n * Takes the passed `range` and transforms it by move operation `moveOp` in a specific way. Only top-level nodes of `range`\n * are considered to be in the range. If move operation moves nodes deep from inside of the range, those nodes won't\n * be included in the result. In other words, top-level nodes of the ranges from the result are exactly the same as\n * top-level nodes of the original `range`.\n *\n * This is important for `AttributeOperation` because, for its range, it changes only the top-level nodes. So we need to\n * track only how those nodes have been affected by `MoveOperation`.\n */\nfunction _breakRangeByMoveOperation(range, moveOp) {\n    const moveRange = Range._createFromPositionAndShift(moveOp.sourcePosition, moveOp.howMany);\n    // We are transforming `range` (original range) by `moveRange` (range moved by move operation). As usual when it comes to\n    // transforming a ranges, we may have a common part of the ranges and we may have a difference part (zero to two ranges).\n    let common = null;\n    let difference = [];\n    // Let's compare the ranges.\n    if (moveRange.containsRange(range, true)) {\n        // If the whole original range is moved, treat it whole as a common part. There's also no difference part.\n        common = range;\n    }\n    else if (range.start.hasSameParentAs(moveRange.start)) {\n        // If the ranges are \"on the same level\" (in the same parent) then move operation may move exactly those nodes\n        // that are changed by the attribute operation. In this case we get common part and difference part in the usual way.\n        difference = range.getDifference(moveRange);\n        common = range.getIntersection(moveRange);\n    }\n    else {\n        // In any other situation we assume that original range is different than move range, that is that move operation\n        // moves other nodes that attribute operation change. Even if the moved range is deep inside in the original range.\n        //\n        // Note that this is different than in `.getIntersection` (we would get a common part in that case) and different\n        // than `.getDifference` (we would get two ranges).\n        difference = [range];\n    }\n    const result = [];\n    // The default behaviour of `_getTransformedByMove` might get wrong results for difference part, though, so\n    // we do it by hand.\n    for (let diff of difference) {\n        // First, transform the range by removing moved nodes. Since this is a difference, this is safe, `null` won't be returned\n        // as the range is different than the moved range.\n        diff = diff._getTransformedByDeletion(moveOp.sourcePosition, moveOp.howMany);\n        // Transform also `targetPosition`.\n        const targetPosition = moveOp.getMovedRangeStart();\n        // Spread the range only if moved nodes are inserted only between the top-level nodes of the `diff` range.\n        const spread = diff.start.hasSameParentAs(targetPosition);\n        // Transform by insertion of moved nodes.\n        const diffs = diff._getTransformedByInsertion(targetPosition, moveOp.howMany, spread);\n        result.push(...diffs);\n    }\n    // Common part can be simply transformed by the move operation. This is because move operation will not target to\n    // that common part (the operation would have to target inside its own moved range).\n    if (common) {\n        result.push(common._getTransformedByMove(moveOp.sourcePosition, moveOp.targetPosition, moveOp.howMany, false)[0]);\n    }\n    return result;\n}\nsetTransformation(AttributeOperation, SplitOperation, (a, b) => {\n    // Case 1:\n    //\n    // Split node is the last node in `AttributeOperation#range`.\n    // `AttributeOperation#range` needs to be expanded to include the new (split) node.\n    //\n    // Attribute `type` to be changed to `numbered` but the `listItem` is split.\n    // <listItem type=\"bulleted\">foobar</listItem>\n    //\n    // After split:\n    // <listItem type=\"bulleted\">foo</listItem><listItem type=\"bulleted\">bar</listItem>\n    //\n    // After attribute change:\n    // <listItem type=\"numbered\">foo</listItem><listItem type=\"numbered\">foo</listItem>\n    //\n    if (a.range.end.isEqual(b.insertionPosition)) {\n        if (!b.graveyardPosition) {\n            a.range.end.offset++;\n        }\n        return [a];\n    }\n    // Case 2:\n    //\n    // Split position is inside `AttributeOperation#range`, at the same level, so the nodes to change are\n    // not going to make a flat range.\n    //\n    // Content with range-to-change and split position:\n    // <p>Fo[zb^a]r</p>\n    //\n    // After split:\n    // <p>Fozb</p><p>ar</p>\n    //\n    // Make two separate ranges containing all nodes to change:\n    // <p>Fo[zb]</p><p>[a]r</p>\n    //\n    if (a.range.start.hasSameParentAs(b.splitPosition) && a.range.containsPosition(b.splitPosition)) {\n        const secondPart = a.clone();\n        secondPart.range = new Range(b.moveTargetPosition.clone(), a.range.end._getCombined(b.splitPosition, b.moveTargetPosition));\n        a.range.end = b.splitPosition.clone();\n        a.range.end.stickiness = 'toPrevious';\n        return [a, secondPart];\n    }\n    // The default case.\n    //\n    a.range = a.range._getTransformedBySplitOperation(b);\n    return [a];\n});\nsetTransformation(InsertOperation, AttributeOperation, (a, b) => {\n    const result = [a];\n    // Case 1:\n    //\n    // The attribute operation range includes the position where nodes were inserted.\n    // There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n    // the inserted nodes were elements and they should not receive attributes.\n    //\n    // This is a mirror scenario to the one described in `AttributeOperation` x `InsertOperation` transformation,\n    // although this case is a little less complicated. In this case we simply need to change attributes of the\n    // inserted nodes and that's it.\n    //\n    if (a.shouldReceiveAttributes && a.position.hasSameParentAs(b.range.start) && b.range.containsPosition(a.position)) {\n        const op = _getComplementaryAttributeOperations(a, b.key, b.newValue);\n        if (op) {\n            result.push(op);\n        }\n    }\n    // The default case is: do nothing.\n    // `AttributeOperation` does not change the model tree structure so `InsertOperation` does not need to be changed.\n    //\n    return result;\n});\nsetTransformation(InsertOperation, InsertOperation, (a, b, context) => {\n    // Case 1:\n    //\n    // Two insert operations insert nodes at the same position. Since they are the same, it needs to be decided\n    // what will be the order of inserted nodes. However, there is no additional information to help in that\n    // decision. Also, when `b` will be transformed by `a`, the same order must be maintained.\n    //\n    // To achieve that, we will check if the operation is strong.\n    // If it is, it won't get transformed. If it is not, it will be moved.\n    //\n    if (a.position.isEqual(b.position) && context.aIsStrong) {\n        return [a];\n    }\n    // The default case.\n    //\n    a.position = a.position._getTransformedByInsertOperation(b);\n    return [a];\n});\nsetTransformation(InsertOperation, MoveOperation, (a, b) => {\n    // The default case.\n    //\n    a.position = a.position._getTransformedByMoveOperation(b);\n    return [a];\n});\nsetTransformation(InsertOperation, SplitOperation, (a, b) => {\n    // The default case.\n    //\n    a.position = a.position._getTransformedBySplitOperation(b);\n    return [a];\n});\nsetTransformation(InsertOperation, MergeOperation, (a, b) => {\n    a.position = a.position._getTransformedByMergeOperation(b);\n    return [a];\n});\n// -----------------------\nsetTransformation(MarkerOperation, InsertOperation, (a, b) => {\n    if (a.oldRange) {\n        a.oldRange = a.oldRange._getTransformedByInsertOperation(b)[0];\n    }\n    if (a.newRange) {\n        a.newRange = a.newRange._getTransformedByInsertOperation(b)[0];\n    }\n    return [a];\n});\nsetTransformation(MarkerOperation, MarkerOperation, (a, b, context) => {\n    if (a.name == b.name) {\n        if (context.aIsStrong) {\n            a.oldRange = b.newRange ? b.newRange.clone() : null;\n        }\n        else {\n            return [new NoOperation(0)];\n        }\n    }\n    return [a];\n});\nsetTransformation(MarkerOperation, MergeOperation, (a, b) => {\n    if (a.oldRange) {\n        a.oldRange = a.oldRange._getTransformedByMergeOperation(b);\n    }\n    if (a.newRange) {\n        a.newRange = a.newRange._getTransformedByMergeOperation(b);\n    }\n    return [a];\n});\nsetTransformation(MarkerOperation, MoveOperation, (a, b) => {\n    const result = [a];\n    if (a.oldRange) {\n        a.oldRange = Range._createFromRanges(a.oldRange._getTransformedByMoveOperation(b));\n    }\n    if (a.newRange) {\n        // In many simple cases the marker range will be kept integral after the transformation. For example, if some nodes\n        // were inserted before the range, or into the range, then the marker range is not broken into two.\n        //\n        // However, if some nodes are taken out of the range and moved somewhere else, or are moved into the range, then the marker\n        // range is \"broken\" into two or three pieces, and these pieces must be transformed and updated separately.\n        //\n        // When the marker range is transformed by move operation, as a result we get an array with one (simple case) or multiple\n        // (\"broken range\" case) ranges.\n        const ranges = a.newRange._getTransformedByMoveOperation(b);\n        a.newRange = ranges[0];\n        // If there are multiple ranges, we will create separate marker operations for each piece of the original marker range.\n        // Since they will be marker operations, they will be processed through the transformation process.\n        //\n        // However, we cannot create multiple ranges for the same marker (for the same marker name). A marker has only one range.\n        // So, we cannot really have multiple marker operations for the same marker. We will keep the track of the separate marker\n        // operations to see, if after all transformations, the marker pieces are next to each other or not. If so, we will glue\n        // them together to the original marker operation (`a`). If not, we will discard them. These extra operations will never\n        // be executed, as they will only exist temporarily during the transformation process.\n        //\n        // We will call these additional marker operations \"partial marker operations\" and we will mark them with negative base version.\n        //\n        // See also `handlePartialMarkerOperations()`.\n        // See also https://github.com/ckeditor/ckeditor5/pull/17071.\n        //\n        for (let i = 1; i < ranges.length; i++) {\n            const op = a.clone();\n            op.oldRange = null;\n            op.newRange = ranges[i];\n            op.baseVersion = -1;\n            result.push(op);\n        }\n    }\n    return result;\n});\nsetTransformation(MarkerOperation, SplitOperation, (a, b, context) => {\n    if (a.oldRange) {\n        a.oldRange = a.oldRange._getTransformedBySplitOperation(b);\n    }\n    if (a.newRange) {\n        if (context.abRelation) {\n            const aNewRange = a.newRange._getTransformedBySplitOperation(b);\n            if (a.newRange.start.isEqual(b.splitPosition) && context.abRelation.wasStartBeforeMergedElement) {\n                a.newRange.start = Position._createAt(b.insertionPosition);\n            }\n            else if (a.newRange.start.isEqual(b.splitPosition) && !context.abRelation.wasInLeftElement) {\n                a.newRange.start = Position._createAt(b.moveTargetPosition);\n            }\n            else {\n                a.newRange.start = aNewRange.start;\n            }\n            if (a.newRange.end.isEqual(b.splitPosition) && context.abRelation.wasInRightElement) {\n                a.newRange.end = Position._createAt(b.moveTargetPosition);\n            }\n            else if (a.newRange.end.isEqual(b.splitPosition) && context.abRelation.wasEndBeforeMergedElement) {\n                a.newRange.end = Position._createAt(b.insertionPosition);\n            }\n            else {\n                a.newRange.end = aNewRange.end;\n            }\n            return [a];\n        }\n        a.newRange = a.newRange._getTransformedBySplitOperation(b);\n    }\n    return [a];\n});\n// -----------------------\nsetTransformation(MergeOperation, InsertOperation, (a, b) => {\n    if (a.sourcePosition.hasSameParentAs(b.position)) {\n        a.howMany += b.howMany;\n    }\n    a.sourcePosition = a.sourcePosition._getTransformedByInsertOperation(b);\n    a.targetPosition = a.targetPosition._getTransformedByInsertOperation(b);\n    return [a];\n});\nsetTransformation(MergeOperation, MergeOperation, (a, b, context) => {\n    // Case 1:\n    //\n    // Same merge operations.\n    //\n    // Both operations have same source and target positions. So the element already got merged and there is\n    // theoretically nothing to do.\n    //\n    if (a.sourcePosition.isEqual(b.sourcePosition) && a.targetPosition.isEqual(b.targetPosition)) {\n        // There are two ways that we can provide a do-nothing operation.\n        //\n        // First is simply a NoOperation instance. We will use it if `b` operation was not undone.\n        //\n        // Second is a merge operation that has the source operation in the merged element - in the graveyard -\n        // same target position and `howMany` equal to `0`. So it is basically merging an empty element from graveyard\n        // which is almost the same as NoOperation.\n        //\n        // This way the merge operation can be later transformed by split operation\n        // to provide correct undo. This will be used if `b` operation was undone (only then it is correct).\n        //\n        if (!context.bWasUndone) {\n            return [new NoOperation(0)];\n        }\n        else {\n            const path = b.graveyardPosition.path.slice();\n            path.push(0);\n            a.sourcePosition = new Position(b.graveyardPosition.root, path);\n            a.howMany = 0;\n            return [a];\n        }\n    }\n    // Case 2:\n    //\n    // Same merge source position but different target position.\n    //\n    // This can happen during collaboration. For example, if one client merged a paragraph to the previous paragraph\n    // and the other person removed that paragraph and merged the same paragraph to something before:\n    //\n    // Client A:\n    // <p>Foo</p><p>Bar</p><p>[]Xyz</p>\n    // <p>Foo</p><p>BarXyz</p>\n    //\n    // Client B:\n    // <p>Foo</p>[<p>Bar</p>]<p>Xyz</p>\n    // <p>Foo</p><p>[]Xyz</p>\n    // <p>FooXyz</p>\n    //\n    // In this case we need to decide where finally \"Xyz\" will land:\n    //\n    // <p>FooXyz</p>               graveyard: <p>Bar</p>\n    // <p>Foo</p>                  graveyard: <p>BarXyz</p>\n    //\n    // Let's move it in a way so that a merge operation that does not target to graveyard is more important so that\n    // nodes does not end up in the graveyard. It makes sense. Both for Client A and for Client B \"Xyz\" finally did not\n    // end up in the graveyard (see above).\n    //\n    // If neither or both operations point to graveyard, then let `aIsStrong` decide.\n    //\n    if (a.sourcePosition.isEqual(b.sourcePosition) && !a.targetPosition.isEqual(b.targetPosition) &&\n        !context.bWasUndone && context.abRelation != 'splitAtSource') {\n        const aToGraveyard = a.targetPosition.root.rootName == '$graveyard';\n        const bToGraveyard = b.targetPosition.root.rootName == '$graveyard';\n        // If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n        const aIsWeak = aToGraveyard && !bToGraveyard;\n        // If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n        const bIsWeak = bToGraveyard && !aToGraveyard;\n        // Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n        const forceMove = bIsWeak || (!aIsWeak && context.aIsStrong);\n        if (forceMove) {\n            const sourcePosition = b.targetPosition._getTransformedByMergeOperation(b);\n            const targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n            return [new MoveOperation(sourcePosition, a.howMany, targetPosition, 0)];\n        }\n        else {\n            return [new NoOperation(0)];\n        }\n    }\n    // The default case.\n    // TODO: Possibly, there's a missing case for same `targetPosition` but different `sourcePosition`.\n    //\n    if (a.sourcePosition.hasSameParentAs(b.targetPosition)) {\n        a.howMany += b.howMany;\n    }\n    a.sourcePosition = a.sourcePosition._getTransformedByMergeOperation(b);\n    a.targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n    // Handle positions in graveyard.\n    // If graveyard positions are same and `a` operation is strong - do not transform.\n    if (!a.graveyardPosition.isEqual(b.graveyardPosition) || !context.aIsStrong) {\n        a.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation(b);\n    }\n    return [a];\n});\nsetTransformation(MergeOperation, MoveOperation, (a, b, context) => {\n    // Case 1:\n    //\n    // The element to merge got removed.\n    //\n    // Merge operation does support merging elements which are not siblings. So it would not be a problem\n    // from technical point of view. However, if the element was removed, the intention of the user deleting it\n    // was to have it all deleted, together with its children. From user experience point of view, moving back the\n    // removed nodes might be unexpected. This means that in this scenario we will block the merging.\n    //\n    // The exception to this rule would be if the remove operation was later undone.\n    //\n    const removedRange = Range._createFromPositionAndShift(b.sourcePosition, b.howMany);\n    if (b.type == 'remove' && !context.bWasUndone) {\n        if (a.deletionPosition.hasSameParentAs(b.sourcePosition) && removedRange.containsPosition(a.sourcePosition)) {\n            return [new NoOperation(0)];\n        }\n    }\n    // In most cases we want `sourcePosition` to stick to previous and `targetPosition` to stick to next.\n    // Usually, `sourcePosition` is at the beginning of the merged element and `targetPosition` is at the end of the merge-target element.\n    //\n    // However, `sourcePosition` and `targetPosition` may end up in the middle of an element due to some OT magic that happens during undo.\n    // It is expected and used in `MergeOperation` x `SplitOperation` transformation.\n    //\n    // But when these positions are in the middle, it messes up the regular `MergeOperation` x `MoveOperation` transformation because\n    // these positions may \"follow\" some moved elements. And we want them stick in the original elements.\n    //\n    // This is why we add two extra cases: (1) and (2).\n    //\n    // But after this `MergeOperation` is transformed by \"this\" move (which is undone), we also need to define extra cases for\n    // the operation undoing previous move. These are (3) and (4).\n    //\n    // (1). Note that this case is also added to `updateRelations()` and sets `mergeSourceAffected` relation.\n    //\n    // [] is move operation, } is merge source position (sticks to previous by default):\n    // <p>A[b]}c</p>  ->  <p>A}c</p>\n    //\n    if (b.sourcePosition.getShiftedBy(b.howMany).isEqual(a.sourcePosition)) {\n        a.sourcePosition.stickiness = 'toNone';\n    }\n    // (3). This is the transformation for undoing operation of the above case.\n    //\n    // [] is move operation, } is merge source position (sticks to previous by default):\n    // <p>A}c</p>  ->  <p>A[b]}c</p>  (instead of <p>A}[b]c</p>)\n    //\n    else if (b.targetPosition.isEqual(a.sourcePosition) && context.abRelation == 'mergeSourceAffected') {\n        a.sourcePosition.stickiness = 'toNext';\n    }\n    // (2). Note that this case is also added to `updateRelations()` and sets `mergeTargetWasBefore` relation.\n    //\n    // [] is move operation, { is merge target position (sticks to next by default):\n    // <p>A{[b]c</p>  ->  <p>A{c</p>\n    //\n    else if (b.sourcePosition.isEqual(a.targetPosition)) {\n        a.targetPosition.stickiness = 'toNone';\n        a.howMany -= b.howMany;\n    }\n    // (4). This is the transformation for undoing operation of the above case.\n    //\n    // [] is move operation, { is merge target position (sticks to next by default):\n    // <p>A{c</p>  ->  <p>A{[b]c</p>  (instead of <p>A[b]{c</p>)\n    //\n    else if (b.targetPosition.isEqual(a.targetPosition) && context.abRelation == 'mergeTargetWasBefore') {\n        a.targetPosition.stickiness = 'toPrevious';\n        a.howMany += b.howMany;\n    }\n    // The default case.\n    else {\n        if (a.sourcePosition.hasSameParentAs(b.targetPosition)) {\n            a.howMany += b.howMany;\n        }\n        if (a.sourcePosition.hasSameParentAs(b.sourcePosition)) {\n            a.howMany -= b.howMany;\n        }\n    }\n    a.sourcePosition = a.sourcePosition._getTransformedByMoveOperation(b);\n    a.targetPosition = a.targetPosition._getTransformedByMoveOperation(b);\n    // After transformations are done, make sure to revert stickiness in case if (1) - (4) scenario happened.\n    a.sourcePosition.stickiness = 'toPrevious';\n    a.targetPosition.stickiness = 'toNext';\n    // `MergeOperation` graveyard position is like `MoveOperation` target position. It is a position where element(s) will\n    // be moved. Like in other similar cases, we need to consider the scenario when those positions are same.\n    // Here, we will treat `MergeOperation` like it is always strong (see `InsertOperation` x `InsertOperation` for comparison).\n    // This means that we won't transform graveyard position if it is equal to move operation target position.\n    if (!a.graveyardPosition.isEqual(b.targetPosition)) {\n        a.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation(b);\n    }\n    return [a];\n});\nsetTransformation(MergeOperation, SplitOperation, (a, b, context) => {\n    if (b.graveyardPosition) {\n        // If `b` operation defines graveyard position, a node from graveyard will be moved. This means that we need to\n        // transform `a.graveyardPosition` accordingly.\n        a.graveyardPosition = a.graveyardPosition._getTransformedByDeletion(b.graveyardPosition, 1);\n        // This is a scenario foreseen in `MergeOperation` x `MergeOperation`, with two identical merge operations.\n        //\n        // So, there was `MergeOperation` x `MergeOperation` transformation earlier. Now, `a` is a merge operation which\n        // source position is in graveyard. Interestingly, split operation wants to use the node to be merged by `a`. This\n        // means that `b` is undoing that merge operation from earlier, which caused `a` to be in graveyard.\n        //\n        // If that's the case, at this point, we will only \"fix\" `a.howMany`. It was earlier set to `0` in\n        // `MergeOperation` x `MergeOperation` transformation. Later transformations in this function will change other\n        // properties.\n        //\n        if (a.deletionPosition.isEqual(b.graveyardPosition)) {\n            a.howMany = b.howMany;\n        }\n    }\n    // Case 1:\n    //\n    // Merge operation moves nodes to the place where split happens.\n    //\n    // This is a classic situation when there are two paragraphs, and there is a split (enter) at the end of the first\n    // paragraph and there is a merge (delete) at the beginning of the second paragraph:\n    //\n    // <p>Foo{}</p><p>[]Bar</p>.\n    //\n    // User A presses enter after `Foo`, while User B presses backspace before `Bar`. It is intuitive that after both operations, the\n    // editor state should stay the same.\n    //\n    // State after split:\n    // <p>Foo</p><p></p><p>[]Bar</p>\n    //\n    // When this happens, `Bar` should be merged to the newly created paragraph, to maintain the editor state:\n    // <p>Foo</p><p>Bar</p>\n    //\n    // Another option is to merge into the original paragraph `Foo`, according to the `targetPosition`. This results in an incorrect state:\n    // <p>FooBar</p><p></p>\n    //\n    // Also, consider an example where User A also writes something in the new paragraph:\n    // <p>Foo</p><p>Xyz</p><p>[]Bar</p>\n    //\n    // In this case it is clear that merge should happen into `[ 1, 3 ]` not into `[ 0, 3 ]`. It first has to be transformed to `[ 1, 0 ]`,\n    // and then transformed be insertion into `[ 1, 3 ]`.\n    //\n    // So, usually we want to move `targetPosition` to the new paragraph when it is same as split position. This is how it is handled\n    // in the default transformation (`_getTransformedBySplitOperation()`). We don't need a special case for this.\n    //\n    // However, there are two exceptions, when we **do not** want to transform `targetPosition`, and we need a special case then.\n    //\n    // These exceptions happen only if undo is involved. During OT, above presented case (`<p>Foo{}</p><p>[]Bar</p>`) is the only way\n    // how `SplitOperation#splitPosition` and `MergeOperation#targetPosition` can be the same.\n    //\n    // First exception is when the element to merge is in the graveyard and split operation uses it. In that case\n    // if target position would be transformed, the merge operation would target at the source position:\n    //\n    // root: <p>Foo[]</p>\t\t\t\tgraveyard: <p></p>\n    //\n    // SplitOperation: root [ 0, 3 ] using graveyard [ 0 ] (howMany = 0)\n    // MergeOperation: graveyard [ 0, 0 ] -> root [ 0, 3 ] (howMany = 0)\n    //\n    // Since split operation moves the graveyard element back to the root (to path `[ 1 ]`), the merge operation `sourcePosition` changes.\n    // After split we have: `<p>Foo</p><p></p>`, so `sourcePosition` is `[ 1, 0 ]`. But if `targetPosition` is transformed, then it\n    // also becomes `[ 1, 0 ]`. In this case, we want to keep the `targetPosition` as it was.\n    //\n    // Second exception is connected strictly with undo relations. If this `MergeOperation` was earlier transformed by\n    // `MergeOperation` and we stored an information that earlier the target position was not affected, then here, when transforming by\n    // `SplitOperation` we are not going to change it as well.\n    //\n    // For these two cases we will only transform `sourcePosition` and return early.\n    //\n    // Note, that earlier there was also third special case here. `targetPosition` was not transformed, if it pointed into the middle of\n    // target element, not into its end (as usual). This can also happen only with undo involved. However, it wasn't always a correct\n    // solution, as in some cases we actually wanted to transform `targetPosition`. Also, this case usually happens together with the second\n    // case described above. There is only one scenario that we have in our unit tests, where this third case happened without second case.\n    // However, this scenario went fine no matter if we transformed `targetPosition` or not. That's because this happened in the middle\n    // of transformation process and the operation was correctly transformed later on.\n    //\n    if (a.targetPosition.isEqual(b.splitPosition)) {\n        const mergeSplittingElement = b.graveyardPosition && a.deletionPosition.isEqual(b.graveyardPosition);\n        if (mergeSplittingElement || context.abRelation == 'mergeTargetNotMoved') {\n            a.sourcePosition = a.sourcePosition._getTransformedBySplitOperation(b);\n            return [a];\n        }\n    }\n    // Case 2:\n    //\n    // Merge source is at the same position as split position. This sometimes happen, mostly during undo.\n    // The decision here is mostly to choose whether merge source position should stay where it is (so it will be at the end of the\n    // split element) or should be move to the beginning of the new element.\n    //\n    if (a.sourcePosition.isEqual(b.splitPosition)) {\n        // Use context to check if `SplitOperation` is not undoing a merge operation, that didn't change the `a` operation.\n        // This scenario happens the undone merge operation moved nodes at the source position of `a` operation.\n        // In that case `a` operation source position should stay where it is.\n        if (context.abRelation == 'mergeSourceNotMoved') {\n            a.howMany = 0;\n            a.targetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n            return [a];\n        }\n        // This merge operation might have been earlier transformed by a merge operation which both merged the same element.\n        // See that case in `MergeOperation` x `MergeOperation` transformation. In that scenario, if the merge operation has been undone,\n        // the special case is not applied.\n        //\n        // Now, the merge operation is transformed by the split which has undone that previous merge operation.\n        // So now we are fixing situation which was skipped in `MergeOperation` x `MergeOperation` case.\n        //\n        if (context.abRelation == 'mergeSameElement' || a.sourcePosition.offset > 0) {\n            a.sourcePosition = b.moveTargetPosition.clone();\n            a.targetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n            return [a];\n        }\n    }\n    // The default case.\n    //\n    if (a.sourcePosition.hasSameParentAs(b.splitPosition)) {\n        a.howMany = b.splitPosition.offset;\n    }\n    a.sourcePosition = a.sourcePosition._getTransformedBySplitOperation(b);\n    a.targetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n    return [a];\n});\n// -----------------------\nsetTransformation(MoveOperation, InsertOperation, (a, b) => {\n    const moveRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n    const transformed = moveRange._getTransformedByInsertOperation(b, false)[0];\n    a.sourcePosition = transformed.start;\n    a.howMany = transformed.end.offset - transformed.start.offset;\n    // See `InsertOperation` x `MoveOperation` transformation for details on this case.\n    //\n    // In summary, both operations point to the same place, so the order of nodes needs to be decided.\n    // `MoveOperation` is considered weaker, so it is always transformed, unless there was a certain relation\n    // between operations.\n    //\n    if (!a.targetPosition.isEqual(b.position)) {\n        a.targetPosition = a.targetPosition._getTransformedByInsertOperation(b);\n    }\n    return [a];\n});\nsetTransformation(MoveOperation, MoveOperation, (a, b, context) => {\n    //\n    // Setting and evaluating some variables that will be used in special cases and default algorithm.\n    //\n    // Create ranges from `MoveOperations` properties.\n    const rangeA = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n    const rangeB = Range._createFromPositionAndShift(b.sourcePosition, b.howMany);\n    // Assign `context.aIsStrong` to a different variable, because the value may change during execution of\n    // this algorithm and we do not want to override original `context.aIsStrong` that will be used in later transformations.\n    let aIsStrong = context.aIsStrong;\n    // This will be used to decide the order of nodes if both operations target at the same position.\n    // By default, use strong/weak operation mechanism.\n    let insertBefore = !context.aIsStrong;\n    // If the relation is set, then use it to decide nodes order.\n    if (context.abRelation == 'insertBefore' || context.baRelation == 'insertAfter') {\n        insertBefore = true;\n    }\n    else if (context.abRelation == 'insertAfter' || context.baRelation == 'insertBefore') {\n        insertBefore = false;\n    }\n    // `a.targetPosition` could be affected by the `b` operation. We will transform it.\n    let newTargetPosition;\n    if (a.targetPosition.isEqual(b.targetPosition) && insertBefore) {\n        newTargetPosition = a.targetPosition._getTransformedByDeletion(b.sourcePosition, b.howMany);\n    }\n    else {\n        newTargetPosition = a.targetPosition._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n    }\n    //\n    // Special case #1 + mirror.\n    //\n    // Special case when both move operations' target positions are inside nodes that are\n    // being moved by the other move operation. So in other words, we move ranges into inside of each other.\n    // This case can't be solved reasonably (on the other hand, it should not happen often).\n    if (_moveTargetIntoMovedRange(a, b) && _moveTargetIntoMovedRange(b, a)) {\n        // Instead of transforming operation, we return a reverse of the operation that we transform by.\n        // So when the results of this \"transformation\" will be applied, `b` MoveOperation will get reversed.\n        return [b.getReversed()];\n    }\n    //\n    // End of special case #1.\n    //\n    //\n    // Special case #2.\n    //\n    // Check if `b` operation targets inside `rangeA`.\n    const bTargetsToA = rangeA.containsPosition(b.targetPosition);\n    // If `b` targets to `rangeA` and `rangeA` contains `rangeB`, `b` operation has no influence on `a` operation.\n    // You might say that operation `b` is captured inside operation `a`.\n    if (bTargetsToA && rangeA.containsRange(rangeB, true)) {\n        // There is a mini-special case here, where `rangeB` is on other level than `rangeA`. That's why\n        // we need to transform `a` operation anyway.\n        rangeA.start = rangeA.start._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n        rangeA.end = rangeA.end._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n        return _makeMoveOperationsFromRanges([rangeA], newTargetPosition);\n    }\n    //\n    // Special case #2 mirror.\n    //\n    const aTargetsToB = rangeB.containsPosition(a.targetPosition);\n    if (aTargetsToB && rangeB.containsRange(rangeA, true)) {\n        // `a` operation is \"moved together\" with `b` operation.\n        // Here, just move `rangeA` \"inside\" `rangeB`.\n        rangeA.start = rangeA.start._getCombined(b.sourcePosition, b.getMovedRangeStart());\n        rangeA.end = rangeA.end._getCombined(b.sourcePosition, b.getMovedRangeStart());\n        return _makeMoveOperationsFromRanges([rangeA], newTargetPosition);\n    }\n    //\n    // End of special case #2.\n    //\n    //\n    // Special case #3 + mirror.\n    //\n    // `rangeA` has a node which is an ancestor of `rangeB`. In other words, `rangeB` is inside `rangeA`\n    // but not on the same tree level. In such case ranges have common part but we have to treat it\n    // differently, because in such case those ranges are not really conflicting and should be treated like\n    // two separate ranges. Also we have to discard two difference parts.\n    const aCompB = compareArrays(a.sourcePosition.getParentPath(), b.sourcePosition.getParentPath());\n    if (aCompB == 'prefix' || aCompB == 'extension') {\n        // Transform `rangeA` by `b` operation and make operation out of it, and that's all.\n        // Note that this is a simplified version of default case, but here we treat the common part (whole `rangeA`)\n        // like a one difference part.\n        rangeA.start = rangeA.start._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n        rangeA.end = rangeA.end._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n        return _makeMoveOperationsFromRanges([rangeA], newTargetPosition);\n    }\n    //\n    // End of special case #3.\n    //\n    //\n    // Default case - ranges are on the same level or are not connected with each other.\n    //\n    // Modifier for default case.\n    // Modifies `aIsStrong` flag in certain conditions.\n    //\n    // If only one of operations is a remove operation, we force remove operation to be the \"stronger\" one\n    // to provide more expected results.\n    if (a.type == 'remove' && b.type != 'remove' && !context.aWasUndone && !context.forceWeakRemove) {\n        aIsStrong = true;\n    }\n    else if (a.type != 'remove' && b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove) {\n        aIsStrong = false;\n    }\n    // Handle operation's source ranges - check how `rangeA` is affected by `b` operation.\n    // This will aggregate transformed ranges.\n    const ranges = [];\n    // Get the \"difference part\" of `a` operation source range.\n    // This is an array with one or two ranges. Two ranges if `rangeB` is inside `rangeA`.\n    const difference = rangeA.getDifference(rangeB);\n    for (const range of difference) {\n        // Transform those ranges by `b` operation. For example if `b` moved range from before those ranges, fix those ranges.\n        range.start = range.start._getTransformedByDeletion(b.sourcePosition, b.howMany);\n        range.end = range.end._getTransformedByDeletion(b.sourcePosition, b.howMany);\n        // If `b` operation targets into `rangeA` on the same level, spread `rangeA` into two ranges.\n        const shouldSpread = compareArrays(range.start.getParentPath(), b.getMovedRangeStart().getParentPath()) == 'same';\n        const newRanges = range._getTransformedByInsertion(b.getMovedRangeStart(), b.howMany, shouldSpread);\n        ranges.push(...newRanges);\n    }\n    // Then, we have to manage the \"common part\" of both move ranges.\n    const common = rangeA.getIntersection(rangeB);\n    if (common !== null && aIsStrong) {\n        // Calculate the new position of that part of original range.\n        common.start = common.start._getCombined(b.sourcePosition, b.getMovedRangeStart());\n        common.end = common.end._getCombined(b.sourcePosition, b.getMovedRangeStart());\n        // Take care of proper range order.\n        //\n        // Put `common` at appropriate place. Keep in mind that we are interested in original order.\n        // Basically there are only three cases: there is zero, one or two difference ranges.\n        //\n        // If there is zero difference ranges, just push `common` in the array.\n        if (ranges.length === 0) {\n            ranges.push(common);\n        }\n        // If there is one difference range, we need to check whether common part was before it or after it.\n        else if (ranges.length == 1) {\n            if (rangeB.start.isBefore(rangeA.start) || rangeB.start.isEqual(rangeA.start)) {\n                ranges.unshift(common);\n            }\n            else {\n                ranges.push(common);\n            }\n        }\n        // If there are more ranges (which means two), put common part between them. This is the only scenario\n        // where there could be two difference ranges so we don't have to make any comparisons.\n        else {\n            ranges.splice(1, 0, common);\n        }\n    }\n    if (ranges.length === 0) {\n        // If there are no \"source ranges\", nothing should be changed.\n        // Note that this can happen only if `aIsStrong == false` and `rangeA.isEqual( rangeB )`.\n        return [new NoOperation(a.baseVersion)];\n    }\n    return _makeMoveOperationsFromRanges(ranges, newTargetPosition);\n});\nsetTransformation(MoveOperation, SplitOperation, (a, b, context) => {\n    let newTargetPosition = a.targetPosition.clone();\n    // Do not transform if target position is same as split insertion position and this split comes from undo.\n    // This should be done on relations but it is too much work for now as it would require relations working in collaboration.\n    // We need to make a decision how we will resolve such conflict and this is less harmful way.\n    if (!a.targetPosition.isEqual(b.insertionPosition) || !b.graveyardPosition || context.abRelation == 'moveTargetAfter') {\n        newTargetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n    }\n    // Case 1:\n    //\n    // Last element in the moved range got split.\n    //\n    // In this case the default range transformation will not work correctly as the element created by\n    // split operation would be outside the range. The range to move needs to be fixed manually.\n    //\n    const moveRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n    if (moveRange.end.isEqual(b.insertionPosition)) {\n        // Do it only if this is a \"natural\" split, not a one that comes from undo.\n        // If this is undo split, only `targetPosition` needs to be changed (if the move is a remove).\n        if (!b.graveyardPosition) {\n            a.howMany++;\n        }\n        a.targetPosition = newTargetPosition;\n        return [a];\n    }\n    // Case 2:\n    //\n    // Split happened between the moved nodes. In this case two ranges to move need to be generated.\n    //\n    // Characters `ozba` are moved to the end of paragraph `Xyz` but split happened.\n    // <p>F[oz|ba]r</p><p>Xyz</p>\n    //\n    // After split:\n    // <p>F[oz</p><p>ba]r</p><p>Xyz</p>\n    //\n    // Correct ranges:\n    // <p>F[oz]</p><p>[ba]r</p><p>Xyz</p>\n    //\n    // After move:\n    // <p>F</p><p>r</p><p>Xyzozba</p>\n    //\n    if (moveRange.start.hasSameParentAs(b.splitPosition) && moveRange.containsPosition(b.splitPosition)) {\n        let rightRange = new Range(b.splitPosition, moveRange.end);\n        rightRange = rightRange._getTransformedBySplitOperation(b);\n        const ranges = [\n            new Range(moveRange.start, b.splitPosition),\n            rightRange\n        ];\n        return _makeMoveOperationsFromRanges(ranges, newTargetPosition);\n    }\n    // Case 3:\n    //\n    // Move operation targets at the split position. We need to decide if the nodes should be inserted\n    // at the end of the split element or at the beginning of the new element.\n    //\n    if (a.targetPosition.isEqual(b.splitPosition) && context.abRelation == 'insertAtSource') {\n        newTargetPosition = b.moveTargetPosition;\n    }\n    // Case 4:\n    //\n    // Move operation targets just after the split element. We need to decide if the nodes should be inserted\n    // between two parts of split element, or after the new element.\n    //\n    // Split at `|`, while move operation moves `<p>Xyz</p>` and targets at `^`:\n    // <p>Foo|bar</p>^<p>baz</p>\n    // <p>Foo</p>^<p>bar</p><p>baz</p> or <p>Foo</p><p>bar</p>^<p>baz</p>?\n    //\n    // If there is no contextual information between operations (for example, they come from collaborative\n    // editing), we don't want to put some unrelated content (move) between parts of related content (split parts).\n    // However, if the split is from undo, in the past, the moved content might be targeting between the\n    // split parts, meaning that was exactly user's intention:\n    //\n    // <p>Foo</p>^<p>bar</p>\t\t<--- original situation, in \"past\".\n    // <p>Foobar</p>^\t\t\t\t<--- after merge target position is transformed.\n    // <p>Foo|bar</p>^\t\t\t\t<--- then the merge is undone, and split happens, which leads us to current situation.\n    //\n    // In this case it is pretty clear that the intention was to put new paragraph between those nodes,\n    // so we need to transform accordingly. We can detect this scenario thanks to relations.\n    //\n    if (a.targetPosition.isEqual(b.insertionPosition) && context.abRelation == 'insertBetween') {\n        newTargetPosition = a.targetPosition;\n    }\n    // The default case.\n    //\n    const transformed = moveRange._getTransformedBySplitOperation(b);\n    const ranges = [transformed];\n    // Case 5:\n    //\n    // Moved range contains graveyard element used by split operation. Add extra move operation to the result.\n    //\n    if (b.graveyardPosition) {\n        const movesGraveyardElement = moveRange.start.isEqual(b.graveyardPosition) || moveRange.containsPosition(b.graveyardPosition);\n        if (a.howMany > 1 && movesGraveyardElement && !context.aWasUndone) {\n            ranges.push(Range._createFromPositionAndShift(b.insertionPosition, 1));\n        }\n    }\n    return _makeMoveOperationsFromRanges(ranges, newTargetPosition);\n});\nsetTransformation(MoveOperation, MergeOperation, (a, b, context) => {\n    const movedRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n    if (b.deletionPosition.hasSameParentAs(a.sourcePosition) && movedRange.containsPosition(b.sourcePosition)) {\n        if (a.type == 'remove' && !context.forceWeakRemove) {\n            // Case 1:\n            //\n            // The element to remove got merged.\n            //\n            // Merge operation does support merging elements which are not siblings. So it would not be a problem\n            // from technical point of view. However, if the element was removed, the intention of the user\n            // deleting it was to have it all deleted. From user experience point of view, moving back the\n            // removed nodes might be unexpected. This means that in this scenario we will reverse merging and remove the element.\n            //\n            if (!context.aWasUndone) {\n                const results = [];\n                let gyMoveSource = b.graveyardPosition.clone();\n                let splitNodesMoveSource = b.targetPosition._getTransformedByMergeOperation(b);\n                // `a.targetPosition` points to graveyard, so it was probably affected by `b` (which moved merged element to the graveyard).\n                const aTarget = a.targetPosition.getTransformedByOperation(b);\n                if (a.howMany > 1) {\n                    results.push(new MoveOperation(a.sourcePosition, a.howMany - 1, aTarget, 0));\n                    gyMoveSource = gyMoveSource._getTransformedByMove(a.sourcePosition, aTarget, a.howMany - 1);\n                    splitNodesMoveSource = splitNodesMoveSource._getTransformedByMove(a.sourcePosition, aTarget, a.howMany - 1);\n                }\n                const gyMoveTarget = b.deletionPosition._getCombined(a.sourcePosition, aTarget);\n                const gyMove = new MoveOperation(gyMoveSource, 1, gyMoveTarget, 0);\n                const splitNodesMoveTargetPath = gyMove.getMovedRangeStart().path.slice();\n                splitNodesMoveTargetPath.push(0);\n                const splitNodesMoveTarget = new Position(gyMove.targetPosition.root, splitNodesMoveTargetPath);\n                splitNodesMoveSource = splitNodesMoveSource._getTransformedByMove(gyMoveSource, gyMoveTarget, 1);\n                const splitNodesMove = new MoveOperation(splitNodesMoveSource, b.howMany, splitNodesMoveTarget, 0);\n                results.push(gyMove);\n                results.push(splitNodesMove);\n                return results;\n            }\n        }\n        else {\n            // Case 2:\n            //\n            // The element to move got merged and it was the only element to move.\n            // In this case just don't do anything, leave the node in the graveyard. Without special case\n            // it would be a move operation that moves 0 nodes, so maybe it is better just to return no-op.\n            //\n            if (a.howMany == 1) {\n                if (!context.bWasUndone) {\n                    return [new NoOperation(0)];\n                }\n                else {\n                    a.sourcePosition = b.graveyardPosition.clone();\n                    a.targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n                    return [a];\n                }\n            }\n        }\n    }\n    // The default case.\n    //\n    const moveRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n    const transformed = moveRange._getTransformedByMergeOperation(b);\n    a.sourcePosition = transformed.start;\n    a.howMany = transformed.end.offset - transformed.start.offset;\n    a.targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n    return [a];\n});\n// -----------------------\nsetTransformation(RenameOperation, InsertOperation, (a, b) => {\n    a.position = a.position._getTransformedByInsertOperation(b);\n    return [a];\n});\nsetTransformation(RenameOperation, MergeOperation, (a, b) => {\n    // Case 1:\n    //\n    // Element to rename got merged, so it was moved to `b.graveyardPosition`.\n    //\n    if (a.position.isEqual(b.deletionPosition)) {\n        a.position = b.graveyardPosition.clone();\n        a.position.stickiness = 'toNext';\n        return [a];\n    }\n    a.position = a.position._getTransformedByMergeOperation(b);\n    return [a];\n});\nsetTransformation(RenameOperation, MoveOperation, (a, b) => {\n    a.position = a.position._getTransformedByMoveOperation(b);\n    return [a];\n});\nsetTransformation(RenameOperation, RenameOperation, (a, b, context) => {\n    if (a.position.isEqual(b.position)) {\n        if (context.aIsStrong) {\n            a.oldName = b.newName;\n        }\n        else {\n            return [new NoOperation(0)];\n        }\n    }\n    return [a];\n});\nsetTransformation(RenameOperation, SplitOperation, (a, b) => {\n    // Case 1:\n    //\n    // The element to rename has been split. In this case, the new element should be also renamed.\n    //\n    // User decides to change the paragraph to a list item:\n    // <paragraph>Foobar</paragraph>\n    //\n    // However, in meantime, split happens:\n    // <paragraph>Foo</paragraph><paragraph>bar</paragraph>\n    //\n    // As a result, rename both elements:\n    // <listItem>Foo</listItem><listItem>bar</listItem>\n    //\n    const renamePath = a.position.path;\n    const splitPath = b.splitPosition.getParentPath();\n    if (compareArrays(renamePath, splitPath) == 'same' && !b.graveyardPosition) {\n        const extraRename = new RenameOperation(a.position.getShiftedBy(1), a.oldName, a.newName, 0);\n        return [a, extraRename];\n    }\n    // The default case.\n    //\n    a.position = a.position._getTransformedBySplitOperation(b);\n    return [a];\n});\n// -----------------------\nsetTransformation(RootAttributeOperation, RootAttributeOperation, (a, b, context) => {\n    if (a.root === b.root && a.key === b.key) {\n        if (!context.aIsStrong || a.newValue === b.newValue) {\n            return [new NoOperation(0)];\n        }\n        else {\n            a.oldValue = b.newValue;\n        }\n    }\n    return [a];\n});\n// -----------------------\nsetTransformation(RootOperation, RootOperation, (a, b) => {\n    if (a.rootName === b.rootName && a.isAdd === b.isAdd) {\n        return [new NoOperation(0)];\n    }\n    return [a];\n});\n// -----------------------\nsetTransformation(SplitOperation, InsertOperation, (a, b) => {\n    // The default case.\n    //\n    if (a.splitPosition.hasSameParentAs(b.position) && a.splitPosition.offset < b.position.offset) {\n        a.howMany += b.howMany;\n    }\n    a.splitPosition = a.splitPosition._getTransformedByInsertOperation(b);\n    a.insertionPosition = a.insertionPosition._getTransformedByInsertOperation(b);\n    return [a];\n});\nsetTransformation(SplitOperation, MergeOperation, (a, b, context) => {\n    // Case 1:\n    //\n    // Split element got merged. If two different elements were merged, clients will have different content.\n    //\n    // Example. Merge at `{}`, split at `[]`:\n    // <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n    //\n    // On merge side it will look like this:\n    // <heading>FooB[]ar</heading>\n    // <heading>FooB</heading><heading>ar</heading>\n    //\n    // On split side it will look like this:\n    // <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n    // <heading>FooB</heading><paragraph>ar</paragraph>\n    //\n    // Clearly, the second element is different for both clients.\n    //\n    // We could use the removed merge element from graveyard as a split element but then clients would have a different\n    // model state (in graveyard), because the split side client would still have an element in graveyard (removed by merge).\n    //\n    // To overcome this, in `SplitOperation` x `MergeOperation` transformation we will add additional `SplitOperation`\n    // in the graveyard, which will actually clone the merged-and-deleted element. Then, that cloned element will be\n    // used for splitting. Example below.\n    //\n    // Original state:\n    // <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n    //\n    // Merge side client:\n    //\n    // After merge:\n    // <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph>\n    //\n    // Extra split:\n    // <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph><paragraph></paragraph>\n    //\n    // Use the \"cloned\" element from graveyard:\n    // <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n    //\n    // Split side client:\n    //\n    // After split:\n    // <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n    //\n    // After merge:\n    // <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n    //\n    // This special case scenario only applies if the original split operation clones the split element.\n    // If the original split operation has `graveyardPosition` set, it all doesn't have sense because split operation\n    // knows exactly which element it should use. So there would be no original problem with different contents.\n    //\n    // Additionally, the special case applies only if the merge wasn't already undone.\n    //\n    if (!a.graveyardPosition && !context.bWasUndone && a.splitPosition.hasSameParentAs(b.sourcePosition)) {\n        const splitPath = b.graveyardPosition.path.slice();\n        splitPath.push(0);\n        const splitPosition = new Position(b.graveyardPosition.root, splitPath);\n        const insertionPosition = SplitOperation.getInsertionPosition(new Position(b.graveyardPosition.root, splitPath));\n        const additionalSplit = new SplitOperation(splitPosition, 0, insertionPosition, null, 0);\n        a.splitPosition = a.splitPosition._getTransformedByMergeOperation(b);\n        a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n        a.graveyardPosition = additionalSplit.insertionPosition.clone();\n        a.graveyardPosition.stickiness = 'toNext';\n        return [additionalSplit, a];\n    }\n    // The default case.\n    //\n    if (a.splitPosition.hasSameParentAs(b.deletionPosition) && !a.splitPosition.isAfter(b.deletionPosition)) {\n        a.howMany--;\n    }\n    if (a.splitPosition.hasSameParentAs(b.targetPosition)) {\n        a.howMany += b.howMany;\n    }\n    a.splitPosition = a.splitPosition._getTransformedByMergeOperation(b);\n    a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n    if (a.graveyardPosition) {\n        a.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation(b);\n    }\n    return [a];\n});\nsetTransformation(SplitOperation, MoveOperation, (a, b, context) => {\n    const rangeToMove = Range._createFromPositionAndShift(b.sourcePosition, b.howMany);\n    if (a.graveyardPosition) {\n        // Case 1:\n        //\n        // Split operation graveyard node was moved. In this case move operation is stronger. Since graveyard element\n        // is already moved to the correct position, we need to only move the nodes after the split position.\n        // This will be done by `MoveOperation` instead of `SplitOperation`.\n        //\n        const gyElementMoved = rangeToMove.start.isEqual(a.graveyardPosition) || rangeToMove.containsPosition(a.graveyardPosition);\n        if (!context.bWasUndone && gyElementMoved) {\n            const sourcePosition = a.splitPosition._getTransformedByMoveOperation(b);\n            const newParentPosition = a.graveyardPosition._getTransformedByMoveOperation(b);\n            const newTargetPath = newParentPosition.path.slice();\n            newTargetPath.push(0);\n            const newTargetPosition = new Position(newParentPosition.root, newTargetPath);\n            const moveOp = new MoveOperation(sourcePosition, a.howMany, newTargetPosition, 0);\n            return [moveOp];\n        }\n        a.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation(b);\n    }\n    // Case 2:\n    //\n    // Split is at a position where nodes were moved.\n    //\n    // This is a scenario described in `MoveOperation` x `SplitOperation` transformation but from the\n    // \"split operation point of view\".\n    //\n    const splitAtTarget = a.splitPosition.isEqual(b.targetPosition);\n    if (splitAtTarget && (context.baRelation == 'insertAtSource' || context.abRelation == 'splitBefore')) {\n        a.howMany += b.howMany;\n        a.splitPosition = a.splitPosition._getTransformedByDeletion(b.sourcePosition, b.howMany);\n        a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n        return [a];\n    }\n    if (splitAtTarget && context.abRelation && context.abRelation.howMany) {\n        const { howMany, offset } = context.abRelation;\n        a.howMany += howMany;\n        a.splitPosition = a.splitPosition.getShiftedBy(offset);\n        return [a];\n    }\n    // Case 3:\n    //\n    // If the split position is inside the moved range, we need to shift the split position to a proper place.\n    // The position cannot be moved together with moved range because that would result in splitting of an incorrect element.\n    //\n    // Characters `bc` should be moved to the second paragraph while split position is between them:\n    // <paragraph>A[b|c]d</paragraph><paragraph>Xyz</paragraph>\n    //\n    // After move, new split position is incorrect:\n    // <paragraph>Ad</paragraph><paragraph>Xb|cyz</paragraph>\n    //\n    // Correct split position:\n    // <paragraph>A|d</paragraph><paragraph>Xbcyz</paragraph>\n    //\n    // After split:\n    // <paragraph>A</paragraph><paragraph>d</paragraph><paragraph>Xbcyz</paragraph>\n    //\n    if (a.splitPosition.hasSameParentAs(b.sourcePosition) && rangeToMove.containsPosition(a.splitPosition)) {\n        const howManyRemoved = b.howMany - (a.splitPosition.offset - b.sourcePosition.offset);\n        a.howMany -= howManyRemoved;\n        if (a.splitPosition.hasSameParentAs(b.targetPosition) && a.splitPosition.offset < b.targetPosition.offset) {\n            a.howMany += b.howMany;\n        }\n        a.splitPosition = b.sourcePosition.clone();\n        a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n        return [a];\n    }\n    // The default case.\n    // Don't change `howMany` if move operation does not really move anything.\n    //\n    if (!b.sourcePosition.isEqual(b.targetPosition)) {\n        if (a.splitPosition.hasSameParentAs(b.sourcePosition) && a.splitPosition.offset <= b.sourcePosition.offset) {\n            a.howMany -= b.howMany;\n        }\n        if (a.splitPosition.hasSameParentAs(b.targetPosition) && a.splitPosition.offset < b.targetPosition.offset) {\n            a.howMany += b.howMany;\n        }\n    }\n    // Change position stickiness to force a correct transformation.\n    a.splitPosition.stickiness = 'toNone';\n    a.splitPosition = a.splitPosition._getTransformedByMoveOperation(b);\n    a.splitPosition.stickiness = 'toNext';\n    if (a.graveyardPosition) {\n        a.insertionPosition = a.insertionPosition._getTransformedByMoveOperation(b);\n    }\n    else {\n        a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n    }\n    return [a];\n});\nsetTransformation(SplitOperation, SplitOperation, (a, b, context) => {\n    // Case 1:\n    //\n    // Split at the same position.\n    //\n    // If there already was a split at the same position as in `a` operation, it means that the intention\n    // conveyed by `a` operation has already been fulfilled and `a` should not do anything (to avoid double split).\n    //\n    // However, there is a difference if these are new splits or splits created by undo. These have different\n    // intentions. Also splits moving back different elements from graveyard have different intentions. They\n    // are just different operations.\n    //\n    // So we cancel split operation only if it was really identical.\n    //\n    // Also, there is additional case, where split operations aren't identical and should not be cancelled, however the\n    // default transformation is incorrect too.\n    //\n    if (a.splitPosition.isEqual(b.splitPosition)) {\n        if (!a.graveyardPosition && !b.graveyardPosition) {\n            return [new NoOperation(0)];\n        }\n        if (a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual(b.graveyardPosition)) {\n            return [new NoOperation(0)];\n        }\n        // Use context to know that the `a.splitPosition` should stay where it is.\n        // This happens during undo when first a merge operation moved nodes to `a.splitPosition` and now `b` operation undoes that merge.\n        if (context.abRelation == 'splitBefore') {\n            // Since split is at the same position, there are no nodes left to split.\n            a.howMany = 0;\n            // Note: there was `if ( a.graveyardPosition )` here but it was uncovered in tests and I couldn't find any scenarios for now.\n            // That would have to be a `SplitOperation` that didn't come from undo but is transformed by operations that were undone.\n            // It could happen if `context` is enabled in collaboration.\n            a.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation(b);\n            return [a];\n        }\n    }\n    // Case 2:\n    //\n    // Same node is using to split different elements. This happens in undo when previously same element was merged to\n    // two different elements. This is described in `MergeOperation` x `MergeOperation` transformation.\n    //\n    // In this case we will follow the same logic. We will assume that `insertionPosition` is same for both\n    // split operations. This might not always be true but in the real cases that were experienced it was. After all,\n    // if these splits are reverses of merge operations that were merging the same element, then the `insertionPosition`\n    // should be same for both of those splits.\n    //\n    // Again, we will decide which operation is stronger by checking if split happens in graveyard or in non-graveyard root.\n    //\n    if (a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual(b.graveyardPosition)) {\n        const aInGraveyard = a.splitPosition.root.rootName == '$graveyard';\n        const bInGraveyard = b.splitPosition.root.rootName == '$graveyard';\n        // If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n        const aIsWeak = aInGraveyard && !bInGraveyard;\n        // If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n        const bIsWeak = bInGraveyard && !aInGraveyard;\n        // Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n        const forceMove = bIsWeak || (!aIsWeak && context.aIsStrong);\n        if (forceMove) {\n            const result = [];\n            // First we need to move any nodes split by `b` back to where they were.\n            // Do it only if `b` actually moved something.\n            if (b.howMany) {\n                result.push(new MoveOperation(b.moveTargetPosition, b.howMany, b.splitPosition, 0));\n            }\n            // Then we need to move nodes from `a` split position to their new element.\n            // Do it only if `a` actually should move something.\n            if (a.howMany) {\n                result.push(new MoveOperation(a.splitPosition, a.howMany, a.moveTargetPosition, 0));\n            }\n            return result;\n        }\n        else {\n            return [new NoOperation(0)];\n        }\n    }\n    if (a.graveyardPosition) {\n        a.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation(b);\n    }\n    // Case 3:\n    //\n    // Position where operation `b` inserted a new node after split is the same as the operation `a` split position.\n    // As in similar cases, there is ambiguity if the split should be before the new node (created by `b`) or after.\n    //\n    if (a.splitPosition.isEqual(b.insertionPosition) && context.abRelation == 'splitBefore') {\n        a.howMany++;\n        return [a];\n    }\n    // Case 4:\n    //\n    // This is a mirror to the case 2. above.\n    //\n    if (b.splitPosition.isEqual(a.insertionPosition) && context.baRelation == 'splitBefore') {\n        const newPositionPath = b.insertionPosition.path.slice();\n        newPositionPath.push(0);\n        const newPosition = new Position(b.insertionPosition.root, newPositionPath);\n        const moveOp = new MoveOperation(a.insertionPosition, 1, newPosition, 0);\n        return [a, moveOp];\n    }\n    // The default case.\n    //\n    if (a.splitPosition.hasSameParentAs(b.splitPosition) && a.splitPosition.offset < b.splitPosition.offset) {\n        a.howMany -= b.howMany;\n    }\n    a.splitPosition = a.splitPosition._getTransformedBySplitOperation(b);\n    a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n    return [a];\n});\n/**\n * Checks whether `MoveOperation` `targetPosition` is inside a node from the moved range of the other `MoveOperation`.\n */\nfunction _moveTargetIntoMovedRange(a, b) {\n    return a.targetPosition._getTransformedByDeletion(b.sourcePosition, b.howMany) === null;\n}\n/**\n * Helper function for `MoveOperation` x `MoveOperation` transformation. Converts given ranges and target position to\n * move operations and returns them.\n *\n * Ranges and target position will be transformed on-the-fly when generating operations.\n *\n * Given `ranges` should be in the order of how they were in the original transformed operation.\n *\n * Given `targetPosition` is the target position of the first range from `ranges`.\n */\nfunction _makeMoveOperationsFromRanges(ranges, targetPosition) {\n    // At this moment we have some ranges and a target position, to which those ranges should be moved.\n    // Order in `ranges` array is the go-to order of after transformation.\n    //\n    // We are almost done. We have `ranges` and `targetPosition` to make operations from.\n    // Unfortunately, those operations may affect each other. Precisely, first operation after move\n    // may affect source range and target position of second and third operation. Same with second\n    // operation affecting third.\n    //\n    // We need to fix those source ranges and target positions once again, before converting `ranges` to operations.\n    const operations = [];\n    // Keep in mind that nothing will be transformed if there is just one range in `ranges`.\n    for (let i = 0; i < ranges.length; i++) {\n        // Create new operation out of a range and target position.\n        const range = ranges[i];\n        const op = new MoveOperation(range.start, range.end.offset - range.start.offset, targetPosition, 0);\n        operations.push(op);\n        // Transform other ranges by the generated operation.\n        for (let j = i + 1; j < ranges.length; j++) {\n            // All ranges in `ranges` array should be:\n            //\n            // * non-intersecting (these are part of original operation source range), and\n            // * `targetPosition` does not target into them (opposite would mean that transformed operation targets \"inside itself\").\n            //\n            // This means that the transformation will be \"clean\" and always return one result.\n            ranges[j] = ranges[j]._getTransformedByMove(op.sourcePosition, op.targetPosition, op.howMany)[0];\n        }\n        targetPosition = targetPosition._getTransformedByMove(op.sourcePosition, op.targetPosition, op.howMany);\n    }\n    return operations;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/liveposition\n */\nimport Position from './position.js';\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n */\nexport default class LivePosition extends /* #__PURE__ */ EmitterMixin(Position) {\n    /**\n     * Creates a live position.\n     *\n     * @see module:engine/model/position~Position\n     */\n    constructor(root, path, stickiness = 'toNone') {\n        super(root, path, stickiness);\n        if (!this.root.is('rootElement')) {\n            /**\n             * LivePosition's root has to be an instance of RootElement.\n             *\n             * @error model-liveposition-root-not-rootelement\n             */\n            throw new CKEditorError('model-liveposition-root-not-rootelement', root);\n        }\n        bindWithDocument.call(this);\n    }\n    /**\n     * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n     * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n     * referring to it).\n     */\n    detach() {\n        this.stopListening();\n    }\n    /**\n     * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n     */\n    toPosition() {\n        return new Position(this.root, this.path.slice(), this.stickiness);\n    }\n    /**\n     * Creates a `LivePosition` instance that is equal to position.\n     */\n    static fromPosition(position, stickiness) {\n        return new this(position.root, position.path.slice(), stickiness ? stickiness : position.stickiness);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nLivePosition.prototype.is = function (type) {\n    return type === 'livePosition' || type === 'model:livePosition' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type == 'position' || type === 'model:position';\n};\n/**\n * Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n * this position's {@link module:engine/model/position~Position#root root}.\n */\nfunction bindWithDocument() {\n    this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n        const operation = args[0];\n        if (!operation.isDocumentOperation) {\n            return;\n        }\n        transform.call(this, operation);\n    }, { priority: 'low' });\n}\n/**\n * Updates this position accordingly to the updates applied to the model. Bases on change events.\n */\nfunction transform(operation) {\n    const result = this.getTransformedByOperation(operation);\n    if (!this.isEqual(result)) {\n        const oldPosition = this.toPosition();\n        this.path = result.path;\n        this.root = result.root;\n        this.fire('change', oldPosition);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/batch\n */\nimport { logWarning } from '@ckeditor/ckeditor5-utils';\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n * ```ts\n * model.enqueueChange( batch, writer => {\n * \twriter.insertText( 'foo', paragraph, 'end' );\n * } );\n * ```\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n    /**\n     * Creates a batch instance.\n     *\n     * @see module:engine/model/model~Model#enqueueChange\n     * @see module:engine/model/model~Model#change\n     * @param type A set of flags that specify the type of the batch. Batch type can alter how some of the features work\n     * when encountering a given `Batch` instance (for example, when a feature listens to applied operations).\n     */\n    constructor(type = {}) {\n        if (typeof type === 'string') {\n            type = type === 'transparent' ? { isUndoable: false } : {};\n            /**\n             * The string value for a `type` property of the `Batch` constructor has been deprecated and will be removed in the near future.\n             * Please refer to the {@link module:engine/model/batch~Batch#constructor `Batch` constructor API documentation} for more\n             * information.\n             *\n             * @error batch-constructor-deprecated-string-type\n             */\n            logWarning('batch-constructor-deprecated-string-type');\n        }\n        const { isUndoable = true, isLocal = true, isUndo = false, isTyping = false } = type;\n        this.operations = [];\n        this.isUndoable = isUndoable;\n        this.isLocal = isLocal;\n        this.isUndo = isUndo;\n        this.isTyping = isTyping;\n    }\n    /**\n     * The type of the batch.\n     *\n     * **This property has been deprecated and is always set to the `'default'` value.**\n     *\n     * It can be one of the following values:\n     * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n     * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n     * changes.\n     *\n     * @deprecated\n     */\n    get type() {\n        /**\n         * The {@link module:engine/model/batch~Batch#type `Batch#type` } property has been deprecated and will be removed in the near\n         * future. Use `Batch#isLocal`, `Batch#isUndoable`, `Batch#isUndo` and `Batch#isTyping` instead.\n         *\n         * @error batch-type-deprecated\n         */\n        logWarning('batch-type-deprecated');\n        return 'default';\n    }\n    /**\n     * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n     * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n     */\n    get baseVersion() {\n        for (const op of this.operations) {\n            if (op.baseVersion !== null) {\n                return op.baseVersion;\n            }\n        }\n        return null;\n    }\n    /**\n     * Adds an operation to the batch instance.\n     *\n     * @param operation An operation to add.\n     * @returns The added operation.\n     */\n    addOperation(operation) {\n        operation.batch = this;\n        this.operations.push(operation);\n        return operation;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/differ\n */\nimport Position from './position.js';\nimport Range from './range.js';\n/**\n * Calculates the difference between two model states.\n *\n * Receives operations that are to be applied on the model document. Marks parts of the model document tree which\n * are changed and saves the state of these elements before the change. Then, it compares saved elements with the\n * changed elements, after all changes are applied on the model document. Calculates the diff between saved\n * elements and new ones and returns a change set.\n */\nclass Differ {\n    /**\n     * Creates a `Differ` instance.\n     *\n     * @param markerCollection Model's marker collection.\n     */\n    constructor(markerCollection) {\n        /**\n         * A map that stores changes that happened in a given element.\n         *\n         * The keys of the map are references to the model elements.\n         * The values of the map are arrays with changes that were done on this element.\n         */\n        this._changesInElement = new Map();\n        /**\n         * Stores a snapshot for these model nodes that might have changed.\n         *\n         * This complements {@link ~Differ#_elementChildrenSnapshots `_elementChildrenSnapshots`}.\n         *\n         * See also {@link ~DifferSnapshot}.\n         */\n        this._elementsSnapshots = new Map();\n        /**\n         * For each element or document fragment inside which there was a change, it stores a snapshot of the child nodes list (an array\n         * of children snapshots that represent the state in the element / fragment before any change has happened).\n         *\n         * This complements {@link ~Differ#_elementsSnapshots `_elementsSnapshots`}.\n         *\n         * See also {@link ~DifferSnapshot}.\n         */\n        this._elementChildrenSnapshots = new Map();\n        /**\n         * Keeps the state for a given element, describing how the element was changed so far. It is used to evaluate the `action` property\n         * of diff items returned by {@link ~Differ#getChanges}.\n         *\n         * Possible values, in the order from the lowest priority to the highest priority:\n         *\n         * * `'refresh'` - element was refreshed,\n         * * `'rename'` - element was renamed,\n         * * `'move'` - element was moved (or, usually, removed, that is moved to the graveyard).\n         *\n         * Element that was refreshed, may change its state to `'rename'` if it was later renamed, or to `'move'` if it was removed.\n         * But the element cannot change its state from `'move'` to `'rename'`, or from `'rename'` to `'refresh'`.\n         *\n         * Only already existing elements are registered in `_elementState`. If a new element was inserted as a result of a buffered operation,\n         * it is not be registered in `_elementState`.\n         */\n        this._elementState = new Map();\n        /**\n         * A map that stores all changed markers.\n         *\n         * The keys of the map are marker names.\n         *\n         * The values of the map are objects with the following properties:\n         *\n         * * `oldMarkerData`,\n         * * `newMarkerData`.\n         */\n        this._changedMarkers = new Map();\n        /**\n         * A map that stores all roots that have been changed.\n         *\n         * The keys are the names of the roots while value represents the changes.\n         */\n        this._changedRoots = new Map();\n        /**\n         * Stores the number of changes that were processed. Used to order the changes chronologically. It is important\n         * when changes are sorted.\n         */\n        this._changeCount = 0;\n        /**\n         * For efficiency purposes, `Differ` stores the change set returned by the differ after {@link #getChanges} call.\n         * Cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n         * return the cached value instead of calculating it again.\n         *\n         * This property stores those changes that did not take place in graveyard root.\n         */\n        this._cachedChanges = null;\n        /**\n         * For efficiency purposes, `Differ` stores the change set returned by the differ after the {@link #getChanges} call.\n         * The cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n         * return the cached value instead of calculating it again.\n         *\n         * This property stores all changes evaluated by `Differ`, including those that took place in the graveyard.\n         */\n        this._cachedChangesWithGraveyard = null;\n        /**\n         * Set of model items that were marked to get refreshed in {@link #_refreshItem}.\n         */\n        this._refreshedItems = new Set();\n        this._markerCollection = markerCollection;\n    }\n    /**\n     * Informs whether there are any changes buffered in `Differ`.\n     */\n    get isEmpty() {\n        return this._changesInElement.size == 0 && this._changedMarkers.size == 0 && this._changedRoots.size == 0;\n    }\n    /**\n     * Buffers the given operation. **An operation has to be buffered before it is executed.**\n     *\n     * @param operationToBuffer An operation to buffer.\n     */\n    bufferOperation(operationToBuffer) {\n        // Below we take an operation, check its type, then use its parameters in marking (private) methods.\n        // The general rule is to not mark elements inside inserted element. All inserted elements are re-rendered.\n        // Marking changes in them would cause a \"double\" changing then.\n        //\n        const operation = operationToBuffer;\n        // Note: an operation that happens inside a non-loaded root will be ignored. If the operation happens partially inside\n        // a non-loaded root, that part will be ignored (this may happen for move or marker operations).\n        //\n        switch (operation.type) {\n            case 'insert': {\n                if (this._isInInsertedElement(operation.position.parent)) {\n                    return;\n                }\n                this._markInsert(operation.position.parent, operation.position.offset, operation.nodes.maxOffset);\n                break;\n            }\n            case 'addAttribute':\n            case 'removeAttribute':\n            case 'changeAttribute': {\n                for (const item of operation.range.getItems({ shallow: true })) {\n                    if (this._isInInsertedElement(item.parent)) {\n                        continue;\n                    }\n                    this._markAttribute(item);\n                }\n                break;\n            }\n            case 'remove':\n            case 'move':\n            case 'reinsert': {\n                // When range is moved to the same position then not mark it as a change.\n                // See: https://github.com/ckeditor/ckeditor5-engine/issues/1664.\n                if (operation.sourcePosition.isEqual(operation.targetPosition) ||\n                    operation.sourcePosition.getShiftedBy(operation.howMany).isEqual(operation.targetPosition)) {\n                    return;\n                }\n                const sourceParentInserted = this._isInInsertedElement(operation.sourcePosition.parent);\n                const targetParentInserted = this._isInInsertedElement(operation.targetPosition.parent);\n                if (!sourceParentInserted) {\n                    this._markRemove(operation.sourcePosition.parent, operation.sourcePosition.offset, operation.howMany);\n                }\n                if (!targetParentInserted) {\n                    this._markInsert(operation.targetPosition.parent, operation.getMovedRangeStart().offset, operation.howMany);\n                }\n                // Remember -- operation is buffered before it is executed. So, it was not executed yet.\n                const range = Range._createFromPositionAndShift(operation.sourcePosition, operation.howMany);\n                for (const node of range.getItems({ shallow: true })) {\n                    this._setElementState(node, 'move');\n                }\n                break;\n            }\n            case 'rename': {\n                if (this._isInInsertedElement(operation.position.parent)) {\n                    return;\n                }\n                this._markRemove(operation.position.parent, operation.position.offset, 1);\n                this._markInsert(operation.position.parent, operation.position.offset, 1);\n                const range = Range._createFromPositionAndShift(operation.position, 1);\n                for (const marker of this._markerCollection.getMarkersIntersectingRange(range)) {\n                    const markerData = marker.getData();\n                    this.bufferMarkerChange(marker.name, markerData, markerData);\n                }\n                this._setElementState(operation.position.nodeAfter, 'rename');\n                break;\n            }\n            case 'split': {\n                const splitElement = operation.splitPosition.parent;\n                // Mark that children of the split element were removed.\n                if (!this._isInInsertedElement(splitElement)) {\n                    this._markRemove(splitElement, operation.splitPosition.offset, operation.howMany);\n                    // Remember -- operation is buffered before it is executed. So, it was not executed yet.\n                    const range = Range._createFromPositionAndShift(operation.splitPosition, operation.howMany);\n                    for (const node of range.getItems({ shallow: true })) {\n                        this._setElementState(node, 'move');\n                    }\n                }\n                // Mark that the new element (split copy) was inserted.\n                if (!this._isInInsertedElement(operation.insertionPosition.parent)) {\n                    this._markInsert(operation.insertionPosition.parent, operation.insertionPosition.offset, 1);\n                }\n                // If the split took the element from the graveyard, mark that the element from the graveyard was removed.\n                if (operation.graveyardPosition) {\n                    this._markRemove(operation.graveyardPosition.parent, operation.graveyardPosition.offset, 1);\n                    this._setElementState(operation.graveyardPosition.nodeAfter, 'move');\n                }\n                break;\n            }\n            case 'merge': {\n                // Mark that the merged element was removed.\n                const mergedElement = operation.sourcePosition.parent;\n                if (!this._isInInsertedElement(mergedElement.parent)) {\n                    this._markRemove(mergedElement.parent, mergedElement.startOffset, 1);\n                }\n                // Mark that the merged element was inserted into graveyard.\n                const graveyardParent = operation.graveyardPosition.parent;\n                this._markInsert(graveyardParent, operation.graveyardPosition.offset, 1);\n                this._setElementState(mergedElement, 'move');\n                // Mark that children of merged element were inserted at new parent.\n                const mergedIntoElement = operation.targetPosition.parent;\n                if (!this._isInInsertedElement(mergedIntoElement)) {\n                    this._markInsert(mergedIntoElement, operation.targetPosition.offset, mergedElement.maxOffset);\n                    // Remember -- operation is buffered before it is executed. So, it was not executed yet.\n                    const range = Range._createFromPositionAndShift(operation.sourcePosition, operation.howMany);\n                    for (const node of range.getItems({ shallow: true })) {\n                        this._setElementState(node, 'move');\n                    }\n                }\n                break;\n            }\n            case 'detachRoot':\n            case 'addRoot': {\n                const root = operation.affectedSelectable;\n                if (!root._isLoaded) {\n                    return;\n                }\n                // Don't buffer if the root state does not change.\n                if (root.isAttached() == operation.isAdd) {\n                    return;\n                }\n                this._bufferRootStateChange(operation.rootName, operation.isAdd);\n                break;\n            }\n            case 'addRootAttribute':\n            case 'removeRootAttribute':\n            case 'changeRootAttribute': {\n                if (!operation.root._isLoaded) {\n                    return;\n                }\n                const rootName = operation.root.rootName;\n                this._bufferRootAttributeChange(rootName, operation.key, operation.oldValue, operation.newValue);\n                break;\n            }\n        }\n        // Clear cache after each buffered operation as it is no longer valid.\n        this._cachedChanges = null;\n    }\n    /**\n     * Buffers a marker change.\n     *\n     * @param markerName The name of the marker that changed.\n     * @param oldMarkerData Marker data before the change.\n     * @param newMarkerData Marker data after the change.\n     */\n    bufferMarkerChange(markerName, oldMarkerData, newMarkerData) {\n        if (oldMarkerData.range && oldMarkerData.range.root.is('rootElement') && !oldMarkerData.range.root._isLoaded) {\n            oldMarkerData.range = null;\n        }\n        if (newMarkerData.range && newMarkerData.range.root.is('rootElement') && !newMarkerData.range.root._isLoaded) {\n            newMarkerData.range = null;\n        }\n        let buffered = this._changedMarkers.get(markerName);\n        if (!buffered) {\n            buffered = { newMarkerData, oldMarkerData };\n            this._changedMarkers.set(markerName, buffered);\n        }\n        else {\n            buffered.newMarkerData = newMarkerData;\n        }\n        if (buffered.oldMarkerData.range == null && newMarkerData.range == null) {\n            // The marker is going to be removed (`newMarkerData.range == null`) but it did not exist before the first buffered change\n            // (`buffered.oldMarkerData.range == null`). In this case, do not keep the marker in buffer at all.\n            this._changedMarkers.delete(markerName);\n        }\n    }\n    /**\n     * Returns all markers that should be removed as a result of buffered changes.\n     *\n     * @returns Markers to remove. Each array item is an object containing the `name` and `range` properties.\n     */\n    getMarkersToRemove() {\n        const result = [];\n        for (const [name, change] of this._changedMarkers) {\n            if (change.oldMarkerData.range != null) {\n                result.push({ name, range: change.oldMarkerData.range });\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns all markers which should be added as a result of buffered changes.\n     *\n     * @returns Markers to add. Each array item is an object containing the `name` and `range` properties.\n     */\n    getMarkersToAdd() {\n        const result = [];\n        for (const [name, change] of this._changedMarkers) {\n            if (change.newMarkerData.range != null) {\n                result.push({ name, range: change.newMarkerData.range });\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns all markers which changed.\n     */\n    getChangedMarkers() {\n        return Array.from(this._changedMarkers).map(([name, change]) => ({\n            name,\n            data: {\n                oldRange: change.oldMarkerData.range,\n                newRange: change.newMarkerData.range\n            }\n        }));\n    }\n    /**\n     * Checks whether some of the buffered changes affect the editor data.\n     *\n     * Types of changes which affect the editor data:\n     *\n     * * model structure changes,\n     * * attribute changes,\n     * * a root is added or detached,\n     * * changes of markers which were defined as `affectsData`,\n     * * changes of markers' `affectsData` property.\n     */\n    hasDataChanges() {\n        if (this.getChanges().length) {\n            return true;\n        }\n        if (this._changedRoots.size > 0) {\n            return true;\n        }\n        for (const { newMarkerData, oldMarkerData } of this._changedMarkers.values()) {\n            if (newMarkerData.affectsData !== oldMarkerData.affectsData) {\n                return true;\n            }\n            if (newMarkerData.affectsData) {\n                const markerAdded = newMarkerData.range && !oldMarkerData.range;\n                const markerRemoved = !newMarkerData.range && oldMarkerData.range;\n                const markerChanged = newMarkerData.range && oldMarkerData.range && !newMarkerData.range.isEqual(oldMarkerData.range);\n                if (markerAdded || markerRemoved || markerChanged) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}\n     * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.\n     *\n     * The diff set is returned as an array of {@link module:engine/model/differ~DiffItem diff items}, each describing a change done\n     * on the model. The items are sorted by the position on which the change happened. If a position\n     * {@link module:engine/model/position~Position#isBefore is before} another one, it will be on an earlier index in the diff set.\n     *\n     * **Note**: Elements inside inserted element will not have a separate diff item, only the top most element change will be reported.\n     *\n     * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the\n     * previous {@link #getChanges} call, the next call will return the cached value.\n     *\n     * @param options Additional options.\n     * @param options.includeChangesInGraveyard If set to `true`, also changes that happened\n     * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.\n     * @returns Diff between the old and the new model tree state.\n     */\n    getChanges(options = {}) {\n        // If there are cached changes, just return them instead of calculating changes again.\n        if (this._cachedChanges) {\n            if (options.includeChangesInGraveyard) {\n                return this._cachedChangesWithGraveyard.slice();\n            }\n            else {\n                return this._cachedChanges.slice();\n            }\n        }\n        // Will contain returned results.\n        let diffSet = [];\n        // Check all changed elements/roots.\n        for (const element of this._changesInElement.keys()) {\n            // Get changes inside this element/root and sort them.\n            const changes = this._changesInElement.get(element).sort((a, b) => {\n                if (a.offset === b.offset) {\n                    if (a.type != b.type) {\n                        // If there are multiple changes at the same position, \"remove\" change should be first.\n                        // If the order is different, for example, we would first add some nodes and then removed them\n                        // (instead of the nodes that we should remove).\n                        return a.type == 'remove' ? -1 : 1;\n                    }\n                    return 0;\n                }\n                return a.offset < b.offset ? -1 : 1;\n            });\n            // Get children of this element before any change was applied on it.\n            const childrenBefore = this._elementChildrenSnapshots.get(element);\n            // Get snapshot of current element's children.\n            const childrenAfter = _getChildrenSnapshots(element.getChildren());\n            // Generate diff instructions based on changes done in the element/root.\n            const diffInstructions = _generateDiffInstructionsFromChanges(childrenBefore.length, changes);\n            let i = 0; // Iterator in `childrenAfter` array -- iterates through current children of element.\n            let j = 0; // Iterator in `childrenBefore` array -- iterates through old children of element.\n            // Process every action.\n            for (const instruction of diffInstructions) {\n                if (instruction === 'i') {\n                    const action = this._getDiffActionForNode(childrenAfter[i].node, 'insert');\n                    const childSnapshotBefore = this._elementsSnapshots.get(childrenAfter[i].node);\n                    const diffItem = this._getInsertDiff(element, i, action, childrenAfter[i], childSnapshotBefore);\n                    diffSet.push(diffItem);\n                    i++;\n                }\n                else if (instruction === 'r') {\n                    const action = this._getDiffActionForNode(childrenBefore[j].node, 'remove');\n                    const diffItem = this._getRemoveDiff(element, i, action, childrenBefore[j]);\n                    diffSet.push(diffItem);\n                    j++;\n                }\n                else if (instruction === 'a') {\n                    // Take attributes from saved and current children.\n                    const beforeAttributes = childrenBefore[j].attributes;\n                    const afterAttributes = childrenAfter[i].attributes;\n                    let range;\n                    if (childrenAfter[i].name == '$text') {\n                        range = new Range(Position._createAt(element, i), Position._createAt(element, i + 1));\n                    }\n                    else {\n                        const index = element.offsetToIndex(i);\n                        range = new Range(Position._createAt(element, i), Position._createAt(element.getChild(index), 0));\n                    }\n                    // Generate diff items for this change (there might be multiple attributes changed and\n                    // there is a single diff for each of them) and insert them into the diff set.\n                    const diffItems = this._getAttributesDiff(range, beforeAttributes, afterAttributes);\n                    diffSet.push(...diffItems);\n                    i++;\n                    j++;\n                }\n                else {\n                    // `action` is 'equal'. Child not changed.\n                    i++;\n                    j++;\n                }\n            }\n        }\n        // Then, sort the changes by the position (change at position before other changes is first).\n        diffSet.sort((a, b) => {\n            // If the change is in different root, we don't care much, but we'd like to have all changes in given\n            // root \"together\" in the array. So let's just sort them by the root name. It does not matter which root\n            // will be processed first.\n            if (a.position.root != b.position.root) {\n                return a.position.root.rootName < b.position.root.rootName ? -1 : 1;\n            }\n            // If change happens at the same position...\n            if (a.position.isEqual(b.position)) {\n                // Keep chronological order of operations.\n                return a.changeCount - b.changeCount;\n            }\n            // If positions differ, position \"on the left\" should be earlier in the result.\n            return a.position.isBefore(b.position) ? -1 : 1;\n        });\n        // Glue together multiple changes (mostly on text nodes).\n        for (let i = 1, prevIndex = 0; i < diffSet.length; i++) {\n            const prevDiff = diffSet[prevIndex];\n            const thisDiff = diffSet[i];\n            // Glue remove changes if they happen on text on same position.\n            const isConsecutiveTextRemove = prevDiff.type == 'remove' && thisDiff.type == 'remove' &&\n                prevDiff.name == '$text' && thisDiff.name == '$text' &&\n                prevDiff.position.isEqual(thisDiff.position);\n            // Glue insert changes if they happen on text on consecutive fragments.\n            const isConsecutiveTextAdd = prevDiff.type == 'insert' && thisDiff.type == 'insert' &&\n                prevDiff.name == '$text' && thisDiff.name == '$text' &&\n                prevDiff.position.parent == thisDiff.position.parent &&\n                prevDiff.position.offset + prevDiff.length == thisDiff.position.offset;\n            // Glue attribute changes if they happen on consecutive fragments and have same key, old value and new value.\n            const isConsecutiveAttributeChange = prevDiff.type == 'attribute' && thisDiff.type == 'attribute' &&\n                prevDiff.position.parent == thisDiff.position.parent &&\n                prevDiff.range.isFlat && thisDiff.range.isFlat &&\n                (prevDiff.position.offset + prevDiff.length) == thisDiff.position.offset &&\n                prevDiff.attributeKey == thisDiff.attributeKey &&\n                prevDiff.attributeOldValue == thisDiff.attributeOldValue &&\n                prevDiff.attributeNewValue == thisDiff.attributeNewValue;\n            if (isConsecutiveTextRemove || isConsecutiveTextAdd || isConsecutiveAttributeChange) {\n                prevDiff.length++;\n                if (isConsecutiveAttributeChange) {\n                    prevDiff.range.end = prevDiff.range.end.getShiftedBy(1);\n                }\n                diffSet[i] = null;\n            }\n            else {\n                prevIndex = i;\n            }\n        }\n        diffSet = diffSet.filter(v => v);\n        // Remove `changeCount` property from diff items. It is used only for sorting and is internal thing.\n        for (const item of diffSet) {\n            delete item.changeCount;\n            if (item.type == 'attribute') {\n                delete item.position;\n                delete item.length;\n            }\n        }\n        this._changeCount = 0;\n        // Cache changes.\n        this._cachedChangesWithGraveyard = diffSet;\n        this._cachedChanges = diffSet.filter(_changesInGraveyardFilter);\n        if (options.includeChangesInGraveyard) {\n            return this._cachedChangesWithGraveyard.slice();\n        }\n        else {\n            return this._cachedChanges.slice();\n        }\n    }\n    /**\n     * Returns all roots that have changed (either were attached, or detached, or their attributes changed).\n     *\n     * @returns Diff between the old and the new roots state.\n     */\n    getChangedRoots() {\n        return Array.from(this._changedRoots.values()).map(diffItem => {\n            const entry = { ...diffItem };\n            if (entry.state !== undefined) {\n                // The root was attached or detached -- do not return its attributes changes.\n                // If the root was attached, it should be handled as a whole, together with its attributes, the same way as model nodes.\n                // If the root was detached, its attributes should be discarded anyway.\n                //\n                // Keep in mind that filtering must happen on this stage (when retrieving changes). If filtering happens on-the-fly as\n                // the attributes change, it may lead to incorrect situation, e.g.: detach root, change attribute, re-attach root.\n                // In this case, attribute change cannot be filtered. After the root is re-attached, the attribute change must be kept.\n                delete entry.attributes;\n            }\n            return entry;\n        });\n    }\n    /**\n     * Returns a set of model items that were marked to get refreshed.\n     */\n    getRefreshedItems() {\n        return new Set(this._refreshedItems);\n    }\n    /**\n     * Resets `Differ`. Removes all buffered changes.\n     */\n    reset() {\n        this._changesInElement.clear();\n        this._elementChildrenSnapshots.clear();\n        this._elementsSnapshots.clear();\n        this._elementState.clear();\n        this._changedMarkers.clear();\n        this._changedRoots.clear();\n        this._refreshedItems.clear();\n        this._cachedChanges = null;\n    }\n    /**\n     * Marks the given `item` in differ to be \"refreshed\". It means that the item will be marked as removed and inserted\n     * in the differ changes set, so it will be effectively re-converted when the differ changes are handled by a dispatcher.\n     *\n     * @internal\n     * @param item Item to refresh.\n     */\n    _refreshItem(item) {\n        if (this._isInInsertedElement(item.parent)) {\n            return;\n        }\n        this._markRemove(item.parent, item.startOffset, item.offsetSize);\n        this._markInsert(item.parent, item.startOffset, item.offsetSize);\n        this._refreshedItems.add(item);\n        this._setElementState(item, 'refresh');\n        const range = Range._createOn(item);\n        for (const marker of this._markerCollection.getMarkersIntersectingRange(range)) {\n            const markerData = marker.getData();\n            this.bufferMarkerChange(marker.name, markerData, markerData);\n        }\n        // Clear cache after each buffered operation as it is no longer valid.\n        this._cachedChanges = null;\n    }\n    /**\n     * Buffers all the data related to given root like it was all just added to the editor.\n     *\n     * Following changes are buffered:\n     *\n     * * root is attached,\n     * * all root content is inserted,\n     * * all root attributes are added,\n     * * all markers inside the root are added.\n     *\n     * @internal\n     */\n    _bufferRootLoad(root) {\n        if (!root.isAttached()) {\n            return;\n        }\n        this._bufferRootStateChange(root.rootName, true);\n        this._markInsert(root, 0, root.maxOffset);\n        // Buffering root attribute changes makes sense and is actually needed, even though we buffer root state change above.\n        // Because the root state change is buffered, the root attributes changes are not returned by the differ.\n        // But, if the root attribute is removed in the same change block, or the root is detached, then the differ results would be wrong.\n        //\n        for (const key of root.getAttributeKeys()) {\n            this._bufferRootAttributeChange(root.rootName, key, null, root.getAttribute(key));\n        }\n        for (const marker of this._markerCollection) {\n            if (marker.getRange().root == root) {\n                const markerData = marker.getData();\n                this.bufferMarkerChange(marker.name, { ...markerData, range: null }, markerData);\n            }\n        }\n    }\n    /**\n     * Buffers the root state change after the root was attached or detached\n     */\n    _bufferRootStateChange(rootName, isAttached) {\n        if (!this._changedRoots.has(rootName)) {\n            this._changedRoots.set(rootName, { name: rootName, state: isAttached ? 'attached' : 'detached' });\n            return;\n        }\n        const diffItem = this._changedRoots.get(rootName);\n        if (diffItem.state !== undefined) {\n            // Root `state` can only toggle between one of the values and no value. It cannot be any other way,\n            // because if the root was originally attached it can only become detached. Then, if it is re-attached in the same batch of\n            // changes, it gets back to \"no change\" (which means no value). Same if the root was originally detached.\n            delete diffItem.state;\n            if (diffItem.attributes === undefined) {\n                // If there is no `state` change and no `attributes` change, remove the entry.\n                this._changedRoots.delete(rootName);\n            }\n        }\n        else {\n            diffItem.state = isAttached ? 'attached' : 'detached';\n        }\n    }\n    /**\n     * Buffers a root attribute change.\n     */\n    _bufferRootAttributeChange(rootName, key, oldValue, newValue) {\n        const diffItem = this._changedRoots.get(rootName) || { name: rootName };\n        const attrs = diffItem.attributes || {};\n        if (attrs[key]) {\n            // If this attribute or metadata was already changed earlier and is changed again, check to what value it is changed.\n            const attrEntry = attrs[key];\n            if (newValue === attrEntry.oldValue) {\n                // If it was changed back to the old value, remove the entry.\n                delete attrs[key];\n            }\n            else {\n                // If it was changed to a different value, update the entry.\n                attrEntry.newValue = newValue;\n            }\n        }\n        else {\n            // If this attribute or metadata was not set earlier, add an entry.\n            attrs[key] = { oldValue, newValue };\n        }\n        if (Object.entries(attrs).length === 0) {\n            // If attributes or metadata changes set became empty, remove it from the diff item.\n            delete diffItem.attributes;\n            if (diffItem.state === undefined) {\n                // If there is no `state` change and no `attributes` change, remove the entry.\n                this._changedRoots.delete(rootName);\n            }\n        }\n        else {\n            // Make sure that, if a new object in the structure was created, it gets set.\n            diffItem.attributes = attrs;\n            this._changedRoots.set(rootName, diffItem);\n        }\n    }\n    /**\n     * Saves and handles an insert change.\n     */\n    _markInsert(parent, offset, howMany) {\n        if (parent.root.is('rootElement') && !parent.root._isLoaded) {\n            return;\n        }\n        const changeItem = { type: 'insert', offset, howMany, count: this._changeCount++ };\n        this._markChange(parent, changeItem);\n    }\n    /**\n     * Saves and handles a remove change.\n     */\n    _markRemove(parent, offset, howMany) {\n        if (parent.root.is('rootElement') && !parent.root._isLoaded) {\n            return;\n        }\n        const changeItem = { type: 'remove', offset, howMany, count: this._changeCount++ };\n        this._markChange(parent, changeItem);\n        this._removeAllNestedChanges(parent, offset, howMany);\n    }\n    /**\n     * Saves and handles an attribute change.\n     */\n    _markAttribute(item) {\n        if (item.root.is('rootElement') && !item.root._isLoaded) {\n            return;\n        }\n        const changeItem = { type: 'attribute', offset: item.startOffset, howMany: item.offsetSize, count: this._changeCount++ };\n        this._markChange(item.parent, changeItem);\n    }\n    /**\n     * Saves and handles a model change.\n     */\n    _markChange(parent, changeItem) {\n        // First, make a snapshot of the parent and its children (it will be made only if it was not made before).\n        this._makeSnapshots(parent);\n        // Then, get all changes that already were done on the element (empty array if this is the first change).\n        const changes = this._getChangesForElement(parent);\n        // Then, look through all the changes, and transform them or the new change.\n        this._handleChange(changeItem, changes);\n        // Add the new change.\n        changes.push(changeItem);\n        // Remove incorrect changes. During transformation some change might be, for example, included in another.\n        // In that case, the change will have `howMany` property set to `0` or less. We need to remove those changes.\n        for (let i = 0; i < changes.length; i++) {\n            if (changes[i].howMany < 1) {\n                changes.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    /**\n     * Tries to set given state for given item.\n     *\n     * This method does simple validation (it sets the state only for model elements, not for text proxy nodes). It also follows state\n     * setting rules, that is, `'refresh'` cannot overwrite `'rename'`, and `'rename'` cannot overwrite `'move'`.\n     */\n    _setElementState(node, state) {\n        if (!node.is('element')) {\n            return;\n        }\n        const currentStatePriority = Differ._statesPriority.indexOf(this._elementState.get(node));\n        const newStatePriority = Differ._statesPriority.indexOf(state);\n        if (newStatePriority > currentStatePriority) {\n            this._elementState.set(node, state);\n        }\n    }\n    /**\n     * Returns a value for {@link ~DifferItemAction `action`} property for diff items returned by {@link ~Differ#getChanges}.\n     * This method aims to return `'rename'` or `'refresh'` when it should, and `diffItemType` (\"default action\") in all other cases.\n     *\n     * It bases on a few factors:\n     *\n     * * for text nodes, the method always returns `diffItemType`,\n     * * for newly inserted element, the method returns `diffItemType`,\n     * * if {@link ~Differ#_elementState element state} was not recorded, the method returns `diffItemType`,\n     * * if state was recorded, and it was `'move'` (default action), the method returns `diffItemType`,\n     * * finally, if state was `'refresh'` or `'rename'`, the method returns the state value.\n     */\n    _getDiffActionForNode(node, diffItemType) {\n        if (!node.is('element')) {\n            // Text node.\n            return diffItemType;\n        }\n        if (!this._elementsSnapshots.has(node)) {\n            // Newly inserted element.\n            return diffItemType;\n        }\n        const state = this._elementState.get(node);\n        if (!state || state == 'move') {\n            return diffItemType;\n        }\n        return state;\n    }\n    /**\n     * Gets an array of changes that have already been saved for a given element.\n     */\n    _getChangesForElement(element) {\n        let changes;\n        if (this._changesInElement.has(element)) {\n            changes = this._changesInElement.get(element);\n        }\n        else {\n            changes = [];\n            this._changesInElement.set(element, changes);\n        }\n        return changes;\n    }\n    /**\n     * Creates and saves a snapshot for all children of the given element.\n     */\n    _makeSnapshots(element) {\n        if (this._elementChildrenSnapshots.has(element)) {\n            return;\n        }\n        const childrenSnapshots = _getChildrenSnapshots(element.getChildren());\n        this._elementChildrenSnapshots.set(element, childrenSnapshots);\n        for (const snapshot of childrenSnapshots) {\n            this._elementsSnapshots.set(snapshot.node, snapshot);\n        }\n    }\n    /**\n     * For a given newly saved change, compares it with a change already done on the element and modifies the incoming\n     * change and/or the old change.\n     *\n     * @param inc Incoming (new) change.\n     * @param changes An array containing all the changes done on that element.\n     */\n    _handleChange(inc, changes) {\n        // We need a helper variable that will store how many nodes are to be still handled for this change item.\n        // `nodesToHandle` (how many nodes still need to be handled) and `howMany` (how many nodes were affected)\n        // needs to be differentiated.\n        //\n        // This comes up when there are multiple changes that are affected by `inc` change item.\n        //\n        // For example: assume two insert changes: `{ offset: 2, howMany: 1 }` and `{ offset: 5, howMany: 1 }`.\n        // Assume that `inc` change is remove `{ offset: 2, howMany: 2, nodesToHandle: 2 }`.\n        //\n        // Then, we:\n        // - \"forget\" about first insert change (it is \"eaten\" by remove),\n        // - because of that, at the end we will want to remove only one node (`nodesToHandle = 1`),\n        // - but still we have to change offset of the second insert change from `5` to `3`!\n        //\n        // So, `howMany` does not change throughout items transformation and keeps information about how many nodes were affected,\n        // while `nodesToHandle` means how many nodes need to be handled after the change item is transformed by other changes.\n        inc.nodesToHandle = inc.howMany;\n        for (const old of changes) {\n            const incEnd = inc.offset + inc.howMany;\n            const oldEnd = old.offset + old.howMany;\n            if (inc.type == 'insert') {\n                if (old.type == 'insert') {\n                    if (inc.offset <= old.offset) {\n                        old.offset += inc.howMany;\n                    }\n                    else if (inc.offset < oldEnd) {\n                        old.howMany += inc.nodesToHandle;\n                        inc.nodesToHandle = 0;\n                    }\n                }\n                if (old.type == 'remove') {\n                    if (inc.offset < old.offset) {\n                        old.offset += inc.howMany;\n                    }\n                }\n                if (old.type == 'attribute') {\n                    if (inc.offset <= old.offset) {\n                        old.offset += inc.howMany;\n                    }\n                    else if (inc.offset < oldEnd) {\n                        // This case is more complicated, because attribute change has to be split into two.\n                        // Example (assume that uppercase and lowercase letters mean different attributes):\n                        //\n                        // initial state:\t\tabcxyz\n                        // attribute change:\taBCXYz\n                        // incoming insert:\t\taBCfooXYz\n                        //\n                        // Change ranges cannot intersect because each item has to be described exactly (it was either\n                        // not changed, inserted, removed, or its attribute was changed). That's why old attribute\n                        // change has to be split and both parts has to be handled separately from now on.\n                        const howMany = old.howMany;\n                        old.howMany = inc.offset - old.offset;\n                        // Add the second part of attribute change to the beginning of processed array so it won't\n                        // be processed again in this loop.\n                        changes.unshift({\n                            type: 'attribute',\n                            offset: incEnd,\n                            howMany: howMany - old.howMany,\n                            count: this._changeCount++\n                        });\n                    }\n                }\n            }\n            if (inc.type == 'remove') {\n                if (old.type == 'insert') {\n                    if (incEnd <= old.offset) {\n                        old.offset -= inc.howMany;\n                    }\n                    else if (incEnd <= oldEnd) {\n                        if (inc.offset < old.offset) {\n                            const intersectionLength = incEnd - old.offset;\n                            old.offset = inc.offset;\n                            old.howMany -= intersectionLength;\n                            inc.nodesToHandle -= intersectionLength;\n                        }\n                        else {\n                            old.howMany -= inc.nodesToHandle;\n                            inc.nodesToHandle = 0;\n                        }\n                    }\n                    else {\n                        if (inc.offset <= old.offset) {\n                            inc.nodesToHandle -= old.howMany;\n                            old.howMany = 0;\n                        }\n                        else if (inc.offset < oldEnd) {\n                            const intersectionLength = oldEnd - inc.offset;\n                            old.howMany -= intersectionLength;\n                            inc.nodesToHandle -= intersectionLength;\n                        }\n                    }\n                }\n                if (old.type == 'remove') {\n                    if (incEnd <= old.offset) {\n                        old.offset -= inc.howMany;\n                    }\n                    else if (inc.offset < old.offset) {\n                        inc.nodesToHandle += old.howMany;\n                        old.howMany = 0;\n                    }\n                }\n                if (old.type == 'attribute') {\n                    if (incEnd <= old.offset) {\n                        old.offset -= inc.howMany;\n                    }\n                    else if (inc.offset < old.offset) {\n                        const intersectionLength = incEnd - old.offset;\n                        old.offset = inc.offset;\n                        old.howMany -= intersectionLength;\n                    }\n                    else if (inc.offset < oldEnd) {\n                        if (incEnd <= oldEnd) {\n                            // On first sight in this case we don't need to split attribute operation into two.\n                            // However the changes set is later converted to actions (see `_generateActionsFromChanges`).\n                            // For that reason, no two changes may intersect.\n                            // So we cannot have an attribute change that \"contains\" remove change.\n                            // Attribute change needs to be split.\n                            const howMany = old.howMany;\n                            old.howMany = inc.offset - old.offset;\n                            const howManyAfter = howMany - old.howMany - inc.nodesToHandle;\n                            // Add the second part of attribute change to the beginning of processed array so it won't\n                            // be processed again in this loop.\n                            changes.unshift({\n                                type: 'attribute',\n                                offset: inc.offset,\n                                howMany: howManyAfter,\n                                count: this._changeCount++\n                            });\n                        }\n                        else {\n                            old.howMany -= oldEnd - inc.offset;\n                        }\n                    }\n                }\n            }\n            if (inc.type == 'attribute') {\n                // In case of attribute change, `howMany` should be kept same as `nodesToHandle`. It's not an error.\n                if (old.type == 'insert') {\n                    if (inc.offset < old.offset && incEnd > old.offset) {\n                        if (incEnd > oldEnd) {\n                            // This case is similar to a case described when incoming change was insert and old change was attribute.\n                            // See comment above.\n                            //\n                            // This time incoming change is attribute. We need to split incoming change in this case too.\n                            // However this time, the second part of the attribute change needs to be processed further\n                            // because there might be other changes that it collides with.\n                            const attributePart = {\n                                type: 'attribute',\n                                offset: oldEnd,\n                                howMany: incEnd - oldEnd,\n                                count: this._changeCount++\n                            };\n                            this._handleChange(attributePart, changes);\n                            changes.push(attributePart);\n                        }\n                        inc.nodesToHandle = old.offset - inc.offset;\n                        inc.howMany = inc.nodesToHandle;\n                    }\n                    else if (inc.offset >= old.offset && inc.offset < oldEnd) {\n                        if (incEnd > oldEnd) {\n                            inc.nodesToHandle = incEnd - oldEnd;\n                            inc.offset = oldEnd;\n                        }\n                        else {\n                            inc.nodesToHandle = 0;\n                        }\n                    }\n                }\n                if (old.type == 'remove') {\n                    // This is a case when attribute change \"contains\" remove change.\n                    // The attribute change needs to be split into two because changes cannot intersect.\n                    if (inc.offset < old.offset && incEnd > old.offset) {\n                        const attributePart = {\n                            type: 'attribute',\n                            offset: old.offset,\n                            howMany: incEnd - old.offset,\n                            count: this._changeCount++\n                        };\n                        this._handleChange(attributePart, changes);\n                        changes.push(attributePart);\n                        inc.nodesToHandle = old.offset - inc.offset;\n                        inc.howMany = inc.nodesToHandle;\n                    }\n                }\n                if (old.type == 'attribute') {\n                    // There are only two conflicting scenarios possible here:\n                    if (inc.offset >= old.offset && incEnd <= oldEnd) {\n                        // `old` change includes `inc` change, or they are the same.\n                        inc.nodesToHandle = 0;\n                        inc.howMany = 0;\n                        inc.offset = 0;\n                    }\n                    else if (inc.offset <= old.offset && incEnd >= oldEnd) {\n                        // `inc` change includes `old` change.\n                        old.howMany = 0;\n                    }\n                }\n            }\n        }\n        inc.howMany = inc.nodesToHandle;\n        delete inc.nodesToHandle;\n    }\n    /**\n     * Returns an object with a single insert change description.\n     *\n     * @param parent The element in which the change happened.\n     * @param offset The offset at which change happened.\n     * @param action Further specifies what kind of action led to generating this change.\n     * @param elementSnapshot Snapshot of the inserted node after changes.\n     * @param elementSnapshotBefore Snapshot of the inserted node before changes.\n     * @returns The diff item.\n     */\n    _getInsertDiff(parent, offset, action, elementSnapshot, elementSnapshotBefore) {\n        const diffItem = {\n            type: 'insert',\n            position: Position._createAt(parent, offset),\n            name: elementSnapshot.name,\n            attributes: new Map(elementSnapshot.attributes),\n            length: 1,\n            changeCount: this._changeCount++,\n            action\n        };\n        if (action != 'insert' && elementSnapshotBefore) {\n            diffItem.before = {\n                name: elementSnapshotBefore.name,\n                attributes: new Map(elementSnapshotBefore.attributes)\n            };\n        }\n        return diffItem;\n    }\n    /**\n     * Returns an object with a single remove change description.\n     *\n     * @param parent The element in which change happened.\n     * @param offset The offset at which change happened.\n     * @param action Further specifies what kind of action led to generating this change.\n     * @param elementSnapshot The snapshot of the removed node before changes.\n     * @returns The diff item.\n     */\n    _getRemoveDiff(parent, offset, action, elementSnapshot) {\n        return {\n            type: 'remove',\n            action,\n            position: Position._createAt(parent, offset),\n            name: elementSnapshot.name,\n            attributes: new Map(elementSnapshot.attributes),\n            length: 1,\n            changeCount: this._changeCount++\n        };\n    }\n    /**\n     * Returns an array of objects where each one is a single attribute change description.\n     *\n     * @param range The range where the change happened.\n     * @param oldAttributes A map, map iterator or compatible object that contains attributes before the change.\n     * @param newAttributes A map, map iterator or compatible object that contains attributes after the change.\n     * @returns An array containing one or more diff items.\n     */\n    _getAttributesDiff(range, oldAttributes, newAttributes) {\n        // Results holder.\n        const diffs = [];\n        // Clone new attributes as we will be performing changes on this object.\n        newAttributes = new Map(newAttributes);\n        // Look through old attributes.\n        for (const [key, oldValue] of oldAttributes) {\n            // Check what is the new value of the attribute (or if it was removed).\n            const newValue = newAttributes.has(key) ? newAttributes.get(key) : null;\n            // If values are different (or attribute was removed)...\n            if (newValue !== oldValue) {\n                // Add diff item.\n                diffs.push({\n                    type: 'attribute',\n                    position: range.start,\n                    range: range.clone(),\n                    length: 1,\n                    attributeKey: key,\n                    attributeOldValue: oldValue,\n                    attributeNewValue: newValue,\n                    changeCount: this._changeCount++\n                });\n            }\n            // Prevent returning two diff items for the same change.\n            newAttributes.delete(key);\n        }\n        // Look through new attributes that weren't handled above.\n        for (const [key, newValue] of newAttributes) {\n            // Each of them is a new attribute. Add diff item.\n            diffs.push({\n                type: 'attribute',\n                position: range.start,\n                range: range.clone(),\n                length: 1,\n                attributeKey: key,\n                attributeOldValue: null,\n                attributeNewValue: newValue,\n                changeCount: this._changeCount++\n            });\n        }\n        return diffs;\n    }\n    /**\n     * Checks whether given element or any of its parents is an element that is buffered as an inserted element.\n     */\n    _isInInsertedElement(element) {\n        const parent = element.parent;\n        if (!parent) {\n            return false;\n        }\n        const changes = this._changesInElement.get(parent);\n        const offset = element.startOffset;\n        if (changes) {\n            for (const change of changes) {\n                if (change.type == 'insert' && offset >= change.offset && offset < change.offset + change.howMany) {\n                    return true;\n                }\n            }\n        }\n        return this._isInInsertedElement(parent);\n    }\n    /**\n     * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`\n     * and `howMany`.\n     */\n    _removeAllNestedChanges(parent, offset, howMany) {\n        const range = new Range(Position._createAt(parent, offset), Position._createAt(parent, offset + howMany));\n        for (const item of range.getItems({ shallow: true })) {\n            if (item.is('element')) {\n                this._changesInElement.delete(item);\n                this._removeAllNestedChanges(item, 0, item.maxOffset);\n            }\n        }\n    }\n}\n/**\n * Priority of the {@link ~Differ#_elementState element states}. States on higher indexes of the array can overwrite states on the lower\n * indexes.\n */\nDiffer._statesPriority = [undefined, 'refresh', 'rename', 'move'];\nexport default Differ;\n/**\n * Returns a snapshot for the specified child node. Text node snapshots have the `name` property set to `$text`.\n */\nfunction _getSingleNodeSnapshot(node) {\n    return {\n        node,\n        name: node.is('$text') ? '$text' : node.name,\n        attributes: new Map(node.getAttributes())\n    };\n}\n/**\n * Returns an array that is a copy of passed child list with the exception that text nodes are split to one or more\n * objects, each representing one character and attributes set on that character.\n */\nfunction _getChildrenSnapshots(children) {\n    const snapshots = [];\n    for (const child of children) {\n        if (child.is('$text')) {\n            for (let i = 0; i < child.data.length; ++i) {\n                snapshots.push(_getSingleNodeSnapshot(child));\n            }\n        }\n        else {\n            snapshots.push(_getSingleNodeSnapshot(child));\n        }\n    }\n    return snapshots;\n}\n/**\n * Generates array of diff instructions for given changes set.\n *\n * Generated actions are:\n *\n * - 'e' for 'equal' - when item at that position did not change,\n * - 'i' for 'insert' - when item at that position was inserted,\n * - 'r' for 'remove' - when item at that position was removed,\n * - 'a' for 'attribute' - when item at that position has it attributes changed.\n *\n * Example (assume that uppercase letters have bold attribute, compare with function code):\n *\n * children before:\tfooBAR\n * children after:\tfoxybAR\n *\n * changes: type: remove, offset: 1, howMany: 1\n *\t\t\ttype: insert, offset: 2, howMany: 2\n *\t\t\ttype: attribute, offset: 4, howMany: 1\n *\n * Expected actions: equal (f), remove (o), equal (o), insert (x), insert (y), attribute (b), equal (A), equal (R)\n *\n * Steps taken by the script:\n *\n * 1. change = \"type: remove, offset: 1, howMany: 1\"; offset = 0; oldChildrenHandled = 0\n *    1.1 between this change and the beginning is one not-changed node, fill with one equal action, one old child has been handled\n *    1.2 this change removes one node, add one remove action\n *    1.3 change last visited `offset` to 1\n *    1.4 since an old child has been removed, one more old child has been handled\n *    1.5 actions at this point are: equal, remove\n *\n * 2. change = \"type: insert, offset: 2, howMany: 2\"; offset = 1; oldChildrenHandled = 2\n *    2.1 between this change and previous change is one not-changed node, add equal action, another one old children has been handled\n *    2.2 this change inserts two nodes, add two insert actions\n *    2.3 change last visited offset to the end of the inserted range, that is 4\n *    2.4 actions at this point are: equal, remove, equal, insert, insert\n *\n * 3. change = \"type: attribute, offset: 4, howMany: 1\"; offset = 4, oldChildrenHandled = 3\n *    3.1 between this change and previous change are no not-changed nodes\n *    3.2 this change changes one node, add one attribute action\n *    3.3 change last visited `offset` to the end of change range, that is 5\n *    3.4 since an old child has been changed, one more old child has been handled\n *    3.5 actions at this point are: equal, remove, equal, insert, insert, attribute\n *\n * 4. after loop oldChildrenHandled = 4, oldChildrenLength = 6 (fooBAR is 6 characters)\n *    4.1 fill up with two equal actions\n *\n * The result actions are: equal, remove, equal, insert, insert, attribute, equal, equal.\n */\nfunction _generateDiffInstructionsFromChanges(oldChildrenLength, changes) {\n    const diff = [];\n    let offset = 0;\n    let oldChildrenHandled = 0;\n    // Go through all buffered changes.\n    for (const change of changes) {\n        // First, fill \"holes\" between changes with \"equal\" actions.\n        if (change.offset > offset) {\n            for (let i = 0; i < change.offset - offset; i++) {\n                diff.push('e');\n            }\n            oldChildrenHandled += change.offset - offset;\n        }\n        // Then, fill up actions accordingly to change type.\n        if (change.type == 'insert') {\n            for (let i = 0; i < change.howMany; i++) {\n                diff.push('i');\n            }\n            // The last handled offset is after inserted range.\n            offset = change.offset + change.howMany;\n        }\n        else if (change.type == 'remove') {\n            for (let i = 0; i < change.howMany; i++) {\n                diff.push('r');\n            }\n            // The last handled offset is at the position where the nodes were removed.\n            offset = change.offset;\n            // We removed `howMany` old nodes, update `oldChildrenHandled`.\n            oldChildrenHandled += change.howMany;\n        }\n        else {\n            // Total maximum amount of arguments that can be passed to `Array.prototype.push` may be limited so we need to\n            // add them manually one by one to avoid this limit. However loop might be a bit slower than `push` method on\n            // smaller changesets so we need to decide which method to use based on the size of the change.\n            // See: https://github.com/ckeditor/ckeditor5/issues/16819\n            if (change.howMany > 1500) {\n                for (let i = 0; i < change.howMany; i++) {\n                    diff.push('a');\n                }\n            }\n            else {\n                diff.push(...'a'.repeat(change.howMany).split(''));\n            }\n            // The last handled offset is at the position after the changed range.\n            offset = change.offset + change.howMany;\n            // We changed `howMany` old nodes, update `oldChildrenHandled`.\n            oldChildrenHandled += change.howMany;\n        }\n    }\n    // Fill \"equal\" actions at the end of actions set. Use `oldChildrenHandled` to see how many children\n    // has not been changed / removed at the end of their parent.\n    if (oldChildrenHandled < oldChildrenLength) {\n        for (let i = 0; i < oldChildrenLength - oldChildrenHandled - offset; i++) {\n            diff.push('e');\n        }\n    }\n    return diff;\n}\n/**\n * Filter callback for `Array.filter` that filters out change entries that are in graveyard.\n */\nfunction _changesInGraveyardFilter(entry) {\n    const posInGy = 'position' in entry && entry.position.root.rootName == '$graveyard';\n    const rangeInGy = 'range' in entry && entry.range.root.rootName == '$graveyard';\n    return !posInGy && !rangeInGy;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * @module engine/model/history\n */\n/**\n * `History` keeps the track of all the operations applied to the {@link module:engine/model/document~Document document}.\n */\nexport default class History {\n    constructor() {\n        /**\n         * Operations added to the history.\n         */\n        this._operations = [];\n        /**\n         * Holds an information which {@link module:engine/model/operation/operation~Operation operation} undoes which\n         * {@link module:engine/model/operation/operation~Operation operation}.\n         *\n         * Keys of the map are \"undoing operations\", that is operations that undone some other operations. For each key, the\n         * value is an operation that has been undone by the \"undoing operation\".\n         */\n        this._undoPairs = new Map();\n        /**\n         * Holds all undone operations.\n         */\n        this._undoneOperations = new Set();\n        /**\n         * A map that allows retrieving the operations fast based on the given base version.\n         */\n        this._baseVersionToOperationIndex = new Map();\n        /**\n         * The history version.\n         */\n        this._version = 0;\n        /**\n         * The gap pairs kept in the <from,to> format.\n         *\n         * Anytime the `history.version` is set to a version larger than `history.version + 1`,\n         * a new <lastHistoryVersion, newHistoryVersion> entry is added to the map.\n         */\n        this._gaps = new Map();\n    }\n    /**\n     * The version of the last operation in the history.\n     *\n     * The history version is incremented automatically when a new operation is added to the history.\n     * Setting the version manually should be done only in rare circumstances when a gap is planned\n     * between history versions. When doing so, a gap will be created and the history will accept adding\n     * an operation with base version equal to the new history version.\n     */\n    get version() {\n        return this._version;\n    }\n    set version(version) {\n        // Store a gap if there are some operations already in the history and the\n        // new version does not increment the latest one.\n        if (this._operations.length && version > this._version + 1) {\n            this._gaps.set(this._version, version);\n        }\n        this._version = version;\n    }\n    /**\n     * The last history operation.\n     */\n    get lastOperation() {\n        return this._operations[this._operations.length - 1];\n    }\n    /**\n     * Adds an operation to the history and increments the history version.\n     *\n     * The operation's base version should be equal to the history version. Otherwise an error is thrown.\n     */\n    addOperation(operation) {\n        if (operation.baseVersion !== this.version) {\n            /**\n             * Only operations with matching versions can be added to the history.\n             *\n             * @error model-document-history-addoperation-incorrect-version\n             * @param errorData The operation and the current document history version.\n             */\n            throw new CKEditorError('model-document-history-addoperation-incorrect-version', this, {\n                operation,\n                historyVersion: this.version\n            });\n        }\n        this._operations.push(operation);\n        this._version++;\n        this._baseVersionToOperationIndex.set(operation.baseVersion, this._operations.length - 1);\n    }\n    /**\n     * Returns operations from the given range of operation base versions that were added to the history.\n     *\n     * Note that there may be gaps in operations base versions.\n     *\n     * @param fromBaseVersion Base version from which operations should be returned (inclusive).\n     * @param toBaseVersion Base version up to which operations should be returned (exclusive).\n     * @returns History operations for the given range, in chronological order.\n     */\n    getOperations(fromBaseVersion, toBaseVersion = this.version) {\n        // When there is no operation in the history, return an empty array.\n        // After that we can be sure that `firstOperation`, `lastOperation` are not nullish.\n        if (!this._operations.length) {\n            return [];\n        }\n        const firstOperation = this._operations[0];\n        if (fromBaseVersion === undefined) {\n            fromBaseVersion = firstOperation.baseVersion;\n        }\n        // Change exclusive `toBaseVersion` to inclusive, so it will refer to the actual index.\n        // Thanks to that mapping from base versions to operation indexes are possible.\n        let inclusiveTo = toBaseVersion - 1;\n        // Check if \"from\" or \"to\" point to a gap between versions.\n        // If yes, then change the incorrect position to the proper side of the gap.\n        // Thanks to it, it will be possible to get index of the operation.\n        for (const [gapFrom, gapTo] of this._gaps) {\n            if (fromBaseVersion > gapFrom && fromBaseVersion < gapTo) {\n                fromBaseVersion = gapTo;\n            }\n            if (inclusiveTo > gapFrom && inclusiveTo < gapTo) {\n                inclusiveTo = gapFrom - 1;\n            }\n        }\n        // If the whole range is outside of the operation versions, then return an empty array.\n        if (inclusiveTo < firstOperation.baseVersion || fromBaseVersion > this.lastOperation.baseVersion) {\n            return [];\n        }\n        let fromIndex = this._baseVersionToOperationIndex.get(fromBaseVersion);\n        // If the range starts before the first operation, then use the first operation as the range's start.\n        if (fromIndex === undefined) {\n            fromIndex = 0;\n        }\n        let toIndex = this._baseVersionToOperationIndex.get(inclusiveTo);\n        // If the range ends after the last operation, then use the last operation as the range's end.\n        if (toIndex === undefined) {\n            toIndex = this._operations.length - 1;\n        }\n        // Return the part of the history operations based on the calculated start index and end index.\n        return this._operations.slice(fromIndex, \n        // The `toIndex` should be included in the returned operations, so add `1`.\n        toIndex + 1);\n    }\n    /**\n     * Returns operation from the history that bases on given `baseVersion`.\n     *\n     * @param baseVersion Base version of the operation to get.\n     * @returns Operation with given base version or `undefined` if there is no such operation in history.\n     */\n    getOperation(baseVersion) {\n        const operationIndex = this._baseVersionToOperationIndex.get(baseVersion);\n        if (operationIndex === undefined) {\n            return;\n        }\n        return this._operations[operationIndex];\n    }\n    /**\n     * Marks in history that one operation is an operation that is undoing the other operation. By marking operation this way,\n     * history is keeping more context information about operations, which helps in operational transformation.\n     *\n     * @param undoneOperation Operation which is undone by `undoingOperation`.\n     * @param undoingOperation Operation which undoes `undoneOperation`.\n     */\n    setOperationAsUndone(undoneOperation, undoingOperation) {\n        this._undoPairs.set(undoingOperation, undoneOperation);\n        this._undoneOperations.add(undoneOperation);\n    }\n    /**\n     * Checks whether given `operation` is undoing any other operation.\n     *\n     * @param operation Operation to check.\n     * @returns `true` if given `operation` is undoing any other operation, `false` otherwise.\n     */\n    isUndoingOperation(operation) {\n        return this._undoPairs.has(operation);\n    }\n    /**\n     * Checks whether given `operation` has been undone by any other operation.\n     *\n     * @param operation Operation to check.\n     * @returns `true` if given `operation` has been undone any other operation, `false` otherwise.\n     */\n    isUndoneOperation(operation) {\n        return this._undoneOperations.has(operation);\n    }\n    /**\n     * For given `undoingOperation`, returns the operation which has been undone by it.\n     *\n     * @returns Operation that has been undone by given `undoingOperation` or `undefined`\n     * if given `undoingOperation` is not undoing any other operation.\n     */\n    getUndoneOperation(undoingOperation) {\n        return this._undoPairs.get(undoingOperation);\n    }\n    /**\n     * Resets the history of operations.\n     */\n    reset() {\n        this._version = 0;\n        this._undoPairs = new Map();\n        this._operations = [];\n        this._undoneOperations = new Set();\n        this._gaps = new Map();\n        this._baseVersionToOperationIndex = new Map();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/rootelement\n */\nimport Element from './element.js';\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n */\nexport default class RootElement extends Element {\n    /**\n     * Creates root element.\n     *\n     * @param document Document that is an owner of this root.\n     * @param name Node name.\n     * @param rootName Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n     */\n    constructor(document, name, rootName = 'main') {\n        super(name);\n        /**\n         * @internal\n         */\n        this._isAttached = true;\n        /**\n         * Informs if the root element is loaded (default).\n         *\n         * @internal\n         */\n        this._isLoaded = true;\n        this._document = document;\n        this.rootName = rootName;\n    }\n    /**\n     * {@link module:engine/model/document~Document Document} that owns this root element.\n     */\n    get document() {\n        return this._document;\n    }\n    /**\n     * Informs if the root element is currently attached to the document, or not.\n     *\n     * A detached root is equivalent to being removed and cannot contain any children or markers.\n     *\n     * By default, a newly added root is attached. It can be detached using\n     * {@link module:engine/model/writer~Writer#detachRoot `Writer#detachRoot`}. A detached root can be re-attached again using\n     * {@link module:engine/model/writer~Writer#addRoot `Writer#addRoot`}.\n     */\n    isAttached() {\n        return this._isAttached;\n    }\n    /**\n     * Converts `RootElement` instance to `string` containing its name.\n     *\n     * @returns `RootElement` instance converted to `string`.\n     */\n    toJSON() {\n        return this.rootName;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nRootElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'rootElement' || type === 'model:rootElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'model:element' ||\n            type === 'node' || type === 'model:node';\n    }\n    return name === this.name && (type === 'rootElement' || type === 'model:rootElement' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'element' || type === 'model:element');\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/document\n */\nimport Differ from './differ.js';\nimport DocumentSelection from './documentselection.js';\nimport History from './history.js';\nimport RootElement from './rootelement.js';\nimport { CKEditorError, Collection, EmitterMixin, isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils';\nimport { clone } from 'lodash-es';\n// @if CK_DEBUG_ENGINE // const { logDocument } = require( '../dev-utils/utils' );\nconst graveyardName = '$graveyard';\n/**\n * Data model's document. It contains the model's structure, its selection and the history of changes.\n *\n * Read more about working with the model in\n * {@glink framework/architecture/editing-engine#model introduction to the the editing engine's architecture}.\n *\n * Usually, the document contains just one {@link module:engine/model/document~Document#roots root element}, so\n * you can retrieve it by just calling {@link module:engine/model/document~Document#getRoot} without specifying its name:\n *\n * ```ts\n * model.document.getRoot(); // -> returns the main root\n * ```\n *\n * However, the document may contain multiple roots – e.g. when the editor has multiple editable areas\n * (e.g. a title and a body of a message).\n */\nexport default class Document extends /* #__PURE__ */ EmitterMixin() {\n    /**\n     * Creates an empty document instance with no {@link #roots} (other than\n     * the {@link #graveyard graveyard root}).\n     */\n    constructor(model) {\n        super();\n        this.model = model;\n        this.history = new History();\n        this.selection = new DocumentSelection(this);\n        this.roots = new Collection({ idProperty: 'rootName' });\n        this.differ = new Differ(model.markers);\n        this.isReadOnly = false;\n        this._postFixers = new Set();\n        this._hasSelectionChangedFromTheLastChangeBlock = false;\n        // Graveyard tree root. Document always have a graveyard root, which stores removed nodes.\n        this.createRoot('$root', graveyardName);\n        // Then, still before an operation is applied on model, buffer the change in differ.\n        this.listenTo(model, 'applyOperation', (evt, args) => {\n            const operation = args[0];\n            if (operation.isDocumentOperation) {\n                this.differ.bufferOperation(operation);\n            }\n        }, { priority: 'high' });\n        // After the operation is applied, bump document's version and add the operation to the history.\n        this.listenTo(model, 'applyOperation', (evt, args) => {\n            const operation = args[0];\n            if (operation.isDocumentOperation) {\n                this.history.addOperation(operation);\n            }\n        }, { priority: 'low' });\n        // Listen to selection changes. If selection changed, mark it.\n        this.listenTo(this.selection, 'change', () => {\n            this._hasSelectionChangedFromTheLastChangeBlock = true;\n        });\n        // Buffer marker changes.\n        // This is not covered in buffering operations because markers may change outside of them (when they\n        // are modified using `model.markers` collection, not through `MarkerOperation`).\n        this.listenTo(model.markers, 'update', (evt, marker, oldRange, newRange, oldMarkerData) => {\n            // Copy the `newRange` to the new marker data as during the marker removal the range is not updated.\n            const newMarkerData = { ...marker.getData(), range: newRange };\n            // Whenever marker is updated, buffer that change.\n            this.differ.bufferMarkerChange(marker.name, oldMarkerData, newMarkerData);\n            if (oldRange === null) {\n                // If this is a new marker, add a listener that will buffer change whenever marker changes.\n                marker.on('change', (evt, oldRange) => {\n                    const markerData = marker.getData();\n                    this.differ.bufferMarkerChange(marker.name, { ...markerData, range: oldRange }, markerData);\n                });\n            }\n        });\n        // This is a solution for a problem that may occur during real-time editing. If one client detached a root and another added\n        // something there at the same moment, the OT does not solve this problem currently. In such situation, the added elements would\n        // stay in the detached root.\n        //\n        // This is incorrect, a detached root should be empty and all elements from it should be removed. To solve this, the post-fixer will\n        // remove any element that is left in a detached root.\n        //\n        // Similarly, markers that are created at the beginning or at the end of the detached root will not be removed as well.\n        //\n        // The drawback of this solution over the OT solution is that the elements removed by the post-fixer will never be brought back.\n        // If the root detachment gets undone (and the root is brought back), the removed elements will not be there.\n        this.registerPostFixer(writer => {\n            let result = false;\n            for (const root of this.roots) {\n                if (!root.isAttached() && !root.isEmpty) {\n                    writer.remove(writer.createRangeIn(root));\n                    result = true;\n                }\n            }\n            for (const marker of this.model.markers) {\n                if (!marker.getRange().root.isAttached()) {\n                    writer.removeMarker(marker);\n                    result = true;\n                }\n            }\n            return result;\n        });\n    }\n    /**\n     * The document version. Every applied operation increases the version number. It is used to\n     * ensure that operations are applied on a proper document version.\n     *\n     * This property is equal to {@link module:engine/model/history~History#version `model.Document#history#version`}.\n     *\n     * If the {@link module:engine/model/operation/operation~Operation#baseVersion base version} does not match the document version,\n     * a {@link module:utils/ckeditorerror~CKEditorError model-document-applyoperation-wrong-version} error is thrown.\n     */\n    get version() {\n        return this.history.version;\n    }\n    set version(version) {\n        this.history.version = version;\n    }\n    /**\n     * The graveyard tree root. A document always has a graveyard root that stores removed nodes.\n     */\n    get graveyard() {\n        return this.getRoot(graveyardName);\n    }\n    /**\n     * Creates a new root.\n     *\n     * **Note:** do not use this method after the editor has been initialized! If you want to dynamically add a root, use\n     * {@link module:engine/model/writer~Writer#addRoot `model.Writer#addRoot`} instead.\n     *\n     * @param elementName The element name. Defaults to `'$root'` which also has some basic schema defined\n     * (e.g. `$block` elements are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\n     * @param rootName A unique root name.\n     * @returns The created root.\n     */\n    createRoot(elementName = '$root', rootName = 'main') {\n        if (this.roots.get(rootName)) {\n            /**\n             * A root with the specified name already exists.\n             *\n             * @error model-document-createroot-name-exists\n             */\n            throw new CKEditorError('model-document-createroot-name-exists', this, { name: rootName });\n        }\n        const root = new RootElement(this, elementName, rootName);\n        this.roots.add(root);\n        return root;\n    }\n    /**\n     * Removes all event listeners set by the document instance.\n     */\n    destroy() {\n        this.selection.destroy();\n        this.stopListening();\n    }\n    /**\n     * Returns a root by its name.\n     *\n     * Detached roots are returned by this method. This is to be able to operate on the detached root (for example, to be able to create\n     * a position inside such a root for undo feature purposes).\n     *\n     * @param name The root name of the root to return.\n     * @returns The root registered under a given name or `null` when there is no root with the given name.\n     */\n    getRoot(name = 'main') {\n        return this.roots.get(name);\n    }\n    /**\n     * Returns an array with names of all roots added to the document (except the {@link #graveyard graveyard root}).\n     *\n     * Detached roots **are not** returned by this method by default. This is to make sure that all features or algorithms that operate\n     * on the document data know which roots are still a part of the document and should be processed.\n     *\n     * @param includeDetached Specified whether detached roots should be returned as well.\n     */\n    getRootNames(includeDetached = false) {\n        return this.getRoots(includeDetached).map(root => root.rootName);\n    }\n    /**\n     * Returns an array with all roots added to the document (except the {@link #graveyard graveyard root}).\n     *\n     * Detached roots **are not** returned by this method by default. This is to make sure that all features or algorithms that operate\n     * on the document data know which roots are still a part of the document and should be processed.\n     *\n     * @param includeDetached Specified whether detached roots should be returned as well.\n     */\n    getRoots(includeDetached = false) {\n        return this.roots.filter(root => root != this.graveyard && (includeDetached || root.isAttached()) && root._isLoaded);\n    }\n    /**\n     * Used to register a post-fixer callback. A post-fixer mechanism guarantees that the features\n     * will operate on a correct model state.\n     *\n     * An execution of a feature may lead to an incorrect document tree state. The callbacks are used to fix the document tree after\n     * it has changed. Post-fixers are fired just after all changes from the outermost change block were applied but\n     * before the {@link module:engine/model/document~Document#event:change change event} is fired. If a post-fixer callback made\n     * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n     * not be fixed in the new document tree state.\n     *\n     * As a parameter, a post-fixer callback receives a {@link module:engine/model/writer~Writer writer} instance connected with the\n     * executed changes block. Thanks to that, all changes done by the callback will be added to the same\n     * {@link module:engine/model/batch~Batch batch} (and undo step) as the original changes. This makes post-fixer changes transparent\n     * for the user.\n     *\n     * An example of a post-fixer is a callback that checks if all the data were removed from the editor. If so, the\n     * callback should add an empty paragraph so that the editor is never empty:\n     *\n     * ```ts\n     * document.registerPostFixer( writer => {\n     * \tconst changes = document.differ.getChanges();\n     *\n     * \t// Check if the changes lead to an empty root in the editor.\n     * \tfor ( const entry of changes ) {\n     * \t\tif ( entry.type == 'remove' && entry.position.root.isEmpty ) {\n     * \t\t\twriter.insertElement( 'paragraph', entry.position.root, 0 );\n     *\n     * \t\t\t// It is fine to return early, even if multiple roots would need to be fixed.\n     * \t\t\t// All post-fixers will be fired again, so if there are more empty roots, those will be fixed, too.\n     * \t\t\treturn true;\n     * \t\t}\n     * \t}\n     *\n     * \treturn false;\n     * } );\n     * ```\n     */\n    registerPostFixer(postFixer) {\n        this._postFixers.add(postFixer);\n    }\n    /**\n     * A custom `toJSON()` method to solve child-parent circular dependencies.\n     *\n     * @returns A clone of this object with the document property changed to a string.\n     */\n    toJSON() {\n        const json = clone(this);\n        // Due to circular references we need to remove parent reference.\n        json.selection = '[engine.model.DocumentSelection]';\n        json.model = '[engine.model.Model]';\n        return json;\n    }\n    /**\n     * Check if there were any changes done on document, and if so, call post-fixers,\n     * fire `change` event for features and conversion and then reset the differ.\n     * Fire `change:data` event when at least one operation or buffered marker changes the data.\n     *\n     * @internal\n     * @fires change\n     * @fires change:data\n     * @param writer The writer on which post-fixers will be called.\n     */\n    _handleChangeBlock(writer) {\n        if (this._hasDocumentChangedFromTheLastChangeBlock()) {\n            this._callPostFixers(writer);\n            // Refresh selection attributes according to the final position in the model after the change.\n            this.selection.refresh();\n            if (this.differ.hasDataChanges()) {\n                this.fire('change:data', writer.batch);\n            }\n            else {\n                this.fire('change', writer.batch);\n            }\n            // Theoretically, it is not necessary to refresh selection after change event because\n            // post-fixers are the last who should change the model, but just in case...\n            this.selection.refresh();\n            this.differ.reset();\n        }\n        this._hasSelectionChangedFromTheLastChangeBlock = false;\n    }\n    /**\n     * Returns whether there is a buffered change or if the selection has changed from the last\n     * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block}\n     * or {@link module:engine/model/model~Model#change `change()` block}.\n     *\n     * @returns Returns `true` if document has changed from the last `change()` or `enqueueChange()` block.\n     */\n    _hasDocumentChangedFromTheLastChangeBlock() {\n        return !this.differ.isEmpty || this._hasSelectionChangedFromTheLastChangeBlock;\n    }\n    /**\n     * Returns the default root for this document which is either the first root that was added to the document using\n     * {@link #createRoot} or the {@link #graveyard graveyard root} if no other roots were created.\n     *\n     * @returns The default root for this document.\n     */\n    _getDefaultRoot() {\n        const roots = this.getRoots();\n        return roots.length ? roots[0] : this.graveyard;\n    }\n    /**\n     * Returns the default range for this selection. The default range is a collapsed range that starts and ends\n     * at the beginning of this selection's document {@link #_getDefaultRoot default root}.\n     *\n     * @internal\n     */\n    _getDefaultRange() {\n        const defaultRoot = this._getDefaultRoot();\n        const model = this.model;\n        const schema = model.schema;\n        // Find the first position where the selection can be put.\n        const position = model.createPositionFromPath(defaultRoot, [0]);\n        const nearestRange = schema.getNearestSelectionRange(position);\n        // If valid selection range is not found - return range collapsed at the beginning of the root.\n        return nearestRange || model.createRange(position);\n    }\n    /**\n     * Checks whether a given {@link module:engine/model/range~Range range} is a valid range for\n     * the {@link #selection document's selection}.\n     *\n     * @internal\n     * @param range A range to check.\n     * @returns `true` if `range` is valid, `false` otherwise.\n     */\n    _validateSelectionRange(range) {\n        return range.start.isValid() && range.end.isValid() &&\n            validateTextNodePosition(range.start) && validateTextNodePosition(range.end);\n    }\n    /**\n     * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n     *\n     * @param writer The writer on which post-fixer callbacks will be called.\n     */\n    _callPostFixers(writer) {\n        let wasFixed = false;\n        do {\n            for (const callback of this._postFixers) {\n                // Ensure selection attributes are up to date before each post-fixer.\n                // https://github.com/ckeditor/ckeditor5-engine/issues/1673.\n                //\n                // It might be good to refresh the selection after each operation but at the moment it leads\n                // to losing attributes for composition or and spell checking\n                // https://github.com/ckeditor/ckeditor5-typing/issues/188\n                this.selection.refresh();\n                wasFixed = callback(writer);\n                if (wasFixed) {\n                    break;\n                }\n            }\n        } while (wasFixed);\n    }\n}\n/**\n * Checks whether given range boundary position is valid for document selection, meaning that is not between\n * unicode surrogate pairs or base character and combining marks.\n */\nfunction validateTextNodePosition(rangeBoundary) {\n    const textNode = rangeBoundary.textNode;\n    if (textNode) {\n        const data = textNode.data;\n        const offset = rangeBoundary.offset - textNode.startOffset;\n        return !isInsideSurrogatePair(data, offset) && !isInsideCombinedSymbol(data, offset);\n    }\n    return true;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/markercollection\n */\nimport TypeCheckable from './typecheckable.js';\nimport LiveRange from './liverange.js';\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#addMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\nexport default class MarkerCollection extends /* #__PURE__ */ EmitterMixin() {\n    constructor() {\n        super(...arguments);\n        /**\n         * Stores {@link ~Marker markers} added to the collection.\n         */\n        this._markers = new Map();\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over all {@link ~Marker markers} added to the collection.\n     */\n    [Symbol.iterator]() {\n        return this._markers.values();\n    }\n    /**\n     * Checks if given {@link ~Marker marker} or marker name is in the collection.\n     *\n     * @param markerOrName Name of marker or marker instance to check.\n     * @returns `true` if marker is in the collection, `false` otherwise.\n     */\n    has(markerOrName) {\n        const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n        return this._markers.has(markerName);\n    }\n    /**\n     * Returns {@link ~Marker marker} with given `markerName`.\n     *\n     * @param markerName Name of marker to get.\n     * @returns Marker with given name or `null` if such marker was\n     * not added to the collection.\n     */\n    get(markerName) {\n        return this._markers.get(markerName) || null;\n    }\n    /**\n     * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n     * {@link module:engine/model/range~Range range}.\n     *\n     * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n     * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n     * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n     * flag has changed.\n     *\n     * @internal\n     * @fires update\n     * @param markerOrName Name of marker to set or marker instance to update.\n     * @param range Marker range.\n     * @param managedUsingOperations Specifies whether the marker is managed using operations.\n     * @param affectsData Specifies whether the marker affects the data produced by the data pipeline\n     * (is persisted in the editor's data).\n     * @returns `Marker` instance which was added or updated.\n     */\n    _set(markerOrName, range, managedUsingOperations = false, affectsData = false) {\n        const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n        if (markerName.includes(',')) {\n            /**\n             * Marker name cannot contain the \",\" character.\n             *\n             * @error markercollection-incorrect-marker-name\n             */\n            throw new CKEditorError('markercollection-incorrect-marker-name', this);\n        }\n        const oldMarker = this._markers.get(markerName);\n        if (oldMarker) {\n            const oldMarkerData = oldMarker.getData();\n            const oldRange = oldMarker.getRange();\n            let hasChanged = false;\n            if (!oldRange.isEqual(range)) {\n                oldMarker._attachLiveRange(LiveRange.fromRange(range));\n                hasChanged = true;\n            }\n            if (managedUsingOperations != oldMarker.managedUsingOperations) {\n                oldMarker._managedUsingOperations = managedUsingOperations;\n                hasChanged = true;\n            }\n            if (typeof affectsData === 'boolean' && affectsData != oldMarker.affectsData) {\n                oldMarker._affectsData = affectsData;\n                hasChanged = true;\n            }\n            if (hasChanged) {\n                this.fire(`update:${markerName}`, oldMarker, oldRange, range, oldMarkerData);\n            }\n            return oldMarker;\n        }\n        const liveRange = LiveRange.fromRange(range);\n        const marker = new Marker(markerName, liveRange, managedUsingOperations, affectsData);\n        this._markers.set(markerName, marker);\n        this.fire(`update:${markerName}`, marker, null, range, { ...marker.getData(), range: null });\n        return marker;\n    }\n    /**\n     * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n     *\n     * @internal\n     * @fires update\n     * @param markerOrName Marker or name of a marker to remove.\n     * @returns `true` if marker was found and removed, `false` otherwise.\n     */\n    _remove(markerOrName) {\n        const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n        const oldMarker = this._markers.get(markerName);\n        if (oldMarker) {\n            this._markers.delete(markerName);\n            this.fire(`update:${markerName}`, oldMarker, oldMarker.getRange(), null, oldMarker.getData());\n            this._destroyMarker(oldMarker);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Fires an {@link module:engine/model/markercollection~MarkerCollection#event:update} event for the given {@link ~Marker marker}\n     * but does not change the marker. Useful to force {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast\n     * conversion} for the marker.\n     *\n     * @internal\n     * @fires update\n     * @param markerOrName Marker or name of a marker to refresh.\n     */\n    _refresh(markerOrName) {\n        const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n        const marker = this._markers.get(markerName);\n        if (!marker) {\n            /**\n             * Marker with provided name does not exists.\n             *\n             * @error markercollection-refresh-marker-not-exists\n             */\n            throw new CKEditorError('markercollection-refresh-marker-not-exists', this);\n        }\n        const range = marker.getRange();\n        this.fire(`update:${markerName}`, marker, range, range, marker.getData());\n    }\n    /**\n     * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n     */\n    *getMarkersAtPosition(position) {\n        for (const marker of this) {\n            if (marker.getRange().containsPosition(position)) {\n                yield marker;\n            }\n        }\n    }\n    /**\n     * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.\n     */\n    *getMarkersIntersectingRange(range) {\n        for (const marker of this) {\n            if (marker.getRange().getIntersection(range) !== null) {\n                yield marker;\n            }\n        }\n    }\n    /**\n     * Destroys marker collection and all markers inside it.\n     */\n    destroy() {\n        for (const marker of this._markers.values()) {\n            this._destroyMarker(marker);\n        }\n        this._markers = null;\n        this.stopListening();\n    }\n    /**\n     * Iterates over all markers that starts with given `prefix`.\n     *\n     * ```ts\n     * const markerFooA = markersCollection._set( 'foo:a', rangeFooA );\n     * const markerFooB = markersCollection._set( 'foo:b', rangeFooB );\n     * const markerBarA = markersCollection._set( 'bar:a', rangeBarA );\n     * const markerFooBarA = markersCollection._set( 'foobar:a', rangeFooBarA );\n     * Array.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n     * Array.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n     * ```\n     */\n    *getMarkersGroup(prefix) {\n        for (const marker of this._markers.values()) {\n            if (marker.name.startsWith(prefix + ':')) {\n                yield marker;\n            }\n        }\n    }\n    /**\n     * Destroys the marker.\n     */\n    _destroyMarker(marker) {\n        marker.stopListening();\n        marker._detachLiveRange();\n    }\n}\n/**\n * `Marker` is a continuous part of the model (like a range), is named and represents some kind of information about the\n * marked part of the model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * the model document tree, markers are not stored directly in the document tree but in the\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'update:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#addMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n * ```ts\n * model.change( ( writer ) => {\n * \tconst marker = writer.addMarker( name, { range, usingOperation: true } );\n *\n * \t// ...\n *\n * \twriter.removeMarker( marker );\n * } );\n * ```\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcasthelpers downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcasthelpers upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\nclass Marker extends /* #__PURE__ */ EmitterMixin(TypeCheckable) {\n    /**\n     * Creates a marker instance.\n     *\n     * @param name Marker name.\n     * @param liveRange Range marked by the marker.\n     * @param managedUsingOperations Specifies whether the marker is managed using operations.\n     * @param affectsData Specifies whether the marker affects the data produced by the data pipeline (is persisted in the editor's data).\n     */\n    constructor(name, liveRange, managedUsingOperations, affectsData) {\n        super();\n        this.name = name;\n        this._liveRange = this._attachLiveRange(liveRange);\n        this._managedUsingOperations = managedUsingOperations;\n        this._affectsData = affectsData;\n    }\n    /**\n     * A value indicating if the marker is managed using operations.\n     * See {@link ~Marker marker class description} to learn more about marker types.\n     * See {@link module:engine/model/writer~Writer#addMarker}.\n     */\n    get managedUsingOperations() {\n        if (!this._liveRange) {\n            throw new CKEditorError('marker-destroyed', this);\n        }\n        return this._managedUsingOperations;\n    }\n    /**\n     * A value indicating if the marker changes the data.\n     */\n    get affectsData() {\n        if (!this._liveRange) {\n            throw new CKEditorError('marker-destroyed', this);\n        }\n        return this._affectsData;\n    }\n    /**\n     * Returns the marker data (properties defining the marker).\n     */\n    getData() {\n        return {\n            range: this.getRange(),\n            affectsData: this.affectsData,\n            managedUsingOperations: this.managedUsingOperations\n        };\n    }\n    /**\n     * Returns current marker start position.\n     */\n    getStart() {\n        if (!this._liveRange) {\n            throw new CKEditorError('marker-destroyed', this);\n        }\n        return this._liveRange.start.clone();\n    }\n    /**\n     * Returns current marker end position.\n     */\n    getEnd() {\n        if (!this._liveRange) {\n            throw new CKEditorError('marker-destroyed', this);\n        }\n        return this._liveRange.end.clone();\n    }\n    /**\n     * Returns a range that represents the current state of the marker.\n     *\n     * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n     * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n     * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n     * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n     * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n     * that it's data is up-to-date.\n     */\n    getRange() {\n        if (!this._liveRange) {\n            throw new CKEditorError('marker-destroyed', this);\n        }\n        return this._liveRange.toRange();\n    }\n    /**\n     * Binds new live range to the marker and detach the old one if is attached.\n     *\n     * @internal\n     * @param liveRange Live range to attach\n     * @returns Attached live range.\n     */\n    _attachLiveRange(liveRange) {\n        if (this._liveRange) {\n            this._detachLiveRange();\n        }\n        // Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n        liveRange.delegate('change:range').to(this);\n        liveRange.delegate('change:content').to(this);\n        this._liveRange = liveRange;\n        return liveRange;\n    }\n    /**\n     * Unbinds and destroys currently attached live range.\n     *\n     * @internal\n     */\n    _detachLiveRange() {\n        this._liveRange.stopDelegating('change:range', this);\n        this._liveRange.stopDelegating('change:content', this);\n        this._liveRange.detach();\n        this._liveRange = null;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nMarker.prototype.is = function (type) {\n    return type === 'marker' || type === 'model:marker';\n};\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/detachoperation\n */\nimport Operation from './operation.js';\nimport Range from '../range.js';\nimport { _remove } from './utils.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const ModelRange = require( '../range' ).default;\n/**\n * Operation to permanently remove node from detached root.\n * Note this operation is only a local operation and won't be send to the other clients.\n */\nexport default class DetachOperation extends Operation {\n    /**\n     * Creates an insert operation.\n     *\n     * @param sourcePosition Position before the first {@link module:engine/model/item~Item model item} to move.\n     * @param howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n     * `sourcePosition` with offset shifted by `howMany`.\n     */\n    constructor(sourcePosition, howMany) {\n        super(null);\n        this.sourcePosition = sourcePosition.clone();\n        this.howMany = howMany;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'detach';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return null;\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.sourcePosition = this.sourcePosition.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        if (this.sourcePosition.root.document) {\n            /**\n             * Cannot detach document node.\n             *\n             * @error detach-operation-on-document-node\n             */\n            throw new CKEditorError('detach-operation-on-document-node', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        _remove(Range._createFromPositionAndShift(this.sourcePosition, this.howMany));\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'DetachOperation';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/documentfragment\n */\nimport TypeCheckable from './typecheckable.js';\nimport Element from './element.js';\nimport NodeList from './nodelist.js';\nimport Text from './text.js';\nimport TextProxy from './textproxy.js';\nimport { isIterable } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const { stringifyMap } = require( '../dev-utils/utils' );\n/**\n * DocumentFragment represents a part of model which does not have a common root but its top-level nodes\n * can be seen as siblings. In other words, it is a detached part of model tree, without a root.\n *\n * DocumentFragment has own {@link module:engine/model/markercollection~MarkerCollection}. Markers from this collection\n * will be set to the {@link module:engine/model/model~Model#markers model markers} by a\n * {@link module:engine/model/writer~Writer#insert} function.\n */\nexport default class DocumentFragment extends TypeCheckable {\n    /**\n     * Creates an empty `DocumentFragment`.\n     *\n     * **Note:** Constructor of this class shouldn't be used directly in the code.\n     * Use the {@link module:engine/model/writer~Writer#createDocumentFragment} method instead.\n     *\n     * @internal\n     * @param children Nodes to be contained inside the `DocumentFragment`.\n     */\n    constructor(children) {\n        super();\n        /**\n         * DocumentFragment static markers map. This is a list of names and {@link module:engine/model/range~Range ranges}\n         * which will be set as Markers to {@link module:engine/model/model~Model#markers model markers collection}\n         * when DocumentFragment will be inserted to the document.\n         */\n        this.markers = new Map();\n        /**\n         * List of nodes contained inside the document fragment.\n         */\n        this._children = new NodeList();\n        if (children) {\n            this._insertChild(0, children);\n        }\n    }\n    /**\n     * Returns an iterator that iterates over all nodes contained inside this document fragment.\n     */\n    [Symbol.iterator]() {\n        return this.getChildren();\n    }\n    /**\n     * Number of this document fragment's children.\n     */\n    get childCount() {\n        return this._children.length;\n    }\n    /**\n     * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this document fragment's children.\n     */\n    get maxOffset() {\n        return this._children.maxOffset;\n    }\n    /**\n     * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n     */\n    get isEmpty() {\n        return this.childCount === 0;\n    }\n    /**\n     * Artificial next sibling. Returns `null`. Added for compatibility reasons.\n     */\n    get nextSibling() {\n        return null;\n    }\n    /**\n     * Artificial previous sibling. Returns `null`. Added for compatibility reasons.\n     */\n    get previousSibling() {\n        return null;\n    }\n    /**\n     * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n     */\n    get root() {\n        return this;\n    }\n    /**\n     * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n     */\n    get parent() {\n        return null;\n    }\n    /**\n     * Artificial owner of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n     */\n    get document() {\n        return null;\n    }\n    /**\n     * Returns `false` as `DocumentFragment` by definition is not attached to a document. Added for compatibility reasons.\n     */\n    isAttached() {\n        return false;\n    }\n    /**\n     * Returns empty array. Added for compatibility reasons.\n     */\n    getAncestors() {\n        return [];\n    }\n    /**\n     * Gets the child at the given index. Returns `null` if incorrect index was passed.\n     *\n     * @param index Index in this document fragment.\n     * @returns Child node.\n     */\n    getChild(index) {\n        return this._children.getNode(index);\n    }\n    /**\n     * Gets the child at the given offset. Returns `null` if incorrect index was passed.\n     *\n     * @param offset Offset in this document fragment.\n     * @returns Child node.\n     */\n    getChildAtOffset(offset) {\n        return this._children.getNodeAtOffset(offset);\n    }\n    /**\n     * Returns an iterator that iterates over all of this document fragment's children.\n     */\n    getChildren() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Returns an index of the given child node. Returns `null` if given node is not a child of this document fragment.\n     *\n     * @param node Child node to look for.\n     * @returns Child node's index.\n     */\n    getChildIndex(node) {\n        return this._children.getNodeIndex(node);\n    }\n    /**\n     * Returns the starting offset of given child. Starting offset is equal to the sum of\n     * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n     * given node is not a child of this document fragment.\n     *\n     * @param node Child node to look for.\n     * @returns Child node's starting offset.\n     */\n    getChildStartOffset(node) {\n        return this._children.getNodeStartOffset(node);\n    }\n    /**\n     * Returns path to a `DocumentFragment`, which is an empty array. Added for compatibility reasons.\n     */\n    getPath() {\n        return [];\n    }\n    /**\n     * Returns a descendant node by its path relative to this element.\n     *\n     * ```ts\n     * // <this>a<b>c</b></this>\n     * this.getNodeByPath( [ 0 ] );     // -> \"a\"\n     * this.getNodeByPath( [ 1 ] );     // -> <b>\n     * this.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n     * ```\n     *\n     * @param relativePath Path of the node to find, relative to this element.\n     */\n    getNodeByPath(relativePath) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let node = this;\n        for (const offset of relativePath) {\n            node = node.getChildAtOffset(offset);\n        }\n        return node;\n    }\n    /**\n     * Converts offset \"position\" to index \"position\".\n     *\n     * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n     * too high, returns index after last child.\n     *\n     * ```ts\n     * const textNode = new Text( 'foo' );\n     * const pElement = new Element( 'p' );\n     * const docFrag = new DocumentFragment( [ textNode, pElement ] );\n     * docFrag.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n     * docFrag.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n     * docFrag.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n     * docFrag.offsetToIndex( 2 ); // Returns 0.\n     * docFrag.offsetToIndex( 3 ); // Returns 1.\n     * docFrag.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n     * ```\n     *\n     * @param offset Offset to look for.\n     * @returns Index of a node that occupies given offset.\n     */\n    offsetToIndex(offset) {\n        return this._children.offsetToIndex(offset);\n    }\n    /**\n     * Converts `DocumentFragment` instance to plain object and returns it.\n     * Takes care of converting all of this document fragment's children.\n     *\n     * @returns `DocumentFragment` instance converted to plain object.\n     */\n    toJSON() {\n        const json = [];\n        for (const node of this._children) {\n            json.push(node.toJSON());\n        }\n        return json;\n    }\n    /**\n     * Creates a `DocumentFragment` instance from given plain object (i.e. parsed JSON string).\n     * Converts `DocumentFragment` children to proper nodes.\n     *\n     * @param json Plain object to be converted to `DocumentFragment`.\n     * @returns `DocumentFragment` instance created using given plain object.\n     */\n    static fromJSON(json) {\n        const children = [];\n        for (const child of json) {\n            if (child.name) {\n                // If child has name property, it is an Element.\n                children.push(Element.fromJSON(child));\n            }\n            else {\n                // Otherwise, it is a Text node.\n                children.push(Text.fromJSON(child));\n            }\n        }\n        return new DocumentFragment(children);\n    }\n    /**\n     * {@link #_insertChild Inserts} one or more nodes at the end of this document fragment.\n     *\n     * @internal\n     * @param items Items to be inserted.\n     */\n    _appendChild(items) {\n        this._insertChild(this.childCount, items);\n    }\n    /**\n     * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n     * to this document fragment.\n     *\n     * @internal\n     * @param index Index at which nodes should be inserted.\n     * @param items Items to be inserted.\n     */\n    _insertChild(index, items) {\n        const nodes = normalize(items);\n        for (const node of nodes) {\n            // If node that is being added to this element is already inside another element, first remove it from the old parent.\n            if (node.parent !== null) {\n                node._remove();\n            }\n            node.parent = this;\n        }\n        this._children._insertNodes(index, nodes);\n    }\n    /**\n     * Removes one or more nodes starting at the given index\n     * and sets {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n     *\n     * @internal\n     * @param index Index of the first node to remove.\n     * @param howMany Number of nodes to remove.\n     * @returns Array containing removed nodes.\n     */\n    _removeChildren(index, howMany = 1) {\n        const nodes = this._children._removeNodes(index, howMany);\n        for (const node of nodes) {\n            node.parent = null;\n        }\n        return nodes;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nDocumentFragment.prototype.is = function (type) {\n    return type === 'documentFragment' || type === 'model:documentFragment';\n};\n/**\n * Converts strings to Text and non-iterables to arrays.\n */\nfunction normalize(nodes) {\n    // Separate condition because string is iterable.\n    if (typeof nodes == 'string') {\n        return [new Text(nodes)];\n    }\n    if (!isIterable(nodes)) {\n        nodes = [nodes];\n    }\n    // Array.from to enable .map() on non-arrays.\n    return Array.from(nodes)\n        .map(node => {\n        if (typeof node == 'string') {\n            return new Text(node);\n        }\n        if (node instanceof TextProxy) {\n            return new Text(node.data, node.getAttributes());\n        }\n        return node;\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/writer\n */\nimport AttributeOperation from './operation/attributeoperation.js';\nimport DetachOperation from './operation/detachoperation.js';\nimport InsertOperation from './operation/insertoperation.js';\nimport MarkerOperation from './operation/markeroperation.js';\nimport MergeOperation from './operation/mergeoperation.js';\nimport MoveOperation from './operation/moveoperation.js';\nimport RenameOperation from './operation/renameoperation.js';\nimport RootAttributeOperation from './operation/rootattributeoperation.js';\nimport RootOperation from './operation/rootoperation.js';\nimport SplitOperation from './operation/splitoperation.js';\nimport DocumentFragment from './documentfragment.js';\nimport DocumentSelection from './documentselection.js';\nimport Element from './element.js';\nimport Position from './position.js';\nimport Range from './range.js';\nimport RootElement from './rootelement.js';\nimport Text from './text.js';\nimport { CKEditorError, logWarning, toMap } from '@ckeditor/ckeditor5-utils';\n/**\n * The model can only be modified by using the writer. It should be used whenever you want to create a node, modify\n * child nodes, attributes or text, set the selection's position and its attributes.\n *\n * The instance of the writer is only available in the {@link module:engine/model/model~Model#change `change()`} or\n * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`}.\n *\n * ```ts\n * model.change( writer => {\n * \twriter.insertText( 'foo', paragraph, 'end' );\n * } );\n * ```\n *\n * Note that the writer should never be stored and used outside of the `change()` and\n * `enqueueChange()` blocks.\n *\n * Note that writer's methods do not check the {@link module:engine/model/schema~Schema}. It is possible\n * to create incorrect model structures by using the writer. Read more about in\n * {@glink framework/deep-dive/schema#who-checks-the-schema \"Who checks the schema?\"}.\n *\n * @see module:engine/model/model~Model#change\n * @see module:engine/model/model~Model#enqueueChange\n */\nexport default class Writer {\n    /**\n     * Creates a writer instance.\n     *\n     * **Note:** It is not recommended to use it directly. Use {@link module:engine/model/model~Model#change `Model#change()`} or\n     * {@link module:engine/model/model~Model#enqueueChange `Model#enqueueChange()`} instead.\n     *\n     * @internal\n     */\n    constructor(model, batch) {\n        this.model = model;\n        this.batch = batch;\n    }\n    /**\n     * Creates a new {@link module:engine/model/text~Text text node}.\n     *\n     * ```ts\n     * writer.createText( 'foo' );\n     * writer.createText( 'foo', { bold: true } );\n     * ```\n     *\n     * @param data Text data.\n     * @param attributes Text attributes.\n     * @returns {module:engine/model/text~Text} Created text node.\n     */\n    createText(data, attributes) {\n        return new Text(data, attributes);\n    }\n    /**\n     * Creates a new {@link module:engine/model/element~Element element}.\n     *\n     * ```ts\n     * writer.createElement( 'paragraph' );\n     * writer.createElement( 'paragraph', { alignment: 'center' } );\n     * ```\n     *\n     * @param name Name of the element.\n     * @param attributes Elements attributes.\n     * @returns Created element.\n     */\n    createElement(name, attributes) {\n        return new Element(name, attributes);\n    }\n    /**\n     * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n     *\n     * @returns Created document fragment.\n     */\n    createDocumentFragment() {\n        return new DocumentFragment();\n    }\n    /**\n     * Creates a copy of the element and returns it. Created element has the same name and attributes as the original element.\n     * If clone is deep, the original element's children are also cloned. If not, then empty element is returned.\n     *\n     * @param element The element to clone.\n     * @param deep If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any child.\n     */\n    cloneElement(element, deep = true) {\n        return element._clone(deep);\n    }\n    /**\n     * Inserts item on given position.\n     *\n     * ```ts\n     * const paragraph = writer.createElement( 'paragraph' );\n     * writer.insert( paragraph, position );\n     * ```\n     *\n     * Instead of using position you can use parent and offset:\n     *\n     * ```ts\n     * const text = writer.createText( 'foo' );\n     * writer.insert( text, paragraph, 5 );\n     * ```\n     *\n     * You can also use `end` instead of the offset to insert at the end:\n     *\n     * ```ts\n     * const text = writer.createText( 'foo' );\n     * writer.insert( text, paragraph, 'end' );\n     * ```\n     *\n     * Or insert before or after another element:\n     *\n     * ```ts\n     * const paragraph = writer.createElement( 'paragraph' );\n     * writer.insert( paragraph, anotherParagraph, 'after' );\n     * ```\n     *\n     * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n     *\n     * Note that if the item already has parent it will be removed from the previous parent.\n     *\n     * Note that you cannot re-insert a node from a document to a different document or a document fragment. In this case,\n     * `model-writer-insert-forbidden-move` is thrown.\n     *\n     * If you want to move {@link module:engine/model/range~Range range} instead of an\n     * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n     *\n     * **Note:** For a paste-like content insertion mechanism see\n     * {@link module:engine/model/model~Model#insertContent `model.insertContent()`}.\n     *\n     * @param item Item or document fragment to insert.\n     * @param offset Offset or one of the flags. Used only when second parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    insert(item, itemOrPosition, offset = 0) {\n        this._assertWriterUsedCorrectly();\n        if (item instanceof Text && item.data == '') {\n            return;\n        }\n        const position = Position._createAt(itemOrPosition, offset);\n        // If item has a parent already.\n        if (item.parent) {\n            // We need to check if item is going to be inserted within the same document.\n            if (isSameTree(item.root, position.root)) {\n                // If it's we just need to move it.\n                this.move(Range._createOn(item), position);\n                return;\n            }\n            // If it isn't the same root.\n            else {\n                if (item.root.document) {\n                    /**\n                     * Cannot move a node from a document to a different tree.\n                     * It is forbidden to move a node that was already in a document outside of it.\n                     *\n                     * @error model-writer-insert-forbidden-move\n                     */\n                    throw new CKEditorError('model-writer-insert-forbidden-move', this);\n                }\n                else {\n                    // Move between two different document fragments or from document fragment to a document is possible.\n                    // In that case, remove the item from it's original parent.\n                    this.remove(item);\n                }\n            }\n        }\n        const version = position.root.document ? position.root.document.version : null;\n        const insert = new InsertOperation(position, item, version);\n        if (item instanceof Text) {\n            insert.shouldReceiveAttributes = true;\n        }\n        this.batch.addOperation(insert);\n        this.model.applyOperation(insert);\n        // When element is a DocumentFragment we need to move its markers to Document#markers.\n        if (item instanceof DocumentFragment) {\n            for (const [markerName, markerRange] of item.markers) {\n                // We need to migrate marker range from DocumentFragment to Document.\n                const rangeRootPosition = Position._createAt(markerRange.root, 0);\n                const range = new Range(markerRange.start._getCombined(rangeRootPosition, position), markerRange.end._getCombined(rangeRootPosition, position));\n                const options = { range, usingOperation: true, affectsData: true };\n                if (this.model.markers.has(markerName)) {\n                    this.updateMarker(markerName, options);\n                }\n                else {\n                    this.addMarker(markerName, options);\n                }\n            }\n        }\n    }\n    insertText(text, attributes, // Too complicated when not using `any`.\n    itemOrPosition, // Too complicated when not using `any`.\n    offset // Too complicated when not using `any`.\n    ) {\n        if (attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position) {\n            this.insert(this.createText(text), attributes, itemOrPosition);\n        }\n        else {\n            this.insert(this.createText(text, attributes), itemOrPosition, offset);\n        }\n    }\n    insertElement(name, attributes, // Too complicated when not using `any`.\n    itemOrPositionOrOffset, // Too complicated when not using `any`.\n    offset // Too complicated when not using `any`.\n    ) {\n        if (attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position) {\n            this.insert(this.createElement(name), attributes, itemOrPositionOrOffset);\n        }\n        else {\n            this.insert(this.createElement(name, attributes), itemOrPositionOrOffset, offset);\n        }\n    }\n    /**\n     * Inserts item at the end of the given parent.\n     *\n     * ```ts\n     * const paragraph = writer.createElement( 'paragraph' );\n     * writer.append( paragraph, root );\n     * ```\n     *\n     * Note that if the item already has parent it will be removed from the previous parent.\n     *\n     * If you want to move {@link module:engine/model/range~Range range} instead of an\n     * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n     *\n     * @param item Item or document fragment to insert.\n     */\n    append(item, parent) {\n        this.insert(item, parent, 'end');\n    }\n    appendText(text, attributes, parent) {\n        if (attributes instanceof DocumentFragment || attributes instanceof Element) {\n            this.insert(this.createText(text), attributes, 'end');\n        }\n        else {\n            this.insert(this.createText(text, attributes), parent, 'end');\n        }\n    }\n    appendElement(name, attributes, parent) {\n        if (attributes instanceof DocumentFragment || attributes instanceof Element) {\n            this.insert(this.createElement(name), attributes, 'end');\n        }\n        else {\n            this.insert(this.createElement(name, attributes), parent, 'end');\n        }\n    }\n    /**\n     * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}\n     * or on a {@link module:engine/model/range~Range range}.\n     *\n     * @param key Attribute key.\n     * @param value Attribute new value.\n     * @param itemOrRange Model item or range on which the attribute will be set.\n     */\n    setAttribute(key, value, itemOrRange) {\n        this._assertWriterUsedCorrectly();\n        if (itemOrRange instanceof Range) {\n            const ranges = itemOrRange.getMinimalFlatRanges();\n            for (const range of ranges) {\n                setAttributeOnRange(this, key, value, range);\n            }\n        }\n        else {\n            setAttributeOnItem(this, key, value, itemOrRange);\n        }\n    }\n    /**\n     * Sets values of attributes on a {@link module:engine/model/item~Item model item}\n     * or on a {@link module:engine/model/range~Range range}.\n     *\n     * ```ts\n     * writer.setAttributes( {\n     * \tbold: true,\n     * \titalic: true\n     * }, range );\n     * ```\n     *\n     * @param attributes Attributes keys and values.\n     * @param itemOrRange Model item or range on which the attributes will be set.\n     */\n    setAttributes(attributes, itemOrRange) {\n        for (const [key, val] of toMap(attributes)) {\n            this.setAttribute(key, val, itemOrRange);\n        }\n    }\n    /**\n     * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}\n     * or from a {@link module:engine/model/range~Range range}.\n     *\n     * @param key Attribute key.\n     * @param itemOrRange Model item or range from which the attribute will be removed.\n     */\n    removeAttribute(key, itemOrRange) {\n        this._assertWriterUsedCorrectly();\n        if (itemOrRange instanceof Range) {\n            const ranges = itemOrRange.getMinimalFlatRanges();\n            for (const range of ranges) {\n                setAttributeOnRange(this, key, null, range);\n            }\n        }\n        else {\n            setAttributeOnItem(this, key, null, itemOrRange);\n        }\n    }\n    /**\n     * Removes all attributes from all elements in the range or from the given item.\n     *\n     * @param itemOrRange Model item or range from which all attributes will be removed.\n     */\n    clearAttributes(itemOrRange) {\n        this._assertWriterUsedCorrectly();\n        const removeAttributesFromItem = (item) => {\n            for (const attribute of item.getAttributeKeys()) {\n                this.removeAttribute(attribute, item);\n            }\n        };\n        if (!(itemOrRange instanceof Range)) {\n            removeAttributesFromItem(itemOrRange);\n        }\n        else {\n            for (const item of itemOrRange.getItems()) {\n                removeAttributesFromItem(item);\n            }\n        }\n    }\n    /**\n     * Moves all items in the source range to the target position.\n     *\n     * ```ts\n     * writer.move( sourceRange, targetPosition );\n     * ```\n     *\n     * Instead of the target position you can use parent and offset or define that range should be moved to the end\n     * or before or after chosen item:\n     *\n     * ```ts\n     * // Moves all items in the range to the paragraph at offset 5:\n     * writer.move( sourceRange, paragraph, 5 );\n     * // Moves all items in the range to the end of a blockquote:\n     * writer.move( sourceRange, blockquote, 'end' );\n     * // Moves all items in the range to a position after an image:\n     * writer.move( sourceRange, image, 'after' );\n     * ```\n     *\n     * These parameters work the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n     *\n     * Note that items can be moved only within the same tree. It means that you can move items within the same root\n     * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},\n     * but you can not move items from document fragment to the document or from one detached element to another. Use\n     * {@link module:engine/model/writer~Writer#insert} in such cases.\n     *\n     * @param range Source range.\n     * @param offset Offset or one of the flags. Used only when second parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    move(range, itemOrPosition, offset) {\n        this._assertWriterUsedCorrectly();\n        if (!(range instanceof Range)) {\n            /**\n             * Invalid range to move.\n             *\n             * @error writer-move-invalid-range\n             */\n            throw new CKEditorError('writer-move-invalid-range', this);\n        }\n        if (!range.isFlat) {\n            /**\n             * Range to move is not flat.\n             *\n             * @error writer-move-range-not-flat\n             */\n            throw new CKEditorError('writer-move-range-not-flat', this);\n        }\n        const position = Position._createAt(itemOrPosition, offset);\n        // Do not move anything if the move target is same as moved range start.\n        if (position.isEqual(range.start)) {\n            return;\n        }\n        // If part of the marker is removed, create additional marker operation for undo purposes.\n        this._addOperationForAffectedMarkers('move', range);\n        if (!isSameTree(range.root, position.root)) {\n            /**\n             * Range is going to be moved within not the same document. Please use\n             * {@link module:engine/model/writer~Writer#insert insert} instead.\n             *\n             * @error writer-move-different-document\n             */\n            throw new CKEditorError('writer-move-different-document', this);\n        }\n        const version = range.root.document ? range.root.document.version : null;\n        const operation = new MoveOperation(range.start, range.end.offset - range.start.offset, position, version);\n        this.batch.addOperation(operation);\n        this.model.applyOperation(operation);\n    }\n    /**\n     * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.\n     *\n     * @param itemOrRange Model item or range to remove.\n     */\n    remove(itemOrRange) {\n        this._assertWriterUsedCorrectly();\n        const rangeToRemove = itemOrRange instanceof Range ? itemOrRange : Range._createOn(itemOrRange);\n        const ranges = rangeToRemove.getMinimalFlatRanges().reverse();\n        for (const flat of ranges) {\n            // If part of the marker is removed, create additional marker operation for undo purposes.\n            this._addOperationForAffectedMarkers('move', flat);\n            applyRemoveOperation(flat.start, flat.end.offset - flat.start.offset, this.batch, this.model);\n        }\n    }\n    /**\n     * Merges two siblings at the given position.\n     *\n     * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or\n     * `writer-merge-no-element-after` error will be thrown.\n     *\n     * @param position Position between merged elements.\n     */\n    merge(position) {\n        this._assertWriterUsedCorrectly();\n        const nodeBefore = position.nodeBefore;\n        const nodeAfter = position.nodeAfter;\n        // If part of the marker is removed, create additional marker operation for undo purposes.\n        this._addOperationForAffectedMarkers('merge', position);\n        if (!(nodeBefore instanceof Element)) {\n            /**\n             * Node before merge position must be an element.\n             *\n             * @error writer-merge-no-element-before\n             */\n            throw new CKEditorError('writer-merge-no-element-before', this);\n        }\n        if (!(nodeAfter instanceof Element)) {\n            /**\n             * Node after merge position must be an element.\n             *\n             * @error writer-merge-no-element-after\n             */\n            throw new CKEditorError('writer-merge-no-element-after', this);\n        }\n        if (!position.root.document) {\n            this._mergeDetached(position);\n        }\n        else {\n            this._merge(position);\n        }\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createPositionFromPath `Model#createPositionFromPath()`}.\n     *\n     * @param root Root of the position.\n     * @param path Position path. See {@link module:engine/model/position~Position#path}.\n     * @param stickiness Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n     */\n    createPositionFromPath(root, path, stickiness) {\n        return this.model.createPositionFromPath(root, path, stickiness);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}.\n     *\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    createPositionAt(itemOrPosition, offset) {\n        return this.model.createPositionAt(itemOrPosition, offset);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createPositionAfter `Model#createPositionAfter()`}.\n     *\n     * @param item Item after which the position should be placed.\n     */\n    createPositionAfter(item) {\n        return this.model.createPositionAfter(item);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createPositionBefore `Model#createPositionBefore()`}.\n     *\n     * @param item Item after which the position should be placed.\n     */\n    createPositionBefore(item) {\n        return this.model.createPositionBefore(item);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createRange `Model#createRange()`}.\n     *\n     * @param start Start position.\n     * @param end End position. If not set, range will be collapsed at `start` position.\n     */\n    createRange(start, end) {\n        return this.model.createRange(start, end);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createRangeIn `Model#createRangeIn()`}.\n     *\n     * @param element Element which is a parent for the range.\n     */\n    createRangeIn(element) {\n        return this.model.createRangeIn(element);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createRangeOn `Model#createRangeOn()`}.\n     *\n     * @param element Element which is a parent for the range.\n     */\n    createRangeOn(element) {\n        return this.model.createRangeOn(element);\n    }\n    createSelection(...args) {\n        return this.model.createSelection(...args);\n    }\n    /**\n     * Performs merge action in a detached tree.\n     *\n     * @param position Position between merged elements.\n     */\n    _mergeDetached(position) {\n        const nodeBefore = position.nodeBefore;\n        const nodeAfter = position.nodeAfter;\n        this.move(Range._createIn(nodeAfter), Position._createAt(nodeBefore, 'end'));\n        this.remove(nodeAfter);\n    }\n    /**\n     * Performs merge action in a non-detached tree.\n     *\n     * @param position Position between merged elements.\n     */\n    _merge(position) {\n        const targetPosition = Position._createAt(position.nodeBefore, 'end');\n        const sourcePosition = Position._createAt(position.nodeAfter, 0);\n        const graveyard = position.root.document.graveyard;\n        const graveyardPosition = new Position(graveyard, [0]);\n        const version = position.root.document.version;\n        const merge = new MergeOperation(sourcePosition, position.nodeAfter.maxOffset, targetPosition, graveyardPosition, version);\n        this.batch.addOperation(merge);\n        this.model.applyOperation(merge);\n    }\n    /**\n     * Renames the given element.\n     *\n     * @param element The element to rename.\n     * @param newName New element name.\n     */\n    rename(element, newName) {\n        this._assertWriterUsedCorrectly();\n        if (!(element instanceof Element)) {\n            /**\n             * Trying to rename an object which is not an instance of Element.\n             *\n             * @error writer-rename-not-element-instance\n             */\n            throw new CKEditorError('writer-rename-not-element-instance', this);\n        }\n        const version = element.root.document ? element.root.document.version : null;\n        const renameOperation = new RenameOperation(Position._createBefore(element), element.name, newName, version);\n        this.batch.addOperation(renameOperation);\n        this.model.applyOperation(renameOperation);\n    }\n    /**\n     * Splits elements starting from the given position and going to the top of the model tree as long as given\n     * `limitElement` is reached. When `limitElement` is not defined then only the parent of the given position will be split.\n     *\n     * The element needs to have a parent. It cannot be a root element nor a document fragment.\n     * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.\n     *\n     * @param position Position of split.\n     * @param limitElement Stop splitting when this element will be reached.\n     * @returns Split result with properties:\n     * * `position` - Position between split elements.\n     * * `range` - Range that stars from the end of the first split element and ends at the beginning of the first copy element.\n     */\n    split(position, limitElement) {\n        this._assertWriterUsedCorrectly();\n        let splitElement = position.parent;\n        if (!splitElement.parent) {\n            /**\n             * Element with no parent can not be split.\n             *\n             * @error writer-split-element-no-parent\n             */\n            throw new CKEditorError('writer-split-element-no-parent', this);\n        }\n        // When limit element is not defined lets set splitElement parent as limit.\n        if (!limitElement) {\n            limitElement = splitElement.parent;\n        }\n        if (!position.parent.getAncestors({ includeSelf: true }).includes(limitElement)) {\n            /**\n             * Limit element is not a position ancestor.\n             *\n             * @error writer-split-invalid-limit-element\n             */\n            throw new CKEditorError('writer-split-invalid-limit-element', this);\n        }\n        // We need to cache elements that will be created as a result of the first split because\n        // we need to create a range from the end of the first split element to the beginning of the\n        // first copy element. This should be handled by LiveRange but it doesn't work on detached nodes.\n        let firstSplitElement;\n        let firstCopyElement;\n        do {\n            const version = splitElement.root.document ? splitElement.root.document.version : null;\n            const howMany = splitElement.maxOffset - position.offset;\n            const insertionPosition = SplitOperation.getInsertionPosition(position);\n            const split = new SplitOperation(position, howMany, insertionPosition, null, version);\n            this.batch.addOperation(split);\n            this.model.applyOperation(split);\n            // Cache result of the first split.\n            if (!firstSplitElement && !firstCopyElement) {\n                firstSplitElement = splitElement;\n                firstCopyElement = position.parent.nextSibling;\n            }\n            position = this.createPositionAfter(position.parent);\n            splitElement = position.parent;\n        } while (splitElement !== limitElement);\n        return {\n            position,\n            range: new Range(Position._createAt(firstSplitElement, 'end'), Position._createAt(firstCopyElement, 0))\n        };\n    }\n    /**\n     * Wraps the given range with the given element or with a new element (if a string was passed).\n     *\n     * **Note:** range to wrap should be a \"flat range\" (see {@link module:engine/model/range~Range#isFlat `Range#isFlat`}).\n     * If not, an error will be thrown.\n     *\n     * @param range Range to wrap.\n     * @param elementOrString Element or name of element to wrap the range with.\n     */\n    wrap(range, elementOrString) {\n        this._assertWriterUsedCorrectly();\n        if (!range.isFlat) {\n            /**\n             * Range to wrap is not flat.\n             *\n             * @error writer-wrap-range-not-flat\n             */\n            throw new CKEditorError('writer-wrap-range-not-flat', this);\n        }\n        const element = elementOrString instanceof Element ? elementOrString : new Element(elementOrString);\n        if (element.childCount > 0) {\n            /**\n             * Element to wrap with is not empty.\n             *\n             * @error writer-wrap-element-not-empty\n             */\n            throw new CKEditorError('writer-wrap-element-not-empty', this);\n        }\n        if (element.parent !== null) {\n            /**\n             * Element to wrap with is already attached to a tree model.\n             *\n             * @error writer-wrap-element-attached\n             */\n            throw new CKEditorError('writer-wrap-element-attached', this);\n        }\n        this.insert(element, range.start);\n        // Shift the range-to-wrap because we just inserted an element before that range.\n        const shiftedRange = new Range(range.start.getShiftedBy(1), range.end.getShiftedBy(1));\n        this.move(shiftedRange, Position._createAt(element, 0));\n    }\n    /**\n     * Unwraps children of the given element – all its children are moved before it and then the element is removed.\n     * Throws error if you try to unwrap an element which does not have a parent.\n     *\n     * @param element Element to unwrap.\n     */\n    unwrap(element) {\n        this._assertWriterUsedCorrectly();\n        if (element.parent === null) {\n            /**\n             * Trying to unwrap an element which has no parent.\n             *\n             * @error writer-unwrap-element-no-parent\n             */\n            throw new CKEditorError('writer-unwrap-element-no-parent', this);\n        }\n        this.move(Range._createIn(element), this.createPositionAfter(element));\n        this.remove(element);\n    }\n    /**\n     * Adds a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n     * changes in the document and updates its range automatically, when model tree changes.\n     *\n     * As the first parameter you can set marker name.\n     *\n     * The required `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See\n     * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n     * markers managed by operations and not-managed by operations.\n     *\n     * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n     * `true` when the marker change changes the data returned by the\n     * {@link module:core/editor/editor~Editor#getData `editor.getData()`} method.\n     * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n     * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n     *\n     * Create marker directly base on marker's name:\n     *\n     * ```ts\n     * addMarker( markerName, { range, usingOperation: false } );\n     * ```\n     *\n     * Create marker using operation:\n     *\n     * ```ts\n     * addMarker( markerName, { range, usingOperation: true } );\n     * ```\n     *\n     * Create marker that affects the editor data:\n     *\n     * ```ts\n     * addMarker( markerName, { range, usingOperation: false, affectsData: true } );\n     * ```\n     *\n     * Note: For efficiency reasons, it's best to create and keep as little markers as possible.\n     *\n     * @see module:engine/model/markercollection~Marker\n     * @param name Name of a marker to create - must be unique.\n     * @param options.usingOperation Flag indicating that the marker should be added by MarkerOperation.\n     * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n     * @param options.range Marker range.\n     * @param options.affectsData Flag indicating that the marker changes the editor data.\n     * @returns Marker that was set.\n     */\n    addMarker(name, options) {\n        this._assertWriterUsedCorrectly();\n        if (!options || typeof options.usingOperation != 'boolean') {\n            /**\n             * The `options.usingOperation` parameter is required when adding a new marker.\n             *\n             * @error writer-addmarker-no-usingoperation\n             */\n            throw new CKEditorError('writer-addmarker-no-usingoperation', this);\n        }\n        const usingOperation = options.usingOperation;\n        const range = options.range;\n        const affectsData = options.affectsData === undefined ? false : options.affectsData;\n        if (this.model.markers.has(name)) {\n            /**\n             * Marker with provided name already exists.\n             *\n             * @error writer-addmarker-marker-exists\n             */\n            throw new CKEditorError('writer-addmarker-marker-exists', this);\n        }\n        if (!range) {\n            /**\n             * Range parameter is required when adding a new marker.\n             *\n             * @error writer-addmarker-no-range\n             */\n            throw new CKEditorError('writer-addmarker-no-range', this);\n        }\n        if (!usingOperation) {\n            return this.model.markers._set(name, range, usingOperation, affectsData);\n        }\n        applyMarkerOperation(this, name, null, range, affectsData);\n        return this.model.markers.get(name);\n    }\n    /**\n     * Adds, updates or refreshes a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n     * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the\n     * marker's range directly using this method.\n     *\n     * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique\n     * name is created and returned.\n     *\n     * **Note**: If you want to change the {@link module:engine/view/element~Element view element} of the marker while its data in the model\n     * remains the same, use the dedicated {@link module:engine/controller/editingcontroller~EditingController#reconvertMarker} method.\n     *\n     * The `options.usingOperation` parameter lets you change if the marker should be managed by operations or not. See\n     * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n     * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.\n     *\n     * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n     * `true` when the marker change changes the data returned by\n     * the {@link module:core/editor/editor~Editor#getData `editor.getData()`} method.\n     * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n     * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n     *\n     * Update marker directly base on marker's name:\n     *\n     * ```ts\n     * updateMarker( markerName, { range } );\n     * ```\n     *\n     * Update marker using operation:\n     *\n     * ```ts\n     * updateMarker( marker, { range, usingOperation: true } );\n     * updateMarker( markerName, { range, usingOperation: true } );\n     * ```\n     *\n     * Change marker's option (start using operations to manage it):\n     *\n     * ```ts\n     * updateMarker( marker, { usingOperation: true } );\n     * ```\n     *\n     * Change marker's option (inform the engine, that the marker does not affect the data anymore):\n     *\n     * ```ts\n     * updateMarker( markerName, { affectsData: false } );\n     * ```\n     *\n     * @see module:engine/model/markercollection~Marker\n     * @param markerOrName Name of a marker to update, or a marker instance.\n     * @param options If options object is not defined then marker will be refreshed by triggering\n     * downcast conversion for this marker with the same data.\n     * @param options.range Marker range to update.\n     * @param options.usingOperation Flag indicated whether the marker should be added by MarkerOperation.\n     * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n     * @param options.affectsData Flag indicating that the marker changes the editor data.\n     */\n    updateMarker(markerOrName, options) {\n        this._assertWriterUsedCorrectly();\n        const markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n        const currentMarker = this.model.markers.get(markerName);\n        if (!currentMarker) {\n            /**\n             * Marker with provided name does not exist and will not be updated.\n             *\n             * @error writer-updatemarker-marker-not-exists\n             */\n            throw new CKEditorError('writer-updatemarker-marker-not-exists', this);\n        }\n        if (!options) {\n            /**\n             * The usage of `writer.updateMarker()` only to reconvert (refresh) a\n             * {@link module:engine/model/markercollection~Marker model marker} was deprecated and may not work in the future.\n             * Please update your code to use\n             * {@link module:engine/controller/editingcontroller~EditingController#reconvertMarker `editor.editing.reconvertMarker()`}\n             * instead.\n             *\n             * @error writer-updatemarker-reconvert-using-editingcontroller\n             * @param markerName The name of the updated marker.\n             */\n            logWarning('writer-updatemarker-reconvert-using-editingcontroller', { markerName });\n            this.model.markers._refresh(currentMarker);\n            return;\n        }\n        const hasUsingOperationDefined = typeof options.usingOperation == 'boolean';\n        const affectsDataDefined = typeof options.affectsData == 'boolean';\n        // Use previously defined marker's affectsData if the property is not provided.\n        const affectsData = affectsDataDefined ? options.affectsData : currentMarker.affectsData;\n        if (!hasUsingOperationDefined && !options.range && !affectsDataDefined) {\n            /**\n             * One of the options is required - provide range, usingOperations or affectsData.\n             *\n             * @error writer-updatemarker-wrong-options\n             */\n            throw new CKEditorError('writer-updatemarker-wrong-options', this);\n        }\n        const currentRange = currentMarker.getRange();\n        const updatedRange = options.range ? options.range : currentRange;\n        if (hasUsingOperationDefined && options.usingOperation !== currentMarker.managedUsingOperations) {\n            // The marker type is changed so it's necessary to create proper operations.\n            if (options.usingOperation) {\n                // If marker changes to a managed one treat this as synchronizing existing marker.\n                // Create `MarkerOperation` with `oldRange` set to `null`, so reverse operation will remove the marker.\n                applyMarkerOperation(this, markerName, null, updatedRange, affectsData);\n            }\n            else {\n                // If marker changes to a marker that do not use operations then we need to create additional operation\n                // that removes that marker first.\n                applyMarkerOperation(this, markerName, currentRange, null, affectsData);\n                // Although not managed the marker itself should stay in model and its range should be preserver or changed to passed range.\n                this.model.markers._set(markerName, updatedRange, undefined, affectsData);\n            }\n            return;\n        }\n        // Marker's type doesn't change so update it accordingly.\n        if (currentMarker.managedUsingOperations) {\n            applyMarkerOperation(this, markerName, currentRange, updatedRange, affectsData);\n        }\n        else {\n            this.model.markers._set(markerName, updatedRange, undefined, affectsData);\n        }\n    }\n    /**\n     * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.\n     * The marker is removed accordingly to how it has been created, so if the marker was created using operation,\n     * it will be destroyed using operation.\n     *\n     * @param markerOrName Marker or marker name to remove.\n     */\n    removeMarker(markerOrName) {\n        this._assertWriterUsedCorrectly();\n        const name = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n        if (!this.model.markers.has(name)) {\n            /**\n             * Trying to remove marker which does not exist.\n             *\n             * @error writer-removemarker-no-marker\n             */\n            throw new CKEditorError('writer-removemarker-no-marker', this);\n        }\n        const marker = this.model.markers.get(name);\n        if (!marker.managedUsingOperations) {\n            this.model.markers._remove(name);\n            return;\n        }\n        const oldRange = marker.getRange();\n        applyMarkerOperation(this, name, oldRange, null, marker.affectsData);\n    }\n    /**\n     * Adds a new root to the document (or re-attaches a {@link #detachRoot detached root}).\n     *\n     * Throws an error, if trying to add a root that is already added and attached.\n     *\n     * @param rootName Name of the added root.\n     * @param elementName The element name. Defaults to `'$root'` which also has some basic schema defined\n     * (e.g. `$block` elements are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\n     * @returns The added root element.\n     */\n    addRoot(rootName, elementName = '$root') {\n        this._assertWriterUsedCorrectly();\n        const root = this.model.document.getRoot(rootName);\n        if (root && root.isAttached()) {\n            /**\n             * Root with provided name already exists and is attached.\n             *\n             * @error writer-addroot-root-exists\n             */\n            throw new CKEditorError('writer-addroot-root-exists', this);\n        }\n        const document = this.model.document;\n        const operation = new RootOperation(rootName, elementName, true, document, document.version);\n        this.batch.addOperation(operation);\n        this.model.applyOperation(operation);\n        return this.model.document.getRoot(rootName);\n    }\n    /**\n     * Detaches the root from the document.\n     *\n     * All content and markers are removed from the root upon detaching. New content and new markers cannot be added to the root, as long\n     * as it is detached.\n     *\n     * A root cannot be fully removed from the document, it can be only detached. A root is permanently removed only after you\n     * re-initialize the editor and do not specify the root in the initial data.\n     *\n     * A detached root can be re-attached using {@link #addRoot}.\n     *\n     * Throws an error if the root does not exist or the root is already detached.\n     *\n     * @param rootOrName Name of the detached root.\n     */\n    detachRoot(rootOrName) {\n        this._assertWriterUsedCorrectly();\n        const root = typeof rootOrName == 'string' ? this.model.document.getRoot(rootOrName) : rootOrName;\n        if (!root || !root.isAttached()) {\n            /**\n             * Root with provided name does not exist or is already detached.\n             *\n             * @error writer-detachroot-no-root\n             */\n            throw new CKEditorError('writer-detachroot-no-root', this);\n        }\n        // First, remove all markers from the root. It is better to do it before removing stuff for undo purposes.\n        // However, looking through all the markers may not be the best performance wise. But there's no better solution for now.\n        for (const marker of this.model.markers) {\n            if (marker.getRange().root === root) {\n                this.removeMarker(marker);\n            }\n        }\n        // Remove all attributes from the root.\n        for (const key of root.getAttributeKeys()) {\n            this.removeAttribute(key, root);\n        }\n        // Remove all contents of the root.\n        this.remove(this.createRangeIn(root));\n        // Finally, detach the root.\n        const document = this.model.document;\n        const operation = new RootOperation(root.rootName, root.name, false, document, document.version);\n        this.batch.addOperation(operation);\n        this.model.applyOperation(operation);\n    }\n    setSelection(...args) {\n        this._assertWriterUsedCorrectly();\n        this.model.document.selection._setTo(...args);\n    }\n    /**\n     * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n     *\n     * The location can be specified in the same form as\n     * {@link #createPositionAt `writer.createPositionAt()`} parameters.\n     *\n     * @param itemOrPosition\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    setSelectionFocus(itemOrPosition, offset) {\n        this._assertWriterUsedCorrectly();\n        this.model.document.selection._setFocus(itemOrPosition, offset);\n    }\n    setSelectionAttribute(keyOrObjectOrIterable, value) {\n        this._assertWriterUsedCorrectly();\n        if (typeof keyOrObjectOrIterable === 'string') {\n            this._setSelectionAttribute(keyOrObjectOrIterable, value);\n        }\n        else {\n            for (const [key, value] of toMap(keyOrObjectOrIterable)) {\n                this._setSelectionAttribute(key, value);\n            }\n        }\n    }\n    /**\n     * Removes attribute(s) with given key(s) from the selection.\n     *\n     * Remove one attribute:\n     *\n     * ```ts\n     * writer.removeSelectionAttribute( 'italic' );\n     * ```\n     *\n     * Remove multiple attributes:\n     *\n     * ```ts\n     * writer.removeSelectionAttribute( [ 'italic', 'bold' ] );\n     * ```\n     *\n     * @param keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.\n     */\n    removeSelectionAttribute(keyOrIterableOfKeys) {\n        this._assertWriterUsedCorrectly();\n        if (typeof keyOrIterableOfKeys === 'string') {\n            this._removeSelectionAttribute(keyOrIterableOfKeys);\n        }\n        else {\n            for (const key of keyOrIterableOfKeys) {\n                this._removeSelectionAttribute(key);\n            }\n        }\n    }\n    /**\n     * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}\n     * of the selection from left to right.\n     *\n     * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,\n     * then the selection (after being moved by the user) inherits attributes from its left-hand side.\n     * This method allows to temporarily override this behavior by forcing the gravity to the right.\n     *\n     * For the following model fragment:\n     *\n     * ```xml\n     * <$text bold=\"true\" linkHref=\"url\">bar[]</$text><$text bold=\"true\">biz</$text>\n     * ```\n     *\n     * * Default gravity: selection will have the `bold` and `linkHref` attributes.\n     * * Overridden gravity: selection will have `bold` attribute.\n     *\n     * **Note**: It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n     * of the process.\n     *\n     * @returns The unique id which allows restoring the gravity.\n     */\n    overrideSelectionGravity() {\n        return this.model.document.selection._overrideGravity();\n    }\n    /**\n     * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.\n     *\n     * Restoring the gravity is only possible using the unique identifier returned by\n     * {@link ~Writer#overrideSelectionGravity}. Note that the gravity remains overridden as long as won't be restored\n     * the same number of times it was overridden.\n     *\n     * @param uid The unique id returned by {@link ~Writer#overrideSelectionGravity}.\n     */\n    restoreSelectionGravity(uid) {\n        this.model.document.selection._restoreGravity(uid);\n    }\n    /**\n     * @param key Key of the attribute to remove.\n     * @param value Attribute value.\n     */\n    _setSelectionAttribute(key, value) {\n        const selection = this.model.document.selection;\n        // Store attribute in parent element if the selection is collapsed in an empty node.\n        if (selection.isCollapsed && selection.anchor.parent.isEmpty) {\n            const storeKey = DocumentSelection._getStoreAttributeKey(key);\n            this.setAttribute(storeKey, value, selection.anchor.parent);\n        }\n        selection._setAttribute(key, value);\n    }\n    /**\n     * @param key Key of the attribute to remove.\n     */\n    _removeSelectionAttribute(key) {\n        const selection = this.model.document.selection;\n        // Remove stored attribute from parent element if the selection is collapsed in an empty node.\n        if (selection.isCollapsed && selection.anchor.parent.isEmpty) {\n            const storeKey = DocumentSelection._getStoreAttributeKey(key);\n            this.removeAttribute(storeKey, selection.anchor.parent);\n        }\n        selection._removeAttribute(key);\n    }\n    /**\n     * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.\n     */\n    _assertWriterUsedCorrectly() {\n        /**\n         * Trying to use a writer outside a {@link module:engine/model/model~Model#change `change()`} or\n         * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`} blocks.\n         *\n         * The writer can only be used inside these blocks which ensures that the model\n         * can only be changed during such \"sessions\".\n         *\n         * @error writer-incorrect-use\n         */\n        if (this.model._currentWriter !== this) {\n            throw new CKEditorError('writer-incorrect-use', this);\n        }\n    }\n    /**\n     * For given action `type` and `positionOrRange` where the action happens, this function finds all affected markers\n     * and applies a marker operation with the new marker range equal to the current range. Thanks to this, the marker range\n     * can be later correctly processed during undo.\n     *\n     * @param type Writer action type.\n     * @param positionOrRange Position or range where the writer action happens.\n     */\n    _addOperationForAffectedMarkers(type, positionOrRange) {\n        for (const marker of this.model.markers) {\n            if (!marker.managedUsingOperations) {\n                continue;\n            }\n            const markerRange = marker.getRange();\n            let isAffected = false;\n            if (type === 'move') {\n                const range = positionOrRange;\n                isAffected =\n                    range.containsPosition(markerRange.start) ||\n                        range.start.isEqual(markerRange.start) ||\n                        range.containsPosition(markerRange.end) ||\n                        range.end.isEqual(markerRange.end);\n            }\n            else {\n                // if type === 'merge'.\n                const position = positionOrRange;\n                const elementBefore = position.nodeBefore;\n                const elementAfter = position.nodeAfter;\n                //               Start:  <p>Foo[</p><p>Bar]</p>\n                //         After merge:  <p>Foo[Bar]</p>\n                // After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n                //\n                const affectedInLeftElement = markerRange.start.parent == elementBefore && markerRange.start.isAtEnd;\n                //               Start:  <p>[Foo</p><p>]Bar</p>\n                //         After merge:  <p>[Foo]Bar</p>\n                // After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n                //\n                const affectedInRightElement = markerRange.end.parent == elementAfter && markerRange.end.offset == 0;\n                //               Start:  <p>[Foo</p>]<p>Bar</p>\n                //         After merge:  <p>[Foo]Bar</p>\n                // After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n                //\n                const affectedAfterLeftElement = markerRange.end.nodeAfter == elementAfter;\n                //               Start:  <p>Foo</p>[<p>Bar]</p>\n                //         After merge:  <p>Foo[Bar]</p>\n                // After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n                //\n                const affectedBeforeRightElement = markerRange.start.nodeAfter == elementAfter;\n                isAffected = affectedInLeftElement || affectedInRightElement || affectedAfterLeftElement || affectedBeforeRightElement;\n            }\n            if (isAffected) {\n                this.updateMarker(marker.name, { range: markerRange });\n            }\n        }\n    }\n}\n/**\n * Sets given attribute to each node in given range. When attribute value is null then attribute will be removed.\n *\n * Because attribute operation needs to have the same attribute value on the whole range, this function splits\n * the range into smaller parts.\n *\n * Given `range` must be flat.\n */\nfunction setAttributeOnRange(writer, key, value, range) {\n    const model = writer.model;\n    const doc = model.document;\n    // Position of the last split, the beginning of the new range.\n    let lastSplitPosition = range.start;\n    // Currently position in the scanning range. Because we need value after the position, it is not a current\n    // position of the iterator but the previous one (we need to iterate one more time to get the value after).\n    let position;\n    // Value before the currently position.\n    let valueBefore;\n    // Value after the currently position.\n    let valueAfter;\n    for (const val of range.getWalker({ shallow: true })) {\n        valueAfter = val.item.getAttribute(key);\n        // At the first run of the iterator the position in undefined. We also do not have a valueBefore, but\n        // because valueAfter may be null, valueBefore may be equal valueAfter ( undefined == null ).\n        if (position && valueBefore != valueAfter) {\n            // if valueBefore == value there is nothing to change, so we add operation only if these values are different.\n            if (valueBefore != value) {\n                addOperation();\n            }\n            lastSplitPosition = position;\n        }\n        position = val.nextPosition;\n        valueBefore = valueAfter;\n    }\n    // Because position in the loop is not the iterator position (see let position comment), the last position in\n    // the while loop will be last but one position in the range. We need to check the last position manually.\n    if (position instanceof Position && position != lastSplitPosition && valueBefore != value) {\n        addOperation();\n    }\n    function addOperation() {\n        const range = new Range(lastSplitPosition, position);\n        const version = range.root.document ? doc.version : null;\n        const operation = new AttributeOperation(range, key, valueBefore, value, version);\n        writer.batch.addOperation(operation);\n        model.applyOperation(operation);\n    }\n}\n/**\n * Sets given attribute to the given node. When attribute value is null then attribute will be removed.\n */\nfunction setAttributeOnItem(writer, key, value, item) {\n    const model = writer.model;\n    const doc = model.document;\n    const previousValue = item.getAttribute(key);\n    let range, operation;\n    if (previousValue != value) {\n        const isRootChanged = item.root === item;\n        if (isRootChanged) {\n            // If we change attributes of root element, we have to use `RootAttributeOperation`.\n            const version = item.document ? doc.version : null;\n            operation = new RootAttributeOperation(item, key, previousValue, value, version);\n        }\n        else {\n            range = new Range(Position._createBefore(item), writer.createPositionAfter(item));\n            const version = range.root.document ? doc.version : null;\n            operation = new AttributeOperation(range, key, previousValue, value, version);\n        }\n        writer.batch.addOperation(operation);\n        model.applyOperation(operation);\n    }\n}\n/**\n * Creates and applies marker operation to {@link module:engine/model/operation/operation~Operation operation}.\n */\nfunction applyMarkerOperation(writer, name, oldRange, newRange, affectsData) {\n    const model = writer.model;\n    const doc = model.document;\n    const operation = new MarkerOperation(name, oldRange, newRange, model.markers, !!affectsData, doc.version);\n    writer.batch.addOperation(operation);\n    model.applyOperation(operation);\n}\n/**\n * Creates `MoveOperation` or `DetachOperation` that removes `howMany` nodes starting from `position`.\n * The operation will be applied on given model instance and added to given operation instance.\n *\n * @param position Position from which nodes are removed.\n * @param howMany Number of nodes to remove.\n * @param batch Batch to which the operation will be added.\n * @param model Model instance on which operation will be applied.\n */\nfunction applyRemoveOperation(position, howMany, batch, model) {\n    let operation;\n    if (position.root.document) {\n        const doc = model.document;\n        const graveyardPosition = new Position(doc.graveyard, [0]);\n        operation = new MoveOperation(position, howMany, graveyardPosition, doc.version);\n    }\n    else {\n        operation = new DetachOperation(position, howMany);\n    }\n    batch.addOperation(operation);\n    model.applyOperation(operation);\n}\n/**\n * Returns `true` if both root elements are the same element or both are documents root elements.\n *\n * Elements in the same tree can be moved (for instance you can move element form one documents root to another, or\n * within the same document fragment), but when element supposed to be moved from document fragment to the document, or\n * to another document it should be removed and inserted to avoid problems with OT. This is because features like undo or\n * collaboration may track changes on the document but ignore changes on detached fragments and should not get\n * unexpected `move` operation.\n */\nfunction isSameTree(rootA, rootB) {\n    // If it is the same root this is the same tree.\n    if (rootA === rootB) {\n        return true;\n    }\n    // If both roots are documents root it is operation within the document what we still treat as the same tree.\n    if (rootA instanceof RootElement && rootB instanceof RootElement) {\n        return true;\n    }\n    return false;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/deletecontent\n */\nimport DocumentSelection from '../documentselection.js';\nimport LivePosition from '../liveposition.js';\nimport Range from '../range.js';\n/**\n * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n *\n * **Note:** Use {@link module:engine/model/model~Model#deleteContent} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#deleteContent}\n * method's behavior.\n *\n * @param model The model in context of which the insertion should be performed.\n * @param selection Selection of which the content should be deleted.\n * @param options.leaveUnmerged Whether to merge elements after removing the content of the selection.\n *\n * For example `<heading>x[x</heading><paragraph>y]y</paragraph>` will become:\n *\n * * `<heading>x^y</heading>` with the option disabled (`leaveUnmerged == false`)\n * * `<heading>x^</heading><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n *\n * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n * elements will not be merged.\n *\n * @param options.doNotResetEntireContent Whether to skip replacing the entire content with a\n * paragraph when the entire content was selected.\n *\n * For example `<heading>[x</heading><paragraph>y]</paragraph>` will become:\n *\n * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n * * `<heading>^</heading>` with enabled (`doNotResetEntireContent == true`).\n *\n * @param options.doNotAutoparagraph Whether to create a paragraph if after content deletion selection is moved\n * to a place where text cannot be inserted.\n *\n * For example `<paragraph>x</paragraph>[<imageBlock src=\"foo.jpg\"></imageBlock>]` will become:\n *\n * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n * * `<paragraph>x</paragraph>[]` with the option enabled (`doNotAutoparagraph == true`).\n *\n * If you use this option you need to make sure to handle invalid selections yourself or leave\n * them to the selection post-fixer (may not always work).\n *\n * **Note:** If there is no valid position for the selection, the paragraph will always be created:\n *\n * `[<imageBlock src=\"foo.jpg\"></imageBlock>]` -> `<paragraph>[]</paragraph>`.\n */\nexport default function deleteContent(model, selection, options = {}) {\n    if (selection.isCollapsed) {\n        return;\n    }\n    const selRange = selection.getFirstRange();\n    // If the selection is already removed, don't do anything.\n    if (selRange.root.rootName == '$graveyard') {\n        return;\n    }\n    const schema = model.schema;\n    model.change(writer => {\n        // 1. Replace the entire content with paragraph.\n        // See: https://github.com/ckeditor/ckeditor5-engine/issues/1012#issuecomment-315017594.\n        if (!options.doNotResetEntireContent && shouldEntireContentBeReplacedWithParagraph(schema, selection)) {\n            replaceEntireContentWithParagraph(writer, selection);\n            return;\n        }\n        // Collect attributes to copy in case of autoparagraphing.\n        const attributesForAutoparagraph = {};\n        if (!options.doNotAutoparagraph) {\n            const selectedElement = selection.getSelectedElement();\n            if (selectedElement) {\n                Object.assign(attributesForAutoparagraph, schema.getAttributesWithProperty(selectedElement, 'copyOnReplace', true));\n            }\n        }\n        // Get the live positions for the range adjusted to span only blocks selected from the user perspective.\n        const [startPosition, endPosition] = getLivePositionsForSelectedBlocks(selRange);\n        // 2. Remove the content if there is any.\n        if (!startPosition.isTouching(endPosition)) {\n            writer.remove(writer.createRange(startPosition, endPosition));\n        }\n        // 3. Merge elements in the right branch to the elements in the left branch.\n        // The only reasonable (in terms of data and selection correctness) case in which we need to do that is:\n        //\n        // <heading type=1>Fo[</heading><paragraph>]ar</paragraph> => <heading type=1>Fo^ar</heading>\n        //\n        // However, the algorithm supports also merging deeper structures (up to the depth of the shallower branch),\n        // as it's hard to imagine what should actually be the default behavior. Usually, specific features will\n        // want to override that behavior anyway.\n        if (!options.leaveUnmerged) {\n            mergeBranches(writer, startPosition, endPosition);\n            // TMP this will be replaced with a postfixer.\n            // We need to check and strip disallowed attributes in all nested nodes because after merge\n            // some attributes could end up in a path where are disallowed.\n            //\n            // e.g. bold is disallowed for <H1>\n            // <h1>Fo{o</h1><p>b}a<b>r</b><p> -> <h1>Fo{}a<b>r</b><h1> -> <h1>Fo{}ar<h1>.\n            schema.removeDisallowedAttributes(startPosition.parent.getChildren(), writer);\n        }\n        collapseSelectionAt(writer, selection, startPosition);\n        // 4. Add a paragraph to set selection in it.\n        // Check if a text is allowed in the new container. If not, try to create a new paragraph (if it's allowed here).\n        // If autoparagraphing is off, we assume that you know what you do so we leave the selection wherever it was.\n        if (!options.doNotAutoparagraph && shouldAutoparagraph(schema, startPosition)) {\n            insertParagraph(writer, startPosition, selection, attributesForAutoparagraph);\n        }\n        startPosition.detach();\n        endPosition.detach();\n    });\n}\n/**\n * Returns the live positions for the range adjusted to span only blocks selected from the user perspective. Example:\n *\n * ```\n * <heading1>[foo</heading1>\n * <paragraph>bar</paragraph>\n * <heading1>]abc</heading1>  <-- this block is not considered as selected\n * ```\n *\n * This is the same behavior as in Selection#getSelectedBlocks() \"special case\".\n */\nfunction getLivePositionsForSelectedBlocks(range) {\n    const model = range.root.document.model;\n    const startPosition = range.start;\n    let endPosition = range.end;\n    // If the end of selection is at the start position of last block in the selection, then\n    // shrink it to not include that trailing block. Note that this should happen only for not empty selection.\n    if (model.hasContent(range, { ignoreMarkers: true })) {\n        const endBlock = getParentBlock(endPosition);\n        if (endBlock && endPosition.isTouching(model.createPositionAt(endBlock, 0))) {\n            // Create forward selection as a probe to find a valid position after excluding last block from the range.\n            const selection = model.createSelection(range);\n            // Modify the forward selection in backward direction to shrink it and remove first position of following block from it.\n            // This is how modifySelection works and here we are making use of it.\n            model.modifySelection(selection, { direction: 'backward' });\n            const newEndPosition = selection.getLastPosition();\n            // For such a model and selection:\n            //     <paragraph>A[</paragraph><imageBlock></imageBlock><paragraph>]B</paragraph>\n            //\n            // After modifySelection(), we would end up with this:\n            //     <paragraph>A[</paragraph>]<imageBlock></imageBlock><paragraph>B</paragraph>\n            //\n            // So we need to check if there is no content in the skipped range (because we want to include the <imageBlock>).\n            const skippedRange = model.createRange(newEndPosition, endPosition);\n            if (!model.hasContent(skippedRange, { ignoreMarkers: true })) {\n                endPosition = newEndPosition;\n            }\n        }\n    }\n    return [\n        LivePosition.fromPosition(startPosition, 'toPrevious'),\n        LivePosition.fromPosition(endPosition, 'toNext')\n    ];\n}\n/**\n * Finds the lowest element in position's ancestors which is a block.\n * Returns null if a limit element is encountered before reaching a block element.\n */\nfunction getParentBlock(position) {\n    const element = position.parent;\n    const schema = element.root.document.model.schema;\n    const ancestors = element.getAncestors({ parentFirst: true, includeSelf: true });\n    for (const element of ancestors) {\n        if (schema.isLimit(element)) {\n            return null;\n        }\n        if (schema.isBlock(element)) {\n            return element;\n        }\n    }\n}\n/**\n * This function is a result of reaching the Ballmer's peak for just the right amount of time.\n * Even I had troubles documenting it after a while and after reading it again I couldn't believe that it really works.\n */\nfunction mergeBranches(writer, startPosition, endPosition) {\n    const model = writer.model;\n    // Verify if there is a need and possibility to merge.\n    if (!checkShouldMerge(writer.model.schema, startPosition, endPosition)) {\n        return;\n    }\n    // If the start element on the common ancestor level is empty, and the end element on the same level is not empty\n    // then merge those to the right element so that it's properties are preserved (name, attributes).\n    // Because of OT merging is used instead of removing elements.\n    //\n    // Merge left:\n    //     <heading1>foo[</heading1>    ->  <heading1>foo[]bar</heading1>\n    //     <paragraph>]bar</paragraph>  ->               --^\n    //\n    // Merge right:\n    //     <heading1>[</heading1>       ->\n    //     <paragraph>]bar</paragraph>  ->  <paragraph>[]bar</paragraph>\n    //\n    // Merge left:\n    //     <blockQuote>                     ->  <blockQuote>\n    //         <heading1>foo[</heading1>    ->      <heading1>foo[]bar</heading1>\n    //         <paragraph>]bar</paragraph>  ->                   --^\n    //     </blockQuote>                    ->  </blockQuote>\n    //\n    // Merge right:\n    //     <blockQuote>                     ->  <blockQuote>\n    //         <heading1>[</heading1>       ->\n    //         <paragraph>]bar</paragraph>  ->      <paragraph>[]bar</paragraph>\n    //     </blockQuote>                    ->  </blockQuote>\n    // Merging should not go deeper than common ancestor.\n    const [startAncestor, endAncestor] = getAncestorsJustBelowCommonAncestor(startPosition, endPosition);\n    // Branches can't be merged if one of the positions is directly inside a common ancestor.\n    //\n    // Example:\n    //     <blockQuote>\n    //         <paragraph>[foo</paragraph>]\n    //         <table> ... </table>\n    //     <blockQuote>\n    //\n    if (!startAncestor || !endAncestor) {\n        return;\n    }\n    if (!model.hasContent(startAncestor, { ignoreMarkers: true }) && model.hasContent(endAncestor, { ignoreMarkers: true })) {\n        mergeBranchesRight(writer, startPosition, endPosition, startAncestor.parent);\n    }\n    else {\n        mergeBranchesLeft(writer, startPosition, endPosition, startAncestor.parent);\n    }\n}\n/**\n * Merging blocks to the left (properties of the left block are preserved).\n * Simple example:\n *\n * ```\n * <heading1>foo[</heading1>    ->  <heading1>foo[bar</heading1>]\n * <paragraph>]bar</paragraph>  ->              --^\n * ```\n *\n * Nested example:\n *\n * ```\n * <blockQuote>                     ->  <blockQuote>\n *     <heading1>foo[</heading1>    ->      <heading1>foo[bar</heading1>\n * </blockQuote>                    ->  </blockQuote>]    ^\n * <blockBlock>                     ->                    |\n *     <paragraph>]bar</paragraph>  ->                 ---\n * </blockBlock>                    ->\n * ```\n */\nfunction mergeBranchesLeft(writer, startPosition, endPosition, commonAncestor) {\n    const startElement = startPosition.parent;\n    const endElement = endPosition.parent;\n    // Merging reached the common ancestor element, stop here.\n    if (startElement == commonAncestor || endElement == commonAncestor) {\n        return;\n    }\n    // Remember next positions to merge in next recursive step (also used as modification points pointers).\n    startPosition = writer.createPositionAfter(startElement);\n    endPosition = writer.createPositionBefore(endElement);\n    // Move endElement just after startElement if they aren't siblings.\n    if (!endPosition.isEqual(startPosition)) {\n        //\n        //     <blockQuote>                     ->  <blockQuote>\n        //         <heading1>foo[</heading1>    ->      <heading1>foo</heading1>[<paragraph>bar</paragraph>\n        //     </blockQuote>                    ->  </blockQuote>                ^\n        //     <blockBlock>                     ->  <blockBlock>                 |\n        //         <paragraph>]bar</paragraph>  ->      ]                     ---\n        //     </blockBlock>                    ->  </blockBlock>\n        //\n        writer.insert(endElement, startPosition);\n    }\n    // Merge two siblings (nodes on sides of startPosition):\n    //\n    //     <blockQuote>                                             ->  <blockQuote>\n    //         <heading1>foo</heading1>[<paragraph>bar</paragraph>  ->      <heading1>foo[bar</heading1>\n    //     </blockQuote>                                            ->  </blockQuote>\n    //     <blockBlock>                                             ->  <blockBlock>\n    //         ]                                                    ->      ]\n    //     </blockBlock>                                            ->  </blockBlock>\n    //\n    // Or in simple case (without moving elements in above if):\n    //     <heading1>foo</heading1>[<paragraph>bar</paragraph>]  ->  <heading1>foo[bar</heading1>]\n    //\n    writer.merge(startPosition);\n    // Remove empty end ancestors:\n    //\n    //     <blockQuote>                      ->  <blockQuote>\n    //         <heading1>foo[bar</heading1>  ->      <heading1>foo[bar</heading1>\n    //     </blockQuote>                     ->  </blockQuote>\n    //     <blockBlock>                      ->\n    //         ]                             ->  ]\n    //     </blockBlock>                     ->\n    //\n    while (endPosition.parent.isEmpty) {\n        const parentToRemove = endPosition.parent;\n        endPosition = writer.createPositionBefore(parentToRemove);\n        writer.remove(parentToRemove);\n    }\n    // Verify if there is a need and possibility to merge next level.\n    if (!checkShouldMerge(writer.model.schema, startPosition, endPosition)) {\n        return;\n    }\n    // Continue merging next level (blockQuote with blockBlock in the examples above if it would not be empty and got removed).\n    mergeBranchesLeft(writer, startPosition, endPosition, commonAncestor);\n}\n/**\n * Merging blocks to the right (properties of the right block are preserved).\n * Simple example:\n *\n * ```\n * <heading1>foo[</heading1>    ->            --v\n * <paragraph>]bar</paragraph>  ->  [<paragraph>foo]bar</paragraph>\n * ```\n *\n * Nested example:\n *\n * ```\n * <blockQuote>                     ->\n *     <heading1>foo[</heading1>    ->              ---\n * </blockQuote>                    ->                 |\n * <blockBlock>                     ->  [<blockBlock>  v\n *     <paragraph>]bar</paragraph>  ->      <paragraph>foo]bar</paragraph>\n * </blockBlock>                    ->  </blockBlock>\n * ```\n */\nfunction mergeBranchesRight(writer, startPosition, endPosition, commonAncestor) {\n    const startElement = startPosition.parent;\n    const endElement = endPosition.parent;\n    // Merging reached the common ancestor element, stop here.\n    if (startElement == commonAncestor || endElement == commonAncestor) {\n        return;\n    }\n    // Remember next positions to merge in next recursive step (also used as modification points pointers).\n    startPosition = writer.createPositionAfter(startElement);\n    endPosition = writer.createPositionBefore(endElement);\n    // Move startElement just before endElement if they aren't siblings.\n    if (!endPosition.isEqual(startPosition)) {\n        //\n        //     <blockQuote>                     ->  <blockQuote>\n        //         <heading1>foo[</heading1>    ->      [                   ---\n        //     </blockQuote>                    ->  </blockQuote>              |\n        //     <blockBlock>                     ->  <blockBlock>               v\n        //         <paragraph>]bar</paragraph>  ->      <heading1>foo</heading1>]<paragraph>bar</paragraph>\n        //     </blockBlock>                    ->  </blockBlock>\n        //\n        writer.insert(startElement, endPosition);\n    }\n    // Remove empty end ancestors:\n    //\n    //     <blockQuote>                                             ->\n    //         [                                                    ->  [\n    //     </blockQuote>                                            ->\n    //     <blockBlock>                                             ->  <blockBlock>\n    //         <heading1>foo</heading1>]<paragraph>bar</paragraph>  ->      <heading1>foo</heading1>]<paragraph>bar</paragraph>\n    //     </blockBlock>                                            ->  </blockBlock>\n    //\n    while (startPosition.parent.isEmpty) {\n        const parentToRemove = startPosition.parent;\n        startPosition = writer.createPositionBefore(parentToRemove);\n        writer.remove(parentToRemove);\n    }\n    // Update endPosition after inserting and removing elements.\n    endPosition = writer.createPositionBefore(endElement);\n    // Merge right two siblings (nodes on sides of endPosition):\n    //                                                              ->\n    //     [                                                        ->  [\n    //                                                              ->\n    //     <blockBlock>                                             ->  <blockBlock>\n    //         <heading1>foo</heading1>]<paragraph>bar</paragraph>  ->      <paragraph>foo]bar</paragraph>\n    //     </blockBlock>                                            ->  </blockBlock>\n    //\n    // Or in simple case (without moving elements in above if):\n    //     [<heading1>foo</heading1>]<paragraph>bar</paragraph>  ->  [<heading1>foo]bar</heading1>\n    //\n    mergeRight(writer, endPosition);\n    // Verify if there is a need and possibility to merge next level.\n    if (!checkShouldMerge(writer.model.schema, startPosition, endPosition)) {\n        return;\n    }\n    // Continue merging next level (blockQuote with blockBlock in the examples above if it would not be empty and got removed).\n    mergeBranchesRight(writer, startPosition, endPosition, commonAncestor);\n}\n/**\n * There is no right merge operation so we need to simulate it.\n */\nfunction mergeRight(writer, position) {\n    const startElement = position.nodeBefore;\n    const endElement = position.nodeAfter;\n    if (startElement.name != endElement.name) {\n        writer.rename(startElement, endElement.name);\n    }\n    writer.clearAttributes(startElement);\n    writer.setAttributes(Object.fromEntries(endElement.getAttributes()), startElement);\n    writer.merge(position);\n}\n/**\n * Verifies if merging is needed and possible. It's not needed if both positions are in the same element\n * and it's not possible if some element is a limit or the range crosses a limit element.\n */\nfunction checkShouldMerge(schema, startPosition, endPosition) {\n    const startElement = startPosition.parent;\n    const endElement = endPosition.parent;\n    // If both positions ended up in the same parent, then there's nothing more to merge:\n    // <$root><p>x[</p><p>]y</p></$root> => <$root><p>xy</p>[]</$root>\n    if (startElement == endElement) {\n        return false;\n    }\n    // If one of the positions is a limit element, then there's nothing to merge because we don't want to cross the limit boundaries.\n    if (schema.isLimit(startElement) || schema.isLimit(endElement)) {\n        return false;\n    }\n    // Check if operations we'll need to do won't need to cross object or limit boundaries.\n    // E.g., we can't merge endElement into startElement in this case:\n    // <limit><startElement>x[</startElement></limit><endElement>]</endElement>\n    return isCrossingLimitElement(startPosition, endPosition, schema);\n}\n/**\n * Returns the elements that are the ancestors of the provided positions that are direct children of the common ancestor.\n */\nfunction getAncestorsJustBelowCommonAncestor(positionA, positionB) {\n    const ancestorsA = positionA.getAncestors();\n    const ancestorsB = positionB.getAncestors();\n    let i = 0;\n    while (ancestorsA[i] && ancestorsA[i] == ancestorsB[i]) {\n        i++;\n    }\n    return [ancestorsA[i], ancestorsB[i]];\n}\nfunction shouldAutoparagraph(schema, position) {\n    const isTextAllowed = schema.checkChild(position, '$text');\n    const isParagraphAllowed = schema.checkChild(position, 'paragraph');\n    return !isTextAllowed && isParagraphAllowed;\n}\n/**\n * Check if parents of two positions can be merged by checking if there are no limit/object\n * boundaries between those two positions.\n *\n * E.g. in <bQ><p>x[]</p></bQ><widget><caption>{}</caption></widget>\n * we'll check <p>, <bQ>, <widget> and <caption>.\n * Usually, widget and caption are marked as objects/limits in the schema, so in this case merging will be blocked.\n */\nfunction isCrossingLimitElement(leftPos, rightPos, schema) {\n    const rangeToCheck = new Range(leftPos, rightPos);\n    for (const value of rangeToCheck.getWalker()) {\n        if (schema.isLimit(value.item)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction insertParagraph(writer, position, selection, attributes = {}) {\n    const paragraph = writer.createElement('paragraph');\n    writer.model.schema.setAllowedAttributes(paragraph, attributes, writer);\n    writer.insert(paragraph, position);\n    collapseSelectionAt(writer, selection, writer.createPositionAt(paragraph, 0));\n}\nfunction replaceEntireContentWithParagraph(writer, selection) {\n    const limitElement = writer.model.schema.getLimitElement(selection);\n    writer.remove(writer.createRangeIn(limitElement));\n    insertParagraph(writer, writer.createPositionAt(limitElement, 0), selection);\n}\n/**\n * We want to replace the entire content with a paragraph when:\n * * the entire content is selected,\n * * selection contains at least two elements,\n * * whether the paragraph is allowed in schema in the common ancestor.\n */\nfunction shouldEntireContentBeReplacedWithParagraph(schema, selection) {\n    const limitElement = schema.getLimitElement(selection);\n    if (!selection.containsEntireContent(limitElement)) {\n        return false;\n    }\n    const range = selection.getFirstRange();\n    if (range.start.parent == range.end.parent) {\n        return false;\n    }\n    return schema.checkChild(limitElement, 'paragraph');\n}\n/**\n * Helper function that sets the selection. Depending whether given `selection` is a document selection or not,\n * uses a different method to set it.\n */\nfunction collapseSelectionAt(writer, selection, positionOrRange) {\n    if (selection instanceof DocumentSelection) {\n        writer.setSelection(positionOrRange);\n    }\n    else {\n        selection.setTo(positionOrRange);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/getselectedcontent\n */\n/**\n * Gets a clone of the selected content.\n *\n * For example, for the following selection:\n *\n * ```html\n * <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n * ```\n *\n * It will return a document fragment with such a content:\n *\n * ```html\n * <quote><h>st</h></quote><p>se</p>\n * ```\n *\n * @param model The model in context of which the selection modification should be performed.\n * @param selection The selection of which content will be returned.\n */\nexport default function getSelectedContent(model, selection) {\n    return model.change(writer => {\n        const frag = writer.createDocumentFragment();\n        const range = selection.getFirstRange();\n        if (!range || range.isCollapsed) {\n            return frag;\n        }\n        const root = range.start.root;\n        const commonPath = range.start.getCommonPath(range.end);\n        const commonParent = root.getNodeByPath(commonPath);\n        // ## 1st step\n        //\n        // First, we'll clone a fragment represented by a minimal flat range\n        // containing the original range to be cloned.\n        // E.g. let's consider such a range:\n        //\n        // <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n        //\n        // A minimal flat range containing this one is:\n        //\n        // <p>x</p>[<quote><p>y</p><h>first</h></quote><p>second</p>]<p>z</p>\n        //\n        // We can easily clone this structure, preserving e.g. the <quote> element.\n        let flatSubtreeRange;\n        if (range.start.parent == range.end.parent) {\n            // The original range is flat, so take it.\n            flatSubtreeRange = range;\n        }\n        else {\n            flatSubtreeRange = writer.createRange(writer.createPositionAt(commonParent, range.start.path[commonPath.length]), writer.createPositionAt(commonParent, range.end.path[commonPath.length] + 1));\n        }\n        const howMany = flatSubtreeRange.end.offset - flatSubtreeRange.start.offset;\n        // Clone the whole contents.\n        for (const item of flatSubtreeRange.getItems({ shallow: true })) {\n            if (item.is('$textProxy')) {\n                writer.appendText(item.data, item.getAttributes(), frag);\n            }\n            else {\n                writer.append(writer.cloneElement(item, true), frag);\n            }\n        }\n        // ## 2nd step\n        //\n        // If the original range wasn't flat, then we need to remove the excess nodes from the both ends of the cloned fragment.\n        //\n        // For example, for the range shown in the 1st step comment, we need to remove these pieces:\n        //\n        // <quote>[<p>y</p>]<h>[fir]st</h></quote><p>se[cond]</p>\n        //\n        // So this will be the final copied content:\n        //\n        // <quote><h>st</h></quote><p>se</p>\n        //\n        // In order to do that, we remove content from these two ranges:\n        //\n        // [<quote><p>y</p><h>fir]st</h></quote><p>se[cond</p>]\n        if (flatSubtreeRange != range) {\n            // Find the position of the original range in the cloned fragment.\n            const newRange = range._getTransformedByMove(flatSubtreeRange.start, writer.createPositionAt(frag, 0), howMany)[0];\n            const leftExcessRange = writer.createRange(writer.createPositionAt(frag, 0), newRange.start);\n            const rightExcessRange = writer.createRange(newRange.end, writer.createPositionAt(frag, 'end'));\n            removeRangeContent(rightExcessRange, writer);\n            removeRangeContent(leftExcessRange, writer);\n        }\n        return frag;\n    });\n}\n// After https://github.com/ckeditor/ckeditor5-engine/issues/690 is fixed,\n// this function will, most likely, be able to rewritten using getMinimalFlatRanges().\nfunction removeRangeContent(range, writer) {\n    const parentsToCheck = [];\n    Array.from(range.getItems({ direction: 'backward' }))\n        // We should better store ranges because text proxies will lose integrity\n        // with the text nodes when we'll start removing content.\n        .map(item => writer.createRangeOn(item))\n        // Filter only these items which are fully contained in the passed range.\n        //\n        // E.g. for the following range: [<quote><p>y</p><h>fir]st</h>\n        // the walker will return the entire <h> element, when only the \"fir\" item inside it is fully contained.\n        .filter(itemRange => {\n        // We should be able to use Range.containsRange, but https://github.com/ckeditor/ckeditor5-engine/issues/691.\n        const contained = (itemRange.start.isAfter(range.start) || itemRange.start.isEqual(range.start)) &&\n            (itemRange.end.isBefore(range.end) || itemRange.end.isEqual(range.end));\n        return contained;\n    })\n        .forEach(itemRange => {\n        parentsToCheck.push(itemRange.start.parent);\n        writer.remove(itemRange);\n    });\n    // Remove ancestors of the removed items if they turned to be empty now\n    // (their whole content was contained in the range).\n    parentsToCheck.forEach(parentToCheck => {\n        let parent = parentToCheck;\n        while (parent.parent && parent.isEmpty) {\n            const removeRange = writer.createRangeOn(parent);\n            parent = parent.parent;\n            writer.remove(removeRange);\n        }\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/insertcontent\n */\nimport DocumentSelection from '../documentselection.js';\nimport Element from '../element.js';\nimport LivePosition from '../liveposition.js';\nimport LiveRange from '../liverange.js';\nimport Position from '../position.js';\nimport Range from '../range.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Inserts content into the editor (specified selection) as one would expect the paste functionality to work.\n *\n * It takes care of removing the selected content, splitting elements (if needed), inserting elements and merging elements appropriately.\n *\n * Some examples:\n *\n * ```html\n * <p>x^</p> + <p>y</p> => <p>x</p><p>y</p> => <p>xy[]</p>\n * <p>x^y</p> + <p>z</p> => <p>x</p>^<p>y</p> + <p>z</p> => <p>x</p><p>z</p><p>y</p> => <p>xz[]y</p>\n * <p>x^y</p> + <img /> => <p>x</p>^<p>y</p> + <img /> => <p>x</p><img /><p>y</p>\n * <p>x</p><p>^</p><p>z</p> + <p>y</p> => <p>x</p><p>y[]</p><p>z</p> (no merging)\n * <p>x</p>[<img />]<p>z</p> + <p>y</p> => <p>x</p>^<p>z</p> + <p>y</p> => <p>x</p><p>y[]</p><p>z</p>\n * ```\n *\n * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable` it will be modified\n * to the insertion selection (equal to a range to be selected after insertion).\n *\n * If `selectable` is not passed, the content will be inserted using the current selection of the model document.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertContent} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertContent}\n * method's behavior.\n *\n * @param model The model in context of which the insertion should be performed.\n * @param content The content to insert.\n * @param selectable Selection into which the content should be inserted.\n * @param placeOrOffset Sets place or offset of the selection.\n * @returns Range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n * at the insertion position.\n */\nexport default function insertContent(model, content, selectable) {\n    return model.change(writer => {\n        const selection = selectable ? selectable : model.document.selection;\n        if (!selection.isCollapsed) {\n            model.deleteContent(selection, { doNotAutoparagraph: true });\n        }\n        const insertion = new Insertion(model, writer, selection.anchor);\n        const fakeMarkerElements = [];\n        let nodesToInsert;\n        if (content.is('documentFragment')) {\n            // If document fragment has any markers, these markers should be inserted into the model as well.\n            if (content.markers.size) {\n                const markersPosition = [];\n                for (const [name, range] of content.markers) {\n                    const { start, end } = range;\n                    const isCollapsed = start.isEqual(end);\n                    markersPosition.push({ position: start, name, isCollapsed }, { position: end, name, isCollapsed });\n                }\n                // Markers position is sorted backwards to ensure that the insertion of fake markers will not change\n                // the position of the next markers.\n                markersPosition.sort(({ position: posA }, { position: posB }) => posA.isBefore(posB) ? 1 : -1);\n                for (const { position, name, isCollapsed } of markersPosition) {\n                    let fakeElement = null;\n                    let collapsed = null;\n                    const isAtBeginning = position.parent === content && position.isAtStart;\n                    const isAtEnd = position.parent === content && position.isAtEnd;\n                    // We have two ways of handling markers. In general, we want to add temporary <$marker> model elements to\n                    // represent marker boundaries. These elements will be inserted into content together with the rest\n                    // of the document fragment. After insertion is done, positions for these elements will be read\n                    // and proper, actual markers will be created in the model and fake elements will be removed.\n                    //\n                    // However, if the <$marker> element is at the beginning or at the end of the document fragment,\n                    // it may affect how the inserted content is merged with current model, impacting the insertion\n                    // result. To avoid that, we don't add <$marker> elements at these positions. Instead, we will use\n                    // `Insertion#getAffectedRange()` to figure out new positions for these marker boundaries.\n                    if (!isAtBeginning && !isAtEnd) {\n                        fakeElement = writer.createElement('$marker');\n                        writer.insert(fakeElement, position);\n                    }\n                    else if (isCollapsed) {\n                        // Save whether the collapsed marker was at the beginning or at the end of document fragment\n                        // to know where to create it after the insertion is done.\n                        collapsed = isAtBeginning ? 'start' : 'end';\n                    }\n                    fakeMarkerElements.push({\n                        name,\n                        element: fakeElement,\n                        collapsed\n                    });\n                }\n            }\n            nodesToInsert = content.getChildren();\n        }\n        else {\n            nodesToInsert = [content];\n        }\n        insertion.handleNodes(nodesToInsert);\n        let newRange = insertion.getSelectionRange();\n        if (content.is('documentFragment') && fakeMarkerElements.length) {\n            // After insertion was done, the selection was set but the model contains fake <$marker> elements.\n            // These <$marker> elements will be now removed. Because of that, we will need to fix the selection.\n            // We will create a live range that will automatically be update as <$marker> elements are removed.\n            const selectionLiveRange = newRange ? LiveRange.fromRange(newRange) : null;\n            // Marker name -> [ start position, end position ].\n            const markersData = {};\n            // Note: `fakeMarkerElements` are sorted backwards. However, now, we want to handle the markers\n            // from the beginning, so that existing <$marker> elements do not affect markers positions.\n            // This is why we iterate from the end to the start.\n            for (let i = fakeMarkerElements.length - 1; i >= 0; i--) {\n                const { name, element, collapsed } = fakeMarkerElements[i];\n                const isStartBoundary = !markersData[name];\n                if (isStartBoundary) {\n                    markersData[name] = [];\n                }\n                if (element) {\n                    // Read fake marker element position to learn where the marker should be created.\n                    const elementPosition = writer.createPositionAt(element, 'before');\n                    markersData[name].push(elementPosition);\n                    writer.remove(element);\n                }\n                else {\n                    // If the fake marker element does not exist, it means that the marker boundary was at the beginning or at the end.\n                    const rangeOnInsertion = insertion.getAffectedRange();\n                    if (!rangeOnInsertion) {\n                        // If affected range is `null` it means that nothing was in the document fragment or all content was filtered out.\n                        // Some markers that were in the filtered content may be removed (partially or totally).\n                        // Let's handle only those markers that were at the beginning or at the end of the document fragment.\n                        if (collapsed) {\n                            markersData[name].push(insertion.position);\n                        }\n                        continue;\n                    }\n                    if (collapsed) {\n                        // If the marker was collapsed at the beginning or at the end of the document fragment,\n                        // put both boundaries at the beginning or at the end of inserted range (to keep the marker collapsed).\n                        markersData[name].push(rangeOnInsertion[collapsed]);\n                    }\n                    else {\n                        markersData[name].push(isStartBoundary ? rangeOnInsertion.start : rangeOnInsertion.end);\n                    }\n                }\n            }\n            for (const [name, [start, end]] of Object.entries(markersData)) {\n                // For now, we ignore markers if they are included in the filtered-out content.\n                // In the future implementation we will improve that case to create markers that are not filtered out completely.\n                if (start && end && start.root === end.root && start.root.document && !writer.model.markers.has(name)) {\n                    writer.addMarker(name, {\n                        usingOperation: true,\n                        affectsData: true,\n                        range: new Range(start, end)\n                    });\n                }\n            }\n            if (selectionLiveRange) {\n                newRange = selectionLiveRange.toRange();\n                selectionLiveRange.detach();\n            }\n        }\n        /* istanbul ignore else -- @preserve */\n        if (newRange) {\n            if (selection instanceof DocumentSelection) {\n                writer.setSelection(newRange);\n            }\n            else {\n                selection.setTo(newRange);\n            }\n        }\n        else {\n            // We are not testing else because it's a safe check for unpredictable edge cases:\n            // an insertion without proper range to select.\n            //\n            // @if CK_DEBUG // console.warn( 'Cannot determine a proper selection range after insertion.' );\n        }\n        const affectedRange = insertion.getAffectedRange() || model.createRange(selection.anchor);\n        insertion.destroy();\n        return affectedRange;\n    });\n}\n/**\n * Utility class for performing content insertion.\n */\nclass Insertion {\n    constructor(model, writer, position) {\n        /**\n         * The reference to the first inserted node.\n         */\n        this._firstNode = null;\n        /**\n         * The reference to the last inserted node.\n         */\n        this._lastNode = null;\n        /**\n         * The reference to the last auto paragraph node.\n         */\n        this._lastAutoParagraph = null;\n        /**\n         * The array of nodes that should be cleaned of not allowed attributes.\n         */\n        this._filterAttributesOf = [];\n        /**\n         * Beginning of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n         */\n        this._affectedStart = null;\n        /**\n         * End of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n         */\n        this._affectedEnd = null;\n        this._nodeToSelect = null;\n        this.model = model;\n        this.writer = writer;\n        this.position = position;\n        this.canMergeWith = new Set([this.position.parent]);\n        this.schema = model.schema;\n        this._documentFragment = writer.createDocumentFragment();\n        this._documentFragmentPosition = writer.createPositionAt(this._documentFragment, 0);\n    }\n    /**\n     * Handles insertion of a set of nodes.\n     *\n     * @param nodes Nodes to insert.\n     */\n    handleNodes(nodes) {\n        for (const node of Array.from(nodes)) {\n            this._handleNode(node);\n        }\n        // Insert nodes collected in temporary DocumentFragment.\n        this._insertPartialFragment();\n        // If there was an auto paragraph then we might need to adjust the end of insertion.\n        if (this._lastAutoParagraph) {\n            this._updateLastNodeFromAutoParagraph(this._lastAutoParagraph);\n        }\n        // After the content was inserted we may try to merge it with its next sibling if the selection was in it initially.\n        // Merging with the previous sibling was performed just after inserting the first node to the document.\n        this._mergeOnRight();\n        // TMP this will become a post-fixer.\n        this.schema.removeDisallowedAttributes(this._filterAttributesOf, this.writer);\n        this._filterAttributesOf = [];\n    }\n    /**\n     * Updates the last node after the auto paragraphing.\n     *\n     * @param node The last auto paragraphing node.\n     */\n    _updateLastNodeFromAutoParagraph(node) {\n        const positionAfterLastNode = this.writer.createPositionAfter(this._lastNode);\n        const positionAfterNode = this.writer.createPositionAfter(node);\n        // If the real end was after the last auto paragraph then update relevant properties.\n        if (positionAfterNode.isAfter(positionAfterLastNode)) {\n            this._lastNode = node;\n            /* istanbul ignore if -- @preserve */\n            if (this.position.parent != node || !this.position.isAtEnd) {\n                // Algorithm's correctness check. We should never end up here but it's good to know that we did.\n                // At this point the insertion position should be at the end of the last auto paragraph.\n                // Note: This error is documented in other place in this file.\n                throw new CKEditorError('insertcontent-invalid-insertion-position', this);\n            }\n            this.position = positionAfterNode;\n            this._setAffectedBoundaries(this.position);\n        }\n    }\n    /**\n     * Returns range to be selected after insertion.\n     * Returns `null` if there is no valid range to select after insertion.\n     */\n    getSelectionRange() {\n        if (this._nodeToSelect) {\n            return Range._createOn(this._nodeToSelect);\n        }\n        return this.model.schema.getNearestSelectionRange(this.position);\n    }\n    /**\n     * Returns a range which contains all the performed changes. This is a range that, if removed, would return the model to the state\n     * before the insertion. Returns `null` if no changes were done.\n     */\n    getAffectedRange() {\n        if (!this._affectedStart) {\n            return null;\n        }\n        return new Range(this._affectedStart, this._affectedEnd);\n    }\n    /**\n     * Destroys `Insertion` instance.\n     */\n    destroy() {\n        if (this._affectedStart) {\n            this._affectedStart.detach();\n        }\n        if (this._affectedEnd) {\n            this._affectedEnd.detach();\n        }\n    }\n    /**\n     * Handles insertion of a single node.\n     */\n    _handleNode(node) {\n        // Split the position.parent's branch up to a point where the node can be inserted.\n        // If it isn't allowed in the whole branch, then of course don't split anything.\n        if (!this._checkAndSplitToAllowedPosition(node)) {\n            // Handle element children if it's not an object (strip container).\n            if (!this.schema.isObject(node)) {\n                this._handleDisallowedNode(node);\n            }\n            return;\n        }\n        // Add node to the current temporary DocumentFragment.\n        this._appendToFragment(node);\n        // Store the first and last nodes for easy access for merging with sibling nodes.\n        if (!this._firstNode) {\n            this._firstNode = node;\n        }\n        this._lastNode = node;\n    }\n    /**\n     * Inserts the temporary DocumentFragment into the model.\n     */\n    _insertPartialFragment() {\n        if (this._documentFragment.isEmpty) {\n            return;\n        }\n        const livePosition = LivePosition.fromPosition(this.position, 'toNext');\n        this._setAffectedBoundaries(this.position);\n        // If the very first node of the whole insertion process is inserted, insert it separately for OT reasons (undo).\n        // Note: there can be multiple calls to `_insertPartialFragment()` during one insertion process.\n        // Note: only the very first node can be merged so we have to do separate operation only for it.\n        if (this._documentFragment.getChild(0) == this._firstNode) {\n            this.writer.insert(this._firstNode, this.position);\n            // We must merge the first node just after inserting it to avoid problems with OT.\n            // (See: https://github.com/ckeditor/ckeditor5/pull/8773#issuecomment-760945652).\n            this._mergeOnLeft();\n            this.position = livePosition.toPosition();\n        }\n        // Insert the remaining nodes from document fragment.\n        if (!this._documentFragment.isEmpty) {\n            this.writer.insert(this._documentFragment, this.position);\n        }\n        this._documentFragmentPosition = this.writer.createPositionAt(this._documentFragment, 0);\n        this.position = livePosition.toPosition();\n        livePosition.detach();\n    }\n    /**\n     * @param node The disallowed node which needs to be handled.\n     */\n    _handleDisallowedNode(node) {\n        // If the node is an element, try inserting its children (strip the parent).\n        if (node.is('element')) {\n            this.handleNodes(node.getChildren());\n        }\n    }\n    /**\n     * Append a node to the temporary DocumentFragment.\n     *\n     * @param node The node to insert.\n     */\n    _appendToFragment(node) {\n        /* istanbul ignore if -- @preserve */\n        if (!this.schema.checkChild(this.position, node)) {\n            // Algorithm's correctness check. We should never end up here but it's good to know that we did.\n            // Note that it would often be a silent issue if we insert node in a place where it's not allowed.\n            /**\n             * Given node cannot be inserted on the given position.\n             *\n             * @error insertcontent-wrong-position\n             * @param node Node to insert.\n             * @param position Position to insert the node at.\n             */\n            throw new CKEditorError('insertcontent-wrong-position', this, { node, position: this.position });\n        }\n        this.writer.insert(node, this._documentFragmentPosition);\n        this._documentFragmentPosition = this._documentFragmentPosition.getShiftedBy(node.offsetSize);\n        // The last inserted object should be selected because we can't put a collapsed selection after it.\n        if (this.schema.isObject(node) && !this.schema.checkChild(this.position, '$text')) {\n            this._nodeToSelect = node;\n        }\n        else {\n            this._nodeToSelect = null;\n        }\n        this._filterAttributesOf.push(node);\n    }\n    /**\n     * Sets `_affectedStart` and `_affectedEnd` to the given `position`. Should be used before a change is done during insertion process to\n     * mark the affected range.\n     *\n     * This method is used before inserting a node or splitting a parent node. `_affectedStart` and `_affectedEnd` are also changed\n     * during merging, but the logic there is more complicated so it is left out of this function.\n     */\n    _setAffectedBoundaries(position) {\n        // Set affected boundaries stickiness so that those position will \"expand\" when something is inserted in between them:\n        // <paragraph>Foo][bar</paragraph> -> <paragraph>Foo]xx[bar</paragraph>\n        // This is why it cannot be a range but two separate positions.\n        if (!this._affectedStart) {\n            this._affectedStart = LivePosition.fromPosition(position, 'toPrevious');\n        }\n        // If `_affectedEnd` is before the new boundary position, expand `_affectedEnd`. This can happen if first inserted node was\n        // inserted into the parent but the next node is moved-out of that parent:\n        // (1) <paragraph>Foo][</paragraph> -> <paragraph>Foo]xx[</paragraph>\n        // (2) <paragraph>Foo]xx[</paragraph> -> <paragraph>Foo]xx</paragraph><widget></widget>[\n        if (!this._affectedEnd || this._affectedEnd.isBefore(position)) {\n            if (this._affectedEnd) {\n                this._affectedEnd.detach();\n            }\n            this._affectedEnd = LivePosition.fromPosition(position, 'toNext');\n        }\n    }\n    /**\n     * Merges the previous sibling of the first node if it should be merged.\n     *\n     * After the content was inserted we may try to merge it with its siblings.\n     * This should happen only if the selection was in those elements initially.\n     */\n    _mergeOnLeft() {\n        const node = this._firstNode;\n        if (!(node instanceof Element)) {\n            return;\n        }\n        if (!this._canMergeLeft(node)) {\n            return;\n        }\n        const mergePosLeft = LivePosition._createBefore(node);\n        mergePosLeft.stickiness = 'toNext';\n        const livePosition = LivePosition.fromPosition(this.position, 'toNext');\n        // If `_affectedStart` is sames as merge position, it means that the element \"marked\" by `_affectedStart` is going to be\n        // removed and its contents will be moved. This won't transform `LivePosition` so `_affectedStart` needs to be moved\n        // by hand to properly reflect affected range. (Due to `_affectedStart` and `_affectedEnd` stickiness, the \"range\" is\n        // shown as `][`).\n        //\n        // Example - insert `<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>` at the end of `<paragraph>Foo^</paragraph>`:\n        //\n        // <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n        // <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>   -->\n        // <paragraph>Foo]Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>\n        //\n        // Note, that if we are here then something must have been inserted, so `_affectedStart` and `_affectedEnd` have to be set.\n        if (this._affectedStart.isEqual(mergePosLeft)) {\n            this._affectedStart.detach();\n            this._affectedStart = LivePosition._createAt(mergePosLeft.nodeBefore, 'end', 'toPrevious');\n        }\n        // We need to update the references to the first and last nodes if they will be merged into the previous sibling node\n        // because the reference would point to the removed node.\n        //\n        // <p>A^A</p> + <p>X</p>\n        //\n        // <p>A</p>^<p>A</p>\n        // <p>A</p><p>X</p><p>A</p>\n        // <p>AX</p><p>A</p>\n        // <p>AXA</p>\n        if (this._firstNode === this._lastNode) {\n            this._firstNode = mergePosLeft.nodeBefore;\n            this._lastNode = mergePosLeft.nodeBefore;\n        }\n        this.writer.merge(mergePosLeft);\n        // If only one element (the merged one) is in the \"affected range\", also move the affected range end appropriately.\n        //\n        // Example - insert `<paragraph>Abc</paragraph>` at the of `<paragraph>Foo^</paragraph>`:\n        //\n        // <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n        // <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n        // <paragraph>Foo]Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n        // <paragraph>Foo]Abc[</paragraph><paragraph>Bar</paragraph>\n        if (mergePosLeft.isEqual(this._affectedEnd) && this._firstNode === this._lastNode) {\n            this._affectedEnd.detach();\n            this._affectedEnd = LivePosition._createAt(mergePosLeft.nodeBefore, 'end', 'toNext');\n        }\n        this.position = livePosition.toPosition();\n        livePosition.detach();\n        // After merge elements that were marked by _insert() to be filtered might be gone so\n        // we need to mark the new container.\n        this._filterAttributesOf.push(this.position.parent);\n        mergePosLeft.detach();\n    }\n    /**\n     * Merges the next sibling of the last node if it should be merged.\n     *\n     * After the content was inserted we may try to merge it with its siblings.\n     * This should happen only if the selection was in those elements initially.\n     */\n    _mergeOnRight() {\n        const node = this._lastNode;\n        if (!(node instanceof Element)) {\n            return;\n        }\n        if (!this._canMergeRight(node)) {\n            return;\n        }\n        const mergePosRight = LivePosition._createAfter(node);\n        mergePosRight.stickiness = 'toNext';\n        /* istanbul ignore if -- @preserve */\n        if (!this.position.isEqual(mergePosRight)) {\n            // Algorithm's correctness check. We should never end up here but it's good to know that we did.\n            // At this point the insertion position should be after the node we'll merge. If it isn't,\n            // it should need to be secured as in the left merge case.\n            /**\n             * An internal error occurred when merging inserted content with its siblings.\n             * The insertion position should equal the merge position.\n             *\n             * If you encountered this error, report it back to the CKEditor 5 team\n             * with as many details as possible regarding the content being inserted and the insertion position.\n             *\n             * @error insertcontent-invalid-insertion-position\n             */\n            throw new CKEditorError('insertcontent-invalid-insertion-position', this);\n        }\n        // Move the position to the previous node, so it isn't moved to the graveyard on merge.\n        // <p>x</p>[]<p>y</p> => <p>x[]</p><p>y</p>\n        this.position = Position._createAt(mergePosRight.nodeBefore, 'end');\n        // Explanation of setting position stickiness to `'toPrevious'`:\n        // OK:  <p>xx[]</p> + <p>yy</p> => <p>xx[]yy</p> (when sticks to previous)\n        // NOK: <p>xx[]</p> + <p>yy</p> => <p>xxyy[]</p> (when sticks to next)\n        const livePosition = LivePosition.fromPosition(this.position, 'toPrevious');\n        // See comment in `_mergeOnLeft()` on moving `_affectedStart`.\n        if (this._affectedEnd.isEqual(mergePosRight)) {\n            this._affectedEnd.detach();\n            this._affectedEnd = LivePosition._createAt(mergePosRight.nodeBefore, 'end', 'toNext');\n        }\n        // We need to update the references to the first and last nodes if they will be merged into the previous sibling node\n        // because the reference would point to the removed node.\n        //\n        // <p>A^A</p> + <p>X</p>\n        //\n        // <p>A</p>^<p>A</p>\n        // <p>A</p><p>X</p><p>A</p>\n        // <p>AX</p><p>A</p>\n        // <p>AXA</p>\n        if (this._firstNode === this._lastNode) {\n            this._firstNode = mergePosRight.nodeBefore;\n            this._lastNode = mergePosRight.nodeBefore;\n        }\n        this.writer.merge(mergePosRight);\n        // See comment in `_mergeOnLeft()` on moving `_affectedStart`.\n        if (mergePosRight.getShiftedBy(-1).isEqual(this._affectedStart) && this._firstNode === this._lastNode) {\n            this._affectedStart.detach();\n            this._affectedStart = LivePosition._createAt(mergePosRight.nodeBefore, 0, 'toPrevious');\n        }\n        this.position = livePosition.toPosition();\n        livePosition.detach();\n        // After merge elements that were marked by _insert() to be filtered might be gone so\n        // we need to mark the new container.\n        this._filterAttributesOf.push(this.position.parent);\n        mergePosRight.detach();\n    }\n    /**\n     * Checks whether specified node can be merged with previous sibling element.\n     *\n     * @param node The node which could potentially be merged.\n     */\n    _canMergeLeft(node) {\n        const previousSibling = node.previousSibling;\n        return (previousSibling instanceof Element) &&\n            this.canMergeWith.has(previousSibling) &&\n            this.model.schema.checkMerge(previousSibling, node);\n    }\n    /**\n     * Checks whether specified node can be merged with next sibling element.\n     *\n     * @param node The node which could potentially be merged.\n     */\n    _canMergeRight(node) {\n        const nextSibling = node.nextSibling;\n        return (nextSibling instanceof Element) &&\n            this.canMergeWith.has(nextSibling) &&\n            this.model.schema.checkMerge(node, nextSibling);\n    }\n    /**\n     * Inserts a paragraph and moves the insertion position into it.\n     */\n    _insertAutoParagraph() {\n        // Insert nodes collected in temporary DocumentFragment if the position parent needs change to process further nodes.\n        this._insertPartialFragment();\n        // Insert a paragraph and move insertion position to it.\n        const paragraph = this.writer.createElement('paragraph');\n        this.writer.insert(paragraph, this.position);\n        this._setAffectedBoundaries(this.position);\n        this._lastAutoParagraph = paragraph;\n        this.position = this.writer.createPositionAt(paragraph, 0);\n    }\n    /**\n     * @returns Whether an allowed position was found.\n     * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.\n     */\n    _checkAndSplitToAllowedPosition(node) {\n        const allowedIn = this._getAllowedIn(this.position.parent, node);\n        if (!allowedIn) {\n            return false;\n        }\n        // Insert nodes collected in temporary DocumentFragment if the position parent needs change to process further nodes.\n        if (allowedIn != this.position.parent) {\n            this._insertPartialFragment();\n        }\n        while (allowedIn != this.position.parent) {\n            if (this.position.isAtStart) {\n                // If insertion position is at the beginning of the parent, move it out instead of splitting.\n                // <p>^Foo</p> -> ^<p>Foo</p>\n                const parent = this.position.parent;\n                this.position = this.writer.createPositionBefore(parent);\n                // Special case – parent is empty (<p>^</p>).\n                //\n                // 1. parent.isEmpty\n                // We can remove the element after moving insertion position out of it.\n                //\n                // 2. parent.parent === allowedIn\n                // However parent should remain in place when allowed element is above limit element in document tree.\n                // For example there shouldn't be allowed to remove empty paragraph from tableCell, when is pasted\n                // content allowed in $root.\n                if (parent.isEmpty && parent.parent === allowedIn) {\n                    this.writer.remove(parent);\n                }\n            }\n            else if (this.position.isAtEnd) {\n                // If insertion position is at the end of the parent, move it out instead of splitting.\n                // <p>Foo^</p> -> <p>Foo</p>^\n                this.position = this.writer.createPositionAfter(this.position.parent);\n            }\n            else {\n                const tempPos = this.writer.createPositionAfter(this.position.parent);\n                this._setAffectedBoundaries(this.position);\n                this.writer.split(this.position);\n                this.position = tempPos;\n                this.canMergeWith.add(this.position.nodeAfter);\n            }\n        }\n        // At this point, we split elements up to the parent in which `node` is allowed.\n        // Note that `_getAllowedIn()` checks if the `node` is allowed either directly, or when auto-paragraphed.\n        // So, let's check if the `node` is allowed directly. If not, we need to auto-paragraph it.\n        if (!this.schema.checkChild(this.position.parent, node)) {\n            this._insertAutoParagraph();\n        }\n        return true;\n    }\n    /**\n     * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.\n     *\n     * It also verifies if auto-paragraphing could help.\n     *\n     * @param contextElement The element in which context the node should be checked.\n     * @param childNode The node to check.\n     */\n    _getAllowedIn(contextElement, childNode) {\n        // Check if a node can be inserted in the given context...\n        if (this.schema.checkChild(contextElement, childNode)) {\n            return contextElement;\n        }\n        // ...or it would be accepted if a paragraph would be inserted.\n        if (this.schema.checkChild(contextElement, 'paragraph') && this.schema.checkChild('paragraph', childNode)) {\n            return contextElement;\n        }\n        // If the child wasn't allowed in the context element and the element is a limit there's no point in\n        // checking any further towards the root. This is it: the limit is unsplittable and there's nothing\n        // we can do about it. Without this check, the algorithm will analyze parent of the limit and may create\n        // an illusion of the child being allowed. There's no way to insert it down there, though. It results in\n        // infinite loops.\n        if (this.schema.isLimit(contextElement)) {\n            return null;\n        }\n        return this._getAllowedIn(contextElement.parent, childNode);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { CKEditorError, first } from '@ckeditor/ckeditor5-utils';\n/**\n * Inserts an {@glink framework/deep-dive/schema#object-elements object element} at a specific position in the editor content.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertObject} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertObject}\n * method's behavior.\n *\n * **Note**: For more documentation and examples, see {@link module:engine/model/model~Model#insertObject}.\n *\n * @param model The model in context of which the insertion should be performed.\n * @param object An object to be inserted into the model document.\n * @param selectable A selectable where the content should be inserted. If not specified, the current\n * {@link module:engine/model/document~Document#selection document selection} will be used instead.\n * @param placeOrOffset Specifies the exact place or offset for the insertion to take place, relative to `selectable`.\n * @param options Additional options.\n * @param options.findOptimalPosition An option that, when set, adjusts the insertion position (relative to\n * `selectable` and `placeOrOffset`) so that the content of `selectable` is not split upon insertion (a.k.a. non-destructive insertion).\n * * When `'auto'`, the algorithm will decide whether to insert the object before or after `selectable` to avoid content splitting.\n * * When `'before'`, the closest position before `selectable` will be used that will not result in content splitting.\n * * When `'after'`, the closest position after `selectable` will be used that will not result in content splitting.\n *\n * Note that this option works only for block objects. Inline objects are inserted into text and do not split blocks.\n * @param options.setSelection An option that, when set, moves the\n * {@link module:engine/model/document~Document#selection document selection} after inserting the object.\n * * When `'on'`, the document selection will be set on the inserted object.\n * * When `'after'`, the document selection will move to the closest text node after the inserted object. If there is no\n * such text node, a paragraph will be created and the document selection will be moved inside it.\n * @returns A range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertObject()`, returns a range collapsed\n * at the insertion position.\n */\nexport default function insertObject(model, object, selectable, options = {}) {\n    if (!model.schema.isObject(object)) {\n        /**\n         * Tried to insert an element with {@link module:engine/model/utils/insertobject insertObject()} function\n         * that is not defined as an object in schema.\n         * See {@link module:engine/model/schema~SchemaItemDefinition#isObject `SchemaItemDefinition`}.\n         * If you want to insert content that is not an object you might want to use\n         * {@link module:engine/model/utils/insertcontent insertContent()} function.\n         * @error insertobject-element-not-an-object\n         */\n        throw new CKEditorError('insertobject-element-not-an-object', model, { object });\n    }\n    // Normalize selectable to a selection instance.\n    const originalSelection = selectable ? selectable : model.document.selection;\n    // Adjust the insertion selection.\n    let insertionSelection = originalSelection;\n    if (options.findOptimalPosition && model.schema.isBlock(object)) {\n        insertionSelection = model.createSelection(model.schema.findOptimalInsertionRange(originalSelection, options.findOptimalPosition));\n    }\n    // Collect attributes to be copied on the inserted object.\n    const firstSelectedBlock = first(originalSelection.getSelectedBlocks());\n    const attributesToCopy = {};\n    if (firstSelectedBlock) {\n        Object.assign(attributesToCopy, model.schema.getAttributesWithProperty(firstSelectedBlock, 'copyOnReplace', true));\n    }\n    return model.change(writer => {\n        // Remove the selected content to find out what the parent of the inserted object would be.\n        // It would be removed inside model.insertContent() anyway.\n        if (!insertionSelection.isCollapsed) {\n            model.deleteContent(insertionSelection, { doNotAutoparagraph: true });\n        }\n        let elementToInsert = object;\n        const insertionPositionParent = insertionSelection.anchor.parent;\n        // Autoparagraphing of an inline objects.\n        if (!model.schema.checkChild(insertionPositionParent, object) &&\n            model.schema.checkChild(insertionPositionParent, 'paragraph') &&\n            model.schema.checkChild('paragraph', object)) {\n            elementToInsert = writer.createElement('paragraph');\n            writer.insert(object, elementToInsert);\n        }\n        // Apply attributes that are allowed on the inserted object (or paragraph if autoparagraphed).\n        model.schema.setAllowedAttributes(elementToInsert, attributesToCopy, writer);\n        // Insert the prepared content at the optionally adjusted selection.\n        const affectedRange = model.insertContent(elementToInsert, insertionSelection);\n        // Nothing got inserted.\n        if (affectedRange.isCollapsed) {\n            return affectedRange;\n        }\n        if (options.setSelection) {\n            updateSelection(writer, object, options.setSelection, attributesToCopy);\n        }\n        return affectedRange;\n    });\n}\n/**\n * Updates document selection based on given `place` parameter in relation to `contextElement` element.\n *\n * @param writer An instance of the model writer.\n * @param contextElement An element to set the attributes on.\n * @param place The place where selection should be set in relation to the `contextElement` element.\n * Value `on` will set selection on the passed `contextElement`. Value `after` will set selection after `contextElement`.\n * @param attributes Attributes keys and values to set on a paragraph that this function can create when\n * `place` parameter is equal to `after` but there is no element with `$text` node to set selection in.\n */\nfunction updateSelection(writer, contextElement, place, paragraphAttributes) {\n    const model = writer.model;\n    if (place == 'on') {\n        writer.setSelection(contextElement, 'on');\n        return;\n    }\n    if (place != 'after') {\n        /**\n         * The unsupported `options.setSelection` parameter was passed\n         * to the {@link module:engine/model/utils/insertobject insertObject()} function.\n         * Check the {@link module:engine/model/utils/insertobject insertObject()} API documentation for allowed\n         * `options.setSelection` parameter values.\n         *\n         * @error insertobject-invalid-place-parameter-value\n         */\n        throw new CKEditorError('insertobject-invalid-place-parameter-value', model);\n    }\n    let nextElement = contextElement.nextSibling;\n    if (model.schema.isInline(contextElement)) {\n        writer.setSelection(contextElement, 'after');\n        return;\n    }\n    // Check whether an element next to the inserted element is defined and can contain a text.\n    const canSetSelection = nextElement && model.schema.checkChild(nextElement, '$text');\n    // If the element is missing, but a paragraph could be inserted next to the element, let's add it.\n    if (!canSetSelection && model.schema.checkChild(contextElement.parent, 'paragraph')) {\n        nextElement = writer.createElement('paragraph');\n        model.schema.setAllowedAttributes(nextElement, paragraphAttributes, writer);\n        model.insertContent(nextElement, writer.createPositionAfter(contextElement));\n    }\n    // Put the selection inside the element, at the beginning.\n    if (nextElement) {\n        writer.setSelection(nextElement, 0);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/modifyselection\n */\nimport DocumentSelection from '../documentselection.js';\nimport Position from '../position.js';\nimport Range from '../range.js';\nimport TreeWalker from '../treewalker.js';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol, isInsideEmojiSequence } from '@ckeditor/ckeditor5-utils';\nconst wordBoundaryCharacters = ' ,.?!:;\"-()';\n/**\n * Modifies the selection. Currently, the supported modifications are:\n *\n * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n * Possible values for `unit` are:\n *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n *  why `'character'` value is most natural and common method of modifying selection.\n *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n *  extension will include whole \"surrogate pair\".\n *  * `'word'` - moves selection by a whole word.\n *\n * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n *\n * **Note:** Use {@link module:engine/model/model~Model#modifySelection} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#modifySelection}\n * method's behavior.\n *\n * @param model The model in context of which the selection modification should be performed.\n * @param selection The selection to modify.\n * @param options.direction The direction in which the selection should be modified. Default 'forward'.\n * @param options.unit The unit by which selection should be modified. Default 'character'.\n * @param options.treatEmojiAsSingleUnit Whether multi-characer emoji sequences should be handled as single unit.\n */\nexport default function modifySelection(model, selection, options = {}) {\n    const schema = model.schema;\n    const isForward = options.direction != 'backward';\n    const unit = options.unit ? options.unit : 'character';\n    const treatEmojiAsSingleUnit = !!options.treatEmojiAsSingleUnit;\n    const focus = selection.focus;\n    const walker = new TreeWalker({\n        boundaries: getSearchRange(focus, isForward),\n        singleCharacters: true,\n        direction: isForward ? 'forward' : 'backward'\n    });\n    const data = { walker, schema, isForward, unit, treatEmojiAsSingleUnit };\n    let next;\n    while ((next = walker.next())) {\n        if (next.done) {\n            return;\n        }\n        const position = tryExtendingTo(data, next.value);\n        if (position) {\n            if (selection instanceof DocumentSelection) {\n                model.change(writer => {\n                    writer.setSelectionFocus(position);\n                });\n            }\n            else {\n                selection.setFocus(position);\n            }\n            return;\n        }\n    }\n}\n/**\n * Checks whether the selection can be extended to the the walker's next value (next position).\n */\nfunction tryExtendingTo(data, value) {\n    const { isForward, walker, unit, schema, treatEmojiAsSingleUnit } = data;\n    const { type, item, nextPosition } = value;\n    // If found text, we can certainly put the focus in it. Let's just find a correct position\n    // based on the unit.\n    if (type == 'text') {\n        if (data.unit === 'word') {\n            return getCorrectWordBreakPosition(walker, isForward);\n        }\n        return getCorrectPosition(walker, unit, treatEmojiAsSingleUnit);\n    }\n    // Entering an element.\n    if (type == (isForward ? 'elementStart' : 'elementEnd')) {\n        // If it's a selectable, we can select it now.\n        if (schema.isSelectable(item)) {\n            return Position._createAt(item, isForward ? 'after' : 'before');\n        }\n        // If text allowed on this position, extend to this place.\n        if (schema.checkChild(nextPosition, '$text')) {\n            return nextPosition;\n        }\n    }\n    // Leaving an element.\n    else {\n        // If leaving a limit element, stop.\n        if (schema.isLimit(item)) {\n            // NOTE: Fast-forward the walker until the end.\n            walker.skip(() => true);\n            return;\n        }\n        // If text allowed on this position, extend to this place.\n        if (schema.checkChild(nextPosition, '$text')) {\n            return nextPosition;\n        }\n    }\n}\n/**\n * Finds a correct position by walking in a text node and checking whether selection can be extended to given position\n * or should be extended further.\n */\nfunction getCorrectPosition(walker, unit, treatEmojiAsSingleUnit) {\n    const textNode = walker.position.textNode;\n    if (textNode) {\n        const data = textNode.data;\n        let offset = walker.position.offset - textNode.startOffset;\n        while (isInsideSurrogatePair(data, offset) ||\n            (unit == 'character' && isInsideCombinedSymbol(data, offset)) ||\n            (treatEmojiAsSingleUnit && isInsideEmojiSequence(data, offset))) {\n            walker.next();\n            offset = walker.position.offset - textNode.startOffset;\n        }\n    }\n    return walker.position;\n}\n/**\n * Finds a correct position of a word break by walking in a text node and checking whether selection can be extended to given position\n * or should be extended further.\n */\nfunction getCorrectWordBreakPosition(walker, isForward) {\n    let textNode = walker.position.textNode;\n    if (!textNode) {\n        textNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore;\n    }\n    while (textNode && textNode.is('$text')) {\n        const offset = walker.position.offset - textNode.startOffset;\n        // Check of adjacent text nodes with different attributes (like BOLD).\n        // Example          : 'foofoo []bar<$text bold=\"true\">bar</$text> bazbaz'\n        // should expand to : 'foofoo [bar<$text bold=\"true\">bar</$text>] bazbaz'.\n        if (isAtNodeBoundary(textNode, offset, isForward)) {\n            textNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore;\n        }\n        // Check if this is a word boundary.\n        else if (isAtWordBoundary(textNode.data, offset, isForward)) {\n            break;\n        }\n        // Maybe one more character.\n        else {\n            walker.next();\n        }\n    }\n    return walker.position;\n}\nfunction getSearchRange(start, isForward) {\n    const root = start.root;\n    const searchEnd = Position._createAt(root, isForward ? 'end' : 0);\n    if (isForward) {\n        return new Range(start, searchEnd);\n    }\n    else {\n        return new Range(searchEnd, start);\n    }\n}\n/**\n * Checks if selection is on word boundary.\n */\nfunction isAtWordBoundary(data, offset, isForward) {\n    // The offset to check depends on direction.\n    const offsetToCheck = offset + (isForward ? 0 : -1);\n    return wordBoundaryCharacters.includes(data.charAt(offsetToCheck));\n}\n/**\n * Checks if selection is on node boundary.\n */\nfunction isAtNodeBoundary(textNode, offset, isForward) {\n    return offset === (isForward ? textNode.offsetSize : 0);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/model\n */\nimport Batch from './batch.js';\nimport Document from './document.js';\nimport MarkerCollection from './markercollection.js';\nimport ModelPosition from './position.js';\nimport ModelRange from './range.js';\nimport ModelSelection from './selection.js';\nimport OperationFactory from './operation/operationfactory.js';\nimport DocumentSelection from './documentselection.js';\nimport Schema from './schema.js';\nimport Writer from './writer.js';\nimport Node from './node.js';\nimport { autoParagraphEmptyRoots } from './utils/autoparagraphing.js';\nimport { injectSelectionPostFixer } from './utils/selection-post-fixer.js';\nimport deleteContent from './utils/deletecontent.js';\nimport getSelectedContent from './utils/getselectedcontent.js';\nimport insertContent from './utils/insertcontent.js';\nimport insertObject from './utils/insertobject.js';\nimport modifySelection from './utils/modifyselection.js';\nimport { CKEditorError, ObservableMixin } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const { dumpTrees, initDocumentDumping } = require( '../dev-utils/utils' );\n// @if CK_DEBUG_ENGINE // const { OperationReplayer } = require( '../dev-utils/operationreplayer' ).default;\n/**\n * Editor's data model. Read about the model in the\n * {@glink framework/architecture/editing-engine engine architecture} guide.\n */\nexport default class Model extends /* #__PURE__ */ ObservableMixin() {\n    // @if CK_DEBUG_ENGINE // private _operationLogs: Array<string>;\n    // @if CK_DEBUG_ENGINE // private _appliedOperations: Array<Operation>;\n    constructor() {\n        super();\n        this.markers = new MarkerCollection();\n        this.document = new Document(this);\n        this.schema = new Schema();\n        this._pendingChanges = [];\n        this._currentWriter = null;\n        ['deleteContent', 'modifySelection', 'getSelectedContent', 'applyOperation']\n            .forEach(methodName => this.decorate(methodName));\n        // Adding operation validation with `highest` priority, so it is called before any other feature would like\n        // to do anything with the operation. If the operation has incorrect parameters it should throw on the earliest occasion.\n        this.on('applyOperation', (evt, args) => {\n            const operation = args[0];\n            operation._validate();\n        }, { priority: 'highest' });\n        // Register some default abstract entities.\n        this.schema.register('$root', {\n            isLimit: true\n        });\n        this.schema.register('$container', {\n            allowIn: ['$root', '$container']\n        });\n        this.schema.register('$block', {\n            allowIn: ['$root', '$container'],\n            isBlock: true\n        });\n        this.schema.register('$blockObject', {\n            allowWhere: '$block',\n            isBlock: true,\n            isObject: true\n        });\n        this.schema.register('$inlineObject', {\n            allowWhere: '$text',\n            allowAttributesOf: '$text',\n            isInline: true,\n            isObject: true\n        });\n        this.schema.register('$text', {\n            allowIn: '$block',\n            isInline: true,\n            isContent: true\n        });\n        this.schema.register('$clipboardHolder', {\n            allowContentOf: '$root',\n            allowChildren: '$text',\n            isLimit: true\n        });\n        this.schema.register('$documentFragment', {\n            allowContentOf: '$root',\n            allowChildren: '$text',\n            isLimit: true\n        });\n        // An element needed by the `upcastElementToMarker` converter.\n        // This element temporarily represents a marker boundary during the conversion process and is removed\n        // at the end of the conversion. `UpcastDispatcher` or at least `Conversion` class looks like a\n        // better place for this registration but both know nothing about `Schema`.\n        this.schema.register('$marker');\n        this.schema.addChildCheck(() => true, '$marker'); // Allow everywhere.\n        injectSelectionPostFixer(this);\n        // Post-fixer which takes care of adding empty paragraph elements to the empty roots.\n        this.document.registerPostFixer(autoParagraphEmptyRoots);\n        // The base implementation for \"decorated\" method with remapped arguments.\n        this.on('insertContent', (evt, [content, selectable]) => {\n            evt.return = insertContent(this, content, selectable);\n        });\n        // The base implementation for \"decorated\" method with remapped arguments.\n        this.on('insertObject', (evt, [element, selection, options]) => {\n            evt.return = insertObject(this, element, selection, options);\n        });\n        // The base implementation for \"decorated\" method with remapped arguments.\n        this.on('canEditAt', evt => {\n            const canEditAt = !this.document.isReadOnly;\n            evt.return = canEditAt;\n            if (!canEditAt) {\n                // Prevent further processing if the selection is at non-editable place.\n                evt.stop();\n            }\n        });\n        // @if CK_DEBUG_ENGINE // initDocumentDumping( this.document );\n        // @if CK_DEBUG_ENGINE // this.on( 'applyOperation', () => {\n        // @if CK_DEBUG_ENGINE // \tdumpTrees( this.document, this.document.version );\n        // @if CK_DEBUG_ENGINE // }, { priority: 'lowest' } );\n        // @if CK_DEBUG_ENGINE // this._operationLogs = [];\n        // @if CK_DEBUG_ENGINE // this._appliedOperations = [];\n    }\n    /**\n     * The `change()` method is the primary way of changing the model. You should use it to modify all document nodes\n     * (including detached nodes – i.e. nodes not added to the {@link module:engine/model/model~Model#document model document}),\n     * the {@link module:engine/model/document~Document#selection document's selection}, and\n     * {@link module:engine/model/model~Model#markers model markers}.\n     *\n     * ```ts\n     * model.change( writer => {\n     * \twriter.insertText( 'foo', paragraph, 'end' );\n     * } );\n     * ```\n     *\n     * All changes inside the change block use the same {@link module:engine/model/batch~Batch} so they are combined\n     * into a single undo step.\n     *\n     * ```ts\n     * model.change( writer => {\n     * \twriter.insertText( 'foo', paragraph, 'end' ); // foo.\n     *\n     * \tmodel.change( writer => {\n     * \t\twriter.insertText( 'bar', paragraph, 'end' ); // foobar.\n     * \t} );\n     *\n     * \twriter.insertText( 'bom', paragraph, 'end' ); // foobarbom.\n     * } );\n     * ```\n     *\n     * The callback of the `change()` block is executed synchronously.\n     *\n     * You can also return a value from the change block.\n     *\n     * ```ts\n     * const img = model.change( writer => {\n     * \treturn writer.createElement( 'img' );\n     * } );\n     * ```\n     *\n     * @see #enqueueChange\n     * @typeParam TReturn The return type of the provided callback.\n     * @param callback Callback function which may modify the model.\n     */\n    change(callback) {\n        try {\n            if (this._pendingChanges.length === 0) {\n                // If this is the outermost block, create a new batch and start `_runPendingChanges` execution flow.\n                this._pendingChanges.push({ batch: new Batch(), callback });\n                return this._runPendingChanges()[0];\n            }\n            else {\n                // If this is not the outermost block, just execute the callback.\n                return callback(this._currentWriter);\n            }\n        }\n        catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next -- @preserve */\n            CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    enqueueChange(batchOrType, callback) {\n        try {\n            if (!batchOrType) {\n                batchOrType = new Batch();\n            }\n            else if (typeof batchOrType === 'function') {\n                callback = batchOrType;\n                batchOrType = new Batch();\n            }\n            else if (!(batchOrType instanceof Batch)) {\n                batchOrType = new Batch(batchOrType);\n            }\n            this._pendingChanges.push({ batch: batchOrType, callback });\n            if (this._pendingChanges.length == 1) {\n                this._runPendingChanges();\n            }\n        }\n        catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next -- @preserve */\n            CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    /**\n     * {@link module:utils/observablemixin~Observable#decorate Decorated} function for applying\n     * {@link module:engine/model/operation/operation~Operation operations} to the model.\n     *\n     * This is a low-level way of changing the model. It is exposed for very specific use cases (like the undo feature).\n     * Normally, to modify the model, you will want to use {@link module:engine/model/writer~Writer `Writer`}.\n     * See also {@glink framework/architecture/editing-engine#changing-the-model Changing the model} section\n     * of the {@glink framework/architecture/editing-engine Editing architecture} guide.\n     *\n     * @param operation The operation to apply.\n     */\n    applyOperation(operation) {\n        // @if CK_DEBUG_ENGINE // console.log( 'Applying ' + operation );\n        // @if CK_DEBUG_ENGINE // this._operationLogs.push( JSON.stringify( operation ) );\n        // @if CK_DEBUG_ENGINE // this._appliedOperations.push( operation );\n        operation._execute();\n    }\n    // @if CK_DEBUG_ENGINE // public getAppliedOperation(): string {\n    // @if CK_DEBUG_ENGINE // \tif ( !this._appliedOperations ) {\n    // @if CK_DEBUG_ENGINE // \t\treturn '';\n    // @if CK_DEBUG_ENGINE // \t}\n    // @if CK_DEBUG_ENGINE // \treturn this._appliedOperations.map( operation => JSON.stringify( operation ) ).join( '-------' );\n    // @if CK_DEBUG_ENGINE // }\n    // @if CK_DEBUG_ENGINE // public createReplayer( stringifiedOperations: string ): typeof OperationReplayer {\n    // @if CK_DEBUG_ENGINE // \treturn new OperationReplayer( this, '-------', stringifiedOperations );\n    // @if CK_DEBUG_ENGINE // }\n    /**\n     * Inserts content at the position in the editor specified by the selection, as one would expect the paste\n     * functionality to work.\n     *\n     * **Note**: If you want to insert an {@glink framework/deep-dive/schema#object-elements object element}\n     * (e.g. a {@link module:widget/utils~toWidget widget}), see {@link #insertObject} instead.\n     *\n     * This is a high-level method. It takes the {@link #schema schema} into consideration when inserting\n     * the content, clears the given selection's content before inserting nodes and moves the selection\n     * to its target position at the end of the process.\n     * It can split elements, merge them, wrap bare text nodes with paragraphs, etc. &ndash; just like the\n     * pasting feature should do.\n     *\n     * For lower-level methods see {@link module:engine/model/writer~Writer `Writer`}.\n     *\n     * This method, unlike {@link module:engine/model/writer~Writer `Writer`}'s methods, does not have to be used\n     * inside a {@link #change `change()` block}.\n     *\n     * # Conversion and schema\n     *\n     * Inserting elements and text nodes into the model is not enough to make CKEditor 5 render that content\n     * to the user. CKEditor 5 implements a model-view-controller architecture and what `model.insertContent()` does\n     * is only adding nodes to the model. Additionally, you need to define\n     * {@glink framework/architecture/editing-engine#conversion converters} between the model and view\n     * and define those nodes in the {@glink framework/architecture/editing-engine#schema schema}.\n     *\n     * So, while this method may seem similar to CKEditor 4 `editor.insertHtml()` (in fact, both methods\n     * are used for paste-like content insertion), the CKEditor 5 method cannot be use to insert arbitrary HTML\n     * unless converters are defined for all elements and attributes in that HTML.\n     *\n     * # Examples\n     *\n     * Using `insertContent()` with a manually created model structure:\n     *\n     * ```ts\n     * // Let's create a document fragment containing such content as:\n     * //\n     * // <paragraph>foo</paragraph>\n     * // <blockQuote>\n     * //    <paragraph>bar</paragraph>\n     * // </blockQuote>\n     * const docFrag = editor.model.change( writer => {\n     * \tconst p1 = writer.createElement( 'paragraph' );\n     * \tconst p2 = writer.createElement( 'paragraph' );\n     * \tconst blockQuote = writer.createElement( 'blockQuote' );\n     * \tconst docFrag = writer.createDocumentFragment();\n     *\n     * \twriter.append( p1, docFrag );\n     * \twriter.append( blockQuote, docFrag );\n     * \twriter.append( p2, blockQuote );\n     * \twriter.insertText( 'foo', p1 );\n     * \twriter.insertText( 'bar', p2 );\n     *\n     * \treturn docFrag;\n     * } );\n     *\n     * // insertContent() does not have to be used in a change() block. It can, though,\n     * // so this code could be moved to the callback defined above.\n     * editor.model.insertContent( docFrag );\n     * ```\n     *\n     * Using `insertContent()` with an HTML string converted to a model document fragment (similar to the pasting mechanism):\n     *\n     * ```ts\n     * // You can create your own HtmlDataProcessor instance or use editor.data.processor\n     * // if you have not overridden the default one (which is the HtmlDataProcessor instance).\n     * const htmlDP = new HtmlDataProcessor( viewDocument );\n     *\n     * // Convert an HTML string to a view document fragment:\n     * const viewFragment = htmlDP.toView( htmlString );\n     *\n     * // Convert the view document fragment to a model document fragment\n     * // in the context of $root. This conversion takes the schema into\n     * // account so if, for example, the view document fragment contained a bare text node,\n     * // this text node cannot be a child of $root, so it will be automatically\n     * // wrapped with a <paragraph>. You can define the context yourself (in the second parameter),\n     * // and e.g. convert the content like it would happen in a <paragraph>.\n     * // Note: The clipboard feature uses a custom context called $clipboardHolder\n     * // which has a loosened schema.\n     * const modelFragment = editor.data.toModel( viewFragment );\n     *\n     * editor.model.insertContent( modelFragment );\n     * ```\n     *\n     * By default this method will use the document selection but it can also be used with a position, range or selection instance.\n     *\n     * ```ts\n     * // Insert text at the current document selection position.\n     * editor.model.change( writer => {\n     * \teditor.model.insertContent( writer.createText( 'x' ) );\n     * } );\n     *\n     * // Insert text at a given position - the document selection will not be modified.\n     * editor.model.change( writer => {\n     * \teditor.model.insertContent( writer.createText( 'x' ), doc.getRoot(), 2 );\n     *\n     * \t// Which is a shorthand for:\n     * \teditor.model.insertContent( writer.createText( 'x' ), writer.createPositionAt( doc.getRoot(), 2 ) );\n     * } );\n     * ```\n     *\n     * If you want the document selection to be moved to the inserted content, use the\n     * {@link module:engine/model/writer~Writer#setSelection `setSelection()`} method of the writer after inserting\n     * the content:\n     *\n     * ```ts\n     * editor.model.change( writer => {\n     * \tconst paragraph = writer.createElement( 'paragraph' );\n     *\n     * \t// Insert an empty paragraph at the beginning of the root.\n     * \teditor.model.insertContent( paragraph, writer.createPositionAt( editor.model.document.getRoot(), 0 ) );\n     *\n     * \t// Move the document selection to the inserted paragraph.\n     * \twriter.setSelection( paragraph, 'in' );\n     * } );\n     * ```\n     *\n     * If an instance of the {@link module:engine/model/selection~Selection model selection} is passed as `selectable`,\n     * the new content will be inserted at the passed selection (instead of document selection):\n     *\n     * ```ts\n     * editor.model.change( writer => {\n     * \t// Create a selection in a paragraph that will be used as a place of insertion.\n     * \tconst selection = writer.createSelection( paragraph, 'in' );\n     *\n     * \t// Insert the new text at the created selection.\n     * \teditor.model.insertContent( writer.createText( 'x' ), selection );\n     *\n     * \t// insertContent() modifies the passed selection instance so it can be used to set the document selection.\n     * \t// Note: This is not necessary when you passed the document selection to insertContent().\n     * \twriter.setSelection( selection );\n     * } );\n     * ```\n     *\n     * @fires insertContent\n     * @param content The content to insert.\n     * @param selectable The selection into which the content should be inserted.\n     * If not provided the current model document selection will be used.\n     * @param placeOrOffset To be used when a model item was passed as `selectable`.\n     * This param defines a position in relation to that item.\n     * at the insertion position.\n     */\n    insertContent(content, selectable, placeOrOffset, ...rest) {\n        const selection = normalizeSelectable(selectable, placeOrOffset);\n        // Passing all call arguments so it acts like decorated method.\n        return this.fire('insertContent', [content, selection, placeOrOffset, ...rest]);\n    }\n    /**\n     * Inserts an {@glink framework/deep-dive/schema#object-elements object element} at a specific position in the editor content.\n     *\n     * This is a high-level API:\n     * * It takes the {@link #schema schema} into consideration,\n     * * It clears the content of passed `selectable` before inserting,\n     * * It can move the selection at the end of the process,\n     * * It will copy the selected block's attributes to preserve them upon insertion,\n     * * It can split elements or wrap inline objects with paragraphs if they are not allowed in target position,\n     * * etc.\n     *\n     * # Notes\n     *\n     * * If you want to insert a non-object content, see {@link #insertContent} instead.\n     * * For lower-level API, see {@link module:engine/model/writer~Writer `Writer`}.\n     * * Unlike {@link module:engine/model/writer~Writer `Writer`}, this method does not have to be used inside\n     * a {@link #change `change()` block}.\n     * * Inserting object into the model is not enough to make CKEditor 5 render that content to the user.\n     * CKEditor 5 implements a model-view-controller architecture and what `model.insertObject()` does\n     * is only adding nodes to the model. Additionally, you need to define\n     * {@glink framework/architecture/editing-engine#conversion converters} between the model and view\n     * and define those nodes in the {@glink framework/architecture/editing-engine#schema schema}.\n     *\n     * # Examples\n     *\n     * Use the following code to insert an object at the current selection and keep the selection on the inserted element:\n     *\n     * ```ts\n     * const rawHtmlEmbedElement = writer.createElement( 'rawHtml' );\n     *\n     * model.insertObject( rawHtmlEmbedElement, null, null, {\n     * \tsetSelection: 'on'\n     * } );\n     * ```\n     *\n     * Use the following code to insert an object at the current selection and nudge the selection after the inserted object:\n     *\n     * ```ts\n     * const pageBreakElement = writer.createElement( 'pageBreak' );\n     *\n     * model.insertObject( pageBreakElement, null, null, {\n     * \tsetSelection: 'after'\n     * } );\n     * ```\n     *\n     * Use the following code to insert an object at the current selection and avoid splitting the content (non-destructive insertion):\n     *\n     * ```ts\n     * const tableElement = writer.createElement( 'table' );\n     *\n     * model.insertObject( tableElement, null, null, {\n     * \tfindOptimalPosition: 'auto'\n     * } );\n     * ```\n     *\n     * Use the following code to insert an object at the specific range (also: replace the content of the range):\n     *\n     * ```ts\n     * const tableElement = writer.createElement( 'table' );\n     * const range = model.createRangeOn( model.document.getRoot().getChild( 1 ) );\n     *\n     * model.insertObject( tableElement, range );\n     * ```\n     *\n     * @param element An object to be inserted into the model document.\n     * @param selectable A selectable where the content should be inserted. If not specified, the current\n     * {@link module:engine/model/document~Document#selection document selection} will be used instead.\n     * @param placeOrOffset Specifies the exact place or offset for the insertion to take place, relative to `selectable`.\n     * @param options Additional options.\n     * @param options.findOptimalPosition An option that, when set, adjusts the insertion position (relative to\n     * `selectable` and `placeOrOffset`) so that the content of `selectable` is not split upon insertion (a.k.a. non-destructive insertion).\n     * * When `'auto'`, the algorithm will decide whether to insert the object before or after `selectable` to avoid content splitting.\n     * * When `'before'`, the closest position before `selectable` will be used that will not result in content splitting.\n     * * When `'after'`, the closest position after `selectable` will be used that will not result in content splitting.\n     *\n     * Note that this option only works for block objects. Inline objects are inserted into text and do not split blocks.\n     * @param options.setSelection An option that, when set, moves the\n     * {@link module:engine/model/document~Document#selection document selection} after inserting the object.\n     * * When `'on'`, the document selection will be set on the inserted object.\n     * * When `'after'`, the document selection will move to the closest text node after the inserted object. If there is no\n     * such text node, a paragraph will be created and the document selection will be moved inside it.\n     * at the insertion position.\n     */\n    insertObject(element, selectable, placeOrOffset, options, ...rest) {\n        const selection = normalizeSelectable(selectable, placeOrOffset);\n        // Note that options are fired as 2 arguments for backward compatibility with the decorated method.\n        // Passing all call arguments so it acts like decorated method.\n        return this.fire('insertObject', [element, selection, options, options, ...rest]);\n    }\n    /**\n     * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n     *\n     * **Note:** For the sake of predictability, the resulting selection should always be collapsed.\n     * In cases where a feature wants to modify deleting behavior so selection isn't collapsed\n     * (e.g. a table feature may want to keep row selection after pressing <kbd>Backspace</kbd>),\n     * then that behavior should be implemented in the view's listener. At the same time, the table feature\n     * will need to modify this method's behavior too, e.g. to \"delete contents and then collapse\n     * the selection inside the last selected cell\" or \"delete the row and collapse selection somewhere near\".\n     * That needs to be done in order to ensure that other features which use `deleteContent()` will work well with tables.\n     *\n     * @fires deleteContent\n     * @param selection Selection of which the content should be deleted.\n     * @param options.leaveUnmerged Whether to merge elements after removing the content of the selection.\n     *\n     * For example `<heading1>x[x</heading1><paragraph>y]y</paragraph>` will become:\n     *\n     * * `<heading1>x^y</heading1>` with the option disabled (`leaveUnmerged == false`)\n     * * `<heading1>x^</heading1><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n     *\n     * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n     * elements will not be merged.\n     *\n     * @param options.doNotResetEntireContent Whether to skip replacing the entire content with a\n     * paragraph when the entire content was selected.\n     *\n     * For example `<heading1>[x</heading1><paragraph>y]</paragraph>` will become:\n     *\n     * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n     * * `<heading1>^</heading1>` with enabled (`doNotResetEntireContent == true`)\n     *\n     * @param options.doNotAutoparagraph Whether to create a paragraph if after content deletion selection is moved\n     * to a place where text cannot be inserted.\n     *\n     * For example `<paragraph>x</paragraph>[<imageBlock src=\"foo.jpg\"></imageBlock>]` will become:\n     *\n     * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n     * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).\n     *\n     * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n     *\n     * `[<imageBlock src=\"foo.jpg\"></imageBlock>]` -> `<paragraph>[]</paragraph>`.\n     *\n     * @param options.direction The direction in which the content is being consumed.\n     * Deleting backward corresponds to using the <kbd>Backspace</kbd> key, while deleting content forward corresponds to\n     * the <kbd>Shift</kbd>+<kbd>Backspace</kbd> keystroke.\n     */\n    deleteContent(selection, options) {\n        deleteContent(this, selection, options);\n    }\n    /**\n     * Modifies the selection. Currently, the supported modifications are:\n     *\n     * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n     * Possible values for `unit` are:\n     *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n     *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n     *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n     *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n     *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n     *  why `'character'` value is most natural and common method of modifying selection.\n     *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n     *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n     *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n     *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n     *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n     *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n     *  extension will include whole \"surrogate pair\".\n     *  * `'word'` - moves selection by a whole word.\n     *\n     * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n     *\n     * @fires modifySelection\n     * @param selection The selection to modify.\n     * @param options.direction The direction in which the selection should be modified.\n     * @param options.unit The unit by which selection should be modified.\n     * @param options.treatEmojiAsSingleUnit Whether multi-characer emoji sequences should be handled as single unit.\n     */\n    modifySelection(selection, options) {\n        modifySelection(this, selection, options);\n    }\n    /**\n     * Gets a clone of the selected content.\n     *\n     * For example, for the following selection:\n     *\n     * ```html\n     * <paragraph>x</paragraph>\n     * <blockQuote>\n     * \t<paragraph>y</paragraph>\n     * \t<heading1>fir[st</heading1>\n     * </blockQuote>\n     * <paragraph>se]cond</paragraph>\n     * <paragraph>z</paragraph>\n     * ```\n     *\n     * It will return a document fragment with such a content:\n     *\n     * ```html\n     * <blockQuote>\n     * \t<heading1>st</heading1>\n     * </blockQuote>\n     * <paragraph>se</paragraph>\n     * ```\n     *\n     * @fires getSelectedContent\n     * @param selection The selection of which content will be returned.\n     */\n    getSelectedContent(selection) {\n        return getSelectedContent(this, selection);\n    }\n    /**\n     * Checks whether the given {@link module:engine/model/range~Range range} or\n     * {@link module:engine/model/element~Element element} has any meaningful content.\n     *\n     * Meaningful content is:\n     *\n     * * any text node (`options.ignoreWhitespaces` allows controlling whether this text node must also contain\n     * any non-whitespace characters),\n     * * or any {@link module:engine/model/schema~Schema#isContent content element},\n     * * or any {@link module:engine/model/markercollection~Marker marker} which\n     * {@link module:engine/model/markercollection~Marker#_affectsData affects data}.\n     *\n     * This means that a range containing an empty `<paragraph></paragraph>` is not considered to have a meaningful content.\n     * However, a range containing an `<imageBlock></imageBlock>` (which would normally be marked in the schema as an object element)\n     * is considered non-empty.\n     *\n     * @param rangeOrElement Range or element to check.\n     * @param options.ignoreWhitespaces Whether text node with whitespaces only should be considered empty.\n     * @param options.ignoreMarkers Whether markers should be ignored.\n     */\n    hasContent(rangeOrElement, options = {}) {\n        const range = rangeOrElement instanceof ModelRange ? rangeOrElement : ModelRange._createIn(rangeOrElement);\n        if (range.isCollapsed) {\n            return false;\n        }\n        const { ignoreWhitespaces = false, ignoreMarkers = false } = options;\n        // Check if there are any markers which affects data in this given range.\n        if (!ignoreMarkers) {\n            for (const intersectingMarker of this.markers.getMarkersIntersectingRange(range)) {\n                if (intersectingMarker.affectsData) {\n                    return true;\n                }\n            }\n        }\n        for (const item of range.getItems()) {\n            if (this.schema.isContent(item)) {\n                if (item.is('$textProxy')) {\n                    if (!ignoreWhitespaces) {\n                        return true;\n                    }\n                    else if (item.data.search(/\\S/) !== -1) {\n                        return true;\n                    }\n                }\n                else {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Check whether given selectable is at a place in the model where it can be edited (returns `true`) or not (returns `false`).\n     *\n     * Should be used instead of {@link module:core/editor/editor~Editor#isReadOnly} to check whether a user action can happen at\n     * given selectable. It may be decorated and used differently in different environment (e.g. multi-root editor can disable\n     * a particular root).\n     *\n     * This method is decorated. Although this method accepts any parameter of `Selectable` type, the\n     * {@link ~Model#event:canEditAt `canEditAt` event} is fired with `selectable` normalized to an instance of\n     * {@link module:engine/model/selection~Selection} or {@link module:engine/model/documentselection~DocumentSelection}\n     *\n     * @fires canEditAt\n     */\n    canEditAt(selectable) {\n        const selection = normalizeSelectable(selectable);\n        return this.fire('canEditAt', [selection]);\n    }\n    /**\n     * Creates a position from the given root and path in that root.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createPositionFromPath `Writer#createPositionFromPath()`}.\n     *\n     * @param root Root of the position.\n     * @param path Position path. See {@link module:engine/model/position~Position#path}.\n     * @param stickiness Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n     */\n    createPositionFromPath(root, path, stickiness) {\n        return new ModelPosition(root, path, stickiness);\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/model/position~Position position},\n     * * a parent element and offset in that element,\n     * * a parent element and `'end'` (the position will be set at the end of that element),\n     * * a {@link module:engine/model/item~Item model item} and `'before'` or `'after'`\n     * (the position will be set before or after the given model item).\n     *\n     * This method is a shortcut to other factory methods such as:\n     *\n     * * {@link module:engine/model/model~Model#createPositionBefore `createPositionBefore()`},\n     * * {@link module:engine/model/model~Model#createPositionAfter `createPositionAfter()`}.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createPositionAt `Writer#createPositionAt()`},\n     *\n     * @param itemOrPosition\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    createPositionAt(itemOrPosition, offset) {\n        return ModelPosition._createAt(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new position after the given {@link module:engine/model/item~Item model item}.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createPositionAfter `Writer#createPositionAfter()`}.\n     *\n     * @param item Item after which the position should be placed.\n     */\n    createPositionAfter(item) {\n        return ModelPosition._createAfter(item);\n    }\n    /**\n     * Creates a new position before the given {@link module:engine/model/item~Item model item}.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createPositionBefore `Writer#createPositionBefore()`}.\n     *\n     * @param item Item before which the position should be placed.\n     */\n    createPositionBefore(item) {\n        return ModelPosition._createBefore(item);\n    }\n    /**\n     * Creates a range spanning from the `start` position to the `end` position.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createRange `Writer#createRange()`}:\n     *\n     * ```ts\n     * model.change( writer => {\n     * \tconst range = writer.createRange( start, end );\n     * } );\n     * ```\n     *\n     * @param start Start position.\n     * @param end End position. If not set, the range will be collapsed to the `start` position.\n     */\n    createRange(start, end) {\n        return new ModelRange(start, end);\n    }\n    /**\n     * Creates a range inside the given element which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createRangeIn `Writer#createRangeIn()`}:\n     *\n     * ```ts\n     * model.change( writer => {\n     * \tconst range = writer.createRangeIn( paragraph );\n     * } );\n     * ```\n     *\n     * @param element Element which is a parent for the range.\n     */\n    createRangeIn(element) {\n        return ModelRange._createIn(element);\n    }\n    /**\n     * Creates a range that starts before the given {@link module:engine/model/item~Item model item} and ends after it.\n     *\n     * Note: This method is also available on `writer` instance as\n     * {@link module:engine/model/writer~Writer#createRangeOn `Writer.createRangeOn()`}:\n     *\n     * ```ts\n     * model.change( writer => {\n     * \tconst range = writer.createRangeOn( paragraph );\n     * } );\n     * ```\n     *\n     * @param item\n     */\n    createRangeOn(item) {\n        return ModelRange._createOn(item);\n    }\n    createSelection(...args) {\n        return new ModelSelection(...args);\n    }\n    /**\n     * Creates a {@link module:engine/model/batch~Batch} instance.\n     *\n     * **Note:** In most cases creating a batch instance is not necessary as they are created when using:\n     *\n     * * {@link #change `change()`},\n     * * {@link #enqueueChange `enqueueChange()`}.\n     *\n     * @param type {@link module:engine/model/batch~Batch#constructor The type} of the batch.\n     */\n    createBatch(type) {\n        return new Batch(type);\n    }\n    /**\n     * Creates an operation instance from a JSON object (parsed JSON string).\n     *\n     * This is an alias for {@link module:engine/model/operation/operationfactory~OperationFactory.fromJSON `OperationFactory.fromJSON()`}.\n     *\n     * @param json Deserialized JSON object.\n     */\n    createOperationFromJSON(json) {\n        return OperationFactory.fromJSON(json, this.document);\n    }\n    /**\n     * Removes all events listeners set by model instance and destroys {@link module:engine/model/document~Document}.\n     */\n    destroy() {\n        this.document.destroy();\n        this.stopListening();\n    }\n    /**\n     * Common part of {@link module:engine/model/model~Model#change} and {@link module:engine/model/model~Model#enqueueChange}\n     * which calls callbacks and returns array of values returned by these callbacks.\n     */\n    _runPendingChanges() {\n        const ret = [];\n        this.fire('_beforeChanges');\n        try {\n            while (this._pendingChanges.length) {\n                // Create a new writer using batch instance created for this chain of changes.\n                const currentBatch = this._pendingChanges[0].batch;\n                this._currentWriter = new Writer(this, currentBatch);\n                // Execute changes callback and gather the returned value.\n                const callbackReturnValue = this._pendingChanges[0].callback(this._currentWriter);\n                ret.push(callbackReturnValue);\n                this.document._handleChangeBlock(this._currentWriter);\n                this._pendingChanges.shift();\n                this._currentWriter = null;\n            }\n        }\n        finally {\n            this._pendingChanges.length = 0;\n            this._currentWriter = null;\n            this.fire('_afterChanges');\n        }\n        return ret;\n    }\n}\n/**\n * Normalizes a selectable to a Selection or DocumentSelection.\n */\nfunction normalizeSelectable(selectable, placeOrOffset) {\n    if (!selectable) {\n        return;\n    }\n    if (selectable instanceof ModelSelection || selectable instanceof DocumentSelection) {\n        return selectable;\n    }\n    if (selectable instanceof Node) {\n        if (placeOrOffset || placeOrOffset === 0) {\n            return new ModelSelection(selectable, placeOrOffset);\n        }\n        else if (selectable.is('rootElement')) {\n            return new ModelSelection(selectable, 'in');\n        }\n        else {\n            return new ModelSelection(selectable, 'on');\n        }\n    }\n    return new ModelSelection(selectable);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/mouseobserver\n */\nimport DomEventObserver from './domeventobserver.js';\n/**\n * Mouse events observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View} by {@link module:engine/view/view~View#addObserver} method.\n */\nexport default class MouseObserver extends DomEventObserver {\n    constructor() {\n        super(...arguments);\n        /**\n         * @inheritDoc\n         */\n        this.domEventType = ['mousedown', 'mouseup', 'mouseover', 'mouseout'];\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvent) {\n        this.fire(domEvent.type, domEvent);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/dev-utils/view\n */\n/* globals document */\n/**\n * Collection of methods for manipulating the {@link module:engine/view/view view} for testing purposes.\n */\nimport View from '../view/view.js';\nimport ViewDocument from '../view/document.js';\nimport ViewDocumentFragment from '../view/documentfragment.js';\nimport XmlDataProcessor from '../dataprocessor/xmldataprocessor.js';\nimport ViewElement from '../view/element.js';\nimport DocumentSelection from '../view/documentselection.js';\nimport Range from '../view/range.js';\nimport Position from '../view/position.js';\nimport AttributeElement from '../view/attributeelement.js';\nimport ContainerElement from '../view/containerelement.js';\nimport EmptyElement from '../view/emptyelement.js';\nimport UIElement from '../view/uielement.js';\nimport RawElement from '../view/rawelement.js';\nimport { StylesProcessor } from '../view/stylesmap.js';\nconst ELEMENT_RANGE_START_TOKEN = '[';\nconst ELEMENT_RANGE_END_TOKEN = ']';\nconst TEXT_RANGE_START_TOKEN = '{';\nconst TEXT_RANGE_END_TOKEN = '}';\nconst allowedTypes = {\n    'container': ContainerElement,\n    'attribute': AttributeElement,\n    'empty': EmptyElement,\n    'ui': UIElement,\n    'raw': RawElement\n};\n// Returns simplified implementation of {@link module:engine/view/domconverter~DomConverter#setContentOf DomConverter.setContentOf} method.\n// Used to render UIElement and RawElement.\nconst domConverterStub = {\n    setContentOf: (node, html) => {\n        node.innerHTML = html;\n    }\n};\n/**\n * Writes the content of the {@link module:engine/view/document~Document document} to an HTML-like string.\n *\n * @param options.withoutSelection Whether to write the selection. When set to `true`, the selection will\n * not be included in the returned string.\n * @param options.rootName The name of the root from which the data should be stringified. If not provided,\n * the default `main` name will be used.\n * @param options.showType When set to `true`, the type of elements will be printed (`<container:p>`\n * instead of `<p>`, `<attribute:b>` instead of `<b>` and `<empty:img>` instead of `<img>`).\n * @param options.showPriority When set to `true`, the attribute element's priority will be printed\n * (`<span view-priority=\"12\">`, `<b view-priority=\"10\">`).\n * @param options.showAttributeElementId When set to `true`, the attribute element's ID will be printed\n * (`<span id=\"marker:foo\">`).\n * @param options.renderUIElements When set to `true`, the inner content of each\n * {@link module:engine/view/uielement~UIElement} will be printed.\n * @param options.renderRawElements When set to `true`, the inner content of each\n * {@link module:engine/view/rawelement~RawElement} will be printed.\n * @param options.domConverter When set to an actual {@link module:engine/view/domconverter~DomConverter DomConverter}\n * instance, it lets the conversion go through exactly the same flow the editing view is going through,\n * i.e. with view data filtering. Otherwise the simple stub is used.\n * @returns The stringified data.\n */\nexport function getData(view, options = {}) {\n    if (!(view instanceof View)) {\n        throw new TypeError('View needs to be an instance of module:engine/view/view~View.');\n    }\n    const document = view.document;\n    const withoutSelection = !!options.withoutSelection;\n    const rootName = options.rootName || 'main';\n    const root = document.getRoot(rootName);\n    const stringifyOptions = {\n        showType: options.showType,\n        showPriority: options.showPriority,\n        renderUIElements: options.renderUIElements,\n        renderRawElements: options.renderRawElements,\n        ignoreRoot: true,\n        domConverter: options.domConverter\n    };\n    return withoutSelection ?\n        getData._stringify(root, null, stringifyOptions) :\n        getData._stringify(root, document.selection, stringifyOptions);\n}\n// Set stringify as getData private method - needed for testing/spying.\ngetData._stringify = stringify;\n/**\n * Sets the content of a view {@link module:engine/view/document~Document document} provided as an HTML-like string.\n *\n * @param data An HTML-like string to write into the document.\n * @param options.rootName The root name where parsed data will be stored. If not provided,\n * the default `main` name will be used.\n */\nexport function setData(view, data, options = {}) {\n    if (!(view instanceof View)) {\n        throw new TypeError('View needs to be an instance of module:engine/view/view~View.');\n    }\n    const document = view.document;\n    const rootName = options.rootName || 'main';\n    const root = document.getRoot(rootName);\n    view.change(writer => {\n        const result = setData._parse(data, { rootElement: root });\n        if (result.view && result.selection) {\n            writer.setSelection(result.selection);\n        }\n    });\n}\n// Set parse as setData private method - needed for testing/spying.\nsetData._parse = parse;\n/**\n * Converts view elements to HTML-like string representation.\n *\n * A root element can be provided as {@link module:engine/view/text~Text text}:\n *\n * ```ts\n * const text = downcastWriter.createText( 'foobar' );\n * stringify( text ); // 'foobar'\n * ```\n *\n * or as an {@link module:engine/view/element~Element element}:\n *\n * ```ts\n * const element = downcastWriter.createElement( 'p', null, downcastWriter.createText( 'foobar' ) );\n * stringify( element ); // '<p>foobar</p>'\n * ```\n *\n * or as a {@link module:engine/view/documentfragment~DocumentFragment document fragment}:\n *\n * ```ts\n * const text = downcastWriter.createText( 'foobar' );\n * const b = downcastWriter.createElement( 'b', { name: 'test' }, text );\n * const p = downcastWriter.createElement( 'p', { style: 'color:red;' } );\n * const fragment = downcastWriter.createDocumentFragment( [ p, b ] );\n *\n * stringify( fragment ); // '<p style=\"color:red;\"></p><b name=\"test\">foobar</b>'\n * ```\n *\n * Additionally, a {@link module:engine/view/documentselection~DocumentSelection selection} instance can be provided.\n * Ranges from the selection will then be included in the output data.\n * If a range position is placed inside the element node, it will be represented with `[` and `]`:\n *\n * ```ts\n * const text = downcastWriter.createText( 'foobar' );\n * const b = downcastWriter.createElement( 'b', null, text );\n * const p = downcastWriter.createElement( 'p', null, b );\n * const selection = downcastWriter.createSelection(\n * \tdowncastWriter.createRangeIn( p )\n * );\n *\n * stringify( p, selection ); // '<p>[<b>foobar</b>]</p>'\n * ```\n *\n * If a range is placed inside the text node, it will be represented with `{` and `}`:\n *\n * ```ts\n * const text = downcastWriter.createText( 'foobar' );\n * const b = downcastWriter.createElement( 'b', null, text );\n * const p = downcastWriter.createElement( 'p', null, b );\n * const selection = downcastWriter.createSelection(\n * \tdowncastWriter.createRange( downcastWriter.createPositionAt( text, 1 ), downcastWriter.createPositionAt( text, 5 ) )\n * );\n *\n * stringify( p, selection ); // '<p><b>f{ooba}r</b></p>'\n * ```\n *\n * ** Note: **\n * It is possible to unify selection markers to `[` and `]` for both (inside and outside text)\n * by setting the `sameSelectionCharacters=true` option. It is mainly used when the view stringify option is used by\n * model utilities.\n *\n * Multiple ranges are supported:\n *\n * ```ts\n * const text = downcastWriter.createText( 'foobar' );\n * const selection = downcastWriter.createSelection( [\n * \tdowncastWriter.createRange( downcastWriter.createPositionAt( text, 0 ), downcastWriter.createPositionAt( text, 1 ) ),\n * \tdowncastWriter.createRange( downcastWriter.createPositionAt( text, 3 ), downcastWriter.createPositionAt( text, 5 ) )\n * ] );\n *\n * stringify( text, selection ); // '{f}oo{ba}r'\n * ```\n *\n * A {@link module:engine/view/range~Range range} or {@link module:engine/view/position~Position position} instance can be provided\n * instead of the {@link module:engine/view/documentselection~DocumentSelection selection} instance. If a range instance\n * is provided, it will be converted to a selection containing this range. If a position instance is provided, it will\n * be converted to a selection containing one range collapsed at this position.\n *\n * ```ts\n * const text = downcastWriter.createText( 'foobar' );\n * const range = downcastWriter.createRange( downcastWriter.createPositionAt( text, 0 ), downcastWriter.createPositionAt( text, 1 ) );\n * const position = downcastWriter.createPositionAt( text, 3 );\n *\n * stringify( text, range ); // '{f}oobar'\n * stringify( text, position ); // 'foo{}bar'\n * ```\n *\n * An additional `options` object can be provided.\n * If `options.showType` is set to `true`, element's types will be\n * presented for {@link module:engine/view/attributeelement~AttributeElement attribute elements},\n * {@link module:engine/view/containerelement~ContainerElement container elements}\n * {@link module:engine/view/emptyelement~EmptyElement empty elements}\n * and {@link module:engine/view/uielement~UIElement UI elements}:\n *\n * ```ts\n * const attribute = downcastWriter.createAttributeElement( 'b' );\n * const container = downcastWriter.createContainerElement( 'p' );\n * const empty = downcastWriter.createEmptyElement( 'img' );\n * const ui = downcastWriter.createUIElement( 'span' );\n * getData( attribute, null, { showType: true } ); // '<attribute:b></attribute:b>'\n * getData( container, null, { showType: true } ); // '<container:p></container:p>'\n * getData( empty, null, { showType: true } ); // '<empty:img></empty:img>'\n * getData( ui, null, { showType: true } ); // '<ui:span></ui:span>'\n * ```\n *\n * If `options.showPriority` is set to `true`, a priority will be displayed for all\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements}.\n *\n * ```ts\n * const attribute = downcastWriter.createAttributeElement( 'b' );\n * attribute._priority = 20;\n * getData( attribute, null, { showPriority: true } ); // <b view-priority=\"20\"></b>\n * ```\n *\n * If `options.showAttributeElementId` is set to `true`, the attribute element's id will be displayed for all\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that have it set.\n *\n * ```ts\n * const attribute = downcastWriter.createAttributeElement( 'span' );\n * attribute._id = 'marker:foo';\n * getData( attribute, null, { showAttributeElementId: true } ); // <span view-id=\"marker:foo\"></span>\n * ```\n *\n * @param node The node to stringify.\n * @param selectionOrPositionOrRange A selection instance whose ranges will be included in the returned string data.\n * If a range instance is provided, it will be converted to a selection containing this range. If a position instance\n * is provided, it will be converted to a selection containing one range collapsed at this position.\n * @param options An object with additional options.\n * @param options.showType When set to `true`, the type of elements will be printed (`<container:p>`\n * instead of `<p>`, `<attribute:b>` instead of `<b>` and `<empty:img>` instead of `<img>`).\n * @param options.showPriority When set to `true`,  the attribute element's priority will be printed\n * (`<span view-priority=\"12\">`, `<b view-priority=\"10\">`).\n * @param options.showAttributeElementId When set to `true`, attribute element's id will be printed\n * (`<span id=\"marker:foo\">`).\n * @param options.ignoreRoot When set to `true`, the root's element opening and closing will not be printed.\n * Mainly used by the `getData` function to ignore the {@link module:engine/view/document~Document document's} root element.\n * @param options.sameSelectionCharacters When set to `true`, the selection inside the text will be marked as\n *  `{` and `}` and the selection outside the text as `[` and `]`. When set to `false`, both will be marked as `[` and `]` only.\n * @param options.renderUIElements When set to `true`, the inner content of each\n * {@link module:engine/view/uielement~UIElement} will be printed.\n * @param options.renderRawElements When set to `true`, the inner content of each\n * {@link module:engine/view/rawelement~RawElement} will be printed.\n * @param options.domConverter When set to an actual {@link module:engine/view/domconverter~DomConverter DomConverter}\n * instance, it lets the conversion go through exactly the same flow the editing view is going through,\n * i.e. with view data filtering. Otherwise the simple stub is used.\n * @returns An HTML-like string representing the view.\n */\nexport function stringify(node, selectionOrPositionOrRange = null, options = {}) {\n    let selection;\n    if (selectionOrPositionOrRange instanceof Position ||\n        selectionOrPositionOrRange instanceof Range) {\n        selection = new DocumentSelection(selectionOrPositionOrRange);\n    }\n    else {\n        selection = selectionOrPositionOrRange;\n    }\n    const viewStringify = new ViewStringify(node, selection, options);\n    return viewStringify.stringify();\n}\n/**\n * Parses an HTML-like string and returns a view tree.\n * A simple string will be converted to a {@link module:engine/view/text~Text text} node:\n *\n * ```ts\n * parse( 'foobar' ); // Returns an instance of text.\n * ```\n *\n * {@link module:engine/view/element~Element Elements} will be parsed with attributes as children:\n *\n * ```ts\n * parse( '<b name=\"baz\">foobar</b>' ); // Returns an instance of element with the `baz` attribute and a text child node.\n * ```\n *\n * Multiple nodes provided on root level will be converted to a\n * {@link module:engine/view/documentfragment~DocumentFragment document fragment}:\n *\n * ```ts\n * parse( '<b>foo</b><i>bar</i>' ); // Returns a document fragment with two child elements.\n * ```\n *\n * The method can parse multiple {@link module:engine/view/range~Range ranges} provided in string data and return a\n * {@link module:engine/view/documentselection~DocumentSelection selection} instance containing these ranges. Ranges placed inside\n * {@link module:engine/view/text~Text text} nodes should be marked using `{` and `}` brackets:\n *\n * ```ts\n * const { text, selection } = parse( 'f{ooba}r' );\n * ```\n *\n * Ranges placed outside text nodes should be marked using `[` and `]` brackets:\n *\n * ```ts\n * const { root, selection } = parse( '<p>[<b>foobar</b>]</p>' );\n * ```\n *\n * ** Note: **\n * It is possible to unify selection markers to `[` and `]` for both (inside and outside text)\n * by setting `sameSelectionCharacters=true` option. It is mainly used when the view parse option is used by model utilities.\n *\n * Sometimes there is a need for defining the order of ranges inside the created selection. This can be achieved by providing\n * the range order array as an additional parameter:\n *\n * ```ts\n * const { root, selection } = parse( '{fo}ob{ar}{ba}z', { order: [ 2, 3, 1 ] } );\n * ```\n *\n * In the example above, the first range (`{fo}`) will be added to the selection as the second one, the second range (`{ar}`) will be\n * added as the third and the third range (`{ba}`) will be added as the first one.\n *\n * If the selection's last range should be added as a backward one\n * (so the {@link module:engine/view/documentselection~DocumentSelection#anchor selection anchor} is represented\n * by the `end` position and {@link module:engine/view/documentselection~DocumentSelection#focus selection focus} is\n * represented by the `start` position), use the `lastRangeBackward` flag:\n *\n * ```ts\n * const { root, selection } = parse( `{foo}bar{baz}`, { lastRangeBackward: true } );\n * ```\n *\n * Some more examples and edge cases:\n *\n * ```ts\n * // Returns an empty document fragment.\n * parse( '' );\n *\n * // Returns an empty document fragment and a collapsed selection.\n * const { root, selection } = parse( '[]' );\n *\n * // Returns an element and a selection that is placed inside the document fragment containing that element.\n * const { root, selection } = parse( '[<a></a>]' );\n * ```\n *\n * @param data An HTML-like string to be parsed.\n * @param options.order An array with the order of parsed ranges added to the returned\n * {@link module:engine/view/documentselection~DocumentSelection Selection} instance. Each element should represent the\n * desired position of each range in the selection instance. For example: `[2, 3, 1]` means that the first range will be\n * placed as the second, the second as the third and the third as the first.\n * @param options.lastRangeBackward If set to `true`, the last range will be added as backward to the returned\n * {@link module:engine/view/documentselection~DocumentSelection selection} instance.\n * @param options.rootElement The default root to use when parsing elements.\n * When set to `null`, the root element will be created automatically. If set to\n * {@link module:engine/view/element~Element Element} or {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment},\n * this node will be used as the root for all parsed nodes.\n * @param options.sameSelectionCharacters When set to `false`, the selection inside the text should be marked using\n * `{` and `}` and the selection outside the ext using `[` and `]`. When set to `true`, both should be marked with `[` and `]` only.\n * @param options.stylesProcessor Styles processor.\n * @returns Returns the parsed view node or an object with two fields: `view` and `selection` when selection ranges were included in the\n * data to parse.\n */\nexport function parse(data, options = {}) {\n    const viewDocument = new ViewDocument(new StylesProcessor());\n    options.order = options.order || [];\n    const rangeParser = new RangeParser({\n        sameSelectionCharacters: options.sameSelectionCharacters\n    });\n    const processor = new XmlDataProcessor(viewDocument, {\n        namespaces: Object.keys(allowedTypes)\n    });\n    if (options.inlineObjectElements) {\n        processor.domConverter.inlineObjectElements.push(...options.inlineObjectElements);\n    }\n    // Convert data to view.\n    let view = processor.toView(data);\n    // At this point we have a view tree with Elements that could have names like `attribute:b:1`. In the next step\n    // we need to parse Element's names and convert them to AttributeElements and ContainerElements.\n    view = _convertViewElements(view);\n    // If custom root is provided - move all nodes there.\n    if (options.rootElement) {\n        const root = options.rootElement;\n        const nodes = view._removeChildren(0, view.childCount);\n        root._removeChildren(0, root.childCount);\n        root._appendChild(nodes);\n        view = root;\n    }\n    // Parse ranges included in view text nodes.\n    const ranges = rangeParser.parse(view, options.order);\n    // If only one element is returned inside DocumentFragment - return that element.\n    if (view.is('documentFragment') && view.childCount === 1) {\n        view = view.getChild(0);\n    }\n    // When ranges are present - return object containing view, and selection.\n    if (ranges.length) {\n        const selection = new DocumentSelection(ranges, { backward: !!options.lastRangeBackward });\n        return {\n            view,\n            selection\n        };\n    }\n    // If single element is returned without selection - remove it from parent and return detached element.\n    if (view.parent) {\n        view._remove();\n    }\n    return view;\n}\n/**\n * Private helper class used for converting ranges represented as text inside view {@link module:engine/view/text~Text text nodes}.\n */\nclass RangeParser {\n    /**\n     * Creates a range parser instance.\n     *\n     * @param options The range parser configuration.\n     * @param options.sameSelectionCharacters When set to `true`, the selection inside the text is marked as\n     * `{` and `}` and the selection outside the text as `[` and `]`. When set to `false`, both are marked as `[` and `]`.\n     */\n    constructor(options) {\n        this.sameSelectionCharacters = !!options.sameSelectionCharacters;\n    }\n    /**\n     * Parses the view and returns ranges represented inside {@link module:engine/view/text~Text text nodes}.\n     * The method will remove all occurrences of `{`, `}`, `[` and `]` from found text nodes. If a text node is empty after\n     * the process, it will be removed, too.\n     *\n     * @param node The starting node.\n     * @param order The order of ranges. Each element should represent the desired position of the range after\n     * sorting. For example: `[2, 3, 1]` means that the first range will be placed as the second, the second as the third and the third\n     * as the first.\n     * @returns An array with ranges found.\n     */\n    parse(node, order) {\n        this._positions = [];\n        // Remove all range brackets from view nodes and save their positions.\n        this._getPositions(node);\n        // Create ranges using gathered positions.\n        let ranges = this._createRanges();\n        // Sort ranges if needed.\n        if (order.length) {\n            if (order.length != ranges.length) {\n                throw new Error(`Parse error - there are ${ranges.length} ranges found, but ranges order array contains ${order.length} elements.`);\n            }\n            ranges = this._sortRanges(ranges, order);\n        }\n        return ranges;\n    }\n    /**\n     * Gathers positions of brackets inside the view tree starting from the provided node. The method will remove all occurrences of\n     * `{`, `}`, `[` and `]` from found text nodes. If a text node is empty after the process, it will be removed, too.\n     *\n     * @param node Staring node.\n     */\n    _getPositions(node) {\n        if (node.is('documentFragment') || node.is('element')) {\n            // Copy elements into the array, when nodes will be removed from parent node this array will still have all the\n            // items needed for iteration.\n            const children = [...node.getChildren()];\n            for (const child of children) {\n                this._getPositions(child);\n            }\n        }\n        if (node.is('$text')) {\n            const regexp = new RegExp(`[${TEXT_RANGE_START_TOKEN}${TEXT_RANGE_END_TOKEN}\\\\${ELEMENT_RANGE_END_TOKEN}\\\\${ELEMENT_RANGE_START_TOKEN}]`, 'g');\n            let text = node.data;\n            let match;\n            let offset = 0;\n            const brackets = [];\n            // Remove brackets from text and store info about offset inside text node.\n            while ((match = regexp.exec(text))) {\n                const index = match.index;\n                const bracket = match[0];\n                brackets.push({\n                    bracket,\n                    textOffset: index - offset\n                });\n                offset++;\n            }\n            text = text.replace(regexp, '');\n            node._data = text;\n            const index = node.index;\n            const parent = node.parent;\n            // Remove empty text nodes.\n            if (!text) {\n                node._remove();\n            }\n            for (const item of brackets) {\n                // Non-empty text node.\n                if (text) {\n                    if (this.sameSelectionCharacters ||\n                        (!this.sameSelectionCharacters &&\n                            (item.bracket == TEXT_RANGE_START_TOKEN || item.bracket == TEXT_RANGE_END_TOKEN))) {\n                        // Store information about text range delimiter.\n                        this._positions.push({\n                            bracket: item.bracket,\n                            position: new Position(node, item.textOffset)\n                        });\n                    }\n                    else {\n                        // Check if element range delimiter is not placed inside text node.\n                        if (!this.sameSelectionCharacters && item.textOffset !== 0 && item.textOffset !== text.length) {\n                            throw new Error(`Parse error - range delimiter '${item.bracket}' is placed inside text node.`);\n                        }\n                        // If bracket is placed at the end of the text node - it should be positioned after it.\n                        const offset = (item.textOffset === 0 ? index : index + 1);\n                        // Store information about element range delimiter.\n                        this._positions.push({\n                            bracket: item.bracket,\n                            position: new Position(parent, offset)\n                        });\n                    }\n                }\n                else {\n                    if (!this.sameSelectionCharacters &&\n                        item.bracket == TEXT_RANGE_START_TOKEN ||\n                        item.bracket == TEXT_RANGE_END_TOKEN) {\n                        throw new Error(`Parse error - text range delimiter '${item.bracket}' is placed inside empty text node. `);\n                    }\n                    // Store information about element range delimiter.\n                    this._positions.push({\n                        bracket: item.bracket,\n                        position: new Position(parent, index)\n                    });\n                }\n            }\n        }\n    }\n    /**\n     * Sorts ranges in a given order. Range order should be an array and each element should represent the desired position\n     * of the range after sorting.\n     * For example: `[2, 3, 1]` means that the first range will be placed as the second, the second as the third and the third\n     * as the first.\n     *\n     * @param ranges Ranges to sort.\n     * @param rangesOrder An array with new range order.\n     * @returns Sorted ranges array.\n     */\n    _sortRanges(ranges, rangesOrder) {\n        const sortedRanges = [];\n        let index = 0;\n        for (const newPosition of rangesOrder) {\n            if (ranges[newPosition - 1] === undefined) {\n                throw new Error('Parse error - provided ranges order is invalid.');\n            }\n            sortedRanges[newPosition - 1] = ranges[index];\n            index++;\n        }\n        return sortedRanges;\n    }\n    /**\n     * Uses all found bracket positions to create ranges from them.\n     */\n    _createRanges() {\n        const ranges = [];\n        let range = null;\n        for (const item of this._positions) {\n            // When end of range is found without opening.\n            if (!range && (item.bracket == ELEMENT_RANGE_END_TOKEN || item.bracket == TEXT_RANGE_END_TOKEN)) {\n                throw new Error(`Parse error - end of range was found '${item.bracket}' but range was not started before.`);\n            }\n            // When second start of range is found when one is already opened - selection does not allow intersecting\n            // ranges.\n            if (range && (item.bracket == ELEMENT_RANGE_START_TOKEN || item.bracket == TEXT_RANGE_START_TOKEN)) {\n                throw new Error(`Parse error - start of range was found '${item.bracket}' but one range is already started.`);\n            }\n            if (item.bracket == ELEMENT_RANGE_START_TOKEN || item.bracket == TEXT_RANGE_START_TOKEN) {\n                range = new Range(item.position, item.position);\n            }\n            else {\n                range.end = item.position;\n                ranges.push(range);\n                range = null;\n            }\n        }\n        // Check if all ranges have proper ending.\n        if (range !== null) {\n            throw new Error('Parse error - range was started but no end delimiter was found.');\n        }\n        return ranges;\n    }\n}\n/**\n * Private helper class used for converting the view tree to a string.\n */\nclass ViewStringify {\n    /**\n     * Creates a view stringify instance.\n     *\n     * @param selection A selection whose ranges should also be converted to a string.\n     * @param options An options object.\n     * @param options.showType When set to `true`, the type of elements will be printed (`<container:p>`\n     * instead of `<p>`, `<attribute:b>` instead of `<b>` and `<empty:img>` instead of `<img>`).\n     * @param options.showPriority When set to `true`, the attribute element's priority will be printed.\n     * @param options.ignoreRoot When set to `true`, the root's element opening and closing tag will not\n     * be outputted.\n     * @param options.sameSelectionCharacters When set to `true`, the selection inside the text is marked as\n     * `{` and `}` and the selection outside the text as `[` and `]`. When set to `false`, both are marked as `[` and `]`.\n     * @param options.renderUIElements When set to `true`, the inner content of each\n     * {@link module:engine/view/uielement~UIElement} will be printed.\n     * @param options.renderRawElements When set to `true`, the inner content of each\n     * @param options.domConverter When set to an actual {@link module:engine/view/domconverter~DomConverter DomConverter}\n     * instance, it lets the conversion go through exactly the same flow the editing view is going through,\n     * i.e. with view data filtering. Otherwise the simple stub is used.\n     * {@link module:engine/view/rawelement~RawElement} will be printed.\n     */\n    constructor(root, selection, options) {\n        this.root = root;\n        this.selection = selection;\n        this.ranges = [];\n        if (selection) {\n            this.ranges = [...selection.getRanges()];\n        }\n        this.showType = !!options.showType;\n        this.showPriority = !!options.showPriority;\n        this.showAttributeElementId = !!options.showAttributeElementId;\n        this.ignoreRoot = !!options.ignoreRoot;\n        this.sameSelectionCharacters = !!options.sameSelectionCharacters;\n        this.renderUIElements = !!options.renderUIElements;\n        this.renderRawElements = !!options.renderRawElements;\n        this.domConverter = options.domConverter || domConverterStub;\n    }\n    /**\n     * Converts the view to a string.\n     *\n     * @returns String representation of the view elements.\n     */\n    stringify() {\n        let result = '';\n        this._walkView(this.root, chunk => {\n            result += chunk;\n        });\n        return result;\n    }\n    /**\n     * Executes a simple walker that iterates over all elements in the view tree starting from the root element.\n     * Calls the `callback` with parsed chunks of string data.\n     */\n    _walkView(root, callback) {\n        const ignore = this.ignoreRoot && this.root === root;\n        if (root.is('element') || root.is('documentFragment')) {\n            if (root.is('element') && !ignore) {\n                callback(this._stringifyElementOpen(root));\n            }\n            if ((this.renderUIElements && root.is('uiElement'))) {\n                callback(root.render(document, this.domConverter).innerHTML);\n            }\n            else if (this.renderRawElements && root.is('rawElement')) {\n                // There's no DOM element for \"root\" to pass to render(). Creating\n                // a surrogate container to render the children instead.\n                const rawContentContainer = document.createElement('div');\n                root.render(rawContentContainer, this.domConverter);\n                callback(rawContentContainer.innerHTML);\n            }\n            else {\n                let offset = 0;\n                callback(this._stringifyElementRanges(root, offset));\n                for (const child of root.getChildren()) {\n                    this._walkView(child, callback);\n                    offset++;\n                    callback(this._stringifyElementRanges(root, offset));\n                }\n            }\n            if (root.is('element') && !ignore) {\n                callback(this._stringifyElementClose(root));\n            }\n        }\n        if (root.is('$text')) {\n            callback(this._stringifyTextRanges(root));\n        }\n    }\n    /**\n     * Checks if a given {@link module:engine/view/element~Element element} has a {@link module:engine/view/range~Range#start range start}\n     * or a {@link module:engine/view/range~Range#start range end} placed at a given offset and returns its string representation.\n     */\n    _stringifyElementRanges(element, offset) {\n        let start = '';\n        let end = '';\n        let collapsed = '';\n        for (const range of this.ranges) {\n            if (range.start.parent == element && range.start.offset === offset) {\n                if (range.isCollapsed) {\n                    collapsed += ELEMENT_RANGE_START_TOKEN + ELEMENT_RANGE_END_TOKEN;\n                }\n                else {\n                    start += ELEMENT_RANGE_START_TOKEN;\n                }\n            }\n            if (range.end.parent === element && range.end.offset === offset && !range.isCollapsed) {\n                end += ELEMENT_RANGE_END_TOKEN;\n            }\n        }\n        return end + collapsed + start;\n    }\n    /**\n     * Checks if a given {@link module:engine/view/element~Element Text node} has a\n     * {@link module:engine/view/range~Range#start range start} or a\n     * {@link module:engine/view/range~Range#start range end} placed somewhere inside. Returns a string representation of text\n     * with range delimiters placed inside.\n     */\n    _stringifyTextRanges(node) {\n        const length = node.data.length;\n        const data = node.data.split('');\n        let rangeStartToken, rangeEndToken;\n        if (this.sameSelectionCharacters) {\n            rangeStartToken = ELEMENT_RANGE_START_TOKEN;\n            rangeEndToken = ELEMENT_RANGE_END_TOKEN;\n        }\n        else {\n            rangeStartToken = TEXT_RANGE_START_TOKEN;\n            rangeEndToken = TEXT_RANGE_END_TOKEN;\n        }\n        // Add one more element for ranges ending after last character in text.\n        data[length] = '';\n        // Represent each letter as object with information about opening/closing ranges at each offset.\n        const result = data.map(letter => {\n            return {\n                letter,\n                start: '',\n                end: '',\n                collapsed: ''\n            };\n        });\n        for (const range of this.ranges) {\n            const start = range.start;\n            const end = range.end;\n            if (start.parent == node && start.offset >= 0 && start.offset <= length) {\n                if (range.isCollapsed) {\n                    result[end.offset].collapsed += rangeStartToken + rangeEndToken;\n                }\n                else {\n                    result[start.offset].start += rangeStartToken;\n                }\n            }\n            if (end.parent == node && end.offset >= 0 && end.offset <= length && !range.isCollapsed) {\n                result[end.offset].end += rangeEndToken;\n            }\n        }\n        return result.map(item => item.end + item.collapsed + item.start + item.letter).join('');\n    }\n    /**\n     * Converts the passed {@link module:engine/view/element~Element element} to an opening tag.\n     *\n     * Depending on the current configuration, the opening tag can be simple (`<a>`), contain a type prefix (`<container:p>`,\n     * `<attribute:a>` or `<empty:img>`), contain priority information ( `<attribute:a view-priority=\"20\">` ),\n     * or contain element id ( `<attribute:span view-id=\"foo\">` ). Element attributes will also be included\n     * (`<a href=\"https://ckeditor.com\" name=\"foobar\">`).\n     */\n    _stringifyElementOpen(element) {\n        const priority = this._stringifyElementPriority(element);\n        const id = this._stringifyElementId(element);\n        const type = this._stringifyElementType(element);\n        const name = [type, element.name].filter(i => i !== '').join(':');\n        const attributes = this._stringifyElementAttributes(element);\n        const parts = [name, priority, id, attributes];\n        return `<${parts.filter(i => i !== '').join(' ')}>`;\n    }\n    /**\n     * Converts the passed {@link module:engine/view/element~Element element} to a closing tag.\n     * Depending on the current configuration, the closing tag can be simple (`</a>`) or contain a type prefix (`</container:p>`,\n     * `</attribute:a>` or `</empty:img>`).\n     */\n    _stringifyElementClose(element) {\n        const type = this._stringifyElementType(element);\n        const name = [type, element.name].filter(i => i !== '').join(':');\n        return `</${name}>`;\n    }\n    /**\n     * Converts the passed {@link module:engine/view/element~Element element's} type to its string representation\n     *\n     * Returns:\n     * * 'attribute' for {@link module:engine/view/attributeelement~AttributeElement attribute elements},\n     * * 'container' for {@link module:engine/view/containerelement~ContainerElement container elements},\n     * * 'empty' for {@link module:engine/view/emptyelement~EmptyElement empty elements},\n     * * 'ui' for {@link module:engine/view/uielement~UIElement UI elements},\n     * * 'raw' for {@link module:engine/view/rawelement~RawElement raw elements},\n     * * an empty string when the current configuration is preventing showing elements' types.\n     */\n    _stringifyElementType(element) {\n        if (this.showType) {\n            for (const type in allowedTypes) {\n                if (element instanceof allowedTypes[type]) {\n                    return type;\n                }\n            }\n        }\n        return '';\n    }\n    /**\n     * Converts the passed {@link module:engine/view/element~Element element} to its priority representation.\n     *\n     * The priority string representation will be returned when the passed element is an instance of\n     * {@link module:engine/view/attributeelement~AttributeElement attribute element} and the current configuration allows to show the\n     * priority. Otherwise returns an empty string.\n     */\n    _stringifyElementPriority(element) {\n        if (this.showPriority && element.is('attributeElement')) {\n            return `view-priority=\"${element.priority}\"`;\n        }\n        return '';\n    }\n    /**\n     * Converts the passed {@link module:engine/view/element~Element element} to its id representation.\n     *\n     * The id string representation will be returned when the passed element is an instance of\n     * {@link module:engine/view/attributeelement~AttributeElement attribute element}, the element has an id\n     * and the current configuration allows to show the id. Otherwise returns an empty string.\n     */\n    _stringifyElementId(element) {\n        if (this.showAttributeElementId && element.is('attributeElement') && element.id) {\n            return `view-id=\"${element.id}\"`;\n        }\n        return '';\n    }\n    /**\n     * Converts the passed {@link module:engine/view/element~Element element} attributes to their string representation.\n     * If an element has no attributes, an empty string is returned.\n     */\n    _stringifyElementAttributes(element) {\n        const attributes = [];\n        const keys = [...element.getAttributeKeys()].sort();\n        for (const attribute of keys) {\n            let attributeValue;\n            if (attribute === 'class') {\n                attributeValue = [...element.getClassNames()]\n                    .sort()\n                    .join(' ');\n            }\n            else if (attribute === 'style') {\n                attributeValue = [...element.getStyleNames()]\n                    .sort()\n                    .map(style => `${style}:${element.getStyle(style).replace(/\"/g, '&quot;')}`)\n                    .join(';');\n            }\n            else {\n                attributeValue = element.getAttribute(attribute);\n            }\n            attributes.push(`${attribute}=\"${attributeValue}\"`);\n        }\n        return attributes.join(' ');\n    }\n}\n/**\n * Converts {@link module:engine/view/element~Element elements} to\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements},\n * {@link module:engine/view/containerelement~ContainerElement container elements},\n * {@link module:engine/view/emptyelement~EmptyElement empty elements} or\n * {@link module:engine/view/uielement~UIElement UI elements}.\n * It converts the whole tree starting from the `rootNode`. The conversion is based on element names.\n * See the `_convertElement` method for more details.\n *\n * @param rootNode The root node to convert.\n * @returns The root node of converted elements.\n */\nfunction _convertViewElements(rootNode) {\n    if (rootNode.is('element') || rootNode.is('documentFragment')) {\n        // Convert element or leave document fragment.\n        const convertedElement = rootNode.is('documentFragment') ?\n            new ViewDocumentFragment(rootNode.document) :\n            _convertElement(rootNode.document, rootNode);\n        // Convert all child nodes.\n        // Cache the nodes in array. Otherwise, we would skip some nodes because during iteration we move nodes\n        // from `rootNode` to `convertedElement`. This would interfere with iteration.\n        for (const child of [...rootNode.getChildren()]) {\n            if (convertedElement.is('emptyElement')) {\n                throw new Error('Parse error - cannot parse inside EmptyElement.');\n            }\n            else if (convertedElement.is('uiElement')) {\n                throw new Error('Parse error - cannot parse inside UIElement.');\n            }\n            else if (convertedElement.is('rawElement')) {\n                throw new Error('Parse error - cannot parse inside RawElement.');\n            }\n            convertedElement._appendChild(_convertViewElements(child));\n        }\n        return convertedElement;\n    }\n    return rootNode;\n}\n/**\n * Converts an {@link module:engine/view/element~Element element} to\n * {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/containerelement~ContainerElement container element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element} or\n * {@link module:engine/view/uielement~UIElement UI element}.\n * If the element's name is in the format of `attribute:b`, it will be converted to\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element} with a priority of 11.\n * Additionally, attribute elements may have specified priority (for example `view-priority=\"11\"`) and/or\n * id (for example `view-id=\"foo\"`).\n * If the element's name is in the format of `container:p`, it will be converted to\n * a {@link module:engine/view/containerelement~ContainerElement container element}.\n * If the element's name is in the format of `empty:img`, it will be converted to\n * an {@link module:engine/view/emptyelement~EmptyElement empty element}.\n * If the element's name is in the format of `ui:span`, it will be converted to\n * a {@link module:engine/view/uielement~UIElement UI element}.\n * If the element's name does not contain any additional information, a {@link module:engine/view/element~Element view Element} will be\n * returned.\n *\n * @param viewElement A view element to convert.\n * @returns A tree view element converted according to its name.\n */\nfunction _convertElement(viewDocument, viewElement) {\n    const info = _convertElementNameAndInfo(viewElement);\n    const ElementConstructor = allowedTypes[info.type];\n    const newElement = ElementConstructor ? new ElementConstructor(viewDocument, info.name) : new ViewElement(viewDocument, info.name);\n    if (newElement.is('attributeElement')) {\n        if (info.priority !== null) {\n            newElement._priority = info.priority;\n        }\n        if (info.id !== null) {\n            newElement._id = info.id;\n        }\n    }\n    // Move attributes.\n    for (const attributeKey of viewElement.getAttributeKeys()) {\n        newElement._setAttribute(attributeKey, viewElement.getAttribute(attributeKey));\n    }\n    return newElement;\n}\n/**\n * Converts the `view-priority` attribute and the {@link module:engine/view/element~Element#name element's name} information needed for\n * creating {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/containerelement~ContainerElement container element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element} or\n * {@link module:engine/view/uielement~UIElement UI element}.\n * The name can be provided in two formats: as a simple element's name (`div`), or as a type and name (`container:div`,\n * `attribute:span`, `empty:img`, `ui:span`);\n *\n * @param viewElement The element whose name should be converted.\n * @returns An object with parsed information:\n * * `name` The parsed name of the element.\n * * `type` The parsed type of the element. It can be `attribute`, `container` or `empty`.\n * * `priority` The parsed priority of the element.\n */\nfunction _convertElementNameAndInfo(viewElement) {\n    const parts = viewElement.name.split(':');\n    const priority = _convertPriority(viewElement.getAttribute('view-priority'));\n    const id = viewElement.hasAttribute('view-id') ? viewElement.getAttribute('view-id') : null;\n    viewElement._removeAttribute('view-priority');\n    viewElement._removeAttribute('view-id');\n    if (parts.length == 1) {\n        return {\n            name: parts[0],\n            type: priority !== null ? 'attribute' : null,\n            priority,\n            id\n        };\n    }\n    // Check if type and name: container:div.\n    const type = _convertType(parts[0]);\n    if (type) {\n        return {\n            name: parts[1],\n            type,\n            priority,\n            id\n        };\n    }\n    throw new Error(`Parse error - cannot parse element's name: ${viewElement.name}.`);\n}\n/**\n * Checks if the element's type is allowed. Returns `attribute`, `container`, `empty` or `null`.\n */\nfunction _convertType(type) {\n    return type in allowedTypes ? type : null;\n}\n/**\n * Checks if a given priority is allowed. Returns null if the priority cannot be converted.\n */\nfunction _convertPriority(priorityString) {\n    const priority = parseInt(priorityString, 10);\n    if (!isNaN(priority)) {\n        return priority;\n    }\n    return null;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/dev-utils/model\n */\n/**\n * Collection of methods for manipulating the {@link module:engine/model/model model} for testing purposes.\n */\nimport RootElement from '../model/rootelement.js';\nimport Model from '../model/model.js';\nimport ModelRange from '../model/range.js';\nimport ModelPosition from '../model/position.js';\nimport ModelSelection from '../model/selection.js';\nimport ModelDocumentFragment from '../model/documentfragment.js';\nimport DocumentSelection from '../model/documentselection.js';\nimport View from '../view/view.js';\nimport ViewContainerElement from '../view/containerelement.js';\nimport ViewRootEditableElement from '../view/rooteditableelement.js';\nimport { parse as viewParse, stringify as viewStringify } from '../../src/dev-utils/view.js';\nimport Mapper from '../conversion/mapper.js';\nimport { convertCollapsedSelection, convertRangeSelection, insertAttributesAndChildren, insertElement, insertText, insertUIElement, wrap } from '../conversion/downcasthelpers.js';\nimport { StylesProcessor } from '../view/stylesmap.js';\nimport DowncastDispatcher from '../conversion/downcastdispatcher.js';\nimport UpcastDispatcher from '../conversion/upcastdispatcher.js';\nimport { toMap } from '@ckeditor/ckeditor5-utils';\nimport { isPlainObject } from 'lodash-es';\n/**\n * Writes the content of a model {@link module:engine/model/document~Document document} to an HTML-like string.\n *\n * ```ts\n * getData( editor.model ); // -> '<paragraph>Foo![]</paragraph>'\n * ```\n *\n * **Note:** A {@link module:engine/model/text~Text text} node that contains attributes will be represented as:\n *\n * ```xml\n * <$text attribute=\"value\">Text data</$text>\n * ```\n *\n * **Note:** Using this tool in production-grade code is not recommended. It was designed for development, prototyping,\n * debugging and testing.\n *\n * @param options.withoutSelection Whether to write the selection. When set to `true`, the selection will\n * not be included in the returned string.\n * @param options.rootName The name of the root from which the data should be stringified. If not provided,\n * the default `main` name will be used.\n * @param options.convertMarkers Whether to include markers in the returned string.\n * @returns The stringified data.\n */\nexport function getData(model, options = {}) {\n    if (!(model instanceof Model)) {\n        throw new TypeError('Model needs to be an instance of module:engine/model/model~Model.');\n    }\n    const rootName = options.rootName || 'main';\n    const root = model.document.getRoot(rootName);\n    return getData._stringify(root, options.withoutSelection ? null : model.document.selection, options.convertMarkers ? model.markers : null);\n}\n// Set stringify as getData private method - needed for testing/spying.\ngetData._stringify = stringify;\n/**\n * Sets the content of a model {@link module:engine/model/document~Document document} provided as an HTML-like string.\n *\n * ```ts\n * setData( editor.model, '<paragraph>Foo![]</paragraph>' );\n * ```\n *\n * **Note:** Remember to register elements in the {@link module:engine/model/model~Model#schema model's schema} before\n * trying to use them.\n *\n * **Note:** To create a {@link module:engine/model/text~Text text} node that contains attributes use:\n *\n * ```xml\n * <$text attribute=\"value\">Text data</$text>\n * ```\n *\n * **Note:** Using this tool in production-grade code is not recommended. It was designed for development, prototyping,\n * debugging and testing.\n *\n * @param data HTML-like string to write into the document.\n * @param options.rootName Root name where parsed data will be stored. If not provided, the default `main`\n * name will be used.\n * @param options.selectionAttributes A list of attributes which will be passed to the selection.\n * @param options.lastRangeBackward If set to `true`, the last range will be added as backward.\n * @param options.batchType Batch type used for inserting elements. See {@link module:engine/model/batch~Batch#constructor}.\n * See {@link module:engine/model/batch~Batch#type}.\n */\nexport function setData(model, data, options = {}) {\n    if (!(model instanceof Model)) {\n        throw new TypeError('Model needs to be an instance of module:engine/model/model~Model.');\n    }\n    let modelDocumentFragment;\n    let selection = null;\n    const modelRoot = model.document.getRoot(options.rootName || 'main');\n    // Parse data string to model.\n    const parsedResult = setData._parse(data, model.schema, {\n        lastRangeBackward: options.lastRangeBackward,\n        selectionAttributes: options.selectionAttributes,\n        context: [modelRoot.name],\n        inlineObjectElements: options.inlineObjectElements\n    });\n    // Retrieve DocumentFragment and Selection from parsed model.\n    if ('model' in parsedResult) {\n        modelDocumentFragment = parsedResult.model;\n        selection = parsedResult.selection;\n    }\n    else {\n        modelDocumentFragment = parsedResult;\n    }\n    if (options.batchType !== undefined) {\n        model.enqueueChange(options.batchType, writeToModel);\n    }\n    else {\n        model.change(writeToModel);\n    }\n    function writeToModel(writer) {\n        // Replace existing model in document by new one.\n        writer.remove(writer.createRangeIn(modelRoot));\n        writer.insert(modelDocumentFragment, modelRoot);\n        // Clean up previous document selection.\n        writer.setSelection(null);\n        writer.removeSelectionAttribute(model.document.selection.getAttributeKeys());\n        // Update document selection if specified.\n        if (selection) {\n            const ranges = [];\n            for (const range of selection.getRanges()) {\n                const start = new ModelPosition(modelRoot, range.start.path);\n                const end = new ModelPosition(modelRoot, range.end.path);\n                ranges.push(new ModelRange(start, end));\n            }\n            writer.setSelection(ranges, { backward: selection.isBackward });\n            if (options.selectionAttributes) {\n                writer.setSelectionAttribute(selection.getAttributes());\n            }\n        }\n    }\n}\n// Set parse as setData private method - needed for testing/spying.\nsetData._parse = parse;\n/**\n * Converts model nodes to HTML-like string representation.\n *\n * **Note:** A {@link module:engine/model/text~Text text} node that contains attributes will be represented as:\n *\n * ```xml\n * <$text attribute=\"value\">Text data</$text>\n * ```\n *\n * @param node A node to stringify.\n * @param selectionOrPositionOrRange A selection instance whose ranges will be included in the returned string data.\n * If a range instance is provided, it will be converted to a selection containing this range. If a position instance\n * is provided, it will be converted to a selection containing one range collapsed at this position.\n * @param markers Markers to include.\n * @returns An HTML-like string representing the model.\n */\nexport function stringify(node, selectionOrPositionOrRange = null, markers = null) {\n    const model = new Model();\n    const mapper = new Mapper();\n    let selection = null;\n    let range;\n    // Create a range witch wraps passed node.\n    if (node instanceof RootElement || node instanceof ModelDocumentFragment) {\n        range = model.createRangeIn(node);\n    }\n    else {\n        // Node is detached - create new document fragment.\n        if (!node.parent) {\n            const fragment = new ModelDocumentFragment(node);\n            range = model.createRangeIn(fragment);\n        }\n        else {\n            range = new ModelRange(model.createPositionBefore(node), model.createPositionAfter(node));\n        }\n    }\n    // Get selection from passed selection or position or range if at least one is specified.\n    if (selectionOrPositionOrRange instanceof ModelSelection) {\n        selection = selectionOrPositionOrRange;\n    }\n    else if (selectionOrPositionOrRange instanceof DocumentSelection) {\n        selection = selectionOrPositionOrRange;\n    }\n    else if (selectionOrPositionOrRange instanceof ModelRange) {\n        selection = new ModelSelection(selectionOrPositionOrRange);\n    }\n    else if (selectionOrPositionOrRange instanceof ModelPosition) {\n        selection = new ModelSelection(selectionOrPositionOrRange);\n    }\n    // Set up conversion.\n    // Create a temporary view controller.\n    const stylesProcessor = new StylesProcessor();\n    const view = new View(stylesProcessor);\n    const viewDocument = view.document;\n    const viewRoot = new ViewRootEditableElement(viewDocument, 'div');\n    // Create a temporary root element in view document.\n    viewRoot.rootName = 'main';\n    viewDocument.roots.add(viewRoot);\n    // Create and setup downcast dispatcher.\n    const downcastDispatcher = new DowncastDispatcher({ mapper, schema: model.schema });\n    // Bind root elements.\n    mapper.bindElements(node.root, viewRoot);\n    downcastDispatcher.on('insert:$text', insertText());\n    downcastDispatcher.on('insert', insertAttributesAndChildren(), { priority: 'lowest' });\n    downcastDispatcher.on('attribute', (evt, data, conversionApi) => {\n        if (data.item instanceof ModelSelection || data.item instanceof DocumentSelection || data.item.is('$textProxy')) {\n            const converter = wrap((modelAttributeValue, { writer }) => {\n                return writer.createAttributeElement('model-text-with-attributes', { [data.attributeKey]: stringifyAttributeValue(modelAttributeValue) });\n            });\n            converter(evt, data, conversionApi);\n        }\n    });\n    downcastDispatcher.on('insert', insertElement(modelItem => {\n        // Stringify object types values for properly display as an output string.\n        const attributes = convertAttributes(modelItem.getAttributes(), stringifyAttributeValue);\n        return new ViewContainerElement(viewDocument, modelItem.name, attributes);\n    }));\n    downcastDispatcher.on('selection', convertRangeSelection());\n    downcastDispatcher.on('selection', convertCollapsedSelection());\n    downcastDispatcher.on('addMarker', insertUIElement((data, { writer }) => {\n        const name = data.markerName + ':' + (data.isOpening ? 'start' : 'end');\n        return writer.createUIElement(name);\n    }));\n    const markersMap = new Map();\n    if (markers) {\n        // To provide stable results, sort markers by name.\n        for (const marker of Array.from(markers).sort((a, b) => a.name < b.name ? 1 : -1)) {\n            markersMap.set(marker.name, marker.getRange());\n        }\n    }\n    // Convert model to view.\n    const writer = view._writer;\n    downcastDispatcher.convert(range, markersMap, writer);\n    // Convert model selection to view selection.\n    if (selection) {\n        downcastDispatcher.convertSelection(selection, markers || model.markers, writer);\n    }\n    // Parse view to data string.\n    let data = viewStringify(viewRoot, viewDocument.selection, { sameSelectionCharacters: true });\n    // Removing unnecessary <div> and </div> added because `viewRoot` was also stringified alongside input data.\n    data = data.substr(5, data.length - 11);\n    view.destroy();\n    // Replace valid XML `model-text-with-attributes` element name to `$text`.\n    return data.replace(new RegExp('model-text-with-attributes', 'g'), '$text');\n}\n/**\n * Parses an HTML-like string and returns the model {@link module:engine/model/rootelement~RootElement rootElement}.\n *\n * **Note:** To create a {@link module:engine/model/text~Text text} node that contains attributes use:\n *\n * ```xml\n * <$text attribute=\"value\">Text data</$text>\n * ```\n *\n * @param data HTML-like string to be parsed.\n * @param schema A schema instance used by converters for element validation.\n * @param options Additional configuration.\n * @param options.selectionAttributes A list of attributes which will be passed to the selection.\n * @param options.lastRangeBackward If set to `true`, the last range will be added as backward.\n * @param options.context The conversion context. If not provided, the default `'$root'` will be used.\n * @returns Returns the parsed model node or an object with two fields: `model` and `selection`,\n * when selection ranges were included in the data to parse.\n */\nexport function parse(data, schema, options = {}) {\n    const mapper = new Mapper();\n    // Replace not accepted by XML `$text` tag name by valid one `model-text-with-attributes`.\n    data = data.replace(new RegExp('\\\\$text', 'g'), 'model-text-with-attributes');\n    // Parse data to view using view utils.\n    const parsedResult = viewParse(data, {\n        sameSelectionCharacters: true,\n        lastRangeBackward: !!options.lastRangeBackward,\n        inlineObjectElements: options.inlineObjectElements\n    });\n    // Retrieve DocumentFragment and Selection from parsed view.\n    let viewDocumentFragment;\n    let viewSelection = null;\n    let selection = null;\n    if ('view' in parsedResult && 'selection' in parsedResult) {\n        viewDocumentFragment = parsedResult.view;\n        viewSelection = parsedResult.selection;\n    }\n    else {\n        viewDocumentFragment = parsedResult;\n    }\n    // Set up upcast dispatcher.\n    const modelController = new Model();\n    const upcastDispatcher = new UpcastDispatcher({ schema });\n    upcastDispatcher.on('documentFragment', convertToModelFragment(mapper));\n    upcastDispatcher.on('element:model-text-with-attributes', convertToModelText());\n    upcastDispatcher.on('element', convertToModelElement(mapper));\n    upcastDispatcher.on('text', convertToModelText());\n    // Convert view to model.\n    let model = modelController.change(writer => upcastDispatcher.convert(viewDocumentFragment.root, writer, options.context || '$root'));\n    mapper.bindElements(model, viewDocumentFragment.root);\n    // If root DocumentFragment contains only one element - return that element.\n    if (model.childCount == 1) {\n        model = model.getChild(0);\n    }\n    // Convert view selection to model selection.\n    if (viewSelection) {\n        const ranges = [];\n        // Convert ranges.\n        for (const viewRange of viewSelection.getRanges()) {\n            ranges.push(mapper.toModelRange(viewRange));\n        }\n        // Create new selection.\n        selection = new ModelSelection(ranges, { backward: viewSelection.isBackward });\n        // Set attributes to selection if specified.\n        for (const [key, value] of toMap(options.selectionAttributes || [])) {\n            selection.setAttribute(key, value);\n        }\n    }\n    // Return model end selection when selection was specified.\n    if (selection) {\n        return { model, selection };\n    }\n    // Otherwise return model only.\n    return model;\n}\n// -- Converters view -> model -----------------------------------------------------\nfunction convertToModelFragment(mapper) {\n    return (evt, data, conversionApi) => {\n        const childrenResult = conversionApi.convertChildren(data.viewItem, data.modelCursor);\n        mapper.bindElements(data.modelCursor.parent, data.viewItem);\n        data = Object.assign(data, childrenResult);\n        evt.stop();\n    };\n}\nfunction convertToModelElement(mapper) {\n    return (evt, data, conversionApi) => {\n        const elementName = data.viewItem.name;\n        if (!conversionApi.schema.checkChild(data.modelCursor, elementName)) {\n            throw new Error(`Element '${elementName}' was not allowed in given position.`);\n        }\n        // View attribute value is a string so we want to typecast it to the original type.\n        // E.g. `bold=\"true\"` - value will be parsed from string `\"true\"` to boolean `true`.\n        const attributes = convertAttributes(data.viewItem.getAttributes(), parseAttributeValue);\n        const element = conversionApi.writer.createElement(data.viewItem.name, attributes);\n        conversionApi.writer.insert(element, data.modelCursor);\n        mapper.bindElements(element, data.viewItem);\n        conversionApi.convertChildren(data.viewItem, element);\n        data.modelRange = ModelRange._createOn(element);\n        data.modelCursor = data.modelRange.end;\n        evt.stop();\n    };\n}\nfunction convertToModelText() {\n    return (evt, data, conversionApi) => {\n        if (!conversionApi.schema.checkChild(data.modelCursor, '$text')) {\n            throw new Error('Text was not allowed in given position.');\n        }\n        let node;\n        if (data.viewItem.is('element')) {\n            // View attribute value is a string so we want to typecast it to the original type.\n            // E.g. `bold=\"true\"` - value will be parsed from string `\"true\"` to boolean `true`.\n            const attributes = convertAttributes(data.viewItem.getAttributes(), parseAttributeValue);\n            const viewText = data.viewItem.getChild(0);\n            node = conversionApi.writer.createText(viewText.data, attributes);\n        }\n        else {\n            node = conversionApi.writer.createText(data.viewItem.data);\n        }\n        conversionApi.writer.insert(node, data.modelCursor);\n        data.modelRange = ModelRange._createFromPositionAndShift(data.modelCursor, node.offsetSize);\n        data.modelCursor = data.modelRange.end;\n        evt.stop();\n    };\n}\n// Tries to get original type of attribute value using JSON parsing:\n//\n//\t\t`'true'` => `true`\n//\t\t`'1'` => `1`\n//\t\t`'{\"x\":1,\"y\":2}'` => `{ x: 1, y: 2 }`\n//\n// Parse error means that value should be a string:\n//\n//\t\t`'foobar'` => `'foobar'`\nfunction parseAttributeValue(attribute) {\n    try {\n        return JSON.parse(attribute);\n    }\n    catch (e) {\n        return attribute;\n    }\n}\n// When value is an Object stringify it.\nfunction stringifyAttributeValue(data) {\n    if (isPlainObject(data)) {\n        return JSON.stringify(data);\n    }\n    return data;\n}\n// Loop trough attributes map and converts each value by passed converter.\nfunction* convertAttributes(attributes, converter) {\n    for (const [key, value] of attributes) {\n        yield [key, converter(value)];\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * An abstract watchdog class that handles most of the error handling process and the state of the underlying component.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and how to use it.\n *\n * @internal\n */\nexport default class Watchdog {\n    /**\n     * @param {module:watchdog/watchdog~WatchdogConfig} config The watchdog plugin configuration.\n     */\n    constructor(config) {\n        /**\n         * An array of crashes saved as an object with the following properties:\n         *\n         * * `message`: `String`,\n         * * `stack`: `String`,\n         * * `date`: `Number`,\n         * * `filename`: `String | undefined`,\n         * * `lineno`: `Number | undefined`,\n         * * `colno`: `Number | undefined`,\n         */\n        this.crashes = [];\n        /**\n         * Specifies the state of the item watched by the watchdog. The state can be one of the following values:\n         *\n         * * `initializing` &ndash; Before the first initialization, and after crashes, before the item is ready.\n         * * `ready` &ndash; A state when the user can interact with the item.\n         * * `crashed` &ndash; A state when an error occurs. It quickly changes to `initializing` or `crashedPermanently`\n         * depending on how many and how frequent errors have been caught recently.\n         * * `crashedPermanently` &ndash; A state when the watchdog stops reacting to errors and keeps the item it is watching crashed,\n         * * `destroyed` &ndash; A state when the item is manually destroyed by the user after calling `watchdog.destroy()`.\n         */\n        this.state = 'initializing';\n        /**\n         * Returns the result of the `Date.now()` call. It can be overridden in tests to mock time as some popular\n         * approaches like `sinon.useFakeTimers()` do not work well with error handling.\n         */\n        this._now = Date.now;\n        this.crashes = [];\n        this._crashNumberLimit = typeof config.crashNumberLimit === 'number' ? config.crashNumberLimit : 3;\n        this._minimumNonErrorTimePeriod = typeof config.minimumNonErrorTimePeriod === 'number' ? config.minimumNonErrorTimePeriod : 5000;\n        this._boundErrorHandler = evt => {\n            // `evt.error` is exposed by EventError while `evt.reason` is available in PromiseRejectionEvent.\n            const error = 'error' in evt ? evt.error : evt.reason;\n            // Note that `evt.reason` might be everything that is in the promise rejection.\n            // Similarly everything that is thrown lands in `evt.error`.\n            if (error instanceof Error) {\n                this._handleError(error, evt);\n            }\n        };\n        this._listeners = {};\n        if (!this._restart) {\n            throw new Error('The Watchdog class was split into the abstract `Watchdog` class and the `EditorWatchdog` class. ' +\n                'Please, use `EditorWatchdog` if you have used the `Watchdog` class previously.');\n        }\n    }\n    /**\n     * Destroys the watchdog and releases the resources.\n     */\n    destroy() {\n        this._stopErrorHandling();\n        this._listeners = {};\n    }\n    /**\n     * Starts listening to a specific event name by registering a callback that will be executed\n     * whenever an event with a given name fires.\n     *\n     * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n     *\n     * @param eventName The event name.\n     * @param callback A callback which will be added to event listeners.\n     */\n    on(eventName, callback) {\n        if (!this._listeners[eventName]) {\n            this._listeners[eventName] = [];\n        }\n        this._listeners[eventName].push(callback);\n    }\n    /**\n     * Stops listening to the specified event name by removing the callback from event listeners.\n     *\n     * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n     *\n     * @param eventName The event name.\n     * @param callback A callback which will be removed from event listeners.\n     */\n    off(eventName, callback) {\n        this._listeners[eventName] = this._listeners[eventName]\n            .filter(cb => cb !== callback);\n    }\n    /**\n     * Fires an event with a given event name and arguments.\n     *\n     * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n     */\n    _fire(eventName, ...args) {\n        const callbacks = this._listeners[eventName] || [];\n        for (const callback of callbacks) {\n            callback.apply(this, [null, ...args]);\n        }\n    }\n    /**\n     * Starts error handling by attaching global error handlers.\n     */\n    _startErrorHandling() {\n        window.addEventListener('error', this._boundErrorHandler);\n        window.addEventListener('unhandledrejection', this._boundErrorHandler);\n    }\n    /**\n     * Stops error handling by detaching global error handlers.\n     */\n    _stopErrorHandling() {\n        window.removeEventListener('error', this._boundErrorHandler);\n        window.removeEventListener('unhandledrejection', this._boundErrorHandler);\n    }\n    /**\n     * Checks if an error comes from the watched item and restarts it.\n     * It reacts to {@link module:utils/ckeditorerror~CKEditorError `CKEditorError` errors} only.\n     *\n     * @fires error\n     * @param error Error.\n     * @param evt An error event.\n     */\n    _handleError(error, evt) {\n        // @if CK_DEBUG // const err = error as CKEditorError;\n        // @if CK_DEBUG // if ( err.is && err.is( 'CKEditorError' ) && err.context === undefined ) {\n        // @if CK_DEBUG // console.warn( 'The error is missing its context and Watchdog cannot restart the proper item.' );\n        // @if CK_DEBUG // }\n        if (this._shouldReactToError(error)) {\n            this.crashes.push({\n                message: error.message,\n                stack: error.stack,\n                // `evt.filename`, `evt.lineno` and `evt.colno` are available only in ErrorEvent events\n                filename: evt instanceof ErrorEvent ? evt.filename : undefined,\n                lineno: evt instanceof ErrorEvent ? evt.lineno : undefined,\n                colno: evt instanceof ErrorEvent ? evt.colno : undefined,\n                date: this._now()\n            });\n            const causesRestart = this._shouldRestart();\n            this.state = 'crashed';\n            this._fire('stateChange');\n            this._fire('error', { error, causesRestart });\n            if (causesRestart) {\n                this._restart();\n            }\n            else {\n                this.state = 'crashedPermanently';\n                this._fire('stateChange');\n            }\n        }\n    }\n    /**\n     * Checks whether an error should be handled by the watchdog.\n     *\n     * @param error An error that was caught by the error handling process.\n     */\n    _shouldReactToError(error) {\n        return (error.is &&\n            error.is('CKEditorError') &&\n            error.context !== undefined &&\n            // In some cases the watched item should not be restarted - e.g. during the item initialization.\n            // That's why the `null` was introduced as a correct error context which does cause restarting.\n            error.context !== null &&\n            // Do not react to errors if the watchdog is in states other than `ready`.\n            this.state === 'ready' &&\n            this._isErrorComingFromThisItem(error));\n    }\n    /**\n     * Checks if the watchdog should restart the underlying item.\n     */\n    _shouldRestart() {\n        if (this.crashes.length <= this._crashNumberLimit) {\n            return true;\n        }\n        const lastErrorTime = this.crashes[this.crashes.length - 1].date;\n        const firstMeaningfulErrorTime = this.crashes[this.crashes.length - 1 - this._crashNumberLimit].date;\n        const averageNonErrorTimePeriod = (lastErrorTime - firstMeaningfulErrorTime) / this._crashNumberLimit;\n        return averageNonErrorTimePeriod > this._minimumNonErrorTimePeriod;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module watchdog/utils/getsubnodes\n */\n/* globals EventTarget, Event */\nexport default function getSubNodes(head, excludedProperties = new Set()) {\n    const nodes = [head];\n    // @if CK_DEBUG_WATCHDOG // const prevNodeMap = new Map();\n    // Nodes are stored to prevent infinite looping.\n    const subNodes = new Set();\n    let nodeIndex = 0;\n    while (nodes.length > nodeIndex) {\n        // Incrementing the iterator is much faster than changing size of the array with Array.prototype.shift().\n        const node = nodes[nodeIndex++];\n        if (subNodes.has(node) || !shouldNodeBeIncluded(node) || excludedProperties.has(node)) {\n            continue;\n        }\n        subNodes.add(node);\n        // Handle arrays, maps, sets, custom collections that implements `[ Symbol.iterator ]()`, etc.\n        if (Symbol.iterator in node) {\n            // The custom editor iterators might cause some problems if the editor is crashed.\n            try {\n                for (const n of node) {\n                    nodes.push(n);\n                    // @if CK_DEBUG_WATCHDOG // if ( !prevNodeMap.has( n ) ) {\n                    // @if CK_DEBUG_WATCHDOG // \tprevNodeMap.set( n, node );\n                    // @if CK_DEBUG_WATCHDOG // }\n                }\n            }\n            catch (err) {\n                // Do not log errors for broken structures\n                // since we are in the error handling process already.\n                // eslint-disable-line no-empty\n            }\n        }\n        else {\n            for (const key in node) {\n                // We share a reference via the protobuf library within the editors,\n                // hence the shared value should be skipped. Although, it's not a perfect\n                // solution since new places like that might occur in the future.\n                if (key === 'defaultValue') {\n                    continue;\n                }\n                nodes.push(node[key]);\n                // @if CK_DEBUG_WATCHDOG // if ( !prevNodeMap.has( node[ key ] ) ) {\n                // @if CK_DEBUG_WATCHDOG // \tprevNodeMap.set( node[ key ], node );\n                // @if CK_DEBUG_WATCHDOG // }\n            }\n        }\n    }\n    // @if CK_DEBUG_WATCHDOG // return { subNodes, prevNodeMap } as any;\n    return subNodes;\n}\nfunction shouldNodeBeIncluded(node) {\n    const type = Object.prototype.toString.call(node);\n    const typeOfNode = typeof node;\n    return !(typeOfNode === 'number' ||\n        typeOfNode === 'boolean' ||\n        typeOfNode === 'string' ||\n        typeOfNode === 'symbol' ||\n        typeOfNode === 'function' ||\n        type === '[object Date]' ||\n        type === '[object RegExp]' ||\n        type === '[object Module]' ||\n        node === undefined ||\n        node === null ||\n        // This flag is meant to exclude singletons shared across editor instances. So when an error is thrown in one editor,\n        // the other editors connected through the reference to the same singleton are not restarted. This is a temporary workaround\n        // until a better solution is found.\n        // More in https://github.com/ckeditor/ckeditor5/issues/12292.\n        node._watchdogExcluded ||\n        // Skip native DOM objects, e.g. Window, nodes, events, etc.\n        node instanceof EventTarget ||\n        node instanceof Event);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module watchdog/utils/areconnectedthroughproperties\n */\n/* globals console */\nimport getSubNodes from './getsubnodes.js';\n/**\n * Traverses both structures to find out whether there is a reference that is shared between both structures.\n */\nexport default function areConnectedThroughProperties(target1, target2, excludedNodes = new Set()) {\n    if (target1 === target2 && isObject(target1)) {\n        return true;\n    }\n    // @if CK_DEBUG_WATCHDOG // return checkConnectionBetweenProps( target1, target2, excludedNodes );\n    const subNodes1 = getSubNodes(target1, excludedNodes);\n    const subNodes2 = getSubNodes(target2, excludedNodes);\n    for (const node of subNodes1) {\n        if (subNodes2.has(node)) {\n            return true;\n        }\n    }\n    return false;\n}\n/* istanbul ignore next -- @preserve */\n// eslint-disable-next-line\nfunction checkConnectionBetweenProps(target1, target2, excludedNodes) {\n    const { subNodes: subNodes1, prevNodeMap: prevNodeMap1 } = getSubNodes(target1, excludedNodes.subNodes);\n    const { subNodes: subNodes2, prevNodeMap: prevNodeMap2 } = getSubNodes(target2, excludedNodes.subNodes);\n    for (const sharedNode of subNodes1) {\n        if (subNodes2.has(sharedNode)) {\n            const connection = [];\n            connection.push(sharedNode);\n            let node = prevNodeMap1.get(sharedNode);\n            while (node && node !== target1) {\n                connection.push(node);\n                node = prevNodeMap1.get(node);\n            }\n            node = prevNodeMap2.get(sharedNode);\n            while (node && node !== target2) {\n                connection.unshift(node);\n                node = prevNodeMap2.get(node);\n            }\n            console.log('--------');\n            console.log({ target1 });\n            console.log({ sharedNode });\n            console.log({ target2 });\n            console.log({ connection });\n            return true;\n        }\n    }\n    return false;\n}\nfunction isObject(structure) {\n    return typeof structure === 'object' && structure !== null;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport areConnectedThroughProperties from './utils/areconnectedthroughproperties.js';\nimport Watchdog from './watchdog.js';\nimport { throttle, cloneDeepWith, isElement } from 'lodash-es';\n/**\n * A watchdog for CKEditor 5 editors.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and\n * how to use it.\n */\nexport default class EditorWatchdog extends Watchdog {\n    /**\n     * @param Editor The editor class.\n     * @param watchdogConfig The watchdog plugin configuration.\n     */\n    constructor(Editor, watchdogConfig = {}) {\n        super(watchdogConfig);\n        /**\n         * The current editor instance.\n         */\n        this._editor = null;\n        /**\n         * A promise associated with the life cycle of the editor (creation or destruction processes).\n         *\n         * It is used to prevent the initialization of the editor if the previous instance has not been destroyed yet,\n         * and conversely, to prevent the destruction of the editor if it has not been initialized.\n         */\n        this._lifecyclePromise = null;\n        /**\n         * Specifies whether the editor was initialized using document data (`true`) or HTML elements (`false`).\n         */\n        this._initUsingData = true;\n        /**\n         * The latest record of the editor editable elements. Used to restart the editor.\n         */\n        this._editables = {};\n        // this._editorClass = Editor;\n        this._throttledSave = throttle(this._save.bind(this), typeof watchdogConfig.saveInterval === 'number' ? watchdogConfig.saveInterval : 5000);\n        // Set default creator and destructor functions:\n        if (Editor) {\n            this._creator = ((elementOrData, config) => Editor.create(elementOrData, config));\n        }\n        this._destructor = editor => editor.destroy();\n    }\n    /**\n     * The current editor instance.\n     */\n    get editor() {\n        return this._editor;\n    }\n    /**\n     * @internal\n     */\n    get _item() {\n        return this._editor;\n    }\n    /**\n     * Sets the function that is responsible for the editor creation.\n     * It expects a function that should return a promise.\n     *\n     * ```ts\n     * watchdog.setCreator( ( element, config ) => ClassicEditor.create( element, config ) );\n     * ```\n     */\n    setCreator(creator) {\n        this._creator = creator;\n    }\n    /**\n     * Sets the function that is responsible for the editor destruction.\n     * Overrides the default destruction function, which destroys only the editor instance.\n     * It expects a function that should return a promise or `undefined`.\n     *\n     * ```ts\n     * watchdog.setDestructor( editor => {\n     * \t// Do something before the editor is destroyed.\n     *\n     * \treturn editor\n     * \t\t.destroy()\n     * \t\t.then( () => {\n     * \t\t\t// Do something after the editor is destroyed.\n     * \t\t} );\n     * } );\n     * ```\n     */\n    setDestructor(destructor) {\n        this._destructor = destructor;\n    }\n    /**\n     * Restarts the editor instance. This method is called whenever an editor error occurs. It fires the `restart` event and changes\n     * the state to `initializing`.\n     *\n     * @fires restart\n     */\n    _restart() {\n        return Promise.resolve()\n            .then(() => {\n            this.state = 'initializing';\n            this._fire('stateChange');\n            return this._destroy();\n        })\n            .catch(err => {\n            console.error('An error happened during the editor destroying.', err);\n        })\n            .then(() => {\n            // Pre-process some data from the original editor config.\n            // Our goal here is to make sure that the restarted editor will be reinitialized with correct set of roots.\n            // We are not interested in any data set in config or in `.create()` first parameter. It will be replaced anyway.\n            // But we need to set them correctly to make sure that proper roots are created.\n            //\n            // Since a different set of roots will be created, `lazyRoots` and `rootsAttributes` properties must be managed too.\n            // Keys are root names, values are ''. Used when the editor was initialized by setting the first parameter to document data.\n            const existingRoots = {};\n            // Keeps lazy roots. They may be different when compared to initial config if some of the roots were loaded.\n            const lazyRoots = [];\n            // Roots attributes from the old config. Will be referred when setting new attributes.\n            const oldRootsAttributes = this._config.rootsAttributes || {};\n            // New attributes to be set. Is filled only for roots that still exist in the document.\n            const rootsAttributes = {};\n            // Traverse through the roots saved when the editor crashed and set up the discussed values.\n            for (const [rootName, rootData] of Object.entries(this._data.roots)) {\n                if (rootData.isLoaded) {\n                    existingRoots[rootName] = '';\n                    rootsAttributes[rootName] = oldRootsAttributes[rootName] || {};\n                }\n                else {\n                    lazyRoots.push(rootName);\n                }\n            }\n            const updatedConfig = {\n                ...this._config,\n                extraPlugins: this._config.extraPlugins || [],\n                lazyRoots,\n                rootsAttributes,\n                _watchdogInitialData: this._data\n            };\n            // Delete `initialData` as it is not needed. Data will be set by the watchdog based on `_watchdogInitialData`.\n            // First parameter of the editor `.create()` will be used to set up initial roots.\n            delete updatedConfig.initialData;\n            updatedConfig.extraPlugins.push(EditorWatchdogInitPlugin);\n            if (this._initUsingData) {\n                return this.create(existingRoots, updatedConfig, updatedConfig.context);\n            }\n            else {\n                // Set correct editables to make sure that proper roots are created and linked with DOM elements.\n                // No need to set initial data, as it would be discarded anyway.\n                //\n                // If one element was initially set in `elementOrData`, then use that original element to restart the editor.\n                // This is for compatibility purposes with single-root editor types.\n                if (isElement(this._elementOrData)) {\n                    return this.create(this._elementOrData, updatedConfig, updatedConfig.context);\n                }\n                else {\n                    return this.create(this._editables, updatedConfig, updatedConfig.context);\n                }\n            }\n        })\n            .then(() => {\n            this._fire('restart');\n        });\n    }\n    /**\n     * Creates the editor instance and keeps it running, using the defined creator and destructor.\n     *\n     * @param elementOrData The editor source element or the editor data.\n     * @param config The editor configuration.\n     * @param context A context for the editor.\n     */\n    create(elementOrData = this._elementOrData, config = this._config, context) {\n        this._lifecyclePromise = Promise.resolve(this._lifecyclePromise)\n            .then(() => {\n            super._startErrorHandling();\n            this._elementOrData = elementOrData;\n            // Use document data in the first parameter of the editor `.create()` call only if it was used like this originally.\n            // Use document data if a string or object with strings was passed.\n            this._initUsingData = typeof elementOrData == 'string' ||\n                (Object.keys(elementOrData).length > 0 && typeof Object.values(elementOrData)[0] == 'string');\n            // Clone configuration because it might be shared within multiple watchdog instances. Otherwise,\n            // when an error occurs in one of these editors, the watchdog will restart all of them.\n            this._config = this._cloneEditorConfiguration(config) || {};\n            this._config.context = context;\n            return this._creator(elementOrData, this._config);\n        })\n            .then(editor => {\n            this._editor = editor;\n            editor.model.document.on('change:data', this._throttledSave);\n            this._lastDocumentVersion = editor.model.document.version;\n            this._data = this._getData();\n            if (!this._initUsingData) {\n                this._editables = this._getEditables();\n            }\n            this.state = 'ready';\n            this._fire('stateChange');\n        }).finally(() => {\n            this._lifecyclePromise = null;\n        });\n        return this._lifecyclePromise;\n    }\n    /**\n     * Destroys the watchdog and the current editor instance. It fires the callback\n     * registered in {@link #setDestructor `setDestructor()`} and uses it to destroy the editor instance.\n     * It also sets the state to `destroyed`.\n     */\n    destroy() {\n        this._lifecyclePromise = Promise.resolve(this._lifecyclePromise)\n            .then(() => {\n            this.state = 'destroyed';\n            this._fire('stateChange');\n            super.destroy();\n            return this._destroy();\n        }).finally(() => {\n            this._lifecyclePromise = null;\n        });\n        return this._lifecyclePromise;\n    }\n    _destroy() {\n        return Promise.resolve()\n            .then(() => {\n            this._stopErrorHandling();\n            this._throttledSave.cancel();\n            const editor = this._editor;\n            this._editor = null;\n            // Remove the `change:data` listener before destroying the editor.\n            // Incorrectly written plugins may trigger firing `change:data` events during the editor destruction phase\n            // causing the watchdog to call `editor.getData()` when some parts of editor are already destroyed.\n            editor.model.document.off('change:data', this._throttledSave);\n            return this._destructor(editor);\n        });\n    }\n    /**\n     * Saves the editor data, so it can be restored after the crash even if the data cannot be fetched at\n     * the moment of the crash.\n     */\n    _save() {\n        const version = this._editor.model.document.version;\n        try {\n            this._data = this._getData();\n            if (!this._initUsingData) {\n                this._editables = this._getEditables();\n            }\n            this._lastDocumentVersion = version;\n        }\n        catch (err) {\n            console.error(err, 'An error happened during restoring editor data. ' +\n                'Editor will be restored from the previously saved data.');\n        }\n    }\n    /**\n     * @internal\n     */\n    _setExcludedProperties(props) {\n        this._excludedProps = props;\n    }\n    /**\n     * Gets all data that is required to reinitialize editor instance.\n     */\n    _getData() {\n        const editor = this._editor;\n        const roots = editor.model.document.roots.filter(root => root.isAttached() && root.rootName != '$graveyard');\n        const { plugins } = editor;\n        // `as any` to avoid linking from external private repo.\n        const commentsRepository = plugins.has('CommentsRepository') && plugins.get('CommentsRepository');\n        const trackChanges = plugins.has('TrackChanges') && plugins.get('TrackChanges');\n        const data = {\n            roots: {},\n            markers: {},\n            commentThreads: JSON.stringify([]),\n            suggestions: JSON.stringify([])\n        };\n        roots.forEach(root => {\n            data.roots[root.rootName] = {\n                content: JSON.stringify(Array.from(root.getChildren())),\n                attributes: JSON.stringify(Array.from(root.getAttributes())),\n                isLoaded: root._isLoaded\n            };\n        });\n        for (const marker of editor.model.markers) {\n            if (!marker._affectsData) {\n                continue;\n            }\n            data.markers[marker.name] = {\n                rangeJSON: marker.getRange().toJSON(),\n                usingOperation: marker._managedUsingOperations,\n                affectsData: marker._affectsData\n            };\n        }\n        if (commentsRepository) {\n            data.commentThreads = JSON.stringify(commentsRepository.getCommentThreads({ toJSON: true, skipNotAttached: true }));\n        }\n        if (trackChanges) {\n            data.suggestions = JSON.stringify(trackChanges.getSuggestions({ toJSON: true, skipNotAttached: true }));\n        }\n        return data;\n    }\n    /**\n     * For each attached model root, returns its HTML editable element (if available).\n     */\n    _getEditables() {\n        const editables = {};\n        for (const rootName of this.editor.model.document.getRootNames()) {\n            const editable = this.editor.ui.getEditableElement(rootName);\n            if (editable) {\n                editables[rootName] = editable;\n            }\n        }\n        return editables;\n    }\n    /**\n     * Traverses the error context and the current editor to find out whether these structures are connected\n     * to each other via properties.\n     *\n     * @internal\n     */\n    _isErrorComingFromThisItem(error) {\n        return areConnectedThroughProperties(this._editor, error.context, this._excludedProps);\n    }\n    /**\n     * Clones the editor configuration.\n     */\n    _cloneEditorConfiguration(config) {\n        return cloneDeepWith(config, (value, key) => {\n            // Leave DOM references.\n            if (isElement(value)) {\n                return value;\n            }\n            if (key === 'context') {\n                return value;\n            }\n        });\n    }\n}\n/**\n * Internal plugin that is used to stop the default editor initialization and restoring the editor state\n * based on the `editor.config._watchdogInitialData` data.\n */\nclass EditorWatchdogInitPlugin {\n    constructor(editor) {\n        this.editor = editor;\n        this._data = editor.config.get('_watchdogInitialData');\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        // Stops the default editor initialization and use the saved data to restore the editor state.\n        // Some of data could not be initialize as a config properties. It is important to keep the data\n        // in the same form as it was before the restarting.\n        this.editor.data.on('init', evt => {\n            evt.stop();\n            this.editor.model.enqueueChange({ isUndoable: false }, writer => {\n                this._restoreCollaborationData();\n                this._restoreEditorData(writer);\n            });\n            this.editor.data.fire('ready');\n            // Keep priority `'high' - 1` to be sure that RTC initialization will be first.\n        }, { priority: 1000 - 1 });\n    }\n    /**\n     * Creates a model node (element or text) based on provided JSON.\n     */\n    _createNode(writer, jsonNode) {\n        if ('name' in jsonNode) {\n            // If child has name property, it is an Element.\n            const element = writer.createElement(jsonNode.name, jsonNode.attributes);\n            if (jsonNode.children) {\n                for (const child of jsonNode.children) {\n                    element._appendChild(this._createNode(writer, child));\n                }\n            }\n            return element;\n        }\n        else {\n            // Otherwise, it is a Text node.\n            return writer.createText(jsonNode.data, jsonNode.attributes);\n        }\n    }\n    /**\n     * Restores the editor by setting the document data, roots attributes and markers.\n     */\n    _restoreEditorData(writer) {\n        const editor = this.editor;\n        Object.entries(this._data.roots).forEach(([rootName, { content, attributes }]) => {\n            const parsedNodes = JSON.parse(content);\n            const parsedAttributes = JSON.parse(attributes);\n            const rootElement = editor.model.document.getRoot(rootName);\n            for (const [key, value] of parsedAttributes) {\n                writer.setAttribute(key, value, rootElement);\n            }\n            for (const child of parsedNodes) {\n                const node = this._createNode(writer, child);\n                writer.insert(node, rootElement, 'end');\n            }\n        });\n        Object.entries(this._data.markers).forEach(([markerName, markerOptions]) => {\n            const { document } = editor.model;\n            const { rangeJSON: { start, end }, ...options } = markerOptions;\n            const root = document.getRoot(start.root);\n            const startPosition = writer.createPositionFromPath(root, start.path, start.stickiness);\n            const endPosition = writer.createPositionFromPath(root, end.path, end.stickiness);\n            const range = writer.createRange(startPosition, endPosition);\n            writer.addMarker(markerName, {\n                range,\n                ...options\n            });\n        });\n    }\n    /**\n     * Restores the editor collaboration data - comment threads and suggestions.\n     */\n    _restoreCollaborationData() {\n        // `as any` to avoid linking from external private repo.\n        const parsedCommentThreads = JSON.parse(this._data.commentThreads);\n        const parsedSuggestions = JSON.parse(this._data.suggestions);\n        parsedCommentThreads.forEach(commentThreadData => {\n            const channelId = this.editor.config.get('collaboration.channelId');\n            const commentsRepository = this.editor.plugins.get('CommentsRepository');\n            if (commentsRepository.hasCommentThread(commentThreadData.threadId)) {\n                const commentThread = commentsRepository.getCommentThread(commentThreadData.threadId);\n                commentThread.remove();\n            }\n            commentsRepository.addCommentThread({ channelId, ...commentThreadData });\n        });\n        parsedSuggestions.forEach(suggestionData => {\n            const trackChangesEditing = this.editor.plugins.get('TrackChangesEditing');\n            if (trackChangesEditing.hasSuggestion(suggestionData.id)) {\n                const suggestion = trackChangesEditing.getSuggestion(suggestionData.id);\n                suggestion.attributes = suggestionData.attributes;\n            }\n            else {\n                trackChangesEditing.addSuggestionData(suggestionData);\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Watchdog from './watchdog.js';\nimport EditorWatchdog from './editorwatchdog.js';\nimport areConnectedThroughProperties from './utils/areconnectedthroughproperties.js';\nimport getSubNodes from './utils/getsubnodes.js';\nconst mainQueueId = Symbol('MainQueueId');\n/**\n * A watchdog for the {@link module:core/context~Context} class.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and\n * how to use it.\n */\nexport default class ContextWatchdog extends Watchdog {\n    /**\n     * The context watchdog class constructor.\n     *\n     * ```ts\n     * const watchdog = new ContextWatchdog( Context );\n     *\n     * await watchdog.create( contextConfiguration );\n     *\n     * await watchdog.add( item );\n     * ```\n     *\n     * See the {@glink features/watchdog Watchdog feature guide} to learn more how to use this feature.\n     *\n     * @param Context The {@link module:core/context~Context} class.\n     * @param watchdogConfig The watchdog configuration.\n     */\n    constructor(Context, watchdogConfig = {}) {\n        super(watchdogConfig);\n        /**\n         * A map of internal watchdogs for added items.\n         */\n        this._watchdogs = new Map();\n        /**\n         * The current context instance.\n         */\n        this._context = null;\n        /**\n         * Context properties (nodes/references) that are gathered during the initial context creation\n         * and are used to distinguish the origin of an error.\n         */\n        this._contextProps = new Set();\n        /**\n         * An action queue, which is used to handle async functions queuing.\n         */\n        this._actionQueues = new ActionQueues();\n        this._watchdogConfig = watchdogConfig;\n        // Default creator and destructor.\n        this._creator = contextConfig => Context.create(contextConfig);\n        this._destructor = context => context.destroy();\n        this._actionQueues.onEmpty(() => {\n            if (this.state === 'initializing') {\n                this.state = 'ready';\n                this._fire('stateChange');\n            }\n        });\n    }\n    /**\n     * Sets the function that is responsible for the context creation.\n     * It expects a function that should return a promise (or `undefined`).\n     *\n     * ```ts\n     * watchdog.setCreator( config => Context.create( config ) );\n     * ```\n     */\n    setCreator(creator) {\n        this._creator = creator;\n    }\n    /**\n     * Sets the function that is responsible for the context destruction.\n     * Overrides the default destruction function, which destroys only the context instance.\n     * It expects a function that should return a promise (or `undefined`).\n     *\n     * ```ts\n     * watchdog.setDestructor( context => {\n     * \t// Do something before the context is destroyed.\n     *\n     * \treturn context\n     * \t\t.destroy()\n     * \t\t.then( () => {\n     * \t\t\t// Do something after the context is destroyed.\n     * \t\t} );\n     * } );\n     * ```\n     */\n    setDestructor(destructor) {\n        this._destructor = destructor;\n    }\n    /**\n     * The context instance. Keep in mind that this property might be changed when the context watchdog restarts,\n     * so do not keep this instance internally. Always operate on the `ContextWatchdog#context` property.\n     */\n    get context() {\n        return this._context;\n    }\n    /**\n     * Initializes the context watchdog. Once it is created, the watchdog takes care about\n     * recreating the context and the provided items, and starts the error handling mechanism.\n     *\n     * ```ts\n     * await watchdog.create( {\n     * \tplugins: []\n     * } );\n     * ```\n     *\n     * @param contextConfig The context configuration. See {@link module:core/context~Context}.\n     */\n    create(contextConfig = {}) {\n        return this._actionQueues.enqueue(mainQueueId, () => {\n            this._contextConfig = contextConfig;\n            return this._create();\n        });\n    }\n    /**\n     * Returns an item instance with the given `itemId`.\n     *\n     * ```ts\n     * const editor1 = watchdog.getItem( 'editor1' );\n     * ```\n     *\n     * @param itemId The item ID.\n     * @returns The item instance or `undefined` if an item with a given ID has not been found.\n     */\n    getItem(itemId) {\n        const watchdog = this._getWatchdog(itemId);\n        return watchdog._item;\n    }\n    /**\n     * Gets the state of the given item. See {@link #state} for a list of available states.\n     *\n     * ```ts\n     * const editor1State = watchdog.getItemState( 'editor1' );\n     * ```\n     *\n     * @param itemId Item ID.\n     * @returns The state of the item.\n     */\n    getItemState(itemId) {\n        const watchdog = this._getWatchdog(itemId);\n        return watchdog.state;\n    }\n    /**\n     * Adds items to the watchdog. Once created, instances of these items will be available using the {@link #getItem} method.\n     *\n     * Items can be passed together as an array of objects:\n     *\n     * ```ts\n     * await watchdog.add( [ {\n     * \tid: 'editor1',\n     * \ttype: 'editor',\n     * \tsourceElementOrData: document.querySelector( '#editor' ),\n     * \tconfig: {\n     * \t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n     * \t\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n     * \t},\n     * \tcreator: ( element, config ) => ClassicEditor.create( element, config )\n     * } ] );\n     * ```\n     *\n     * Or one by one as objects:\n     *\n     * ```ts\n     * await watchdog.add( {\n     * \tid: 'editor1',\n     * \ttype: 'editor',\n     * \tsourceElementOrData: document.querySelector( '#editor' ),\n     * \tconfig: {\n     * \t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n     * \t\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n     * \t},\n     * \tcreator: ( element, config ) => ClassicEditor.create( element, config )\n     * ] );\n     * ```\n     *\n     * Then an instance can be retrieved using the {@link #getItem} method:\n     *\n     * ```ts\n     * const editor1 = watchdog.getItem( 'editor1' );\n     * ```\n     *\n     * Note that this method can be called multiple times, but for performance reasons it is better\n     * to pass all items together.\n     *\n     * @param itemConfigurationOrItemConfigurations An item configuration object or an array of item configurations.\n     */\n    add(itemConfigurationOrItemConfigurations) {\n        const itemConfigurations = toArray(itemConfigurationOrItemConfigurations);\n        return Promise.all(itemConfigurations.map(item => {\n            return this._actionQueues.enqueue(item.id, () => {\n                if (this.state === 'destroyed') {\n                    throw new Error('Cannot add items to destroyed watchdog.');\n                }\n                if (!this._context) {\n                    throw new Error('Context was not created yet. You should call the `ContextWatchdog#create()` method first.');\n                }\n                let watchdog;\n                if (this._watchdogs.has(item.id)) {\n                    throw new Error(`Item with the given id is already added: '${item.id}'.`);\n                }\n                if (item.type === 'editor') {\n                    watchdog = new EditorWatchdog(null, this._watchdogConfig);\n                    watchdog.setCreator(item.creator);\n                    watchdog._setExcludedProperties(this._contextProps);\n                    if (item.destructor) {\n                        watchdog.setDestructor(item.destructor);\n                    }\n                    this._watchdogs.set(item.id, watchdog);\n                    // Enqueue the internal watchdog errors within the main queue.\n                    // And propagate the internal `error` events as `itemError` event.\n                    watchdog.on('error', (evt, { error, causesRestart }) => {\n                        this._fire('itemError', { itemId: item.id, error });\n                        // Do not enqueue the item restart action if the item will not restart.\n                        if (!causesRestart) {\n                            return;\n                        }\n                        this._actionQueues.enqueue(item.id, () => new Promise(res => {\n                            const rethrowRestartEventOnce = () => {\n                                watchdog.off('restart', rethrowRestartEventOnce);\n                                this._fire('itemRestart', { itemId: item.id });\n                                res();\n                            };\n                            watchdog.on('restart', rethrowRestartEventOnce);\n                        }));\n                    });\n                    return watchdog.create(item.sourceElementOrData, item.config, this._context);\n                }\n                else {\n                    throw new Error(`Not supported item type: '${item.type}'.`);\n                }\n            });\n        }));\n    }\n    /**\n     * Removes and destroys item(s) with given ID(s).\n     *\n     * ```ts\n     * await watchdog.remove( 'editor1' );\n     * ```\n     *\n     * Or\n     *\n     * ```ts\n     * await watchdog.remove( [ 'editor1', 'editor2' ] );\n     * ```\n     *\n     * @param itemIdOrItemIds Item ID or an array of item IDs.\n     */\n    remove(itemIdOrItemIds) {\n        const itemIds = toArray(itemIdOrItemIds);\n        return Promise.all(itemIds.map(itemId => {\n            return this._actionQueues.enqueue(itemId, () => {\n                const watchdog = this._getWatchdog(itemId);\n                this._watchdogs.delete(itemId);\n                return watchdog.destroy();\n            });\n        }));\n    }\n    /**\n     * Destroys the context watchdog and all added items.\n     * Once the context watchdog is destroyed, new items cannot be added.\n     *\n     * ```ts\n     * await watchdog.destroy();\n     * ```\n     */\n    destroy() {\n        return this._actionQueues.enqueue(mainQueueId, () => {\n            this.state = 'destroyed';\n            this._fire('stateChange');\n            super.destroy();\n            return this._destroy();\n        });\n    }\n    /**\n     * Restarts the context watchdog.\n     */\n    _restart() {\n        return this._actionQueues.enqueue(mainQueueId, () => {\n            this.state = 'initializing';\n            this._fire('stateChange');\n            return this._destroy()\n                .catch(err => {\n                console.error('An error happened during destroying the context or items.', err);\n            })\n                .then(() => this._create())\n                .then(() => this._fire('restart'));\n        });\n    }\n    /**\n     * Initializes the context watchdog.\n     */\n    _create() {\n        return Promise.resolve()\n            .then(() => {\n            this._startErrorHandling();\n            return this._creator(this._contextConfig);\n        })\n            .then(context => {\n            this._context = context;\n            this._contextProps = getSubNodes(this._context);\n            return Promise.all(Array.from(this._watchdogs.values())\n                .map(watchdog => {\n                watchdog._setExcludedProperties(this._contextProps);\n                return watchdog.create(undefined, undefined, this._context);\n            }));\n        });\n    }\n    /**\n     * Destroys the context instance and all added items.\n     */\n    _destroy() {\n        return Promise.resolve()\n            .then(() => {\n            this._stopErrorHandling();\n            const context = this._context;\n            this._context = null;\n            this._contextProps = new Set();\n            return Promise.all(Array.from(this._watchdogs.values())\n                .map(watchdog => watchdog.destroy()))\n                // Context destructor destroys each editor.\n                .then(() => this._destructor(context));\n        });\n    }\n    /**\n     * Returns the watchdog for a given item ID.\n     *\n     * @param itemId Item ID.\n     */\n    _getWatchdog(itemId) {\n        const watchdog = this._watchdogs.get(itemId);\n        if (!watchdog) {\n            throw new Error(`Item with the given id was not registered: ${itemId}.`);\n        }\n        return watchdog;\n    }\n    /**\n     * Checks whether an error comes from the context instance and not from the item instances.\n     *\n     * @internal\n     */\n    _isErrorComingFromThisItem(error) {\n        for (const watchdog of this._watchdogs.values()) {\n            if (watchdog._isErrorComingFromThisItem(error)) {\n                return false;\n            }\n        }\n        return areConnectedThroughProperties(this._context, error.context);\n    }\n}\n/**\n * Manager of action queues that allows queuing async functions.\n */\nclass ActionQueues {\n    constructor() {\n        this._onEmptyCallbacks = [];\n        this._queues = new Map();\n        this._activeActions = 0;\n    }\n    /**\n     * Used to register callbacks that will be run when the queue becomes empty.\n     *\n     * @param onEmptyCallback A callback that will be run whenever the queue becomes empty.\n     */\n    onEmpty(onEmptyCallback) {\n        this._onEmptyCallbacks.push(onEmptyCallback);\n    }\n    /**\n     * It adds asynchronous actions (functions) to the proper queue and runs them one by one.\n     *\n     * @param queueId The action queue ID.\n     * @param action A function that should be enqueued.\n     */\n    enqueue(queueId, action) {\n        const isMainAction = queueId === mainQueueId;\n        this._activeActions++;\n        if (!this._queues.get(queueId)) {\n            this._queues.set(queueId, Promise.resolve());\n        }\n        // List all sources of actions that the current action needs to await for.\n        // For the main action wait for all other actions.\n        // For the item action wait only for the item queue and the main queue.\n        const awaitedActions = isMainAction ?\n            Promise.all(this._queues.values()) :\n            Promise.all([this._queues.get(mainQueueId), this._queues.get(queueId)]);\n        const queueWithAction = awaitedActions.then(action);\n        // Catch all errors in the main queue to stack promises even if an error occurred in the past.\n        const nonErrorQueue = queueWithAction.catch(() => { });\n        this._queues.set(queueId, nonErrorQueue);\n        return queueWithAction.finally(() => {\n            this._activeActions--;\n            if (this._queues.get(queueId) === nonErrorQueue && this._activeActions === 0) {\n                this._onEmptyCallbacks.forEach(cb => cb());\n            }\n        });\n    }\n}\n/**\n * Transforms any value to an array. If the provided value is already an array, it is returned unchanged.\n *\n * @param elementOrArray The value to transform to an array.\n * @returns An array created from data.\n */\nfunction toArray(elementOrArray) {\n    return Array.isArray(elementOrArray) ? elementOrArray : [elementOrArray];\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/plugincollection\n */\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n */\nexport default class PluginCollection extends /* #__PURE__ */ EmitterMixin() {\n    /**\n     * Creates an instance of the plugin collection class.\n     * Allows loading and initializing plugins and their dependencies.\n     * Allows providing a list of already loaded plugins. These plugins will not be destroyed along with this collection.\n     *\n     * @param availablePlugins Plugins (constructors) which the collection will be able to use\n     * when {@link module:core/plugincollection~PluginCollection#init} is used with the plugin names (strings, instead of constructors).\n     * Usually, the editor will pass its built-in plugins to the collection so they can later be\n     * used in `config.plugins` or `config.removePlugins` by names.\n     * @param contextPlugins A list of already initialized plugins represented by a `[ PluginConstructor, pluginInstance ]` pair.\n     */\n    constructor(context, availablePlugins = [], contextPlugins = []) {\n        super();\n        this._plugins = new Map();\n        this._context = context;\n        this._availablePlugins = new Map();\n        for (const PluginConstructor of availablePlugins) {\n            if (PluginConstructor.pluginName) {\n                this._availablePlugins.set(PluginConstructor.pluginName, PluginConstructor);\n            }\n        }\n        this._contextPlugins = new Map();\n        for (const [PluginConstructor, pluginInstance] of contextPlugins) {\n            this._contextPlugins.set(PluginConstructor, pluginInstance);\n            this._contextPlugins.set(pluginInstance, PluginConstructor);\n            // To make it possible to require a plugin by its name.\n            if (PluginConstructor.pluginName) {\n                this._availablePlugins.set(PluginConstructor.pluginName, PluginConstructor);\n            }\n        }\n    }\n    /**\n     * Iterable interface.\n     *\n     * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n     */\n    *[Symbol.iterator]() {\n        for (const entry of this._plugins) {\n            if (typeof entry[0] == 'function') {\n                yield entry;\n            }\n        }\n    }\n    /**\n     * Gets the plugin instance by its constructor or name.\n     *\n     * ```ts\n     * // Check if 'Clipboard' plugin was loaded.\n     * if ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n     * \t// Get clipboard plugin instance\n     * \tconst clipboard = editor.plugins.get( 'ClipboardPipeline' );\n     *\n     * \tthis.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {\n     * \t\t// Do something on clipboard input.\n     * \t} );\n     * }\n     * ```\n     *\n     * **Note**: This method will throw an error if a plugin is not loaded. Use `{@link #has editor.plugins.has()}`\n     * to check if a plugin is available.\n     *\n     * @param key The plugin constructor or {@link module:core/plugin~PluginStaticMembers#pluginName name}.\n     */\n    get(key) {\n        const plugin = this._plugins.get(key);\n        if (!plugin) {\n            let pluginName = key;\n            if (typeof key == 'function') {\n                pluginName = key.pluginName || key.name;\n            }\n            /**\n             * The plugin is not loaded and could not be obtained.\n             *\n             * Plugin classes (constructors) need to be provided to the editor and must be loaded before they can be obtained from\n             * the plugin collection.\n             *\n             * **Note**: You can use `{@link module:core/plugincollection~PluginCollection#has editor.plugins.has()}`\n             * to check if a plugin was loaded.\n             *\n             * @error plugincollection-plugin-not-loaded\n             * @param plugin The name of the plugin which is not loaded.\n             */\n            throw new CKEditorError('plugincollection-plugin-not-loaded', this._context, { plugin: pluginName });\n        }\n        return plugin;\n    }\n    /**\n     * Checks if a plugin is loaded.\n     *\n     * ```ts\n     * // Check if the 'Clipboard' plugin was loaded.\n     * if ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n     * \t// Now use the clipboard plugin instance:\n     * \tconst clipboard = editor.plugins.get( 'ClipboardPipeline' );\n     *\n     * \t// ...\n     * }\n     * ```\n     *\n     * @param key The plugin constructor or {@link module:core/plugin~PluginStaticMembers#pluginName name}.\n     */\n    has(key) {\n        return this._plugins.has(key);\n    }\n    /**\n     * Initializes a set of plugins and adds them to the collection.\n     *\n     * @param plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n     * or {@link module:core/plugin~PluginStaticMembers#pluginName plugin names}.\n     * @param pluginsToRemove Names of the plugins or plugin constructors\n     * that should not be loaded (despite being specified in the `plugins` array).\n     * @param pluginsSubstitutions An array of {@link module:core/plugin~PluginInterface plugin constructors}\n     * that will be used to replace plugins of the same names that were passed in `plugins` or that are in their dependency tree.\n     * A useful option for replacing built-in plugins while creating tests (for mocking their APIs). Plugins that will be replaced\n     * must follow these rules:\n     *   * The new plugin must be a class.\n     *   * The new plugin must be named.\n     *   * Both plugins must not depend on other plugins.\n     * @returns A promise which gets resolved once all plugins are loaded and available in the collection.\n     */\n    init(plugins, pluginsToRemove = [], pluginsSubstitutions = []) {\n        // Plugin initialization procedure consists of 2 main steps:\n        // 1) collecting all available plugin constructors,\n        // 2) verification whether all required plugins can be instantiated.\n        //\n        // In the first step, all plugin constructors, available in the provided `plugins` array and inside\n        // plugin's dependencies (from the `Plugin.requires` array), are recursively collected and added to the existing\n        // `this._availablePlugins` map, but without any verification at the given moment. Performing the verification\n        // at this point (during the plugin constructor searching) would cause false errors to occur, that some plugin\n        // is missing but in fact it may be defined further in the array as the dependency of other plugin. After\n        // traversing the entire dependency tree, it will be checked if all required \"top level\" plugins are available.\n        //\n        // In the second step, the list of plugins that have not been explicitly removed is traversed to get all the\n        // plugin constructors to be instantiated in the correct order and to validate against some rules. Finally, if\n        // no plugin is missing and no other error has been found, they all will be instantiated.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const context = this._context;\n        findAvailablePluginConstructors(plugins);\n        validatePlugins(plugins);\n        const pluginsToLoad = plugins.filter(plugin => !isPluginRemoved(plugin, pluginsToRemove));\n        const pluginConstructors = [...getPluginConstructors(pluginsToLoad)];\n        substitutePlugins(pluginConstructors, pluginsSubstitutions);\n        const pluginInstances = loadPlugins(pluginConstructors);\n        return initPlugins(pluginInstances, 'init')\n            .then(() => initPlugins(pluginInstances, 'afterInit'))\n            .then(() => pluginInstances);\n        function isPluginConstructor(plugin) {\n            return typeof plugin === 'function';\n        }\n        function isContextPlugin(plugin) {\n            return isPluginConstructor(plugin) && !!plugin.isContextPlugin;\n        }\n        function isPluginRemoved(plugin, pluginsToRemove) {\n            return pluginsToRemove.some(removedPlugin => {\n                if (removedPlugin === plugin) {\n                    return true;\n                }\n                if (getPluginName(plugin) === removedPlugin) {\n                    return true;\n                }\n                if (getPluginName(removedPlugin) === plugin) {\n                    return true;\n                }\n                return false;\n            });\n        }\n        function getPluginName(plugin) {\n            return isPluginConstructor(plugin) ?\n                plugin.pluginName || plugin.name :\n                plugin;\n        }\n        function findAvailablePluginConstructors(plugins, processed = new Set()) {\n            plugins.forEach(plugin => {\n                if (!isPluginConstructor(plugin)) {\n                    return;\n                }\n                if (processed.has(plugin)) {\n                    return;\n                }\n                processed.add(plugin);\n                if (plugin.pluginName && !that._availablePlugins.has(plugin.pluginName)) {\n                    that._availablePlugins.set(plugin.pluginName, plugin);\n                }\n                if (plugin.requires) {\n                    findAvailablePluginConstructors(plugin.requires, processed);\n                }\n            });\n        }\n        function getPluginConstructors(plugins, processed = new Set()) {\n            return plugins\n                .map(plugin => {\n                return isPluginConstructor(plugin) ?\n                    plugin :\n                    that._availablePlugins.get(plugin);\n            })\n                .reduce((result, plugin) => {\n                if (processed.has(plugin)) {\n                    return result;\n                }\n                processed.add(plugin);\n                if (plugin.requires) {\n                    validatePlugins(plugin.requires, plugin);\n                    getPluginConstructors(plugin.requires, processed).forEach(plugin => result.add(plugin));\n                }\n                return result.add(plugin);\n            }, new Set());\n        }\n        function validatePlugins(plugins, parentPluginConstructor = null) {\n            plugins\n                .map(plugin => {\n                return isPluginConstructor(plugin) ?\n                    plugin :\n                    that._availablePlugins.get(plugin) || plugin;\n            })\n                .forEach(plugin => {\n                checkMissingPlugin(plugin, parentPluginConstructor);\n                checkContextPlugin(plugin, parentPluginConstructor);\n                checkRemovedPlugin(plugin, parentPluginConstructor);\n            });\n        }\n        function checkMissingPlugin(plugin, parentPluginConstructor) {\n            if (isPluginConstructor(plugin)) {\n                return;\n            }\n            if (parentPluginConstructor) {\n                /**\n                 * A required \"soft\" dependency was not found on the plugin list.\n                 *\n                 * When configuring the editor, either prior to building (via\n                 * {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}) or when\n                 * creating a new instance of the editor (e.g. via\n                 * {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`}), you need to provide\n                 * some of the dependencies for other plugins that you used.\n                 *\n                 * This error is thrown when one of these dependencies was not provided. The name of the missing plugin\n                 * can be found in `missingPlugin` and the plugin that required it in `requiredBy`.\n                 *\n                 * In order to resolve it, you need to import the missing plugin and add it to the\n                 * current list of plugins (`Editor.builtinPlugins` or `config.plugins`/`config.extraPlugins`).\n                 *\n                 * Soft requirements were introduced in version 26.0.0. If you happen to stumble upon this error\n                 * when upgrading to version 26.0.0, read also the\n                 * {@glink updating/guides/update-to-26 Migration to 26.0.0} guide.\n                 *\n                 * @error plugincollection-soft-required\n                 * @param missingPlugin The name of the required plugin.\n                 * @param requiredBy The name of the plugin that requires the other plugin.\n                 */\n                throw new CKEditorError('plugincollection-soft-required', context, { missingPlugin: plugin, requiredBy: getPluginName(parentPluginConstructor) });\n            }\n            /**\n             * A plugin is not available and could not be loaded.\n             *\n             * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n             * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n             * property.\n             *\n             * **If you see this warning when using one of the CKEditor 5 Builds},\n             * it means that you try to enable a plugin which was not included in that build. This may be due to a typo\n             * in the plugin name or simply because that plugin is not a part of this build.\n             *\n             * Predefined builds are a deprecated solution and we strongly advise\n             * {@glink updating/nim-migration/migration-to-new-installation-methods migrating to new installation methods}.\n             *\n             * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n             * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n             * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n             * provide each plugin through a reference (as a constructor function). Check out the examples in the\n             * {@glink getting-started/installation/cloud/quick-start Quick start} guide.\n             *\n             * @error plugincollection-plugin-not-found\n             * @param plugin The name of the plugin which could not be loaded.\n             */\n            throw new CKEditorError('plugincollection-plugin-not-found', context, { plugin });\n        }\n        function checkContextPlugin(plugin, parentPluginConstructor) {\n            if (!isContextPlugin(parentPluginConstructor)) {\n                return;\n            }\n            if (isContextPlugin(plugin)) {\n                return;\n            }\n            /**\n             * If a plugin is a context plugin, all plugins it requires should also be context plugins\n             * instead of plugins. In other words, if one plugin can be used in the context,\n             * all its requirements should also be ready to be used in the context. Note that the context\n             * provides only a part of the API provided by the editor. If one plugin needs a full\n             * editor API, all plugins which require it are considered as plugins that need a full\n             * editor API.\n             *\n             * @error plugincollection-context-required\n             * @param plugin The name of the required plugin.\n             * @param requiredBy The name of the parent plugin.\n             */\n            throw new CKEditorError('plugincollection-context-required', context, { plugin: getPluginName(plugin), requiredBy: getPluginName(parentPluginConstructor) });\n        }\n        function checkRemovedPlugin(plugin, parentPluginConstructor) {\n            if (!parentPluginConstructor) {\n                return;\n            }\n            if (!isPluginRemoved(plugin, pluginsToRemove)) {\n                return;\n            }\n            /**\n             * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n             *\n             * @error plugincollection-required\n             * @param plugin The name of the required plugin.\n             * @param requiredBy The name of the parent plugin.\n             */\n            throw new CKEditorError('plugincollection-required', context, { plugin: getPluginName(plugin), requiredBy: getPluginName(parentPluginConstructor) });\n        }\n        function loadPlugins(pluginConstructors) {\n            return pluginConstructors.map(PluginConstructor => {\n                let pluginInstance = that._contextPlugins.get(PluginConstructor);\n                pluginInstance = pluginInstance || new PluginConstructor(context);\n                that._add(PluginConstructor, pluginInstance);\n                return pluginInstance;\n            });\n        }\n        function initPlugins(pluginInstances, method) {\n            return pluginInstances.reduce((promise, plugin) => {\n                if (!plugin[method]) {\n                    return promise;\n                }\n                if (that._contextPlugins.has(plugin)) {\n                    return promise;\n                }\n                return promise.then(plugin[method].bind(plugin));\n            }, Promise.resolve());\n        }\n        /**\n         * Replaces plugin constructors with the specified set of plugins.\n         */\n        function substitutePlugins(pluginConstructors, pluginsSubstitutions) {\n            for (const pluginItem of pluginsSubstitutions) {\n                if (typeof pluginItem != 'function') {\n                    /**\n                     * The plugin replacing an existing plugin must be a function.\n                     *\n                     * @error plugincollection-replace-plugin-invalid-type\n                     */\n                    throw new CKEditorError('plugincollection-replace-plugin-invalid-type', null, { pluginItem });\n                }\n                const pluginName = pluginItem.pluginName;\n                if (!pluginName) {\n                    /**\n                     * The plugin replacing an existing plugin must have a name.\n                     *\n                     * @error plugincollection-replace-plugin-missing-name\n                     */\n                    throw new CKEditorError('plugincollection-replace-plugin-missing-name', null, { pluginItem });\n                }\n                if (pluginItem.requires && pluginItem.requires.length) {\n                    /**\n                     * The plugin replacing an existing plugin cannot depend on other plugins.\n                     *\n                     * @error plugincollection-plugin-for-replacing-cannot-have-dependencies\n                     */\n                    throw new CKEditorError('plugincollection-plugin-for-replacing-cannot-have-dependencies', null, { pluginName });\n                }\n                const pluginToReplace = that._availablePlugins.get(pluginName);\n                if (!pluginToReplace) {\n                    /**\n                     * The replaced plugin does not exist in the\n                     * {@link module:core/plugincollection~PluginCollection available plugins} collection.\n                     *\n                     * @error plugincollection-plugin-for-replacing-not-exist\n                     */\n                    throw new CKEditorError('plugincollection-plugin-for-replacing-not-exist', null, { pluginName });\n                }\n                const indexInPluginConstructors = pluginConstructors.indexOf(pluginToReplace);\n                if (indexInPluginConstructors === -1) {\n                    // The Context feature can substitute plugins as well.\n                    // It may happen that the editor will be created with the given context, where the plugin for substitute\n                    // was already replaced. In such a case, we don't want to do it again.\n                    if (that._contextPlugins.has(pluginToReplace)) {\n                        return;\n                    }\n                    /**\n                     * The replaced plugin will not be loaded so it cannot be replaced.\n                     *\n                     * @error plugincollection-plugin-for-replacing-not-loaded\n                     */\n                    throw new CKEditorError('plugincollection-plugin-for-replacing-not-loaded', null, { pluginName });\n                }\n                if (pluginToReplace.requires && pluginToReplace.requires.length) {\n                    /**\n                     * The replaced plugin cannot depend on other plugins.\n                     *\n                     * @error plugincollection-replaced-plugin-cannot-have-dependencies\n                     */\n                    throw new CKEditorError('plugincollection-replaced-plugin-cannot-have-dependencies', null, { pluginName });\n                }\n                pluginConstructors.splice(indexInPluginConstructors, 1, pluginItem);\n                that._availablePlugins.set(pluginName, pluginItem);\n            }\n        }\n    }\n    /**\n     * Destroys all loaded plugins.\n     */\n    destroy() {\n        const promises = [];\n        for (const [, pluginInstance] of this) {\n            if (typeof pluginInstance.destroy == 'function' && !this._contextPlugins.has(pluginInstance)) {\n                promises.push(pluginInstance.destroy());\n            }\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * Adds the plugin to the collection. Exposed mainly for testing purposes.\n     *\n     * @param PluginConstructor The plugin constructor.\n     * @param plugin The instance of the plugin.\n     */\n    _add(PluginConstructor, plugin) {\n        this._plugins.set(PluginConstructor, plugin);\n        const pluginName = PluginConstructor.pluginName;\n        if (!pluginName) {\n            return;\n        }\n        if (this._plugins.has(pluginName)) {\n            /**\n             * Two plugins with the same {@link module:core/plugin~PluginStaticMembers#pluginName} were loaded.\n             * This will lead to runtime conflicts between these plugins.\n             *\n             * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n             * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n             * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n             *\n             * Check your import paths and the list of plugins passed to\n             * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n             * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n             *\n             * Predefined builds are a deprecated solution and we strongly advise\n             * {@glink updating/nim-migration/migration-to-new-installation-methods migrating to new installation methods}.\n             *\n             * The second option is that your `node_modules/` directory contains duplicated versions of the same\n             * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n             * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n             * of some packages, their dependencies may need to be installed in more than one version which may lead to this\n             * warning.\n             *\n             * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n             * the dependencies of this plugin are being duplicated.\n             * They are already built into that editor build and now get added for the second time as dependencies\n             * of the plugin you are installing.\n             *\n             * @error plugincollection-plugin-name-conflict\n             * @param pluginName The duplicated plugin name.\n             * @param plugin1 The first plugin constructor.\n             * @param plugin2 The second plugin constructor.\n             */\n            throw new CKEditorError('plugincollection-plugin-name-conflict', null, { pluginName, plugin1: this._plugins.get(pluginName).constructor, plugin2: PluginConstructor });\n        }\n        this._plugins.set(pluginName, plugin);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/context\n */\nimport { Config, Collection, CKEditorError, Locale } from '@ckeditor/ckeditor5-utils';\nimport PluginCollection from './plugincollection.js';\n/**\n * Provides a common, higher-level environment for solutions that use multiple {@link module:core/editor/editor~Editor editors}\n * or plugins that work outside the editor. Use it instead of {@link module:core/editor/editor~Editor.create `Editor.create()`}\n * in advanced application integrations.\n *\n * All configuration options passed to a context will be used as default options for the editor instances initialized in that context.\n *\n * {@link module:core/contextplugin~ContextPlugin Context plugins} passed to a context instance will be shared among all\n * editor instances initialized in this context. These will be the same plugin instances for all the editors.\n *\n * **Note:** The context can only be initialized with {@link module:core/contextplugin~ContextPlugin context plugins}\n * (e.g. [comments](https://ckeditor.com/collaboration/comments/)). Regular {@link module:core/plugin~Plugin plugins} require an\n * editor instance to work and cannot be added to a context.\n *\n * **Note:** You can add a context plugin to an editor instance, though.\n *\n * If you are using multiple editor instances on one page and use any context plugins, create a context to share the configuration and\n * plugins among these editors. Some plugins will use the information about all existing editors to better integrate between them.\n *\n * If you are using plugins that do not require an editor to work (e.g. [comments](https://ckeditor.com/collaboration/comments/)),\n * enable and configure them using the context.\n *\n * If you are using only a single editor on each page, use {@link module:core/editor/editor~Editor.create `Editor.create()`} instead.\n * In such a case, a context instance will be created by the editor instance in a transparent way.\n *\n * See {@link ~Context.create `Context.create()`} for usage examples.\n */\nexport default class Context {\n    /**\n     * Creates a context instance with a given configuration.\n     *\n     * Usually not to be used directly. See the static {@link module:core/context~Context.create `create()`} method.\n     *\n     * @param config The context configuration.\n     */\n    constructor(config) {\n        /**\n         * Reference to the editor which created the context.\n         * Null when the context was created outside of the editor.\n         *\n         * It is used to destroy the context when removing the editor that has created the context.\n         */\n        this._contextOwner = null;\n        // We don't pass translations to the config, because its behavior of splitting keys\n        // with dots (e.g. `resize.width` => `resize: { width }`) breaks the translations.\n        const { translations, ...rest } = config || {};\n        this.config = new Config(rest, this.constructor.defaultConfig);\n        const availablePlugins = this.constructor.builtinPlugins;\n        this.config.define('plugins', availablePlugins);\n        this.plugins = new PluginCollection(this, availablePlugins);\n        const languageConfig = this.config.get('language') || {};\n        this.locale = new Locale({\n            uiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n            contentLanguage: this.config.get('language.content'),\n            translations\n        });\n        this.t = this.locale.t;\n        this.editors = new Collection();\n    }\n    /**\n     * Loads and initializes plugins specified in the configuration.\n     *\n     * @returns A promise which resolves once the initialization is completed, providing an array of loaded plugins.\n     */\n    initPlugins() {\n        const plugins = this.config.get('plugins') || [];\n        const substitutePlugins = this.config.get('substitutePlugins') || [];\n        // Plugins for substitution should be checked as well.\n        for (const Plugin of plugins.concat(substitutePlugins)) {\n            if (typeof Plugin != 'function') {\n                /**\n                 * Only a constructor function is allowed as a {@link module:core/contextplugin~ContextPlugin context plugin}.\n                 *\n                 * @error context-initplugins-constructor-only\n                 */\n                throw new CKEditorError('context-initplugins-constructor-only', null, { Plugin });\n            }\n            if (Plugin.isContextPlugin !== true) {\n                /**\n                 * Only a plugin marked as a {@link module:core/contextplugin~ContextPlugin.isContextPlugin context plugin}\n                 * is allowed to be used with a context.\n                 *\n                 * @error context-initplugins-invalid-plugin\n                 */\n                throw new CKEditorError('context-initplugins-invalid-plugin', null, { Plugin });\n            }\n        }\n        return this.plugins.init(plugins, [], substitutePlugins);\n    }\n    /**\n     * Destroys the context instance and all editors used with the context,\n     * releasing all resources used by the context.\n     *\n     * @returns A promise that resolves once the context instance is fully destroyed.\n     */\n    destroy() {\n        return Promise.all(Array.from(this.editors, editor => editor.destroy()))\n            .then(() => this.plugins.destroy());\n    }\n    /**\n     * Adds a reference to the editor which is used with this context.\n     *\n     * When the given editor has created the context, the reference to this editor will be stored\n     * as a {@link ~Context#_contextOwner}.\n     *\n     * This method should only be used by the editor.\n     *\n     * @internal\n     * @param isContextOwner Stores the given editor as a context owner.\n     */\n    _addEditor(editor, isContextOwner) {\n        if (this._contextOwner) {\n            /**\n             * Cannot add multiple editors to the context which is created by the editor.\n             *\n             * @error context-addeditor-private-context\n             */\n            throw new CKEditorError('context-addeditor-private-context');\n        }\n        this.editors.add(editor);\n        if (isContextOwner) {\n            this._contextOwner = editor;\n        }\n    }\n    /**\n     * Removes a reference to the editor which was used with this context.\n     * When the context was created by the given editor, the context will be destroyed.\n     *\n     * This method should only be used by the editor.\n     *\n     * @internal\n     * @return A promise that resolves once the editor is removed from the context or when the context was destroyed.\n     */\n    _removeEditor(editor) {\n        if (this.editors.has(editor)) {\n            this.editors.remove(editor);\n        }\n        if (this._contextOwner === editor) {\n            return this.destroy();\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Returns the context configuration which will be copied to the editors created using this context.\n     *\n     * The configuration returned by this method has the plugins configuration removed &ndash; plugins are shared with all editors\n     * through another mechanism.\n     *\n     * This method should only be used by the editor.\n     *\n     * @internal\n     * @returns Configuration as a plain object.\n     */\n    _getEditorConfig() {\n        const result = {};\n        for (const name of this.config.names()) {\n            if (!['plugins', 'removePlugins', 'extraPlugins'].includes(name)) {\n                result[name] = this.config.get(name);\n            }\n        }\n        return result;\n    }\n    /**\n     * Creates and initializes a new context instance.\n     *\n     * ```ts\n     * const commonConfig = { ... }; // Configuration for all the plugins and editors.\n     * const editorPlugins = [ ... ]; // Regular plugins here.\n     *\n     * Context\n     * \t.create( {\n     * \t\t// Only context plugins here.\n     * \t\tplugins: [ ... ],\n     *\n     * \t\t// Configure the language for all the editors (it cannot be overwritten).\n     * \t\tlanguage: { ... },\n     *\n     * \t\t// Configuration for context plugins.\n     * \t\tcomments: { ... },\n     * \t\t...\n     *\n     * \t\t// Default configuration for editor plugins.\n     * \t\ttoolbar: { ... },\n     * \t\timage: { ... },\n     * \t\t...\n     * \t} )\n     * \t.then( context => {\n     * \t\tconst promises = [];\n     *\n     * \t\tpromises.push( ClassicEditor.create(\n     * \t\t\tdocument.getElementById( 'editor1' ),\n     * \t\t\t{\n     * \t\t\t\teditorPlugins,\n     * \t\t\t\tcontext\n     * \t\t\t}\n     * \t\t) );\n     *\n     * \t\tpromises.push( ClassicEditor.create(\n     * \t\t\tdocument.getElementById( 'editor2' ),\n     * \t\t\t{\n     * \t\t\t\teditorPlugins,\n     * \t\t\t\tcontext,\n     * \t\t\t\ttoolbar: { ... } // You can overwrite the configuration of the context.\n     * \t\t\t}\n     * \t\t) );\n     *\n     * \t\treturn Promise.all( promises );\n     * \t} );\n     * ```\n     *\n     * @param config The context configuration.\n     * @returns A promise resolved once the context is ready. The promise resolves with the created context instance.\n     */\n    static create(config) {\n        return new Promise(resolve => {\n            const context = new this(config);\n            resolve(context.initPlugins().then(() => context));\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/commandcollection\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\nexport default class CommandCollection {\n    /**\n     * Creates collection instance.\n     */\n    constructor() {\n        this._commands = new Map();\n    }\n    /**\n     * Registers a new command.\n     *\n     * @param commandName The name of the command.\n     */\n    add(commandName, command) {\n        this._commands.set(commandName, command);\n    }\n    /**\n     * Retrieves a command from the collection.\n     *\n     * @param commandName The name of the command.\n     */\n    get(commandName) {\n        return this._commands.get(commandName);\n    }\n    /**\n     * Executes a command.\n     *\n     * @param commandName The name of the command.\n     * @param commandParams Command parameters.\n     * @returns The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n     */\n    execute(commandName, ...commandParams) {\n        const command = this.get(commandName);\n        if (!command) {\n            /**\n             * Command does not exist.\n             *\n             * @error commandcollection-command-not-found\n             * @param commandName Name of the command.\n             */\n            throw new CKEditorError('commandcollection-command-not-found', this, { commandName });\n        }\n        return command.execute(...commandParams);\n    }\n    /**\n     * Returns iterator of command names.\n     */\n    *names() {\n        yield* this._commands.keys();\n    }\n    /**\n     * Returns iterator of command instances.\n     */\n    *commands() {\n        yield* this._commands.values();\n    }\n    /**\n     * Iterable interface.\n     *\n     * Returns `[ commandName, commandInstance ]` pairs.\n     */\n    [Symbol.iterator]() {\n        return this._commands[Symbol.iterator]();\n    }\n    /**\n     * Destroys all collection commands.\n     */\n    destroy() {\n        for (const command of this.commands()) {\n            command.destroy();\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editingkeystrokehandler\n */\nimport { KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n * ```ts\n * editor.keystrokes.set( 'Ctrl+Z', 'undo' );\n * editor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n * editor.keystrokes.set( 'Ctrl+Y', 'redo' );\n * ```\n */\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n    /**\n     * Creates an instance of the keystroke handler.\n     */\n    constructor(editor) {\n        super();\n        this.editor = editor;\n    }\n    /**\n     * Registers a handler for the specified keystroke.\n     *\n     * The handler can be specified as a command name or a callback.\n     *\n     * @param keystroke Keystroke defined in a format accepted by\n     * the {@link module:utils/keyboard~parseKeystroke} function.\n     * @param callback If a string is passed, then the keystroke will\n     * {@link module:core/editor/editor~Editor#execute execute a command}.\n     * If a function, then it will be called with the\n     * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n     * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n     * @param options Additional options.\n     * @param options.priority The priority of the keystroke callback. The higher the priority value\n     * the sooner the callback will be executed. Keystrokes having the same priority\n     * are called in the order they were added.\n     */\n    set(keystroke, callback, options = {}) {\n        if (typeof callback == 'string') {\n            const commandName = callback;\n            callback = (evtData, cancel) => {\n                this.editor.execute(commandName);\n                cancel();\n            };\n        }\n        super.set(keystroke, callback, options);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/accessibility\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\nconst DEFAULT_CATEGORY_ID = 'contentEditing';\nexport const DEFAULT_GROUP_ID = 'common';\n/**\n * A common namespace for various accessibility features of the editor.\n *\n * **Information about editor keystrokes**\n *\n * * The information about keystrokes available in the editor is stored in the {@link #keystrokeInfos} property.\n * * New info entries can be added using the {@link #addKeystrokeInfoCategory}, {@link #addKeystrokeInfoGroup},\n * and {@link #addKeystrokeInfos} methods.\n */\nexport default class Accessibility {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        /**\n         * Stores information about keystrokes brought by editor features for the users to interact with the editor, mainly\n         * keystroke combinations and their accessible labels.\n         *\n         * This information is particularly useful for screen reader and other assistive technology users. It gets displayed\n         * by the {@link module:ui/editorui/accessibilityhelp/accessibilityhelp~AccessibilityHelp Accessibility help} dialog.\n         *\n         * Keystrokes are organized in categories and groups. They can be added using ({@link #addKeystrokeInfoCategory},\n         * {@link #addKeystrokeInfoGroup}, and {@link #addKeystrokeInfos}) methods.\n         *\n         * Please note that:\n         * * two categories are always available:\n         *   * `'contentEditing'` for keystrokes related to content creation,\n         *   * `'navigation'` for keystrokes related to navigation in the UI and the content.\n         * * unless specified otherwise, new keystrokes are added into the `'contentEditing'` category and the `'common'`\n         * keystroke group within that category while using the {@link #addKeystrokeInfos} method.\n         */\n        this.keystrokeInfos = new Map();\n        this._editor = editor;\n        const isMenuBarVisible = editor.config.get('menuBar.isVisible');\n        const t = editor.locale.t;\n        this.addKeystrokeInfoCategory({\n            id: DEFAULT_CATEGORY_ID,\n            label: t('Content editing keystrokes'),\n            description: t('These keyboard shortcuts allow for quick access to content editing features.')\n        });\n        const navigationKeystrokes = [\n            {\n                label: t('Close contextual balloons, dropdowns, and dialogs'),\n                keystroke: 'Esc'\n            },\n            {\n                label: t('Open the accessibility help dialog'),\n                keystroke: 'Alt+0'\n            },\n            {\n                label: t('Move focus between form fields (inputs, buttons, etc.)'),\n                keystroke: [['Tab'], ['Shift+Tab']]\n            },\n            {\n                label: t('Move focus to the toolbar, navigate between toolbars'),\n                keystroke: 'Alt+F10',\n                mayRequireFn: true\n            },\n            {\n                label: t('Navigate through the toolbar or menu bar'),\n                keystroke: [['arrowup'], ['arrowright'], ['arrowdown'], ['arrowleft']]\n            },\n            {\n                // eslint-disable-next-line max-len\n                label: t('Execute the currently focused button. Executing buttons that interact with the editor content moves the focus back to the content.'),\n                keystroke: [['Enter'], ['Space']]\n            }\n        ];\n        if (isMenuBarVisible) {\n            navigationKeystrokes.push({\n                label: t('Move focus to the menu bar, navigate between menu bars'),\n                keystroke: 'Alt+F9',\n                mayRequireFn: true\n            });\n        }\n        this.addKeystrokeInfoCategory({\n            id: 'navigation',\n            label: t('User interface and content navigation keystrokes'),\n            description: t('Use the following keystrokes for more efficient navigation in the CKEditor 5 user interface.'),\n            groups: [\n                {\n                    id: 'common',\n                    keystrokes: navigationKeystrokes\n                }\n            ]\n        });\n    }\n    /**\n     * Adds a top-level category in the {@link #keystrokeInfos keystroke information database} with a label and optional description.\n     *\n     * Categories organize keystrokes and help users to find the right keystroke. Each category can have multiple groups\n     * of keystrokes that narrow down the context in which the keystrokes are available. Every keystroke category comes\n     * with a `'common'` group by default.\n     *\n     * By default, two categories are available:\n     * * `'contentEditing'` for keystrokes related to content creation,\n     * * `'navigation'` for keystrokes related to navigation in the UI and the content.\n     *\n     * To create a new keystroke category with new groups, use the following code:\n     *\n     * ```js\n     * class MyPlugin extends Plugin {\n     * \t// ...\n     * \tinit() {\n     * \t\tconst editor = this.editor;\n     * \t\tconst t = editor.t;\n     *\n     * \t\t// ...\n     *\n     * \t\teditor.accessibility.addKeystrokeInfoCategory( {\n     * \t\t\tid: 'myCategory',\n     * \t\t\tlabel: t( 'My category' ),\n     * \t\t\tdescription: t( 'My category description.' ),\n     * \t\t\tgroups: [\n     * \t\t\t\t{\n     * \t\t\t\t\tid: 'myGroup',\n     * \t\t\t\t\tlabel: t( 'My keystroke group' ),\n     * \t\t\t\t\tkeystrokes: [\n     * \t\t\t\t\t\t{\n     * \t\t\t\t\t\t\tlabel: t( 'Keystroke label 1' ),\n     * \t\t\t\t\t\t\tkeystroke: 'Ctrl+Shift+N'\n     * \t\t\t\t\t\t},\n     * \t\t\t\t\t\t{\n     * \t\t\t\t\t\t\tlabel: t( 'Keystroke label 2' ),\n     * \t\t\t\t\t\t\tkeystroke: 'Ctrl+Shift+M'\n     * \t\t\t\t\t\t}\n     * \t\t\t\t\t]\n     * \t\t\t\t}\n     * \t\t\t]\n     * \t\t};\n     * \t}\n     * }\n     * ```\n     *\n     * See {@link #keystrokeInfos}, {@link #addKeystrokeInfoGroup}, and {@link #addKeystrokeInfos}.\n     */\n    addKeystrokeInfoCategory({ id, label, description, groups }) {\n        this.keystrokeInfos.set(id, {\n            id,\n            label,\n            description,\n            groups: new Map()\n        });\n        this.addKeystrokeInfoGroup({\n            categoryId: id,\n            id: DEFAULT_GROUP_ID\n        });\n        if (groups) {\n            groups.forEach(group => {\n                this.addKeystrokeInfoGroup({\n                    categoryId: id,\n                    ...group\n                });\n            });\n        }\n    }\n    /**\n     * Adds a group of keystrokes in a specific category to the {@link #keystrokeInfos keystroke information database}.\n     *\n     * Groups narrow down the context in which the keystrokes are available. When `categoryId` is not specified,\n     * the group goes to the `'contentEditing'` category (default).\n     *\n     * To create a new group within an existing category, use the following code:\n     *\n     * ```js\n     * class MyPlugin extends Plugin {\n     * \t// ...\n     * \tinit() {\n     * \t\tconst editor = this.editor;\n     * \t\tconst t = editor.t;\n     *\n     * \t\t// ...\n     *\n     * \t\teditor.accessibility.addKeystrokeInfoGroup( {\n     * \t\t\tid: 'myGroup',\n     * \t\t\tcategoryId: 'navigation',\n     * \t\t\tlabel: t( 'My keystroke group' ),\n     * \t\t\tkeystrokes: [\n     * \t\t\t\t{\n     * \t\t\t\t\tlabel: t( 'Keystroke label 1' ),\n     * \t\t\t\t\tkeystroke: 'Ctrl+Shift+N'\n     * \t\t\t\t},\n     * \t\t\t\t{\n     * \t\t\t\t\tlabel: t( 'Keystroke label 2' ),\n     * \t\t\t\t\tkeystroke: 'Ctrl+Shift+M'\n     * \t\t\t\t}\n     * \t\t\t]\n     * \t\t} );\n     * \t}\n     * }\n     * ```\n     *\n     * See {@link #keystrokeInfos}, {@link #addKeystrokeInfoCategory}, and {@link #addKeystrokeInfos}.\n     */\n    addKeystrokeInfoGroup({ categoryId = DEFAULT_CATEGORY_ID, id, label, keystrokes }) {\n        const category = this.keystrokeInfos.get(categoryId);\n        if (!category) {\n            throw new CKEditorError('accessibility-unknown-keystroke-info-category', this._editor, { groupId: id, categoryId });\n        }\n        category.groups.set(id, {\n            id,\n            label,\n            keystrokes: keystrokes || []\n        });\n    }\n    /**\n     * Adds information about keystrokes to the {@link #keystrokeInfos keystroke information database}.\n     *\n     * Keystrokes without specified `groupId` or `categoryId` go to the `'common'` group in the `'contentEditing'` category (default).\n     *\n     * To add a keystroke brought by your plugin (using default group and category), use the following code:\n     *\n     * ```js\n     * class MyPlugin extends Plugin {\n     * \t// ...\n     * \tinit() {\n     * \t\tconst editor = this.editor;\n     * \t\tconst t = editor.t;\n     *\n     * \t\t// ...\n     *\n     * \t\teditor.accessibility.addKeystrokeInfos( {\n     * \t\t\tkeystrokes: [\n     * \t\t\t\t{\n     * \t\t\t\t\tlabel: t( 'Keystroke label' ),\n     * \t\t\t\t\tkeystroke: 'CTRL+B'\n     * \t\t\t\t}\n     * \t\t\t]\n     * \t\t} );\n     * \t}\n     * }\n     * ```\n     * To add a keystroke in a specific existing `'widget'` group in the default `'contentEditing'` category:\n     *\n     * ```js\n     * class MyPlugin extends Plugin {\n     * \t// ...\n     * \tinit() {\n     * \t\tconst editor = this.editor;\n     * \t\tconst t = editor.t;\n     *\n     * \t\t// ...\n     *\n     * \t\teditor.accessibility.addKeystrokeInfos( {\n     * \t\t\t// Add a keystroke to the existing \"widget\" group.\n     * \t\t\tgroupId: 'widget',\n     * \t\t\tkeystrokes: [\n     * \t\t\t\t{\n     * \t\t\t\t\tlabel: t( 'A an action on a selected widget' ),\n     * \t\t\t\t\tkeystroke: 'Ctrl+D',\n     * \t\t\t\t}\n     * \t\t\t]\n     * \t\t} );\n     * \t}\n     * }\n     * ```\n     *\n     * To add a keystroke to another existing category (using default group):\n     *\n     * ```js\n     * class MyPlugin extends Plugin {\n     * \t// ...\n     * \tinit() {\n     * \t\tconst editor = this.editor;\n     * \t\tconst t = editor.t;\n     *\n     * \t\t// ...\n     *\n     * \t\teditor.accessibility.addKeystrokeInfos( {\n     * \t\t\t// Add keystrokes to the \"navigation\" category (one of defaults).\n     * \t\t\tcategoryId: 'navigation',\n     * \t\t\tkeystrokes: [\n     * \t\t\t\t{\n     * \t\t\t\t\tlabel: t( 'Keystroke label' ),\n     * \t\t\t\t\tkeystroke: 'CTRL+B'\n     * \t\t\t\t}\n     * \t\t\t]\n     * \t\t} );\n     * \t}\n     * }\n     * ```\n     *\n     * See {@link #keystrokeInfos}, {@link #addKeystrokeInfoGroup}, and {@link #addKeystrokeInfoCategory}.\n     */\n    addKeystrokeInfos({ categoryId = DEFAULT_CATEGORY_ID, groupId = DEFAULT_GROUP_ID, keystrokes }) {\n        if (!this.keystrokeInfos.has(categoryId)) {\n            /**\n             * Cannot add keystrokes in an unknown category. Use\n             * {@link module:core/accessibility~Accessibility#addKeystrokeInfoCategory}\n             * to add a new category or make sure the specified category exists.\n             *\n             * @error accessibility-unknown-keystroke-info-category\n             * @param categoryId The id of the unknown keystroke category.\n             * @param keystrokes Keystroke definitions about to be added.\n             */\n            throw new CKEditorError('accessibility-unknown-keystroke-info-category', this._editor, { categoryId, keystrokes });\n        }\n        const category = this.keystrokeInfos.get(categoryId);\n        if (!category.groups.has(groupId)) {\n            /**\n             * Cannot add keystrokes to an unknown group.\n             *\n             * Use {@link module:core/accessibility~Accessibility#addKeystrokeInfoGroup}\n             * to add a new group or make sure the specified group exists.\n             *\n             * @error accessibility-unknown-keystroke-info-group\n             * @param groupId The id of the unknown keystroke group.\n             * @param categoryId The id of category the unknown group should belong to.\n             * @param keystrokes Keystroke definitions about to be added.\n             */\n            throw new CKEditorError('accessibility-unknown-keystroke-info-group', this._editor, { groupId, categoryId, keystrokes });\n        }\n        category.groups.get(groupId).keystrokes.push(...keystrokes);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/utils/editorusagedata\n */\nimport { env, global, uid } from '@ckeditor/ckeditor5-utils';\n/**\n * This part of the code is not executed in open-source implementations using a GPL key.\n * It only runs when a specific license key is provided. If you are uncertain whether\n * this applies to your installation, please contact our support team.\n *\n * @internal\n */\nexport function getEditorUsageData(editor) {\n    return {\n        sessionId: getSessionId(),\n        pageSessionId: getPageSessionID(),\n        hostname: window.location.hostname,\n        version: globalThis.CKEDITOR_VERSION,\n        type: getEditorType(editor),\n        plugins: getPluginsUsageData(editor.plugins),\n        distribution: getDistributionUsageData(),\n        env: getEnvUsageData(),\n        integration: Object.create(null),\n        menuBar: {\n            isVisible: !!editor.config.get('menuBar.isVisible')\n        },\n        language: {\n            ui: editor.locale.uiLanguage,\n            content: editor.locale.contentLanguage\n        },\n        toolbar: {\n            main: getToolbarUsageData(editor.config.get('toolbar')),\n            block: getToolbarUsageData(editor.config.get('blockToolbar')),\n            balloon: getToolbarUsageData(editor.config.get('balloonToolbar'))\n        }\n    };\n}\nfunction getEditorType(editor) {\n    return Object.getPrototypeOf(editor).constructor.editorName;\n}\nfunction getPluginsUsageData(collection) {\n    return Array\n        .from(collection)\n        .filter(([PluginConstructor]) => !!PluginConstructor.pluginName)\n        .map(([PluginConstructor]) => {\n        const { pluginName, isContextPlugin, isOfficialPlugin, isPremiumPlugin } = PluginConstructor;\n        return {\n            isContext: !!isContextPlugin,\n            isOfficial: !!isOfficialPlugin,\n            isPremium: !!isPremiumPlugin,\n            name: pluginName\n        };\n    });\n}\nfunction getToolbarUsageData(toolbarConfig) {\n    if (!toolbarConfig) {\n        return undefined;\n    }\n    const normalizedToolbar = Array.isArray(toolbarConfig) ?\n        { items: toolbarConfig } :\n        toolbarConfig;\n    const flattenToolbarConfigNames = extractToolbarConfigItemsNames(normalizedToolbar.items || []);\n    const isMultiline = flattenToolbarConfigNames.includes('-');\n    return {\n        isMultiline,\n        shouldNotGroupWhenFull: !!normalizedToolbar.shouldNotGroupWhenFull,\n        items: stripToolbarSeparatorItems(flattenToolbarConfigNames)\n    };\n    function stripToolbarSeparatorItems(items) {\n        return items.filter((item) => item !== '|' && item !== '-');\n    }\n    function extractToolbarConfigItemsNames(items) {\n        return items.flatMap(item => {\n            if (typeof item === 'string') {\n                return [item];\n            }\n            return extractToolbarConfigItemsNames(item.items);\n        });\n    }\n}\nfunction getDistributionUsageData() {\n    return {\n        channel: (window[Symbol.for('cke distribution')] || 'sh')\n    };\n}\nfunction getEnvUsageData() {\n    let os = 'unknown';\n    let browser = 'unknown';\n    if (env.isMac) {\n        os = 'mac';\n    }\n    else if (env.isWindows) {\n        os = 'windows';\n    }\n    else if (env.isiOS) {\n        os = 'ios';\n    }\n    else if (env.isAndroid) {\n        os = 'android';\n    }\n    if (env.isGecko) {\n        browser = 'gecko';\n    }\n    else if (env.isBlink) {\n        browser = 'blink';\n    }\n    else if (env.isSafari) {\n        browser = 'safari';\n    }\n    return {\n        os,\n        browser\n    };\n}\nfunction getSessionId() {\n    if (!localStorage.getItem('__ckeditor-session-id')) {\n        localStorage.setItem('__ckeditor-session-id', uid());\n    }\n    return localStorage.getItem('__ckeditor-session-id');\n}\nfunction getPageSessionID() {\n    global.window.CKEDITOR_PAGE_SESSION_ID = global.window.CKEDITOR_PAGE_SESSION_ID || uid();\n    return global.window.CKEDITOR_PAGE_SESSION_ID;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/editor\n */\nimport { set, get } from 'lodash-es';\nimport { Config, CKEditorError, ObservableMixin, logError, parseBase64EncodedObject, releaseDate, toArray, uid, crc32 } from '@ckeditor/ckeditor5-utils';\nimport { Conversion, DataController, EditingController, Model, StylesProcessor } from '@ckeditor/ckeditor5-engine';\nimport { ContextWatchdog, EditorWatchdog } from '@ckeditor/ckeditor5-watchdog';\nimport Context from '../context.js';\nimport PluginCollection from '../plugincollection.js';\nimport CommandCollection from '../commandcollection.js';\nimport EditingKeystrokeHandler from '../editingkeystrokehandler.js';\nimport Accessibility from '../accessibility.js';\nimport { getEditorUsageData } from './utils/editorusagedata.js';\n/**\n * The class representing a basic, generic editor.\n *\n * Check out the list of its subclasses to learn about specific editor implementations.\n *\n * All editor implementations (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * When you are implementing a plugin, this editor represents the API\n * which your plugin can expect to get when using its {@link module:core/plugin~Plugin#editor} property.\n *\n * This API should be sufficient in order to implement the \"editing\" part of your feature\n * (schema definition, conversion, commands, keystrokes, etc.).\n * It does not define the editor UI, which is available only if\n * the specific editor implements also the {@link ~Editor#ui} property\n * (as most editor implementations do).\n */\nclass Editor extends /* #__PURE__ */ ObservableMixin() {\n    /**\n     * A required name of the editor class. The name should reflect the constructor name.\n     */\n    static get editorName() {\n        return 'Editor';\n    }\n    /**\n     * Creates a new instance of the editor class.\n     *\n     * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.\n     *\n     * @param config The editor configuration.\n     */\n    constructor(config = {}) {\n        super();\n        if ('sanitizeHtml' in config) {\n            /**\n             * Configuration property `config.sanitizeHtml` was removed in CKEditor version 43.1.0 and is no longer supported.\n             *\n             * Please use `config.htmlEmbed.sanitizeHtml` and/or `config.mergeFields.sanitizeHtml` instead.\n             *\n             * @error editor-config-sanitizehtml-not-supported\n             */\n            throw new CKEditorError('editor-config-sanitizehtml-not-supported');\n        }\n        const constructor = this.constructor;\n        // We don't pass translations to the config, because its behavior of splitting keys\n        // with dots (e.g. `resize.width` => `resize: { width }`) breaks the translations.\n        const { translations: defaultTranslations, ...defaultConfig } = constructor.defaultConfig || {};\n        const { translations = defaultTranslations, ...rest } = config;\n        // Prefer the language passed as the argument to the constructor instead of the constructor's `defaultConfig`, if both are set.\n        const language = config.language || defaultConfig.language;\n        this._context = config.context || new Context({ language, translations });\n        this._context._addEditor(this, !config.context);\n        // Clone the plugins to make sure that the plugin array will not be shared\n        // between editors and make the watchdog feature work correctly.\n        const availablePlugins = Array.from(constructor.builtinPlugins || []);\n        this.config = new Config(rest, defaultConfig);\n        this.config.define('plugins', availablePlugins);\n        this.config.define(this._context._getEditorConfig());\n        checkLicenseKeyIsDefined(this.config);\n        this.plugins = new PluginCollection(this, availablePlugins, this._context.plugins);\n        this.locale = this._context.locale;\n        this.t = this.locale.t;\n        this._readOnlyLocks = new Set();\n        this.commands = new CommandCollection();\n        this.set('state', 'initializing');\n        this.once('ready', () => (this.state = 'ready'), { priority: 'high' });\n        this.once('destroy', () => (this.state = 'destroyed'), { priority: 'high' });\n        this.model = new Model();\n        this.on('change:isReadOnly', () => {\n            this.model.document.isReadOnly = this.isReadOnly;\n        });\n        const stylesProcessor = new StylesProcessor();\n        this.data = new DataController(this.model, stylesProcessor);\n        this.editing = new EditingController(this.model, stylesProcessor);\n        this.editing.view.document.bind('isReadOnly').to(this);\n        this.conversion = new Conversion([this.editing.downcastDispatcher, this.data.downcastDispatcher], this.data.upcastDispatcher);\n        this.conversion.addAlias('dataDowncast', this.data.downcastDispatcher);\n        this.conversion.addAlias('editingDowncast', this.editing.downcastDispatcher);\n        this.keystrokes = new EditingKeystrokeHandler(this);\n        this.keystrokes.listenTo(this.editing.view.document);\n        this.accessibility = new Accessibility(this);\n        verifyLicenseKey(this);\n        // Checks if the license key is defined and throws an error if it is not.\n        function checkLicenseKeyIsDefined(config) {\n            let licenseKey = config.get('licenseKey');\n            if (!licenseKey && window.CKEDITOR_GLOBAL_LICENSE_KEY) {\n                licenseKey = window.CKEDITOR_GLOBAL_LICENSE_KEY;\n                config.set('licenseKey', licenseKey);\n            }\n            if (!licenseKey) {\n                /**\n                 * The `licenseKey` property is missing in the editor configuration.\n                 *\n                 * * If you are using the editor in a commercial setup, please provide your license key.\n                 * * If you still need to acquire a key, please [contact us](https://ckeditor.com/contact/) or\n                 *   [create a free account with a 14 day premium features trial](https://portal.ckeditor.com/checkout?plan=free).\n                 * * If you are using the editor under a GPL license or another license from our Open Source Initiative,\n                 *   use the 'GPL' license key instead.\n                 *\n                 * ```js\n                 * ClassicEditor.create( document.querySelector( '#editor' ), {\n                 * \tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n                 * \t// ... Other configuration options ...\n                 * } ) ;\n                 *\n                 * @error license-key-missing\n                 */\n                throw new CKEditorError('license-key-missing');\n            }\n        }\n        function verifyLicenseKey(editor) {\n            const licenseKey = editor.config.get('licenseKey');\n            const distributionChannel = window[Symbol.for('cke distribution')] || 'sh';\n            function blockEditor(reason) {\n                editor.enableReadOnlyMode(Symbol('invalidLicense'));\n                editor._showLicenseError(reason);\n            }\n            function getPayload(licenseKey) {\n                const parts = licenseKey.split('.');\n                if (parts.length != 3) {\n                    return null;\n                }\n                return parts[1];\n            }\n            function hasAllRequiredFields(licensePayload) {\n                const requiredFields = ['exp', 'jti', 'vc'];\n                return requiredFields.every(field => field in licensePayload);\n            }\n            function getCrcInputData(licensePayload) {\n                const keysToCheck = Object.getOwnPropertyNames(licensePayload).sort();\n                const filteredValues = keysToCheck\n                    .filter(key => key != 'vc' && licensePayload[key] != null)\n                    .map(key => licensePayload[key]);\n                return filteredValues;\n            }\n            function checkLicensedHosts(licensedHosts) {\n                const { hostname } = new URL(window.location.href);\n                if (licensedHosts.includes(hostname)) {\n                    return true;\n                }\n                const segments = hostname.split('.');\n                return licensedHosts\n                    // Filter out hosts without wildcards.\n                    .filter(host => host.includes('*'))\n                    // Split the hosts into segments.\n                    .map(host => host.split('.'))\n                    // Filter out hosts that have more segments than the current hostname.\n                    .filter(host => host.length <= segments.length)\n                    // Pad the beginning of the licensed host if it's shorter than the current hostname.\n                    .map(host => Array(segments.length - host.length).fill(host[0] === '*' ? '*' : '').concat(host))\n                    // Check if some license host matches the hostname.\n                    .some(octets => segments.every((segment, index) => octets[index] === segment || octets[index] === '*'));\n            }\n            if (licenseKey == 'GPL') {\n                if (distributionChannel == 'cloud') {\n                    blockEditor('distributionChannel');\n                }\n                return;\n            }\n            const encodedPayload = getPayload(licenseKey);\n            if (!encodedPayload) {\n                blockEditor('invalid');\n                return;\n            }\n            const licensePayload = parseBase64EncodedObject(encodedPayload);\n            if (!licensePayload) {\n                blockEditor('invalid');\n                return;\n            }\n            if (!hasAllRequiredFields(licensePayload)) {\n                blockEditor('invalid');\n                return;\n            }\n            if (licensePayload.distributionChannel && !toArray(licensePayload.distributionChannel).includes(distributionChannel)) {\n                blockEditor('distributionChannel');\n                return;\n            }\n            if (crc32(getCrcInputData(licensePayload)) != licensePayload.vc.toLowerCase()) {\n                blockEditor('invalid');\n                return;\n            }\n            const expirationDate = new Date(licensePayload.exp * 1000);\n            if (expirationDate < releaseDate) {\n                blockEditor('expired');\n                return;\n            }\n            const licensedHosts = licensePayload.licensedHosts;\n            if (licensedHosts && licensedHosts.length > 0 && !checkLicensedHosts(licensedHosts)) {\n                blockEditor('domainLimit');\n                return;\n            }\n            if (['evaluation', 'trial'].includes(licensePayload.licenseType) && licensePayload.exp * 1000 < Date.now()) {\n                blockEditor('expired');\n                return;\n            }\n            if (['evaluation', 'trial', 'development'].includes(licensePayload.licenseType)) {\n                const licenseType = licensePayload.licenseType;\n                console.info(`You are using the ${licenseType} version of CKEditor 5 with limited usage. ` +\n                    'Make sure you will not use it in the production environment.');\n                const timerId = setTimeout(() => {\n                    blockEditor(`${licenseType}Limit`);\n                }, 600000);\n                editor.on('destroy', () => {\n                    clearTimeout(timerId);\n                });\n            }\n            if (licensePayload.usageEndpoint) {\n                editor.once('ready', () => {\n                    const request = {\n                        requestId: uid(),\n                        requestTime: Math.round(Date.now() / 1000),\n                        license: licenseKey,\n                        editor: collectUsageData(editor)\n                    };\n                    /**\n                     * This part of the code is not executed in open-source implementations using a GPL key.\n                     * It only runs when a specific license key is provided. If you are uncertain whether\n                     * this applies to your installation, please contact our support team.\n                     */\n                    editor._sendUsageRequest(licensePayload.usageEndpoint, request).then(response => {\n                        const { status, message } = response;\n                        if (message) {\n                            console.warn(message);\n                        }\n                        if (status != 'ok') {\n                            blockEditor('usageLimit');\n                        }\n                    }, () => {\n                        /**\n                         * Your license key cannot be validated due to a network issue.\n                         * Please ensure that your setup does not block requests to the validation endpoint.\n                         *\n                         * @error license-key-validation-endpoint-not-reachable\n                         * @param {String} url The URL that was attempted to be reached for validation.\n                         */\n                        logError('license-key-validation-endpoint-not-reachable', { url: licensePayload.usageEndpoint });\n                    });\n                }, { priority: 'high' });\n            }\n        }\n    }\n    /**\n     * Defines whether the editor is in the read-only mode.\n     *\n     * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n     * to modify the document by using them. Also, the editable element(s) become non-editable.\n     *\n     * In order to make the editor read-only, you need to call the {@link #enableReadOnlyMode} method:\n     *\n     * ```ts\n     * editor.enableReadOnlyMode( 'feature-id' );\n     * ```\n     *\n     * Later, to turn off the read-only mode, call {@link #disableReadOnlyMode}:\n     *\n     * ```ts\n     * editor.disableReadOnlyMode( 'feature-id' );\n     * ```\n     *\n     * @readonly\n     * @observable\n     */\n    get isReadOnly() {\n        return this._readOnlyLocks.size > 0;\n    }\n    set isReadOnly(value) {\n        /**\n         * The {@link module:core/editor/editor~Editor#isReadOnly Editor#isReadOnly} property is read-only since version `34.0.0`\n         * and can be set only using {@link module:core/editor/editor~Editor#enableReadOnlyMode `Editor#enableReadOnlyMode( lockId )`} and\n         * {@link module:core/editor/editor~Editor#disableReadOnlyMode `Editor#disableReadOnlyMode( lockId )`}.\n         *\n         * Usage before version `34.0.0`:\n         *\n         * ```ts\n         * editor.isReadOnly = true;\n         * editor.isReadOnly = false;\n         * ```\n         *\n         * Usage since version `34.0.0`:\n         *\n         * ```ts\n         * editor.enableReadOnlyMode( 'my-feature-id' );\n         * editor.disableReadOnlyMode( 'my-feature-id' );\n         * ```\n         *\n         * @error editor-isreadonly-has-no-setter\n         */\n        throw new CKEditorError('editor-isreadonly-has-no-setter');\n    }\n    /**\n     * Turns on the read-only mode in the editor.\n     *\n     * Editor can be switched to or out of the read-only mode by many features, under various circumstances. The editor supports locking\n     * mechanism for the read-only mode. It enables easy control over the read-only mode when many features wants to turn it on or off at\n     * the same time, without conflicting with each other. It guarantees that you will not make the editor editable accidentally (which\n     * could lead to errors).\n     *\n     * Each read-only mode request is identified by a unique id (also called \"lock\"). If multiple plugins requested to turn on the\n     * read-only mode, then, the editor will become editable only after all these plugins turn the read-only mode off (using the same ids).\n     *\n     * Note, that you cannot force the editor to disable the read-only mode if other plugins set it.\n     *\n     * After the first `enableReadOnlyMode()` call, the {@link #isReadOnly `isReadOnly` property} will be set to `true`:\n     *\n     * ```ts\n     * editor.isReadOnly; // `false`.\n     * editor.enableReadOnlyMode( 'my-feature-id' );\n     * editor.isReadOnly; // `true`.\n     * ```\n     *\n     * You can turn off the read-only mode (\"clear the lock\") using the {@link #disableReadOnlyMode `disableReadOnlyMode()`} method:\n     *\n     * ```ts\n     * editor.enableReadOnlyMode( 'my-feature-id' );\n     * // ...\n     * editor.disableReadOnlyMode( 'my-feature-id' );\n     * editor.isReadOnly; // `false`.\n     * ```\n     *\n     * All \"locks\" need to be removed to enable editing:\n     *\n     * ```ts\n     * editor.enableReadOnlyMode( 'my-feature-id' );\n     * editor.enableReadOnlyMode( 'my-other-feature-id' );\n     * // ...\n     * editor.disableReadOnlyMode( 'my-feature-id' );\n     * editor.isReadOnly; // `true`.\n     * editor.disableReadOnlyMode( 'my-other-feature-id' );\n     * editor.isReadOnly; // `false`.\n     * ```\n     *\n     * @param lockId A unique ID for setting the editor to the read-only state.\n     */\n    enableReadOnlyMode(lockId) {\n        if (typeof lockId !== 'string' && typeof lockId !== 'symbol') {\n            /**\n             * The lock ID is missing or it is not a string or symbol.\n             *\n             * @error editor-read-only-lock-id-invalid\n             */\n            throw new CKEditorError('editor-read-only-lock-id-invalid', null, { lockId });\n        }\n        if (this._readOnlyLocks.has(lockId)) {\n            return;\n        }\n        this._readOnlyLocks.add(lockId);\n        if (this._readOnlyLocks.size === 1) {\n            // Manually fire the `change:isReadOnly` event as only getter is provided.\n            this.fire('change:isReadOnly', 'isReadOnly', true, false);\n        }\n    }\n    /**\n     * Removes the read-only lock from the editor with given lock ID.\n     *\n     * When no lock is present on the editor anymore, then the {@link #isReadOnly `isReadOnly` property} will be set to `false`.\n     *\n     * @param lockId The lock ID for setting the editor to the read-only state.\n     */\n    disableReadOnlyMode(lockId) {\n        if (typeof lockId !== 'string' && typeof lockId !== 'symbol') {\n            throw new CKEditorError('editor-read-only-lock-id-invalid', null, { lockId });\n        }\n        if (!this._readOnlyLocks.has(lockId)) {\n            return;\n        }\n        this._readOnlyLocks.delete(lockId);\n        if (this._readOnlyLocks.size === 0) {\n            // Manually fire the `change:isReadOnly` event as only getter is provided.\n            this.fire('change:isReadOnly', 'isReadOnly', false, true);\n        }\n    }\n    /**\n     * Sets the data in the editor.\n     *\n     * ```ts\n     * editor.setData( '<p>This is editor!</p>' );\n     * ```\n     *\n     * If your editor implementation uses multiple roots, you should pass an object with keys corresponding\n     * to the editor root names and values equal to the data that should be set in each root:\n     *\n     * ```ts\n     * editor.setData( {\n     *     header: '<p>Content for header part.</p>',\n     *     content: '<p>Content for main part.</p>',\n     *     footer: '<p>Content for footer part.</p>'\n     * } );\n     * ```\n     *\n     * By default the editor accepts HTML. This can be controlled by injecting a different data processor.\n     * See the {@glink features/markdown Markdown output} guide for more details.\n     *\n     * @param data Input data.\n     */\n    setData(data) {\n        this.data.set(data);\n    }\n    /**\n     * Gets the data from the editor.\n     *\n     * ```ts\n     * editor.getData(); // -> '<p>This is editor!</p>'\n     * ```\n     *\n     * If your editor implementation uses multiple roots, you should pass root name as one of the options:\n     *\n     * ```ts\n     * editor.getData( { rootName: 'header' } ); // -> '<p>Content for header part.</p>'\n     * ```\n     *\n     * By default, the editor outputs HTML. This can be controlled by injecting a different data processor.\n     * See the {@glink features/markdown Markdown output} guide for more details.\n     *\n     * A warning is logged when you try to retrieve data for a detached root, as most probably this is a mistake. A detached root should\n     * be treated like it is removed, and you should not save its data. Note, that the detached root data is always an empty string.\n     *\n     * @param options Additional configuration for the retrieved data.\n     * Editor features may introduce more configuration options that can be set through this parameter.\n     * @param options.rootName Root name. Defaults to `'main'`.\n     * @param options.trim Whether returned data should be trimmed. This option is set to `'empty'` by default,\n     * which means that whenever editor content is considered empty, an empty string is returned. To turn off trimming\n     * use `'none'`. In such cases exact content will be returned (for example `'<p>&nbsp;</p>'` for an empty editor).\n     * @returns Output data.\n     */\n    getData(options) {\n        return this.data.get(options);\n    }\n    /**\n     * Loads and initializes plugins specified in the configuration.\n     *\n     * @returns A promise which resolves once the initialization is completed, providing an array of loaded plugins.\n     */\n    initPlugins() {\n        const config = this.config;\n        const plugins = config.get('plugins');\n        const removePlugins = config.get('removePlugins') || [];\n        const extraPlugins = config.get('extraPlugins') || [];\n        const substitutePlugins = config.get('substitutePlugins') || [];\n        return this.plugins.init(plugins.concat(extraPlugins), removePlugins, substitutePlugins);\n    }\n    /**\n     * Destroys the editor instance, releasing all resources used by it.\n     *\n     * **Note** The editor cannot be destroyed during the initialization phase so if it is called\n     * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.\n     *\n     * @fires destroy\n     * @returns A promise that resolves once the editor instance is fully destroyed.\n     */\n    destroy() {\n        let readyPromise = Promise.resolve();\n        if (this.state == 'initializing') {\n            readyPromise = new Promise(resolve => this.once('ready', resolve));\n        }\n        return readyPromise\n            .then(() => {\n            this.fire('destroy');\n            this.stopListening();\n            this.commands.destroy();\n        })\n            .then(() => this.plugins.destroy())\n            .then(() => {\n            this.model.destroy();\n            this.data.destroy();\n            this.editing.destroy();\n            this.keystrokes.destroy();\n        })\n            // Remove the editor from the context.\n            // When the context was created by this editor, the context will be destroyed.\n            .then(() => this._context._removeEditor(this));\n    }\n    /**\n     * Executes the specified command with given parameters.\n     *\n     * Shorthand for:\n     *\n     * ```ts\n     * editor.commands.get( commandName ).execute( ... );\n     * ```\n     *\n     * @param commandName The name of the command to execute.\n     * @param commandParams Command parameters.\n     * @returns The value returned by the {@link module:core/commandcollection~CommandCollection#execute `commands.execute()`}.\n     */\n    execute(commandName, ...commandParams) {\n        try {\n            return this.commands.execute(commandName, ...commandParams);\n        }\n        catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next -- @preserve */\n            CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    /**\n     * Focuses the editor.\n     *\n     * **Note** To explicitly focus the editing area of the editor, use the\n     * {@link module:engine/view/view~View#focus `editor.editing.view.focus()`} method of the editing view.\n     *\n     * Check out the {@glink framework/deep-dive/ui/focus-tracking#focus-in-the-editor-ui Focus in the editor UI} section\n     * of the {@glink framework/deep-dive/ui/focus-tracking Deep dive into focus tracking} guide to learn more.\n     */\n    focus() {\n        this.editing.view.focus();\n    }\n    /* istanbul ignore next -- @preserve */\n    /**\n     * Creates and initializes a new editor instance.\n     *\n     * This is an abstract method. Every editor type needs to implement its own initialization logic.\n     *\n     * See the `create()` methods of the existing editor types to learn how to use them:\n     *\n     * * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}\n     * * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}\n     * * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n     * * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}\n     */\n    static create(...args) {\n        throw new Error('This is an abstract method.');\n    }\n    _showLicenseError(reason, pluginName) {\n        setTimeout(() => {\n            if (reason == 'invalid') {\n                /**\n                 * The license key provided is invalid. Please ensure that it is copied correctly\n                 * from the [Customer Portal](http://portal.ckeditor.com). If the issue persists,\n                 * please [contact our customer support](https://ckeditor.com/contact/).\n                 *\n                 * @error invalid-license-key\n                 */\n                throw new CKEditorError('invalid-license-key');\n            }\n            if (reason == 'expired') {\n                /**\n                 * Your license key has expired. Please renew your license on the\n                 * [Customer Portal](https://portal.ckeditor.com).\n                 *\n                 * @error license-key-expired\n                 */\n                throw new CKEditorError('license-key-expired');\n            }\n            if (reason == 'domainLimit') {\n                /**\n                 * The provided license does not allow the editor to run on this domain.\n                 * Some license keys are restricted to local test environments only.\n                 * For more details, please refer to the\n                 * {@glink getting-started/licensing/license-key-and-activation#license-key-types license key type documentation}.\n                 *\n                 * @error license-key-domain-limit\n                 */\n                throw new CKEditorError('license-key-domain-limit');\n            }\n            if (reason == 'featureNotAllowed') {\n                /**\n                 * The plugin you are trying to use is not permitted under your current license.\n                 * Please check the available features on the\n                 * [Customer Portal](https://portal.ckeditor.com) or\n                 * [contact support](https://ckeditor.com/contact/) for more information.\n                 *\n                 * @error license-key-plugin-not-allowed\n                 * @param {String} pluginName The plugin you tried to load.\n                 */\n                throw new CKEditorError('license-key-plugin-not-allowed', null, { pluginName });\n            }\n            if (reason == 'evaluationLimit') {\n                /**\n                 * You have exceeded the editor operation limit available for your evaluation license key.\n                 * Please restart the editor to continue using it.\n                 * {@glink getting-started/licensing/license-key-and-activation#license-key-types Read more about license key types}.\n                 *\n                 * @error license-key-evaluation-limit\n                 */\n                throw new CKEditorError('license-key-evaluation-limit');\n            }\n            if (reason == 'trialLimit') {\n                /**\n                 * You have exceeded the editor operation limit for your trial license key.\n                 * Please restart the editor to continue using it.\n                 * {@glink getting-started/licensing/license-key-and-activation#license-key-types Read more about license key types}.\n                 *\n                 * @error license-key-trial-limit\n                 */\n                throw new CKEditorError('license-key-trial-limit');\n            }\n            if (reason == 'developmentLimit') {\n                /**\n                 * You have exceeded the operation limit for your development license key within the editor.\n                 * Please restart the editor to continue using it.\n                 * {@glink getting-started/licensing/license-key-and-activation#license-key-types Read more about license key types}.\n                 *\n                 * @error license-key-development-limit\n                 */\n                throw new CKEditorError('license-key-development-limit');\n            }\n            if (reason == 'usageLimit') {\n                /**\n                 * You have reached the usage limit of your license key. This can occur in the following situations:\n                 *\n                 * * You are on a free subscription without a connected payment method and have exceeded the allowed usage threshold.\n                 * * Your account has overdue invoices and the grace period has ended.\n                 *\n                 * To extend the limit and restore access, please update the required details in the\n                 * [Customer Portal](https://portal.ckeditor.com) or\n                 * [contact our customer support](https://ckeditor.com/contact).\n                 *\n                 * @error license-key-usage-limit\n                 */\n                throw new CKEditorError('license-key-usage-limit');\n            }\n            if (reason == 'distributionChannel') {\n                /**\n                 * Your license does not allow the current distribution channel.\n                 *\n                 * * With a 'GPL' license key, you may use the editor installed via npm or a ZIP package (self-hosted).\n                 * * With the CKEditor Cloud plans, you may use the editor via our CDN.\n                 * * With the CKEditor Custom plans, depending on your plan details, you can use the editor via npm\n                 *   or a ZIP package (self-hosted) or Cloud (CDN)\n                 *\n                 * {@glink getting-started/licensing/usage-based-billing#key-terms Read more about distributions in the documentation}.\n                 * Please verify your installation or [contact support](https://ckeditor.com/contact/) for assistance.\n                 *\n                 * @error license-key-invalid-distribution-channel\n                 */\n                throw new CKEditorError('license-key-invalid-distribution-channel');\n            }\n            /* istanbul ignore next -- @preserve */\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const unreachable = reason;\n        }, 0);\n        this._showLicenseError = () => { };\n    }\n    /**\n     * This part of the code is _not_ executed in installations under the GPL license (with `config.licenseKey = 'GPL'`).\n     *\n     * It is only executed when a specific license key is provided. If you are uncertain whether\n     * this applies to your installation, please contact our support team.\n     */\n    async _sendUsageRequest(endpoint, request) {\n        const headers = new Headers({ 'Content-Type': 'application/json' });\n        const response = await fetch(new URL(endpoint), {\n            method: 'POST',\n            headers,\n            body: JSON.stringify(request)\n        });\n        if (!response.ok) {\n            // TODO: refine message.\n            throw new Error(`HTTP Response: ${response.status}`);\n        }\n        return response.json();\n    }\n}\n/**\n * The {@link module:core/context~Context} class.\n *\n * Exposed as static editor field for easier access in editor builds.\n */\nEditor.Context = Context;\n/**\n * The {@link module:watchdog/editorwatchdog~EditorWatchdog} class.\n *\n * Exposed as static editor field for easier access in editor builds.\n */\nEditor.EditorWatchdog = EditorWatchdog;\n/**\n * The {@link module:watchdog/contextwatchdog~ContextWatchdog} class.\n *\n * Exposed as static editor field for easier access in editor builds.\n */\nEditor.ContextWatchdog = ContextWatchdog;\nexport default Editor;\nfunction collectUsageData(editor) {\n    const collectedData = getEditorUsageData(editor);\n    function setUsageData(path, value) {\n        if (get(collectedData, path) !== undefined) {\n            /**\n             * The error thrown when trying to set the usage data path that was already set.\n             * Make sure that you are not setting the same path multiple times.\n             *\n             * @error editor-usage-data-path-already-set\n             */\n            throw new CKEditorError('editor-usage-data-path-already-set', { path });\n        }\n        set(collectedData, path, value);\n    }\n    editor.fire('collectUsageData', {\n        setUsageData\n    });\n    return collectedData;\n}\n/**\n * This error is thrown when trying to pass a `<textarea>` element to a `create()` function of an editor class.\n *\n * The only editor type which can be initialized on `<textarea>` elements is\n * the {@glink getting-started/setup/editor-types#classic-editor classic editor}.\n * This editor hides the passed element and inserts its own UI next to it. Other types of editors reuse the passed element as their root\n * editable element and therefore `<textarea>` is not appropriate for them. Use a `<div>` or another text container instead:\n *\n * ```html\n * <div id=\"editor\">\n * \t<p>Initial content.</p>\n * </div>\n * ```\n *\n * @error editor-wrong-element\n */\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/utils/attachtoform\n */\nimport { isFunction } from 'lodash-es';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Checks if the editor is initialized on a `<textarea>` element that belongs to a form. If yes, it updates the editor's element\n * content before submitting the form.\n *\n * This helper requires the {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param editor Editor instance.\n */\nexport default function attachToForm(editor) {\n    if (!isFunction(editor.updateSourceElement)) {\n        /**\n         * The editor passed to `attachToForm()` must implement the\n         * {@link module:core/editor/utils/elementapimixin~ElementApi} interface.\n         *\n         * @error attachtoform-missing-elementapi-interface\n         */\n        throw new CKEditorError('attachtoform-missing-elementapi-interface', editor);\n    }\n    const sourceElement = editor.sourceElement;\n    // Only when replacing a textarea which is inside of a form element.\n    if (isTextArea(sourceElement) && sourceElement.form) {\n        let originalSubmit;\n        const form = sourceElement.form;\n        const onSubmit = () => editor.updateSourceElement();\n        // Replace the original form#submit() to call a custom submit function first.\n        // Check if #submit is a function because the form might have an input named \"submit\".\n        if (isFunction(form.submit)) {\n            originalSubmit = form.submit;\n            form.submit = () => {\n                onSubmit();\n                originalSubmit.apply(form);\n            };\n        }\n        // Update the replaced textarea with data before each form#submit event.\n        form.addEventListener('submit', onSubmit);\n        // Remove the submit listener and revert the original submit method on\n        // editor#destroy.\n        editor.on('destroy', () => {\n            form.removeEventListener('submit', onSubmit);\n            if (originalSubmit) {\n                form.submit = originalSubmit;\n            }\n        });\n    }\n}\nfunction isTextArea(sourceElement) {\n    return !!sourceElement && sourceElement.tagName.toLowerCase() === 'textarea';\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/utils/elementapimixin\n */\nimport { CKEditorError, setDataInElement } from '@ckeditor/ckeditor5-utils';\n/**\n * Implementation of the {@link module:core/editor/utils/elementapimixin~ElementApi}.\n */\nexport default function ElementApiMixin(base) {\n    class Mixin extends base {\n        updateSourceElement(data) {\n            if (!this.sourceElement) {\n                /**\n                 * Cannot update the source element of a detached editor.\n                 *\n                 * The {@link module:core/editor/utils/elementapimixin~ElementApi#updateSourceElement `updateSourceElement()`}\n                 * method cannot be called if you did not pass an element to `Editor.create()`.\n                 *\n                 * @error editor-missing-sourceelement\n                 */\n                throw new CKEditorError('editor-missing-sourceelement', this);\n            }\n            const shouldUpdateSourceElement = this.config.get('updateSourceElementOnDestroy');\n            const isSourceElementTextArea = this.sourceElement instanceof HTMLTextAreaElement;\n            // The data returned by the editor might be unsafe, so we want to prevent rendering\n            // unsafe content inside the source element different than <textarea>, which is considered\n            // secure. This behavior could be changed by setting the `updateSourceElementOnDestroy`\n            // configuration option to `true`.\n            if (!shouldUpdateSourceElement && !isSourceElementTextArea) {\n                setDataInElement(this.sourceElement, '');\n                return;\n            }\n            const dataToSet = typeof data === 'string' ? data : this.data.get();\n            setDataInElement(this.sourceElement, dataToSet);\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`.\nElementApiMixin.updateSourceElement = ElementApiMixin(Object).prototype.updateSourceElement;\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/command\n */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Base class for the CKEditor commands.\n *\n * Commands are the main way to manipulate the editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of the code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default, commands are disabled when the editor is in the {@link module:core/editor/editor~Editor#isReadOnly read-only} mode\n * but commands with the {@link module:core/command~Command#affectsData `affectsData`} flag set to `false` will not be disabled.\n */\nexport default class Command extends /* #__PURE__ */ ObservableMixin() {\n    /**\n     * Creates a new `Command` instance.\n     *\n     * @param editor The editor on which this command will be used.\n     */\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this.set('value', undefined);\n        this.set('isEnabled', false);\n        this._affectsData = true;\n        this._isEnabledBasedOnSelection = true;\n        this._disableStack = new Set();\n        this.decorate('execute');\n        // By default, every command is refreshed when changes are applied to the model.\n        this.listenTo(this.editor.model.document, 'change', () => {\n            this.refresh();\n        });\n        this.listenTo(editor, 'change:isReadOnly', () => {\n            this.refresh();\n        });\n        // By default, commands are disabled if the selection is in non-editable place or editor is in read-only mode.\n        this.on('set:isEnabled', evt => {\n            if (!this.affectsData) {\n                return;\n            }\n            const selection = editor.model.document.selection;\n            const selectionInGraveyard = selection.getFirstPosition().root.rootName == '$graveyard';\n            const canEditAtSelection = !selectionInGraveyard && editor.model.canEditAt(selection);\n            // Disable if editor is read only, or when selection is in a place which cannot be edited.\n            //\n            // Checking `editor.isReadOnly` is needed for all commands that have `_isEnabledBasedOnSelection == false`.\n            // E.g. undo does not base on selection, but affects data and should be disabled when the editor is in read-only mode.\n            if (editor.isReadOnly || this._isEnabledBasedOnSelection && !canEditAtSelection) {\n                evt.return = false;\n                evt.stop();\n            }\n        }, { priority: 'highest' });\n        this.on('execute', evt => {\n            if (!this.isEnabled) {\n                evt.stop();\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * A flag indicating whether a command execution changes the editor data or not.\n     *\n     * Commands with `affectsData` set to `false` will not be automatically disabled in\n     * the {@link module:core/editor/editor~Editor#isReadOnly read-only mode} and\n     * {@glink features/read-only#related-features other editor modes} with restricted user write permissions.\n     *\n     * **Note:** You do not have to set it for your every command. It is `true` by default.\n     *\n     * @default true\n     */\n    get affectsData() {\n        return this._affectsData;\n    }\n    set affectsData(affectsData) {\n        this._affectsData = affectsData;\n    }\n    /**\n     * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n     * in this method.\n     *\n     * This method is automatically called when\n     * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n     */\n    refresh() {\n        this.isEnabled = true;\n    }\n    /**\n     * Disables the command.\n     *\n     * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n     * (e.g. the feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n     * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n     *\n     * Disabling and enabling a command:\n     *\n     * ```ts\n     * command.isEnabled; // -> true\n     * command.forceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> false\n     * command.clearForceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> true\n     * ```\n     *\n     * Command disabled by multiple features:\n     *\n     * ```ts\n     * command.forceDisabled( 'MyFeature' );\n     * command.forceDisabled( 'OtherFeature' );\n     * command.clearForceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> false\n     * command.clearForceDisabled( 'OtherFeature' );\n     * command.isEnabled; // -> true\n     * ```\n     *\n     * Multiple disabling with the same identifier is redundant:\n     *\n     * ```ts\n     * command.forceDisabled( 'MyFeature' );\n     * command.forceDisabled( 'MyFeature' );\n     * command.clearForceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> true\n     * ```\n     *\n     * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n     * so the command might be still disabled after {@link #clearForceDisabled} was used.\n     *\n     * @param id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n     */\n    forceDisabled(id) {\n        this._disableStack.add(id);\n        if (this._disableStack.size == 1) {\n            this.on('set:isEnabled', forceDisable, { priority: 'highest' });\n            this.isEnabled = false;\n        }\n    }\n    /**\n     * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n     *\n     * @param id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n     */\n    clearForceDisabled(id) {\n        this._disableStack.delete(id);\n        if (this._disableStack.size == 0) {\n            this.off('set:isEnabled', forceDisable);\n            this.refresh();\n        }\n    }\n    /**\n     * Executes the command.\n     *\n     * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n     * to the command.\n     *\n     * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n     * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n     *\n     * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n     *\n     * This method may return a value, which would be forwarded all the way down to the\n     * {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n     *\n     * @fires execute\n     */\n    execute(...args) { return undefined; } // eslint-disable-line @typescript-eslint/no-unused-vars\n    /**\n     * Destroys the command.\n     */\n    destroy() {\n        this.stopListening();\n    }\n}\n/**\n * Helper function that forces command to be disabled.\n */\nfunction forceDisable(evt) {\n    evt.return = false;\n    evt.stop();\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/contextplugin\n */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The base class for {@link module:core/context~Context} plugin classes.\n *\n * A context plugin can either be initialized for an {@link module:core/editor/editor~Editor editor} or for\n * a {@link module:core/context~Context context}. In other words, it can either\n * work within one editor instance or with one or more editor instances that use a single context.\n * It is the context plugin's role to implement handling for both modes.\n *\n * There are a few rules for interaction between the editor plugins and context plugins:\n *\n * * A context plugin can require another context plugin.\n * * An {@link module:core/plugin~Plugin editor plugin} can require a context plugin.\n * * A context plugin MUST NOT require an {@link module:core/plugin~Plugin editor plugin}.\n */\nexport default class ContextPlugin extends /* #__PURE__ */ ObservableMixin() {\n    /**\n     * Creates a new plugin instance.\n     */\n    constructor(context) {\n        super();\n        this.context = context;\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this.stopListening();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isContextPlugin() {\n        return true;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isOfficialPlugin() {\n        return false;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isPremiumPlugin() {\n        return false;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core\n */\nexport { default as Plugin } from './plugin.js';\nexport { default as Command } from './command.js';\nexport { default as MultiCommand } from './multicommand.js';\nexport { default as Context } from './context.js';\nexport { default as ContextPlugin } from './contextplugin.js';\nexport { default as Editor } from './editor/editor.js';\nexport { default as attachToForm } from './editor/utils/attachtoform.js';\nexport { default as DataApiMixin } from './editor/utils/dataapimixin.js';\nexport { default as ElementApiMixin } from './editor/utils/elementapimixin.js';\nexport { default as secureSourceElement } from './editor/utils/securesourceelement.js';\nexport { default as PendingActions } from './pendingactions.js';\nimport cancel from './../theme/icons/cancel.svg';\nimport caption from './../theme/icons/caption.svg';\nimport check from './../theme/icons/check.svg';\nimport cog from './../theme/icons/cog.svg';\nimport colorPalette from './../theme/icons/color-palette.svg';\nimport eraser from './../theme/icons/eraser.svg';\nimport history from './../theme/icons/history.svg';\nimport lowVision from './../theme/icons/low-vision.svg';\nimport textAlternative from './../theme/icons/text-alternative.svg';\nimport loupe from './../theme/icons/loupe.svg';\nimport previousArrow from './../theme/icons/previous-arrow.svg';\nimport nextArrow from './../theme/icons/next-arrow.svg';\nimport image from './../theme/icons/image.svg';\nimport imageUpload from './../theme/icons/image-upload.svg';\nimport imageAssetManager from './../theme/icons/image-asset-manager.svg';\nimport imageUrl from './../theme/icons/image-url.svg';\nimport alignBottom from './../theme/icons/align-bottom.svg';\nimport alignMiddle from './../theme/icons/align-middle.svg';\nimport alignTop from './../theme/icons/align-top.svg';\nimport alignLeft from './../theme/icons/align-left.svg';\nimport alignCenter from './../theme/icons/align-center.svg';\nimport alignRight from './../theme/icons/align-right.svg';\nimport alignJustify from './../theme/icons/align-justify.svg';\nimport objectBlockLeft from './../theme/icons/object-left.svg';\nimport objectCenter from './../theme/icons/object-center.svg';\nimport objectBlockRight from './../theme/icons/object-right.svg';\nimport objectFullWidth from './../theme/icons/object-full-width.svg';\nimport objectInline from './../theme/icons/object-inline.svg';\nimport objectLeft from './../theme/icons/object-inline-left.svg';\nimport objectRight from './../theme/icons/object-inline-right.svg';\nimport objectSizeFull from './../theme/icons/object-size-full.svg';\nimport objectSizeCustom from './../theme/icons/object-size-custom.svg';\nimport objectSizeLarge from './../theme/icons/object-size-large.svg';\nimport objectSizeSmall from './../theme/icons/object-size-small.svg';\nimport objectSizeMedium from './../theme/icons/object-size-medium.svg';\nimport pencil from './../theme/icons/pencil.svg';\nimport pilcrow from './../theme/icons/pilcrow.svg';\nimport quote from './../theme/icons/quote.svg';\nimport threeVerticalDots from './../theme/icons/three-vertical-dots.svg';\nimport dragIndicator from './../theme/icons/drag-indicator.svg';\nimport bold from './../theme/icons/bold.svg';\nimport paragraph from './../theme/icons/paragraph.svg';\nimport plus from './../theme/icons/plus.svg';\nimport text from './../theme/icons/text.svg';\nimport importExport from './../theme/icons/importexport.svg';\nimport redo from './../theme/icons/redo.svg';\nimport undo from './../theme/icons/undo.svg';\nimport bulletedList from './../theme/icons/bulletedlist.svg';\nimport numberedList from './../theme/icons/numberedlist.svg';\nimport todoList from './../theme/icons/todolist.svg';\nimport codeBlock from './../theme/icons/codeblock.svg';\nimport browseFiles from './../theme/icons/browse-files.svg';\nimport heading1 from './../theme/icons/heading1.svg';\nimport heading2 from './../theme/icons/heading2.svg';\nimport heading3 from './../theme/icons/heading3.svg';\nimport heading4 from './../theme/icons/heading4.svg';\nimport heading5 from './../theme/icons/heading5.svg';\nimport heading6 from './../theme/icons/heading6.svg';\nimport horizontalLine from './../theme/icons/horizontalline.svg';\nimport html from './../theme/icons/html.svg';\nimport indent from './../theme/icons/indent.svg';\nimport outdent from './../theme/icons/outdent.svg';\nimport table from './../theme/icons/table.svg';\nimport remove from './../theme/icons/remove.svg';\nimport bookmark from './../theme/icons/bookmark.svg';\nimport bookmarkInline from './../theme/icons/bookmark_inline.svg';\nexport const icons = {\n    bold,\n    cancel,\n    caption,\n    check,\n    cog,\n    colorPalette,\n    eraser,\n    history,\n    image,\n    imageUpload,\n    imageAssetManager,\n    imageUrl,\n    lowVision,\n    textAlternative,\n    loupe,\n    previousArrow,\n    nextArrow,\n    importExport,\n    paragraph,\n    plus,\n    text,\n    alignBottom,\n    alignMiddle,\n    alignTop,\n    alignLeft,\n    alignCenter,\n    alignRight,\n    alignJustify,\n    objectLeft,\n    objectCenter,\n    objectRight,\n    objectFullWidth,\n    objectInline,\n    objectBlockLeft,\n    objectBlockRight,\n    objectSizeCustom,\n    objectSizeFull,\n    objectSizeLarge,\n    objectSizeSmall,\n    objectSizeMedium,\n    pencil,\n    pilcrow,\n    quote,\n    threeVerticalDots,\n    dragIndicator,\n    redo,\n    undo,\n    bulletedList,\n    numberedList,\n    todoList,\n    codeBlock,\n    browseFiles,\n    heading1,\n    heading2,\n    heading3,\n    heading4,\n    heading5,\n    heading6,\n    horizontalLine,\n    html,\n    indent,\n    outdent,\n    table,\n    remove,\n    bookmark,\n    bookmarkInline\n};\nimport './augmentation.js';\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/formheader/formheaderview\n */\nimport View from '../view.js';\nimport IconView from '../icon/iconview.js';\nimport '../../theme/components/formheader/formheader.css';\n/**\n * The class component representing a form header view. It should be used in more advanced forms to\n * describe the main purpose of the form.\n *\n * By default the component contains a bolded label view that has to be set. The label is usually a short (at most 3-word) string.\n * The component can also be extended by any other elements, like: icons, dropdowns, etc.\n *\n * It is used i.a.\n * by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}.\n *\n * The latter is an example, where the component has been extended by {@link module:ui/dropdown/dropdownview~DropdownView} view.\n */\nexport default class FormHeaderView extends View {\n    /**\n     * Creates an instance of the form header class.\n     *\n     * @param locale The locale instance.\n     * @param options.label A label.\n     * @param options.class An additional class.\n     */\n    constructor(locale, options = {}) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('label', options.label || '');\n        this.set('class', options.class || null);\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form__header',\n                    bind.to('class')\n                ]\n            },\n            children: this.children\n        });\n        if (options.icon) {\n            this.iconView = new IconView();\n            this.iconView.content = options.icon;\n            this.children.add(this.iconView);\n        }\n        const label = new View(locale);\n        label.setTemplate({\n            tag: 'h2',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form__header__label'\n                ],\n                role: 'presentation'\n            },\n            children: [\n                { text: bind.to('label') }\n            ]\n        });\n        this.children.add(label);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/focuscycler\n */\nimport { isVisible, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * A utility class that helps cycling over {@link module:ui/focuscycler~FocusableView focusable views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n * ```ts\n * const focusables = new ViewCollection<FocusableView>();\n * const focusTracker = new FocusTracker();\n *\n * // Add focusable views to the focus tracker.\n * focusTracker.add( ... );\n * ```\n *\n * Then, the cycler can be used manually:\n *\n * ```ts\n * const cycler = new FocusCycler( { focusables, focusTracker } );\n *\n * // Will focus the first focusable view in #focusables.\n * cycler.focusFirst();\n *\n * // Will log the next focusable item in #focusables.\n * console.log( cycler.next );\n * ```\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n * ```ts\n * const keystrokeHandler = new KeystrokeHandler();\n *\n * // Activate the keystroke handler.\n * keystrokeHandler.listenTo( sourceOfEvents );\n *\n * const cycler = new FocusCycler( {\n * \tfocusables, focusTracker, keystrokeHandler,\n * \tactions: {\n * \t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n * \t\t// focusPrevious() will be called on the cycler.\n * \t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n * \t}\n * } );\n * ```\n *\n * Check out the {@glink framework/deep-dive/ui/focus-tracking \"Deep dive into focus tracking\"} guide to learn more.\n */\nexport default class FocusCycler extends /* #__PURE__ */ EmitterMixin() {\n    /**\n     * Creates an instance of the focus cycler utility.\n     *\n     * @param options Configuration options.\n     */\n    constructor(options) {\n        super();\n        this.focusables = options.focusables;\n        this.focusTracker = options.focusTracker;\n        this.keystrokeHandler = options.keystrokeHandler;\n        this.actions = options.actions;\n        if (options.actions && options.keystrokeHandler) {\n            for (const methodName in options.actions) {\n                let actions = options.actions[methodName];\n                if (typeof actions == 'string') {\n                    actions = [actions];\n                }\n                for (const keystroke of actions) {\n                    options.keystrokeHandler.set(keystroke, (data, cancel) => {\n                        this[methodName]();\n                        cancel();\n                    }, options.keystrokeHandlerOptions);\n                }\n            }\n        }\n        this.on('forwardCycle', () => this.focusFirst(), { priority: 'low' });\n        this.on('backwardCycle', () => this.focusLast(), { priority: 'low' });\n    }\n    /**\n     * Returns the first focusable view in {@link #focusables}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get first() {\n        return (this.focusables.find(isDomFocusable) || null);\n    }\n    /**\n     * Returns the last focusable view in {@link #focusables}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get last() {\n        return (this.focusables.filter(isDomFocusable).slice(-1)[0] || null);\n    }\n    /**\n     * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get next() {\n        return this._getDomFocusableItem(1);\n    }\n    /**\n     * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get previous() {\n        return this._getDomFocusableItem(-1);\n    }\n    /**\n     * An index of the view in the {@link #focusables} which is focused according\n     * to {@link #focusTracker}. Returns `null` when there is no such view.\n     */\n    get current() {\n        let index = null;\n        // There's no focused view in the focusables.\n        if (this.focusTracker.focusedElement === null) {\n            return null;\n        }\n        this.focusables.find((view, viewIndex) => {\n            const focused = view.element === this.focusTracker.focusedElement;\n            if (focused) {\n                index = viewIndex;\n            }\n            return focused;\n        });\n        return index;\n    }\n    /**\n     * Focuses the {@link #first} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusFirst() {\n        this._focus(this.first, 1);\n    }\n    /**\n     * Focuses the {@link #last} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusLast() {\n        this._focus(this.last, -1);\n    }\n    /**\n     * Focuses the {@link #next} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusNext() {\n        const next = this.next;\n        // If there's only one focusable item, we need to let the outside world know\n        // that the next cycle is about to happen. This may be useful\n        // e.g. if you want to move the focus to the parent focus cycler.\n        // Note that the focus is not actually moved in this case.\n        if (next && this.focusables.getIndex(next) === this.current) {\n            this.fire('forwardCycle');\n            return;\n        }\n        if (next === this.first) {\n            this.fire('forwardCycle');\n        }\n        else {\n            this._focus(next, 1);\n        }\n    }\n    /**\n     * Focuses the {@link #previous} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusPrevious() {\n        const previous = this.previous;\n        if (previous && this.focusables.getIndex(previous) === this.current) {\n            this.fire('backwardCycle');\n            return;\n        }\n        if (previous === this.last) {\n            this.fire('backwardCycle');\n        }\n        else {\n            this._focus(previous, -1);\n        }\n    }\n    /**\n     * Allows for creating continuous focus cycling across multiple focus cyclers and their collections of {@link #focusables}.\n     *\n     * It starts listening to the {@link module:ui/focuscycler~FocusCyclerForwardCycleEvent} and\n     * {@link module:ui/focuscycler~FocusCyclerBackwardCycleEvent} events of the chained focus cycler and engages,\n     * whenever the user reaches the last (forwards navigation) or first (backwards navigation) focusable view\n     * and would normally start over. Instead, the navigation continues on the higher level (flattens).\n     *\n     * For instance, for the following nested focus navigation structure, the focus would get stuck the moment\n     * the AB gets focused and its focus cycler starts managing it:\n     *\n     *\t   ┌────────────┐   ┌──────────────────────────────────┐   ┌────────────┐\n     *\t   │ AA         │   │ AB                               │   │ AC         │\n     *\t   │            │   │                                  │   │            │\n     *\t   │            │   │    ┌─────┐  ┌─────┐  ┌─────┐     │   │            │\n     *\t   │            │   │ ┌──► ABA ├──► ABB ├──► ABC ├───┐ │   │            │\n     *\t   │            ├───► │  └─────┘  └─────┘  └─────┘   │ │   │            │\n     *\t   │            │   │ │                              │ │   │            │\n     *\t   │            │   │ │                              │ │   │            │\n     *\t   │            │   │ └──────────────────────────────┘ │   │            │\n     *\t   │            │   │                                  │   │            │\n     *\t   └────────────┘   └──────────────────────────────────┘   └────────────┘\n     *\n     * Chaining a focus tracker that manages AA, AB, and AC with the focus tracker that manages ABA, ABB, and ABC\n     * creates a seamless navigation experience instead:\n     *\n     *\t   ┌────────────┐   ┌──────────────────────────────────┐   ┌────────────┐\n     *\t   │ AA         │   │ AB                               │   │ AC         │\n     *\t   │            │   │                                  │   │            │\n     *\t   │            │   │    ┌─────┐  ┌─────┐  ┌─────┐     │   │            │\n     *\t   │            │   │ ┌──► ABA ├──► ABB ├──► ABC ├──┐  │   │            │\n     *\t┌──►            ├───┼─┘  └─────┘  └─────┘  └─────┘  └──┼───►            ├──┐\n     *\t│  │            │   │                                  │   │            │  │\n     *\t│  │            │   │                                  │   │            │  │\n     *\t│  │            │   │                                  │   │            │  │\n     *\t│  │            │   │                                  │   │            │  │\n     *\t│  └────────────┘   └──────────────────────────────────┘   └────────────┘  │\n     *\t│                                                                          │\n     *\t│                                                                          │\n     *\t└──────────────────────────────────────────────────────────────────────────┘\n     *\n     * See {@link #unchain} to reverse the chaining.\n     */\n    chain(chainedFocusCycler) {\n        const getCurrentFocusedView = () => {\n            // This may happen when one focus cycler does not include focusables of the other (horizontal case).\n            if (this.current === null) {\n                return null;\n            }\n            return this.focusables.get(this.current);\n        };\n        this.listenTo(chainedFocusCycler, 'forwardCycle', evt => {\n            const oldCurrent = getCurrentFocusedView();\n            this.focusNext();\n            // Stop the event propagation only if an attempt at focusing the view actually moved the focus.\n            // If not, let the otherFocusCycler handle the event.\n            if (oldCurrent !== getCurrentFocusedView()) {\n                evt.stop();\n            }\n            // The priority is critical for cycling across multiple chain levels when there's a single view at some of them only.\n        }, { priority: 'low' });\n        this.listenTo(chainedFocusCycler, 'backwardCycle', evt => {\n            const oldCurrent = getCurrentFocusedView();\n            this.focusPrevious();\n            // Stop the event propagation only if an attempt at focusing the view actually moved the focus.\n            // If not, let the otherFocusCycler handle the event.\n            if (oldCurrent !== getCurrentFocusedView()) {\n                evt.stop();\n            }\n            // The priority is critical for cycling across multiple chain levels when there's a single view at some of them only.\n        }, { priority: 'low' });\n    }\n    /**\n     * Reverses a chaining made by {@link #chain}.\n     */\n    unchain(otherFocusCycler) {\n        this.stopListening(otherFocusCycler);\n    }\n    /**\n     * Focuses the given view if it exists.\n     *\n     * @param view The view to be focused\n     * @param direction The direction of the focus if the view has focusable children.\n     * @returns\n     */\n    _focus(view, direction) {\n        // Don't fire focus events if the view is already focused.\n        // Such attempt may occur when cycling with only one focusable item:\n        // even though `focusNext()` method returns without changing focus,\n        // the `forwardCycle` event is fired, triggering the `focusFirst()` method.\n        if (view && this.focusTracker.focusedElement !== view.element) {\n            view.focus(direction);\n        }\n    }\n    /**\n     * Returns the next or previous focusable view in {@link #focusables} with respect\n     * to {@link #current}.\n     *\n     * @param step Either `1` for checking forward from {@link #current} or `-1` for checking backwards.\n     */\n    _getDomFocusableItem(step) {\n        // Cache for speed.\n        const collectionLength = this.focusables.length;\n        if (!collectionLength) {\n            return null;\n        }\n        const current = this.current;\n        // Start from the beginning if no view is focused.\n        // https://github.com/ckeditor/ckeditor5-ui/issues/206\n        if (current === null) {\n            return this[step === 1 ? 'first' : 'last'];\n        }\n        // Note: If current is the only focusable view, it will also be returned for the given step.\n        let focusableItem = this.focusables.get(current);\n        // Cycle in both directions.\n        let index = (current + collectionLength + step) % collectionLength;\n        do {\n            const focusableItemCandidate = this.focusables.get(index);\n            if (isDomFocusable(focusableItemCandidate)) {\n                focusableItem = focusableItemCandidate;\n                break;\n            }\n            // Cycle in both directions.\n            index = (index + collectionLength + step) % collectionLength;\n        } while (index !== current);\n        return focusableItem;\n    }\n}\n/**\n * Checks whether a view can be focused (has `focus()` method and is visible).\n *\n * @param view A view to be checked.\n */\nfunction isDomFocusable(view) {\n    return isFocusable(view) && isVisible(view.element);\n}\n/**\n * Checks whether a view is {@link ~FocusableView}.\n *\n * @param view A view to be checked.\n */\nexport function isFocusable(view) {\n    return !!('focus' in view && typeof view.focus == 'function');\n}\n/**\n * Checks whether a view is an instance of {@link ~ViewWithFocusCycler}.\n *\n * @param view A view to be checked.\n */\nexport function isViewWithFocusCycler(view) {\n    return isFocusable(view) && 'focusCycler' in view && view.focusCycler instanceof FocusCycler;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { global } from '@ckeditor/ckeditor5-utils';\n/**\n * A mixin that brings the possibility to observe dragging of the view element.\n * The view has to implement the {@link ~DraggableView} interface to use it:\n *\n * ```js\n * export default class MyDraggableView extends DraggableViewMixin( View ) implements DraggableView {\n * \t\t// ...\n * }\n * ```\n *\n * Creating a class extending it attaches a set of mouse and touch listeners allowing to observe dragging of the view element:\n * * `mousedown` and `touchstart` on the view element - starting the dragging.\n * * `mousemove` and `touchmove` on the document - updating the view coordinates.\n * * `mouseup` and `touchend` on the document - stopping the dragging.\n *\n * The mixin itself does not provide a visual feedback (that is, the dragged element does not change its position) -\n * it is up to the developer to implement it.\n */\nexport default function DraggableViewMixin(view) {\n    class DraggableMixin extends view {\n        /**\n         * @inheritDoc\n         */\n        constructor(...args) {\n            super(...args);\n            /**\n             * A bound version of {@link #_onDrag}.\n             */\n            this._onDragBound = this._onDrag.bind(this);\n            /**\n             * A bound version of {@link #_onDragEnd}.\n             */\n            this._onDragEndBound = this._onDragEnd.bind(this);\n            /**\n             * The last coordinates of the view. It is updated on every mouse move.\n             */\n            this._lastDraggingCoordinates = { x: 0, y: 0 };\n            this.on('render', () => {\n                this._attachListeners();\n            });\n            this.set('isDragging', false);\n        }\n        /**\n         * Attaches the listeners for the drag start.\n         */\n        _attachListeners() {\n            this.listenTo(this.element, 'mousedown', this._onDragStart.bind(this));\n            this.listenTo(this.element, 'touchstart', this._onDragStart.bind(this));\n        }\n        /**\n         * Attaches the listeners for the dragging and drag end.\n         */\n        _attachDragListeners() {\n            this.listenTo(global.document, 'mouseup', this._onDragEndBound);\n            this.listenTo(global.document, 'touchend', this._onDragEndBound);\n            this.listenTo(global.document, 'mousemove', this._onDragBound);\n            this.listenTo(global.document, 'touchmove', this._onDragBound);\n        }\n        /**\n         * Detaches the listeners after the drag end.\n         */\n        _detachDragListeners() {\n            this.stopListening(global.document, 'mouseup', this._onDragEndBound);\n            this.stopListening(global.document, 'touchend', this._onDragEndBound);\n            this.stopListening(global.document, 'mousemove', this._onDragBound);\n            this.stopListening(global.document, 'touchmove', this._onDragBound);\n        }\n        /**\n         * Starts the dragging listeners and sets the initial view coordinates.\n         */\n        _onDragStart(evt, domEvt) {\n            if (!this._isHandleElementPressed(domEvt)) {\n                return;\n            }\n            this._attachDragListeners();\n            let x = 0;\n            let y = 0;\n            // If dragging is performed with a mouse, there is only one set of coordinates available.\n            // But when using a touch device, there may be many of them, so use the coordinates from the first touch.\n            if (domEvt instanceof MouseEvent) {\n                x = domEvt.clientX;\n                y = domEvt.clientY;\n            }\n            else {\n                x = domEvt.touches[0].clientX;\n                y = domEvt.touches[0].clientY;\n            }\n            this._lastDraggingCoordinates = { x, y };\n            this.isDragging = true;\n        }\n        /**\n         * Updates the view coordinates and fires the `drag` event.\n         */\n        _onDrag(evt, domEvt) {\n            // If dragging was stopped by some external intervention, stop listening.\n            if (!this.isDragging) {\n                this._detachDragListeners();\n                return;\n            }\n            let newX = 0;\n            let newY = 0;\n            // If dragging is performed with a mouse, there is only one set of coordinates available.\n            // But when using a touch device, there may be many of them, so use the coordinates from the first touch.\n            if (domEvt instanceof MouseEvent) {\n                newX = domEvt.clientX;\n                newY = domEvt.clientY;\n            }\n            else {\n                newX = domEvt.touches[0].clientX;\n                newY = domEvt.touches[0].clientY;\n            }\n            // Prevents selection of text while dragging on Safari.\n            domEvt.preventDefault();\n            this.fire('drag', {\n                deltaX: Math.round(newX - this._lastDraggingCoordinates.x),\n                deltaY: Math.round(newY - this._lastDraggingCoordinates.y)\n            });\n            this._lastDraggingCoordinates = { x: newX, y: newY };\n        }\n        /**\n         * Stops the dragging and detaches the listeners.\n         */\n        _onDragEnd() {\n            this._detachDragListeners();\n            this.isDragging = false;\n        }\n        /**\n         * Checks if the drag handle element was pressed.\n         */\n        _isHandleElementPressed(domEvt) {\n            if (!this.dragHandleElement) {\n                return false;\n            }\n            return this.dragHandleElement === domEvt.target ||\n                (domEvt.target instanceof HTMLElement && this.dragHandleElement.contains(domEvt.target));\n        }\n    }\n    return DraggableMixin;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dialog/dialogactionsview\n */\nimport { FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\nimport ButtonView from '../button/buttonview.js';\nimport View from '../view.js';\nimport ViewCollection from '../viewcollection.js';\nimport FocusCycler from '../focuscycler.js';\nimport '../../theme/components/dialog/dialogactions.css';\n/**\n * A dialog actions view class. It contains button views which are used to execute dialog actions.\n */\nexport default class DialogActionsView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.children = this.createCollection();\n        this.keystrokes = new KeystrokeHandler();\n        this._focusTracker = new FocusTracker();\n        this._focusables = new ViewCollection();\n        this.focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this._focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-dialog__actions'\n                ]\n            },\n            children: this.children\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * Creates the button views based on the given definitions.\n     * Then adds them to the {@link #children} collection and to the focus cycler.\n     */\n    setButtons(definitions) {\n        for (const definition of definitions) {\n            const button = new ButtonView(this.locale);\n            let property;\n            button.on('execute', () => definition.onExecute());\n            if (definition.onCreate) {\n                definition.onCreate(button);\n            }\n            for (property in definition) {\n                if (property != 'onExecute' && property != 'onCreate') {\n                    button.set(property, definition[property]);\n                }\n            }\n            this.children.add(button);\n        }\n        this._updateFocusCyclableItems();\n    }\n    /**\n     * @inheritDoc\n     */\n    focus(direction) {\n        if (direction === -1) {\n            this.focusCycler.focusLast();\n        }\n        else {\n            this.focusCycler.focusFirst();\n        }\n    }\n    /**\n     * Adds all elements from the {@link #children} collection to the {@link #_focusables} collection\n     * and to the {@link #_focusTracker} instance.\n     */\n    _updateFocusCyclableItems() {\n        Array.from(this.children).forEach(v => {\n            this._focusables.add(v);\n            this._focusTracker.add(v.element);\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dialog/dialogcontentview\n */\nimport View from '../view.js';\n/**\n * A dialog content view class.\n */\nexport default class DialogContentView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck', 'ck-dialog__content']\n            },\n            children: this.children\n        });\n    }\n    /**\n     * Removes all the child views.\n     */\n    reset() {\n        while (this.children.length) {\n            this.children.remove(0);\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dialog/dialogview\n */\nimport { KeystrokeHandler, FocusTracker, Rect, global, toUnit } from '@ckeditor/ckeditor5-utils';\nimport { icons } from '@ckeditor/ckeditor5-core';\nimport ViewCollection from '../viewcollection.js';\nimport View from '../view.js';\nimport FormHeaderView from '../formheader/formheaderview.js';\nimport ButtonView from '../button/buttonview.js';\nimport FocusCycler, { isViewWithFocusCycler, isFocusable } from '../focuscycler.js';\nimport DraggableViewMixin from '../bindings/draggableviewmixin.js';\nimport DialogActionsView from './dialogactionsview.js';\nimport DialogContentView from './dialogcontentview.js';\nimport '../../theme/components/dialog/dialog.css';\n// @if CK_DEBUG_DIALOG // const RectDrawer = require( '@ckeditor/ckeditor5-utils/tests/_utils/rectdrawer' ).default;\n/**\n * Available dialog view positions:\n *\n * * `DialogViewPosition.SCREEN_CENTER` &ndash; A fixed position in the center of the screen.\n * * `DialogViewPosition.EDITOR_CENTER` &ndash; A dynamic position in the center of the editor editable area.\n * * `DialogViewPosition.EDITOR_TOP_SIDE` &ndash; A dynamic position at the top-right (for the left-to-right languages)\n * or top-left (for right-to-left languages) corner of the editor editable area.\n * * `DialogViewPosition.EDITOR_TOP_CENTER` &ndash; A dynamic position at the top-center of the editor editable area.\n * * `DialogViewPosition.EDITOR_BOTTOM_CENTER` &ndash; A dynamic position at the bottom-center of the editor editable area.\n * * `DialogViewPosition.EDITOR_ABOVE_CENTER` &ndash; A dynamic position centered above the editor editable area.\n * * `DialogViewPosition.EDITOR_BELOW_CENTER` &ndash; A dynamic position centered below the editor editable area.\n *\n * The position of a dialog is specified by a {@link module:ui/dialog/dialog~DialogDefinition#position `position` property} of a\n * definition passed to the {@link module:ui/dialog/dialog~Dialog#show} method.\n */\nexport const DialogViewPosition = {\n    SCREEN_CENTER: 'screen-center',\n    EDITOR_CENTER: 'editor-center',\n    EDITOR_TOP_SIDE: 'editor-top-side',\n    EDITOR_TOP_CENTER: 'editor-top-center',\n    EDITOR_BOTTOM_CENTER: 'editor-bottom-center',\n    EDITOR_ABOVE_CENTER: 'editor-above-center',\n    EDITOR_BELOW_CENTER: 'editor-below-center'\n};\nconst toPx = /* #__PURE__ */ toUnit('px');\n/**\n * A dialog view class.\n */\nclass DialogView extends /* #__PURE__ */ DraggableViewMixin(View) {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, { getCurrentDomRoot, getViewportOffset }) {\n        super(locale);\n        /**\n         * A flag indicating if the dialog was moved manually. If so, its position\n         * will not be updated automatically upon window resize or document scroll.\n         */\n        this.wasMoved = false;\n        const bind = this.bindTemplate;\n        const t = locale.t;\n        this.set('className', '');\n        this.set('ariaLabel', t('Editor dialog'));\n        this.set('isModal', false);\n        this.set('position', DialogViewPosition.SCREEN_CENTER);\n        this.set('_isVisible', false);\n        this.set('_isTransparent', false);\n        this.set('_top', 0);\n        this.set('_left', 0);\n        this._getCurrentDomRoot = getCurrentDomRoot;\n        this._getViewportOffset = getViewportOffset;\n        this.decorate('moveTo');\n        this.parts = this.createCollection();\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this._focusables = new ViewCollection();\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-dialog-overlay',\n                    bind.if('isModal', 'ck-dialog-overlay__transparent', isModal => !isModal),\n                    bind.if('_isVisible', 'ck-hidden', value => !value)\n                ],\n                // Prevent from editor losing focus when clicking on the modal overlay.\n                tabindex: '-1'\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        tabindex: '-1',\n                        class: [\n                            'ck',\n                            'ck-dialog',\n                            bind.if('isModal', 'ck-dialog_modal'),\n                            bind.to('className')\n                        ],\n                        role: 'dialog',\n                        'aria-label': bind.to('ariaLabel'),\n                        style: {\n                            top: bind.to('_top', top => toPx(top)),\n                            left: bind.to('_left', left => toPx(left)),\n                            visibility: bind.if('_isTransparent', 'hidden')\n                        }\n                    },\n                    children: this.parts\n                }\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.keystrokes.set('Esc', (data, cancel) => {\n            // Do not react to the Esc key if the event has already been handled and defaultPrevented\n            // by some logic of the dialog guest (child) view (https://github.com/ckeditor/ckeditor5/issues/17343).\n            if (!data.defaultPrevented) {\n                this.fire('close', { source: 'escKeyPress' });\n                cancel();\n            }\n        });\n        // Support for dragging the modal.\n        this.on('drag', (evt, { deltaX, deltaY }) => {\n            this.wasMoved = true;\n            this.moveBy(deltaX, deltaY);\n        });\n        // Update dialog position upon window resize, if the position was not changed manually.\n        this.listenTo(global.window, 'resize', () => {\n            if (this._isVisible && !this.wasMoved) {\n                this.updatePosition();\n            }\n        });\n        // Update dialog position upon document scroll, if the position was not changed manually.\n        this.listenTo(global.document, 'scroll', () => {\n            if (this._isVisible && !this.wasMoved) {\n                this.updatePosition();\n            }\n        });\n        this.on('change:_isVisible', (evt, name, isVisible) => {\n            if (isVisible) {\n                // Let the content render first, then apply the position. Otherwise, the calculated DOM Rects\n                // will not reflect the final look of the dialog. Note that we're not using #_moveOffScreen() here because\n                // it causes a violent movement of the viewport on iOS (because the dialog still keeps the DOM focus).\n                this._isTransparent = true;\n                // FYI: RAF is too short. We need to wait a bit longer.\n                setTimeout(() => {\n                    this.updatePosition();\n                    this._isTransparent = false;\n                    // The view must get the focus after it gets visible. But this is only possible\n                    // after the dialog is no longer transparent.\n                    this.focus();\n                }, 10);\n            }\n        });\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * Returns the element that should be used as a drag handle.\n     */\n    get dragHandleElement() {\n        // Modals should not be draggable.\n        if (this.headerView && !this.isModal) {\n            return this.headerView.element;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Creates the dialog parts. Which of them are created depends on the arguments passed to the method.\n     * There are no rules regarding the dialog construction, that is, no part is mandatory.\n     * Each part can only be created once.\n     *\n     * @internal\n     */\n    setupParts({ icon, title, hasCloseButton = true, content, actionButtons }) {\n        if (title) {\n            this.headerView = new FormHeaderView(this.locale, { icon });\n            if (hasCloseButton) {\n                this.closeButtonView = this._createCloseButton();\n                this.headerView.children.add(this.closeButtonView);\n            }\n            this.headerView.label = title;\n            this.ariaLabel = title;\n            this.parts.add(this.headerView, 0);\n        }\n        if (content) {\n            // Normalize the content specified in the arguments.\n            if (content instanceof View) {\n                content = [content];\n            }\n            this.contentView = new DialogContentView(this.locale);\n            this.contentView.children.addMany(content);\n            this.parts.add(this.contentView);\n        }\n        if (actionButtons) {\n            this.actionsView = new DialogActionsView(this.locale);\n            this.actionsView.setButtons(actionButtons);\n            this.parts.add(this.actionsView);\n        }\n        this._updateFocusCyclableItems();\n    }\n    /**\n     * Focuses the first focusable element inside the dialog.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Normalizes the passed coordinates to make sure the dialog view\n     * is displayed within the visible viewport and moves it there.\n     *\n     * @internal\n     */\n    moveTo(left, top) {\n        const viewportRect = this._getViewportRect();\n        const dialogRect = this._getDialogRect();\n        // Don't let the dialog go beyond the right edge of the viewport.\n        if (left + dialogRect.width > viewportRect.right) {\n            left = viewportRect.right - dialogRect.width;\n        }\n        // Don't let the dialog go beyond the left edge of the viewport.\n        if (left < viewportRect.left) {\n            left = viewportRect.left;\n        }\n        // Don't let the dialog go beyond the top edge of the viewport.\n        if (top < viewportRect.top) {\n            top = viewportRect.top;\n        }\n        // Note: We don't do the same for the bottom edge to allow users to resize the window vertically\n        // and let the dialog to stay put instead of covering the editing root.\n        this._moveTo(left, top);\n    }\n    /**\n     * Moves the dialog to the specified coordinates.\n     */\n    _moveTo(left, top) {\n        this._left = left;\n        this._top = top;\n    }\n    /**\n     * Moves the dialog by the specified offset.\n     *\n     * @internal\n     */\n    moveBy(left, top) {\n        this.moveTo(this._left + left, this._top + top);\n    }\n    /**\n     * Moves the dialog view to the off-screen position.\n     * Used when there is no space to display the dialog.\n     */\n    _moveOffScreen() {\n        this._moveTo(-9999, -9999);\n    }\n    /**\n     * Recalculates the dialog according to the set position and viewport,\n     * and moves it to the new position.\n     */\n    updatePosition() {\n        if (!this.element || !this.element.parentNode) {\n            return;\n        }\n        const viewportRect = this._getViewportRect();\n        // Actual position may be different from the configured one if there's no DOM root.\n        let configuredPosition = this.position;\n        let domRootRect;\n        if (!this._getCurrentDomRoot()) {\n            configuredPosition = DialogViewPosition.SCREEN_CENTER;\n        }\n        else {\n            domRootRect = this._getVisibleDomRootRect(viewportRect);\n        }\n        const defaultOffset = DialogView.defaultOffset;\n        const dialogRect = this._getDialogRect();\n        // @if CK_DEBUG_DIALOG // RectDrawer.clear();\n        // @if CK_DEBUG_DIALOG // RectDrawer.draw( viewportRect, { outlineColor: 'blue' }, 'Viewport' );\n        switch (configuredPosition) {\n            case DialogViewPosition.EDITOR_TOP_SIDE: {\n                // @if CK_DEBUG_DIALOG // if ( domRootRect ) {\n                // @if CK_DEBUG_DIALOG // \tRectDrawer.draw( domRootRect, { outlineColor: 'red', zIndex: 9999999 }, 'DOM ROOT' );\n                // @if CK_DEBUG_DIALOG // }\n                if (domRootRect) {\n                    const leftCoordinate = this.locale.contentLanguageDirection === 'ltr' ?\n                        domRootRect.right - dialogRect.width - defaultOffset :\n                        domRootRect.left + defaultOffset;\n                    this.moveTo(leftCoordinate, domRootRect.top + defaultOffset);\n                }\n                else {\n                    this._moveOffScreen();\n                }\n                break;\n            }\n            case DialogViewPosition.EDITOR_CENTER: {\n                if (domRootRect) {\n                    this.moveTo(Math.round(domRootRect.left + domRootRect.width / 2 - dialogRect.width / 2), Math.round(domRootRect.top + domRootRect.height / 2 - dialogRect.height / 2));\n                }\n                else {\n                    this._moveOffScreen();\n                }\n                break;\n            }\n            case DialogViewPosition.SCREEN_CENTER: {\n                this.moveTo(Math.round((viewportRect.width - dialogRect.width) / 2), Math.round((viewportRect.height - dialogRect.height) / 2));\n                break;\n            }\n            case DialogViewPosition.EDITOR_TOP_CENTER: {\n                // @if CK_DEBUG_DIALOG // if ( domRootRect ) {\n                // @if CK_DEBUG_DIALOG // \tRectDrawer.draw( domRootRect, { outlineColor: 'red', zIndex: 9999999 }, 'DOM ROOT' );\n                // @if CK_DEBUG_DIALOG // }\n                if (domRootRect) {\n                    this.moveTo(Math.round(domRootRect.left + domRootRect.width / 2 - dialogRect.width / 2), domRootRect.top + defaultOffset);\n                }\n                else {\n                    this._moveOffScreen();\n                }\n                break;\n            }\n            case DialogViewPosition.EDITOR_BOTTOM_CENTER: {\n                // @if CK_DEBUG_DIALOG // if ( domRootRect ) {\n                // @if CK_DEBUG_DIALOG // \tRectDrawer.draw( domRootRect, { outlineColor: 'red', zIndex: 9999999 }, 'DOM ROOT' );\n                // @if CK_DEBUG_DIALOG // }\n                if (domRootRect) {\n                    this.moveTo(Math.round(domRootRect.left + domRootRect.width / 2 - dialogRect.width / 2), domRootRect.bottom - dialogRect.height - defaultOffset);\n                }\n                else {\n                    this._moveOffScreen();\n                }\n                break;\n            }\n            case DialogViewPosition.EDITOR_ABOVE_CENTER: {\n                // @if CK_DEBUG_DIALOG // if ( domRootRect ) {\n                // @if CK_DEBUG_DIALOG // \tRectDrawer.draw( domRootRect, { outlineColor: 'red', zIndex: 9999999 }, 'DOM ROOT' );\n                // @if CK_DEBUG_DIALOG // }\n                if (domRootRect) {\n                    this.moveTo(Math.round(domRootRect.left + domRootRect.width / 2 - dialogRect.width / 2), domRootRect.top - dialogRect.height - defaultOffset);\n                }\n                else {\n                    this._moveOffScreen();\n                }\n                break;\n            }\n            case DialogViewPosition.EDITOR_BELOW_CENTER: {\n                // @if CK_DEBUG_DIALOG // if ( domRootRect ) {\n                // @if CK_DEBUG_DIALOG // \tRectDrawer.draw( domRootRect, { outlineColor: 'red', zIndex: 9999999 }, 'DOM ROOT' );\n                // @if CK_DEBUG_DIALOG // }\n                if (domRootRect) {\n                    this.moveTo(Math.round(domRootRect.left + domRootRect.width / 2 - dialogRect.width / 2), domRootRect.bottom + defaultOffset);\n                }\n                else {\n                    this._moveOffScreen();\n                }\n                break;\n            }\n        }\n    }\n    /**\n     * Calculates the visible DOM root part.\n     */\n    _getVisibleDomRootRect(viewportRect) {\n        let visibleDomRootRect = new Rect(this._getCurrentDomRoot()).getVisible();\n        if (!visibleDomRootRect) {\n            return null;\n        }\n        else {\n            visibleDomRootRect = viewportRect.getIntersection(visibleDomRootRect);\n            if (!visibleDomRootRect) {\n                return null;\n            }\n        }\n        return visibleDomRootRect;\n    }\n    /**\n     * Calculates the dialog element rect.\n     */\n    _getDialogRect() {\n        return new Rect(this.element.firstElementChild);\n    }\n    /**\n     * Returns a viewport `Rect` shrunk by the viewport offset config from all sides.\n     *\n     * TODO: This is a duplicate from position.ts module. It should either be exported there or land somewhere in utils.\n     */\n    _getViewportRect() {\n        const viewportRect = new Rect(global.window);\n        // Modals should not be restricted by the viewport offsets as they are always displayed on top of the page.\n        if (this.isModal) {\n            return viewportRect;\n        }\n        const viewportOffset = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            ...this._getViewportOffset()\n        };\n        viewportRect.top += viewportOffset.top;\n        viewportRect.height -= viewportOffset.top;\n        viewportRect.bottom -= viewportOffset.bottom;\n        viewportRect.height -= viewportOffset.bottom;\n        viewportRect.left += viewportOffset.left;\n        viewportRect.right -= viewportOffset.right;\n        viewportRect.width -= viewportOffset.left + viewportOffset.right;\n        return viewportRect;\n    }\n    /**\n     * Collects all focusable elements inside the dialog parts\n     * and adds them to the focus tracker and focus cycler.\n     */\n    _updateFocusCyclableItems() {\n        const focusables = [];\n        if (this.contentView) {\n            for (const child of this.contentView.children) {\n                if (isFocusable(child)) {\n                    focusables.push(child);\n                }\n            }\n        }\n        if (this.actionsView) {\n            focusables.push(this.actionsView);\n        }\n        if (this.closeButtonView) {\n            focusables.push(this.closeButtonView);\n        }\n        focusables.forEach(focusable => {\n            this._focusables.add(focusable);\n            this.focusTracker.add(focusable.element);\n            if (isViewWithFocusCycler(focusable)) {\n                this._focusCycler.chain(focusable.focusCycler);\n            }\n        });\n    }\n    /**\n     * Creates the close button view that is displayed in the header view corner.\n     */\n    _createCloseButton() {\n        const buttonView = new ButtonView(this.locale);\n        const t = this.locale.t;\n        buttonView.set({\n            label: t('Close'),\n            tooltip: true,\n            icon: icons.cancel\n        });\n        buttonView.on('execute', () => this.fire('close', { source: 'closeButton' }));\n        return buttonView;\n    }\n}\n/**\n * A default dialog element offset from the reference element (e.g. editor editable area).\n */\nDialogView.defaultOffset = 15;\nexport default DialogView;\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport DialogView, { DialogViewPosition } from './dialogview.js';\n/**\n * The dialog controller class. It is used to show and hide the {@link module:ui/dialog/dialogview~DialogView}.\n */\nexport default class Dialog extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Dialog';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        const t = editor.t;\n        this._initShowHideListeners();\n        this._initFocusToggler();\n        this._initMultiRootIntegration();\n        this.set({\n            id: null,\n            isOpen: false\n        });\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            categoryId: 'navigation',\n            keystrokes: [{\n                    label: t('Move focus in and out of an active dialog window'),\n                    keystroke: 'Ctrl+F6',\n                    mayRequireFn: true\n                }]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this._unlockBodyScroll();\n    }\n    /**\n     * Initiates listeners for the `show` and `hide` events emitted by this plugin.\n     *\n     * We could not simply decorate the {@link #show} and {@link #hide} methods to fire events,\n     * because they would be fired in the wrong order &ndash; first would be `show` and then `hide`\n     * (because showing the dialog actually starts with hiding the previously visible one).\n     * Hence, we added private methods {@link #_show} and {@link #_hide} which are called on events\n     * in the desired sequence.\n     */\n    _initShowHideListeners() {\n        this.on('show', (evt, args) => {\n            this._show(args);\n        });\n        // 'low' priority allows to add custom callback between `_show()` and `onShow()`.\n        this.on('show', (evt, args) => {\n            if (args.onShow) {\n                args.onShow(this);\n            }\n        }, { priority: 'low' });\n        this.on('hide', () => {\n            if (Dialog._visibleDialogPlugin) {\n                Dialog._visibleDialogPlugin._hide();\n            }\n        });\n        // 'low' priority allows to add custom callback between `_hide()` and `onHide()`.\n        this.on('hide', () => {\n            if (this._onHide) {\n                this._onHide(this);\n                this._onHide = undefined;\n            }\n        }, { priority: 'low' });\n    }\n    /**\n     * Initiates keystroke handler for toggling the focus between the editor and the dialog view.\n     */\n    _initFocusToggler() {\n        const editor = this.editor;\n        editor.keystrokes.set('Ctrl+F6', (data, cancel) => {\n            if (!this.isOpen || this.view.isModal) {\n                return;\n            }\n            if (this.view.focusTracker.isFocused) {\n                editor.editing.view.focus();\n            }\n            else {\n                this.view.focus();\n            }\n            cancel();\n        });\n    }\n    /**\n     * Provides an integration between the root attaching and detaching and positioning of the view.\n     */\n    _initMultiRootIntegration() {\n        const model = this.editor.model;\n        model.document.on('change:data', () => {\n            if (!this.view) {\n                return;\n            }\n            const changedRoots = model.document.differ.getChangedRoots();\n            for (const changes of changedRoots) {\n                if (changes.state) {\n                    this.view.updatePosition();\n                }\n            }\n        });\n    }\n    /**\n     * Displays a dialog window.\n     *\n     * This method requires a {@link ~DialogDefinition} that defines the dialog's content, title, icon, action buttons, etc.\n     *\n     * For example, the following definition will create a dialog with:\n     * * A header consisting of an icon, a title, and a \"Close\" button (it is added by default).\n     * * A content consisting of a view with a single paragraph.\n     * * A footer consisting of two buttons: \"Yes\" and \"No\".\n     *\n     * ```js\n     * // Create the view that will be used as the dialog's content.\n     * const textView = new View( locale );\n     *\n     * textView.setTemplate( {\n     * \ttag: 'div',\n     * \tattributes: {\n     * \t\tstyle: {\n     * \t\t\tpadding: 'var(--ck-spacing-large)',\n     * \t\t\twhiteSpace: 'initial',\n     * \t\t\twidth: '100%',\n     * \t\t\tmaxWidth: '500px'\n     * \t\t},\n     * \t\ttabindex: -1\n     * \t},\n     * \tchildren: [\n     * \t\t'Lorem ipsum dolor sit amet...'\n     * \t]\n     * } );\n     *\n     * // Show the dialog.\n     * editor.plugins.get( 'Dialog' ).show( {\n     *\tid: 'myDialog',\n     * \ticon: 'myIcon', // This should be an SVG string.\n     * \ttitle: 'My dialog',\n     * \tcontent: textView,\n     * \tactionButtons: [\n     *\t\t{\n     *\t\t\tlabel: t( 'Yes' ),\n     *\t\t\tclass: 'ck-button-action',\n     *\t\t\twithText: true,\n     *\t\t\tonExecute: () => dialog.hide()\n     *\t\t},\n     *\t\t{\n     *\t\t\tlabel: t( 'No' ),\n     *\t\t\twithText: true,\n     *\t\t\tonExecute: () => dialog.hide()\n     *\t\t}\n     *\t]\n     * } );\n     * ```\n     *\n     * By specifying the {@link ~DialogDefinition#onShow} and {@link ~DialogDefinition#onHide} callbacks\n     * it is also possible to add callbacks that will be called when the dialog is shown or hidden.\n     *\n     * For example, the callbacks in the following definition:\n     * * Disable the default behavior of the <kbd>Esc</kbd> key.\n     * * Fire a custom event when the dialog gets hidden.\n     *\n     * ```js\n     * editor.plugins.get( 'Dialog' ).show( {\n     * \t// ...\n     * \tonShow: dialog => {\n     * \t\tdialog.view.on( 'close', ( evt, data ) => {\n     * \t\t\t// Only prevent the event from the \"Esc\" key - do not affect the other ways of closing the dialog.\n     * \t\t\tif ( data.source === 'escKeyPress' ) {\n     * \t\t\t\tevt.stop();\n     * \t\t\t}\n     * \t\t} );\n     * \t},\n     * \tonHide: dialog => {\n     * \t\tdialog.fire( 'dialogDestroyed' );\n     * \t}\n     * } );\n     * ```\n     *\n     * Internally, calling this method:\n     * 1. Hides the currently visible dialog (if any) calling the {@link #hide} method\n     * (fires the {@link ~DialogHideEvent hide event}).\n     * 2. Fires the {@link ~DialogShowEvent show event} which allows for adding callbacks that customize the\n     * behavior of the dialog.\n     * 3. Shows the dialog.\n     */\n    show(dialogDefinition) {\n        this.hide();\n        this.fire(`show:${dialogDefinition.id}`, dialogDefinition);\n    }\n    /**\n     * Handles creating the {@link module:ui/dialog/dialogview~DialogView} instance and making it visible.\n     */\n    _show({ id, icon, title, hasCloseButton = true, content, actionButtons, className, isModal, position, onHide }) {\n        const editor = this.editor;\n        this.view = new DialogView(editor.locale, {\n            getCurrentDomRoot: () => {\n                return editor.editing.view.getDomRoot(editor.model.document.selection.anchor.root.rootName);\n            },\n            getViewportOffset: () => {\n                return editor.ui.viewportOffset;\n            }\n        });\n        const view = this.view;\n        view.on('close', () => {\n            this.hide();\n        });\n        editor.ui.view.body.add(view);\n        editor.keystrokes.listenTo(view.element);\n        // Unless the user specified a position, modals should always be centered on the screen.\n        // Otherwise, let's keep dialogs centered in the editing root by default.\n        if (!position) {\n            position = isModal ? DialogViewPosition.SCREEN_CENTER : DialogViewPosition.EDITOR_CENTER;\n        }\n        if (isModal) {\n            this._lockBodyScroll();\n        }\n        view.set({\n            position,\n            _isVisible: true,\n            className,\n            isModal\n        });\n        view.setupParts({\n            icon,\n            title,\n            hasCloseButton,\n            content,\n            actionButtons\n        });\n        this.id = id;\n        if (onHide) {\n            this._onHide = onHide;\n        }\n        this.isOpen = true;\n        Dialog._visibleDialogPlugin = this;\n    }\n    /**\n     * Hides the dialog. This method is decorated to enable interacting on the {@link ~DialogHideEvent hide event}.\n     *\n     * See {@link #show}.\n     */\n    hide() {\n        if (Dialog._visibleDialogPlugin) {\n            Dialog._visibleDialogPlugin.fire(`hide:${Dialog._visibleDialogPlugin.id}`);\n        }\n    }\n    /**\n     * Destroys the {@link module:ui/dialog/dialogview~DialogView} and cleans up the stored dialog state.\n     */\n    _hide() {\n        if (!this.view) {\n            return;\n        }\n        const editor = this.editor;\n        const view = this.view;\n        if (view.isModal) {\n            this._unlockBodyScroll();\n        }\n        // Reset the content view to prevent its children from being destroyed in the standard\n        // View#destroy() (and collections) chain. If the content children were left in there,\n        // they would have to be re-created by the feature using the dialog every time the dialog\n        // shows up.\n        if (view.contentView) {\n            view.contentView.reset();\n        }\n        editor.ui.view.body.remove(view);\n        editor.ui.focusTracker.remove(view.element);\n        editor.keystrokes.stopListening(view.element);\n        view.destroy();\n        editor.editing.view.focus();\n        this.id = null;\n        this.isOpen = false;\n        Dialog._visibleDialogPlugin = null;\n    }\n    /**\n     * Makes the <body> unscrollable (e.g. when the modal shows up).\n     */\n    _lockBodyScroll() {\n        document.documentElement.classList.add('ck-dialog-scroll-locked');\n    }\n    /**\n     * Makes the <body> scrollable again (e.g. once the modal hides).\n     */\n    _unlockBodyScroll() {\n        document.documentElement.classList.remove('ck-dialog-scroll-locked');\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { icons } from '@ckeditor/ckeditor5-core';\nimport ButtonView from './buttonview.js';\nimport ButtonLabelView from './buttonlabelview.js';\nimport IconView from '../icon/iconview.js';\nimport View from '../view.js';\nimport '../../theme/components/button/listitembutton.css';\n/**\n * Button that is used as dropdown list item entry.\n */\nexport default class ListItemButtonView extends ButtonView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, labelView = new ButtonLabelView()) {\n        super(locale, labelView);\n        /**\n         * Holds the view for the check icon of a button list item.\n         */\n        this._checkIconHolderView = new CheckIconHolderView();\n        this.set({\n            hasCheckSpace: false,\n            _hasCheck: this.isToggleable\n        });\n        const bind = this.bindTemplate;\n        this.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-list-item-button',\n                    bind.if('isToggleable', 'ck-list-item-button_toggleable')\n                ]\n            }\n        });\n        this.bind('_hasCheck').to(this, 'hasCheckSpace', this, 'isToggleable', (hasCheckSpace, isToggleable) => hasCheckSpace || isToggleable);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        if (this._hasCheck) {\n            this.children.add(this._checkIconHolderView, 0);\n        }\n        this._watchCheckIconHolderMount();\n    }\n    /**\n     * Renders the check icon if the button is toggleable.\n     */\n    _watchCheckIconHolderMount() {\n        this._checkIconHolderView\n            .bind('isOn')\n            .to(this, 'isOn', value => this.isToggleable && value);\n        this.on('change:_hasCheck', (evt, propertyName, hasCheck) => {\n            const { children, _checkIconHolderView } = this;\n            if (hasCheck) {\n                children.add(_checkIconHolderView, 0);\n            }\n            else {\n                children.remove(_checkIconHolderView);\n            }\n        });\n    }\n}\nexport class CheckIconHolderView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        /**\n         * The view for the check icon of the button list item.\n         */\n        this._checkIconView = this._createCheckIconView();\n        const bind = this.bindTemplate;\n        this.children = this.createCollection();\n        this.set('isOn', false);\n        this.setTemplate({\n            tag: 'span',\n            children: this.children,\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-list-item-button__check-holder',\n                    bind.to('isOn', isOn => isOn ? 'ck-on' : 'ck-off')\n                ]\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        if (this.isOn) {\n            this.children.add(this._checkIconView, 0);\n        }\n        this._watchCheckIconMount();\n    }\n    /**\n     * Renders the check icon if the button is toggleable.\n     */\n    _watchCheckIconMount() {\n        this.on('change:isOn', (evt, propertyName, isOn) => {\n            const { children, _checkIconView } = this;\n            if (isOn && !children.has(_checkIconView)) {\n                children.add(_checkIconView);\n            }\n            else if (!isOn && children.has(_checkIconView)) {\n                children.remove(_checkIconView);\n            }\n        });\n    }\n    /**\n     * Creates a check icon view.\n     */\n    _createCheckIconView() {\n        const iconView = new IconView();\n        iconView.content = icons.check;\n        iconView.extendTemplate({\n            attributes: {\n                class: 'ck-list-item-button__check-icon'\n            }\n        });\n        return iconView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport ListItemButtonView from '../button/listitembuttonview.js';\nimport '../../theme/components/menubar/menubarmenulistitembutton.css';\n/**\n * A menu bar list button view. Buttons like this one execute user actions.\n */\nexport default class MenuBarMenuListItemButtonView extends ListItemButtonView {\n    /**\n     * Creates an instance of the menu bar list button view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super(locale);\n        this.set({\n            withText: true,\n            withKeystroke: true,\n            tooltip: false,\n            role: 'menuitem'\n        });\n        this.extendTemplate({\n            attributes: {\n                class: ['ck-menu-bar__menu__item__button']\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/label/labelview\n */\nimport View from '../view.js';\nimport { uid } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/label/label.css';\n/**\n * The label view class.\n */\nexport default class LabelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.set('text', undefined);\n        this.set('for', undefined);\n        this.id = `ck-editor__label_${uid()}`;\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'label',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-label'\n                ],\n                id: this.id,\n                for: bind.to('for')\n            },\n            children: [\n                {\n                    text: bind.to('text')\n                }\n            ]\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/accessibilityhelp/accessibilityhelpcontentview\n */\nimport { createElement, env, getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils';\nimport View from '../../view.js';\nimport LabelView from '../../label/labelview.js';\n/**\n * The view displaying keystrokes in the Accessibility help dialog.\n */\nexport default class AccessibilityHelpContentView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, keystrokes) {\n        super(locale);\n        const t = locale.t;\n        const helpLabel = new LabelView();\n        helpLabel.text = t('Help Contents. To close this dialog press ESC.');\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck', 'ck-accessibility-help-dialog__content'],\n                'aria-labelledby': helpLabel.id,\n                role: 'document',\n                tabindex: -1\n            },\n            children: [\n                createElement(document, 'p', {}, t('Below, you can find a list of keyboard shortcuts that can be used in the editor.')),\n                ...this._createCategories(Array.from(keystrokes.values())),\n                helpLabel\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    focus() {\n        this.element.focus();\n    }\n    /**\n     * Creates `<section><h3>Category label</h3>...</section>` elements for each category of keystrokes.\n     */\n    _createCategories(categories) {\n        return categories.map(categoryDefinition => {\n            const elements = [\n                // Category header.\n                createElement(document, 'h3', {}, categoryDefinition.label),\n                // Category definitions (<dl>) and their optional headers (<h4>).\n                ...Array.from(categoryDefinition.groups.values())\n                    .map(groupDefinition => this._createGroup(groupDefinition))\n                    .flat()\n            ];\n            // Category description (<p>).\n            if (categoryDefinition.description) {\n                elements.splice(1, 0, createElement(document, 'p', {}, categoryDefinition.description));\n            }\n            return createElement(document, 'section', {}, elements);\n        });\n    }\n    /**\n     * Creates `[<h4>Optional label</h4>]<dl>...</dl>` elements for each group of keystrokes in a category.\n     */\n    _createGroup(groupDefinition) {\n        const definitionAndDescriptionElements = groupDefinition.keystrokes\n            .sort((a, b) => a.label.localeCompare(b.label))\n            .map(keystrokeDefinition => this._createGroupRow(keystrokeDefinition))\n            .flat();\n        const elements = [\n            createElement(document, 'dl', {}, definitionAndDescriptionElements)\n        ];\n        if (groupDefinition.label) {\n            elements.unshift(createElement(document, 'h4', {}, groupDefinition.label));\n        }\n        return elements;\n    }\n    /**\n     * Creates `<dt>Keystroke label</dt><dd>Keystroke definition</dd>` elements for each keystroke in a group.\n     */\n    _createGroupRow(keystrokeDefinition) {\n        const t = this.locale.t;\n        const dt = createElement(document, 'dt');\n        const dd = createElement(document, 'dd');\n        const normalizedKeystrokeDefinition = normalizeKeystrokeDefinition(keystrokeDefinition.keystroke);\n        const keystrokeAlternativeHTMLs = [];\n        for (const keystrokeAlternative of normalizedKeystrokeDefinition) {\n            keystrokeAlternativeHTMLs.push(keystrokeAlternative.map(keystrokeToEnvKbd).join(''));\n        }\n        dt.innerHTML = keystrokeDefinition.label;\n        dd.innerHTML = keystrokeAlternativeHTMLs.join(', ') +\n            (keystrokeDefinition.mayRequireFn && env.isMac ? ` ${t('(may require <kbd>Fn</kbd>)')}` : '');\n        return [dt, dd];\n    }\n}\nfunction keystrokeToEnvKbd(keystroke) {\n    return getEnvKeystrokeText(keystroke)\n        .split('+')\n        .map(part => `<kbd>${part}</kbd>`)\n        .join('+');\n}\nfunction normalizeKeystrokeDefinition(definition) {\n    if (typeof definition === 'string') {\n        return [[definition]];\n    }\n    if (typeof definition[0] === 'string') {\n        return [definition];\n    }\n    return definition;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/accessibilityhelp/accessibilityhelp\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport ButtonView from '../../button/buttonview.js';\nimport Dialog from '../../dialog/dialog.js';\nimport MenuBarMenuListItemButtonView from '../../menubar/menubarmenulistitembuttonview.js';\nimport AccessibilityHelpContentView from './accessibilityhelpcontentview.js';\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils';\nimport accessibilityIcon from '../../../theme/icons/accessibility.svg';\nimport '../../../theme/components/editorui/accessibilityhelp.css';\n/**\n * A plugin that brings the accessibility help dialog to the editor available under the <kbd>Alt</kbd>+<kbd>0</kbd>\n * keystroke and via the \"Accessibility help\" toolbar button. The dialog displays a list of keystrokes that can be used\n * by the user to perform various actions in the editor.\n *\n * Keystroke information is loaded from {@link module:core/accessibility~Accessibility#keystrokeInfos}. New entries can be\n * added using the API provided by the {@link module:core/accessibility~Accessibility} class.\n */\nexport default class AccessibilityHelp extends Plugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * The view that displays the dialog content (list of keystrokes).\n         * Created when the dialog is opened for the first time.\n         */\n        this.contentView = null;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [Dialog];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'AccessibilityHelp';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        editor.ui.componentFactory.add('accessibilityHelp', () => {\n            const button = this._createButton(ButtonView);\n            button.set({\n                tooltip: true,\n                withText: false,\n                label: t('Accessibility help')\n            });\n            return button;\n        });\n        editor.ui.componentFactory.add('menuBar:accessibilityHelp', () => {\n            const button = this._createButton(MenuBarMenuListItemButtonView);\n            button.label = t('Accessibility');\n            return button;\n        });\n        editor.keystrokes.set('Alt+0', (evt, cancel) => {\n            this._toggleDialog();\n            cancel();\n        });\n        this._setupRootLabels();\n    }\n    /**\n     * Creates a button to show accessibility help dialog, for use either in toolbar or in menu bar.\n     */\n    _createButton(ButtonClass) {\n        const editor = this.editor;\n        const dialog = editor.plugins.get('Dialog');\n        const locale = editor.locale;\n        const view = new ButtonClass(locale);\n        view.set({\n            keystroke: 'Alt+0',\n            icon: accessibilityIcon,\n            isToggleable: true\n        });\n        view.on('execute', () => this._toggleDialog());\n        view.bind('isOn').to(dialog, 'id', id => id === 'accessibilityHelp');\n        return view;\n    }\n    /**\n     * Injects a help text into each editing root's `aria-label` attribute allowing assistive technology users\n     * to discover the availability of the Accessibility help dialog.\n     */\n    _setupRootLabels() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const t = editor.t;\n        editor.ui.on('ready', () => {\n            editingView.change(writer => {\n                for (const root of editingView.document.roots) {\n                    addAriaLabelTextToRoot(writer, root);\n                }\n            });\n            editor.on('addRoot', (evt, modelRoot) => {\n                const viewRoot = editor.editing.view.document.getRoot(modelRoot.rootName);\n                editingView.change(writer => addAriaLabelTextToRoot(writer, viewRoot));\n            }, { priority: 'low' });\n        });\n        function addAriaLabelTextToRoot(writer, viewRoot) {\n            const currentAriaLabel = viewRoot.getAttribute('aria-label');\n            const newAriaLabel = [currentAriaLabel, t('Press %0 for help.', [getEnvKeystrokeText('Alt+0')])]\n                .filter(segment => segment)\n                .join('. ');\n            writer.setAttribute('aria-label', newAriaLabel, viewRoot);\n        }\n    }\n    /**\n     * Shows the accessibility help dialog. Also, creates {@link #contentView} on demand.\n     */\n    _toggleDialog() {\n        const editor = this.editor;\n        const dialog = editor.plugins.get('Dialog');\n        const t = editor.locale.t;\n        if (!this.contentView) {\n            this.contentView = new AccessibilityHelpContentView(editor.locale, editor.accessibility.keystrokeInfos);\n        }\n        if (dialog.id === 'accessibilityHelp') {\n            dialog.hide();\n        }\n        else {\n            dialog.show({\n                id: 'accessibilityHelp',\n                className: 'ck-accessibility-help-dialog',\n                title: t('Accessibility help'),\n                icon: accessibilityIcon,\n                hasCloseButton: true,\n                content: this.contentView\n            });\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global document */\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param options Configuration options.\n * @param options.emitter The emitter to which this behavior should be added.\n * @param options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param options.contextElements Array of HTML elements or a callback returning an array of HTML elements\n * that determine the scope of the handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param options.callback An action executed by the handler.\n * @param options.listenerOptions Additional options for the listener (like priority).\n */\nexport default function clickOutsideHandler({ emitter, activator, callback, contextElements, listenerOptions }) {\n    emitter.listenTo(document, 'mousedown', (evt, domEvt) => {\n        if (!activator()) {\n            return;\n        }\n        // Check if `composedPath` is `undefined` in case the browser does not support native shadow DOM.\n        // Can be removed when all supported browsers support native shadow DOM.\n        const path = typeof domEvt.composedPath == 'function' ? domEvt.composedPath() : [];\n        const contextElementsList = typeof contextElements == 'function' ? contextElements() : contextElements;\n        for (const contextElement of contextElementsList) {\n            if (contextElement.contains(domEvt.target) || path.includes(contextElement)) {\n                return;\n            }\n        }\n        callback();\n    }, listenerOptions);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/bodycollection\n */\n/* globals document */\nimport Template from '../template.js';\nimport ViewCollection from '../viewcollection.js';\nimport { createElement } from '@ckeditor/ckeditor5-utils';\n/**\n * This is a special {@link module:ui/viewcollection~ViewCollection} dedicated to elements that are detached from the DOM structure of\n * the editor, like floating panels, floating toolbars, dialogs, etc.\n *\n * The body collection is available under the {@link module:ui/editorui/editoruiview~EditorUIView#body `editor.ui.view.body`} property.\n * Any plugin can add a {@link module:ui/view~View view} to this collection.\n *\n * All views added to a body collection render in a dedicated DOM container (`<div class=\"ck ck-body ...\">...</div>`). All body collection\n * containers render in a common shared (`<div class=\"ck-body-wrapper\">...</div>`) in the DOM to limit the pollution of\n * the `<body>` element. The resulting DOM structure is as follows:\n *\n * ```html\n * <body>\n * \t<!-- Content of the webpage... -->\n *\n * \t<!-- The shared wrapper for all body collection containers. -->\n * \t<div class=\"ck-body-wrapper\">\n * \t\t<!-- The container of the first body collection instance. -->\n * \t\t<div class=\"ck ck-body ...\">\n * \t\t\t<!-- View elements belonging to the first body collection -->\n * \t\t</div>\n *\n * \t\t<!-- The container of the second body collection instance. -->\n * \t\t<div class=\"ck ck-body ...\">...</div>\n *\n * \t\t<!-- More body collection containers for the rest of instances... -->\n * \t</div>\n * </body>\n * ```\n *\n * By default, the {@link module:ui/editorui/editoruiview~EditorUIView `editor.ui.view`} manages the life cycle of the\n * {@link module:ui/editorui/editoruiview~EditorUIView#body `editor.ui.view.body`} collection, attaching and detaching it\n * when the editor gets created or {@link module:core/editor/editor~Editor#destroy destroyed}.\n *\n * # Custom body collection instances\n *\n * Even though most editor instances come with a built-in body collection\n * ({@link module:ui/editorui/editoruiview~EditorUIView#body `editor.ui.view.body`}), you can create your own instance of this\n * class if you need to control their life cycle.\n *\n * The life cycle of a custom body collection must be handled manually by the developer using the dedicated API:\n * * A body collection will render itself automatically in the DOM as soon as you call {@link ~BodyCollection#attachToDom}.\n * * Calling {@link ~BodyCollection#detachFromDom} will remove the collection from the DOM.\n *\n * **Note**: The shared collection wrapper (`<div class=\"ck-body-wrapper\">...</div>`) gets automatically removed from DOM when the\n * last body collection is {@link ~BodyCollection#detachFromDom detached} and does not require any special handling.\n */\nexport default class BodyCollection extends ViewCollection {\n    /**\n     * Creates a new instance of the {@link module:ui/editorui/bodycollection~BodyCollection}.\n     *\n     * @param locale The {@link module:core/editor/editor~Editor editor's locale} instance.\n     * @param initialItems The initial items of the collection.\n     */\n    constructor(locale, initialItems = []) {\n        super(initialItems);\n        this.locale = locale;\n    }\n    /**\n     * The element holding elements of the body collection.\n     */\n    get bodyCollectionContainer() {\n        return this._bodyCollectionContainer;\n    }\n    /**\n     * Attaches the body collection to the DOM body element. You need to execute this method to render the content of\n     * the body collection.\n     */\n    attachToDom() {\n        this._bodyCollectionContainer = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset_all',\n                    'ck-body',\n                    'ck-rounded-corners'\n                ],\n                dir: this.locale.uiLanguageDirection,\n                role: 'application'\n            },\n            children: this\n        }).render();\n        // Create a shared wrapper if there were none or the previous one got disconnected from DOM.\n        if (!BodyCollection._bodyWrapper || !BodyCollection._bodyWrapper.isConnected) {\n            BodyCollection._bodyWrapper = createElement(document, 'div', { class: 'ck-body-wrapper' });\n            document.body.appendChild(BodyCollection._bodyWrapper);\n        }\n        BodyCollection._bodyWrapper.appendChild(this._bodyCollectionContainer);\n    }\n    /**\n     * Detaches the collection from the DOM structure. Use this method when you do not need to use the body collection\n     * anymore to clean-up the DOM structure.\n     */\n    detachFromDom() {\n        super.destroy();\n        if (this._bodyCollectionContainer) {\n            this._bodyCollectionContainer.remove();\n        }\n        if (BodyCollection._bodyWrapper && !BodyCollection._bodyWrapper.childElementCount) {\n            BodyCollection._bodyWrapper.remove();\n            delete BodyCollection._bodyWrapper;\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/button/switchbuttonview\n */\nimport View from '../view.js';\nimport ButtonView from './buttonview.js';\nimport '../../theme/components/button/switchbutton.css';\n/**\n * The switch button view class.\n *\n * ```ts\n * const view = new SwitchButtonView();\n *\n * view.set( {\n * \twithText: true,\n * \tlabel: 'Switch me!'\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n */\nexport default class SwitchButtonView extends ButtonView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.isToggleable = true;\n        this.toggleSwitchView = this._createToggleView();\n        this.extendTemplate({\n            attributes: {\n                class: 'ck-switchbutton'\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.toggleSwitchView);\n    }\n    /**\n     * Creates a toggle child view.\n     */\n    _createToggleView() {\n        const toggleSwitchView = new View();\n        toggleSwitchView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button__toggle'\n                ]\n            },\n            children: [\n                {\n                    tag: 'span',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-button__toggle__inner'\n                        ]\n                    }\n                }\n            ]\n        });\n        return toggleSwitchView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/button/filedialogbuttonview\n */\nimport View from '../view.js';\nimport ButtonView from './buttonview.js';\nimport ListItemButtonView from './listitembuttonview.js';\n/**\n * The file dialog button view.\n *\n * This component provides a button that opens the native file selection dialog.\n * It can be used to implement the UI of a file upload feature.\n *\n * ```ts\n * const view = new FileDialogButtonView( locale );\n *\n * view.set( {\n * \tacceptedType: 'image/*',\n * \tallowMultipleFiles: true\n * \tlabel: t( 'Insert image' ),\n * \ticon: imageIcon,\n * \ttooltip: true\n * } );\n *\n * view.on( 'done', ( evt, files ) => {\n * \tfor ( const file of Array.from( files ) ) {\n * \t\tconsole.log( 'Selected file', file );\n * \t}\n * } );\n * ```\n */\nexport default class FileDialogButtonView extends /* #__PURE__ */ FileDialogViewMixin(ButtonView) {\n}\n/**\n * The file dialog button view used in a lists.\n *\n * This component provides a button that opens the native file selection dialog.\n * It can be used to implement the UI of a file upload feature.\n *\n* ```ts\n * const view = new FileDialogListItemButtonView( locale );\n *\n * view.set( {\n * \tacceptedType: 'image/*',\n * \tallowMultipleFiles: true\n * \tlabel: t( 'Insert image' ),\n * \ticon: imageIcon,\n * \ttooltip: true\n * } );\n *\n * view.on( 'done', ( evt, files ) => {\n * \tfor ( const file of Array.from( files ) ) {\n * \t\tconsole.log( 'Selected file', file );\n * \t}\n * } );\n * ```\n */\nexport class FileDialogListItemButtonView extends /* #__PURE__ */ FileDialogViewMixin(ListItemButtonView) {\n}\n/**\n * Mixin function that enhances a base button view class with file dialog functionality. It is used\n * to create a button view class that opens the native select file dialog when clicked.\n *\n * The enhanced view includes a button and a hidden file input. When the button is clicked, the file dialog is opened.\n * The mixin adds properties and methods to the base class to handle the file selection.\n *\n * @param view The base class to be enhanced with file dialog functionality.\n * @returns A new class that extends the base class and includes the file dialog functionality.\n */\nfunction FileDialogViewMixin(view) {\n    class FileDialogView extends view {\n        /**\n         * @inheritDoc\n         */\n        constructor(...args) {\n            super(...args);\n            // For backward compatibility.\n            this.buttonView = this;\n            this._fileInputView = new FileInputView(this.locale);\n            this._fileInputView.bind('acceptedType').to(this);\n            this._fileInputView.bind('allowMultipleFiles').to(this);\n            this._fileInputView.delegate('done').to(this);\n            this.on('execute', () => {\n                this._fileInputView.open();\n            });\n            this.extendTemplate({\n                attributes: {\n                    class: 'ck-file-dialog-button'\n                }\n            });\n        }\n        /**\n         * @inheritDoc\n         */\n        render() {\n            super.render();\n            this.children.add(this._fileInputView);\n        }\n    }\n    return FileDialogView;\n}\n/**\n * The hidden file input view class.\n */\nclass FileInputView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.set('acceptedType', undefined);\n        this.set('allowMultipleFiles', false);\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'input',\n            attributes: {\n                class: [\n                    'ck-hidden'\n                ],\n                type: 'file',\n                tabindex: '-1',\n                accept: bind.to('acceptedType'),\n                multiple: bind.to('allowMultipleFiles')\n            },\n            on: {\n                // Removing from code coverage since we cannot programmatically set input element files.\n                change: bind.to(/* istanbul ignore next -- @preserve */ () => {\n                    if (this.element && this.element.files && this.element.files.length) {\n                        this.fire('done', this.element.files);\n                    }\n                    this.element.value = '';\n                })\n            }\n        });\n    }\n    /**\n     * Opens file dialog.\n     */\n    open() {\n        this.element.click();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport View from '../view.js';\nimport ButtonView from '../button/buttonview.js';\nimport dropdownArrowIcon from '../../theme/icons/dropdown-arrow.svg';\nimport '../../theme/components/collapsible/collapsible.css';\n/**\n * A collapsible UI component. Consists of a labeled button and a container which can be collapsed\n * by clicking the button. The collapsible container can be a host to other UI views.\n *\n * @internal\n */\nexport default class CollapsibleView extends View {\n    /**\n     * Creates an instance of the collapsible view.\n     *\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param childViews An optional array of initial child views to be inserted into the collapsible.\n     */\n    constructor(locale, childViews) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('isCollapsed', false);\n        this.set('label', '');\n        this.buttonView = this._createButtonView();\n        this.children = this.createCollection();\n        this.set('_collapsibleAriaLabelUid', undefined);\n        if (childViews) {\n            this.children.addMany(childViews);\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-collapsible',\n                    bind.if('isCollapsed', 'ck-collapsible_collapsed')\n                ]\n            },\n            children: [\n                this.buttonView,\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-collapsible__children'\n                        ],\n                        role: 'region',\n                        hidden: bind.if('isCollapsed', 'hidden'),\n                        'aria-labelledby': bind.to('_collapsibleAriaLabelUid')\n                    },\n                    children: this.children\n                }\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this._collapsibleAriaLabelUid = this.buttonView.labelView.element.id;\n    }\n    /**\n     * Focuses the first focusable.\n     */\n    focus() {\n        this.buttonView.focus();\n    }\n    /**\n     * Creates the main {@link #buttonView} of the collapsible.\n     */\n    _createButtonView() {\n        const buttonView = new ButtonView(this.locale);\n        const bind = buttonView.bindTemplate;\n        buttonView.set({\n            withText: true,\n            icon: dropdownArrowIcon\n        });\n        buttonView.extendTemplate({\n            attributes: {\n                'aria-expanded': bind.to('isOn', value => String(value))\n            }\n        });\n        buttonView.bind('label').to(this);\n        buttonView.bind('isOn').to(this, 'isCollapsed', isCollapsed => !isCollapsed);\n        buttonView.on('execute', () => {\n            this.isCollapsed = !this.isCollapsed;\n        });\n        return buttonView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorgrid/colortileview\n */\nimport ButtonView from '../button/buttonview.js';\nimport { env } from '@ckeditor/ckeditor5-utils';\nimport checkIcon from '../../theme/icons/color-tile-check.svg';\n/**\n * This class represents a single color tile in the {@link module:ui/colorgrid/colorgridview~ColorGridView}.\n */\nexport default class ColorTileView extends ButtonView {\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('color', undefined);\n        this.set('hasBorder', false);\n        this.icon = checkIcon;\n        this.extendTemplate({\n            attributes: {\n                style: {\n                    // https://github.com/ckeditor/ckeditor5/issues/14907\n                    backgroundColor: bind.to('color', color => env.isMediaForcedColors ? null : color)\n                },\n                class: [\n                    'ck',\n                    'ck-color-grid__tile',\n                    bind.if('hasBorder', 'ck-color-selector__color-tile_bordered')\n                ]\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.iconView.fillColor = 'hsl(0, 0%, 100%)';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorgrid/colorgridview\n */\nimport View from '../view.js';\nimport ColorTileView from './colortileview.js';\nimport addKeyboardHandlingForGrid from '../bindings/addkeyboardhandlingforgrid.js';\nimport { FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/colorgrid/colorgrid.css';\n/**\n * A grid of {@link module:ui/colorgrid/colortileview~ColorTileView color tiles}.\n */\nexport default class ColorGridView extends View {\n    /**\n     * Creates an instance of a color grid containing {@link module:ui/colorgrid/colortileview~ColorTileView tiles}.\n     *\n     * @fires execute\n     * @param locale The localization services instance.\n     * @param options Component configuration\n     * @param options.colorDefinitions Array with definitions\n     * required to create the {@link module:ui/colorgrid/colortileview~ColorTileView tiles}.\n     * @param options.columns A number of columns to display the tiles.\n     */\n    constructor(locale, options) {\n        super(locale);\n        const colorDefinitions = options && options.colorDefinitions ? options.colorDefinitions : [];\n        this.columns = options && options.columns ? options.columns : 5;\n        const viewStyleAttribute = {\n            gridTemplateColumns: `repeat( ${this.columns}, 1fr)`\n        };\n        this.set('selectedColor', undefined);\n        this.items = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.items.on('add', (evt, colorTile) => {\n            colorTile.isOn = colorTile.color === this.selectedColor;\n        });\n        colorDefinitions.forEach(color => {\n            const colorTile = new ColorTileView();\n            colorTile.set({\n                color: color.color,\n                label: color.label,\n                tooltip: true,\n                hasBorder: color.options.hasBorder\n            });\n            colorTile.on('execute', () => {\n                this.fire('execute', {\n                    value: color.color,\n                    hasBorder: color.options.hasBorder,\n                    label: color.label\n                });\n            });\n            this.items.add(colorTile);\n        });\n        this.setTemplate({\n            tag: 'div',\n            children: this.items,\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-color-grid'\n                ],\n                style: viewStyleAttribute\n            }\n        });\n        this.on('change:selectedColor', (evt, name, selectedColor) => {\n            for (const item of this.items) {\n                item.isOn = item.color === selectedColor;\n            }\n        });\n    }\n    /**\n     * Focuses the first focusable in {@link #items}.\n     */\n    focus() {\n        if (this.items.length) {\n            this.items.first.focus();\n        }\n    }\n    /**\n     * Focuses the last focusable in {@link #items}.\n     */\n    focusLast() {\n        if (this.items.length) {\n            this.items.last.focus();\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Items added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            this.focusTracker.add(item.element);\n        }\n        this.items.on('add', (evt, item) => {\n            this.focusTracker.add(item.element);\n        });\n        this.items.on('remove', (evt, item) => {\n            this.focusTracker.remove(item.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        addKeyboardHandlingForGrid({\n            keystrokeHandler: this.keystrokes,\n            focusTracker: this.focusTracker,\n            gridItems: this.items,\n            numberOfColumns: this.columns,\n            uiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorpicker/utils\n */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n// There are no available types for 'color-parse' module.\n// @ts-ignore\nimport { default as parse } from 'color-parse';\nimport * as convert from 'color-convert';\n/**\n * Parses and converts the color string to requested format. Handles variety of color spaces\n * like `hsl`, `hex` or `rgb`.\n *\n * @param color\n * @returns A color string.\n */\nexport function convertColor(color, outputFormat) {\n    if (!color) {\n        return '';\n    }\n    const colorObject = parseColorString(color);\n    if (!colorObject) {\n        return '';\n    }\n    if (colorObject.space === outputFormat) {\n        return color;\n    }\n    if (!canConvertParsedColor(colorObject)) {\n        return '';\n    }\n    const fromColorSpace = convert[colorObject.space];\n    const toColorSpace = fromColorSpace[outputFormat];\n    if (!toColorSpace) {\n        return '';\n    }\n    const convertedColorChannels = toColorSpace(colorObject.space === 'hex' ? colorObject.hexValue : colorObject.values);\n    return formatColorOutput(convertedColorChannels, outputFormat);\n}\n/**\n * Converts a color string to hex format.\n *\n * @param color\n * @returns A color string.\n */\nexport function convertToHex(color) {\n    if (!color) {\n        return '';\n    }\n    const colorObject = parseColorString(color);\n    if (!colorObject) {\n        return '#000';\n    }\n    if (colorObject.space === 'hex') {\n        return colorObject.hexValue;\n    }\n    return convertColor(color, 'hex');\n}\n/**\n * Registers the custom element in the\n * [CustomElementsRegistry](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry).\n */\nexport function registerCustomElement(elementName, constructor) {\n    if (customElements.get(elementName) === undefined) {\n        customElements.define(elementName, constructor);\n    }\n}\n/**\n * Formats the passed color channels according to the requested format.\n *\n * @param values\n * @param format\n * @returns A color string.\n */\nfunction formatColorOutput(values, format) {\n    switch (format) {\n        case 'hex': return `#${values}`;\n        case 'rgb': return `rgb( ${values[0]}, ${values[1]}, ${values[2]} )`;\n        case 'hsl': return `hsl( ${values[0]}, ${values[1]}%, ${values[2]}% )`;\n        case 'hwb': return `hwb( ${values[0]}, ${values[1]}, ${values[2]} )`;\n        case 'lab': return `lab( ${values[0]}% ${values[1]} ${values[2]} )`;\n        case 'lch': return `lch( ${values[0]}% ${values[1]} ${values[2]} )`;\n        default: return '';\n    }\n}\nfunction parseColorString(colorString) {\n    // Parser library treats `hex` format as belonging to `rgb` space | which messes up further conversion.\n    // Let's parse such strings on our own.\n    if (colorString.startsWith('#')) {\n        const parsedHex = parse(colorString);\n        return {\n            space: 'hex',\n            values: parsedHex.values,\n            hexValue: colorString,\n            alpha: parsedHex.alpha\n        };\n    }\n    const parsed = parse(colorString);\n    if (!parsed.space) {\n        return null;\n    }\n    return parsed;\n}\nfunction canConvertParsedColor(parsedColor) {\n    return Object.keys(convert).includes(parsedColor.space);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/labeledfield/labeledfieldview\n */\nimport View from '../view.js';\nimport LabelView from '../label/labelview.js';\nimport { uid } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/labeledfield/labeledfieldview.css';\n/**\n * The labeled field view class. It can be used to enhance any view with the following features:\n *\n * * a label,\n * * (optional) an error message,\n * * (optional) an info (status) text,\n *\n * all bound logically by proper DOM attributes for UX and accessibility.  It also provides an interface\n * (e.g. observable properties) that allows controlling those additional features.\n *\n * The constructor of this class requires a callback that returns a view to be labeled. The callback\n * is called with unique ids that allow binding of DOM properties:\n *\n * ```ts\n * const labeledInputView = new LabeledFieldView( locale, ( labeledFieldView, viewUid, statusUid ) => {\n * \tconst inputView = new InputTextView( labeledFieldView.locale );\n *\n * \tinputView.set( {\n * \t\tid: viewUid,\n * \t\tariaDescribedById: statusUid\n * \t} );\n *\n * \tinputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n * \tinputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n *\n * \treturn inputView;\n * } );\n *\n * labeledInputView.label = 'User name';\n * labeledInputView.infoText = 'Full name like for instance, John Doe.';\n * labeledInputView.render();\n *\n * document.body.append( labeledInputView.element );\n * ```\n *\n * See {@link module:ui/labeledfield/utils} to discover ready–to–use labeled input helpers for common\n * UI components.\n */\nexport default class LabeledFieldView extends View {\n    /**\n     * Creates an instance of the labeled field view class using a provided creator function\n     * that provides the view to be labeled.\n     *\n     * @param locale The locale instance.\n     * @param viewCreator A function that returns a {@link module:ui/view~View}\n     * that will be labeled. The following arguments are passed to the creator function:\n     *\n     * * an instance of the `LabeledFieldView` to allow binding observable properties,\n     * * an UID string that connects the {@link #labelView label} and the labeled field view in DOM,\n     * * an UID string that connects the {@link #statusView status} and the labeled field view in DOM.\n     */\n    constructor(locale, viewCreator) {\n        super(locale);\n        const viewUid = `ck-labeled-field-view-${uid()}`;\n        const statusUid = `ck-labeled-field-view-status-${uid()}`;\n        this.fieldView = viewCreator(this, viewUid, statusUid);\n        this.set('label', undefined);\n        this.set('isEnabled', true);\n        this.set('isEmpty', true);\n        this.set('isFocused', false);\n        this.set('errorText', null);\n        this.set('infoText', null);\n        this.set('class', undefined);\n        this.set('placeholder', undefined);\n        this.labelView = this._createLabelView(viewUid);\n        this.statusView = this._createStatusView(statusUid);\n        this.fieldWrapperChildren = this.createCollection([this.fieldView, this.labelView]);\n        this.bind('_statusText').to(this, 'errorText', this, 'infoText', (errorText, infoText) => errorText || infoText);\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-labeled-field-view',\n                    bind.to('class'),\n                    bind.if('isEnabled', 'ck-disabled', value => !value),\n                    bind.if('isEmpty', 'ck-labeled-field-view_empty'),\n                    bind.if('isFocused', 'ck-labeled-field-view_focused'),\n                    bind.if('placeholder', 'ck-labeled-field-view_placeholder'),\n                    bind.if('errorText', 'ck-error')\n                ]\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-labeled-field-view__input-wrapper'\n                        ]\n                    },\n                    children: this.fieldWrapperChildren\n                },\n                this.statusView\n            ]\n        });\n    }\n    /**\n     * Creates label view class instance and bind with view.\n     *\n     * @param id Unique id to set as labelView#for attribute.\n     */\n    _createLabelView(id) {\n        const labelView = new LabelView(this.locale);\n        labelView.for = id;\n        labelView.bind('text').to(this, 'label');\n        return labelView;\n    }\n    /**\n     * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n     * next to the {@link #fieldView}. See {@link #_statusText}.\n     *\n     * @param statusUid Unique id of the status, shared with the {@link #fieldView view's}\n     * `aria-describedby` attribute.\n     */\n    _createStatusView(statusUid) {\n        const statusView = new View(this.locale);\n        const bind = this.bindTemplate;\n        statusView.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-labeled-field-view__status',\n                    bind.if('errorText', 'ck-labeled-field-view__status_error'),\n                    bind.if('_statusText', 'ck-hidden', value => !value)\n                ],\n                id: statusUid,\n                role: bind.if('errorText', 'alert')\n            },\n            children: [\n                {\n                    text: bind.to('_statusText')\n                }\n            ]\n        });\n        return statusView;\n    }\n    /**\n     * Focuses the {@link #fieldView}.\n     */\n    focus(direction) {\n        this.fieldView.focus(direction);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/input/inputbase\n */\nimport View from '../view.js';\nimport { FocusTracker } from '@ckeditor/ckeditor5-utils';\n/**\n * The base input view class.\n */\nexport default class InputBase extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.set('value', undefined);\n        this.set('id', undefined);\n        this.set('placeholder', undefined);\n        this.set('tabIndex', undefined);\n        this.set('isReadOnly', false);\n        this.set('hasError', false);\n        this.set('ariaDescribedById', undefined);\n        this.set('ariaLabel', undefined);\n        this.focusTracker = new FocusTracker();\n        this.bind('isFocused').to(this.focusTracker);\n        this.set('isEmpty', true);\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'input',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-input',\n                    bind.if('isFocused', 'ck-input_focused'),\n                    bind.if('isEmpty', 'ck-input-text_empty'),\n                    bind.if('hasError', 'ck-error')\n                ],\n                id: bind.to('id'),\n                placeholder: bind.to('placeholder'),\n                tabindex: bind.to('tabIndex'),\n                readonly: bind.to('isReadOnly'),\n                'aria-invalid': bind.if('hasError', true),\n                'aria-describedby': bind.to('ariaDescribedById'),\n                'aria-label': bind.to('ariaLabel')\n            },\n            on: {\n                input: bind.to((...args) => {\n                    this.fire('input', ...args);\n                    this._updateIsEmpty();\n                }),\n                change: bind.to(this._updateIsEmpty.bind(this))\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n        this._setDomElementValue(this.value);\n        this._updateIsEmpty();\n        // Bind `this.value` to the DOM element's value.\n        // We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n        this.on('change:value', (evt, name, value) => {\n            this._setDomElementValue(value);\n            this._updateIsEmpty();\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n    }\n    /**\n     * Moves the focus to the input and selects the value.\n     */\n    select() {\n        this.element.select();\n    }\n    /**\n     * Focuses the input.\n     */\n    focus() {\n        this.element.focus();\n    }\n    /**\n     * Resets the value of the input\n     */\n    reset() {\n        this.value = this.element.value = '';\n        this._updateIsEmpty();\n    }\n    /**\n     * Updates the {@link #isEmpty} property value on demand.\n     */\n    _updateIsEmpty() {\n        this.isEmpty = isInputElementEmpty(this.element);\n    }\n    /**\n     * Sets the `value` property of the {@link #element DOM element} on demand.\n     */\n    _setDomElementValue(value) {\n        this.element.value = (!value && value !== 0) ? '' : value;\n    }\n}\nfunction isInputElementEmpty(domElement) {\n    return !domElement.value;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport InputBase from './inputbase.js';\nimport '../../theme/components/input/input.css';\n/**\n * The input view class.\n */\nexport default class InputView extends InputBase {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.set('inputMode', 'text');\n        const bind = this.bindTemplate;\n        this.extendTemplate({\n            attributes: {\n                inputmode: bind.to('inputMode')\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/inputtext/inputtextview\n */\nimport InputView from '../input/inputview.js';\n/**\n * The text input view class.\n */\nexport default class InputTextView extends InputView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.extendTemplate({\n            attributes: {\n                type: 'text',\n                class: [\n                    'ck-input-text'\n                ]\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/textarea/textareaview\n */\nimport { Rect, toUnit, getBorderWidths, global, CKEditorError, isVisible, ResizeObserver } from '@ckeditor/ckeditor5-utils';\nimport InputBase from '../input/inputbase.js';\nimport '../../theme/components/input/input.css';\nimport '../../theme/components/textarea/textarea.css';\n/**\n * The textarea view class.\n *\n * ```ts\n * const textareaView = new TextareaView();\n *\n * textareaView.minRows = 2;\n * textareaView.maxRows = 10;\n *\n * textareaView.render();\n *\n * document.body.append( textareaView.element );\n * ```\n */\nexport default class TextareaView extends InputBase {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        /**\n         * A flag that indicates whether the {@link #_updateAutoGrowHeight} method should be called when the view becomes\n         * visible again. See {@link #_resizeObserver}.\n         */\n        this._isUpdateAutoGrowHeightPending = false;\n        const toPx = toUnit('px');\n        this.set('minRows', 2);\n        this.set('maxRows', 5);\n        this.set('_height', null);\n        this.set('resize', 'none');\n        this._resizeObserver = null;\n        this.on('change:minRows', this._validateMinMaxRows.bind(this));\n        this.on('change:maxRows', this._validateMinMaxRows.bind(this));\n        const bind = this.bindTemplate;\n        this.template.tag = 'textarea';\n        this.extendTemplate({\n            attributes: {\n                class: ['ck-textarea'],\n                style: {\n                    height: bind.to('_height', height => height ? toPx(height) : null),\n                    resize: bind.to('resize')\n                },\n                rows: bind.to('minRows')\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        let wasVisible = false;\n        this.on('input', () => {\n            this._updateAutoGrowHeight(true);\n            this.fire('update');\n        });\n        this.on('change:value', () => {\n            // The content needs to be updated by the browser after the value is changed. It takes a few ms.\n            global.window.requestAnimationFrame(() => {\n                if (!isVisible(this.element)) {\n                    this._isUpdateAutoGrowHeightPending = true;\n                    return;\n                }\n                this._updateAutoGrowHeight();\n                this.fire('update');\n            });\n        });\n        // It may occur that the Textarea size needs to be updated (e.g. because it's content was changed)\n        // when it is not visible or detached from DOM.\n        // In such case, we need to detect the moment when it becomes visible again and update its height then.\n        // We're using ResizeObserver for that as it is the most reliable way to detect when the element becomes visible.\n        // IntersectionObserver didn't work well with the absolute positioned containers.\n        this._resizeObserver = new ResizeObserver(this.element, evt => {\n            const isVisible = !!evt.contentRect.width && !!evt.contentRect.height;\n            if (!wasVisible && isVisible && this._isUpdateAutoGrowHeightPending) {\n                // We're wrapping the auto-grow logic in RAF because otherwise there is an error thrown\n                // by the browser about recursive calls to the ResizeObserver. It used to happen in unit\n                // tests only, though. Since there is no risk of infinite loop here, it can stay here.\n                global.window.requestAnimationFrame(() => {\n                    this._updateAutoGrowHeight();\n                    this.fire('update');\n                });\n            }\n            wasVisible = isVisible;\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    reset() {\n        super.reset();\n        this._updateAutoGrowHeight();\n        this.fire('update');\n    }\n    /**\n     * Updates the {@link #_height} of the view depending on {@link #minRows}, {@link #maxRows}, and the current content size.\n     *\n     * **Note**: This method overrides manual resize done by the user using a handle. It's a known bug.\n     */\n    _updateAutoGrowHeight(shouldScroll) {\n        const viewElement = this.element;\n        if (!viewElement.offsetParent) {\n            this._isUpdateAutoGrowHeightPending = true;\n            return;\n        }\n        this._isUpdateAutoGrowHeightPending = false;\n        const singleLineContentClone = getTextareaElementClone(viewElement, '1');\n        const fullTextValueClone = getTextareaElementClone(viewElement, viewElement.value);\n        const singleLineContentStyles = singleLineContentClone.ownerDocument.defaultView.getComputedStyle(singleLineContentClone);\n        const verticalPaddings = parseFloat(singleLineContentStyles.paddingTop) + parseFloat(singleLineContentStyles.paddingBottom);\n        const borders = getBorderWidths(singleLineContentClone);\n        const lineHeight = parseFloat(singleLineContentStyles.lineHeight);\n        const verticalBorder = borders.top + borders.bottom;\n        const singleLineAreaDefaultHeight = new Rect(singleLineContentClone).height;\n        const numberOfLines = Math.round((fullTextValueClone.scrollHeight - verticalPaddings) / lineHeight);\n        const maxHeight = this.maxRows * lineHeight + verticalPaddings + verticalBorder;\n        // There's a --ck-ui-component-min-height CSS custom property that enforces min height of the component.\n        // This min-height is relevant only when there's one line of text. Other than that, we can rely on line-height.\n        const minHeight = numberOfLines === 1 ? singleLineAreaDefaultHeight : this.minRows * lineHeight + verticalPaddings + verticalBorder;\n        // The size of textarea is controlled by height style instead of rows attribute because event though it is\n        // a more complex solution, it is immune to the layout textarea has been rendered in (gird, flex).\n        this._height = Math.min(Math.max(Math.max(numberOfLines, this.minRows) * lineHeight + verticalPaddings + verticalBorder, minHeight), maxHeight);\n        if (shouldScroll) {\n            viewElement.scrollTop = viewElement.scrollHeight;\n        }\n        singleLineContentClone.remove();\n        fullTextValueClone.remove();\n    }\n    /**\n     * Validates the {@link #minRows} and {@link #maxRows} properties and warns in the console if the configuration is incorrect.\n     */\n    _validateMinMaxRows() {\n        if (this.minRows > this.maxRows) {\n            /**\n             * The minimum number of rows is greater than the maximum number of rows.\n             *\n             * @error ui-textarea-view-min-rows-greater-than-max-rows\n             * @param textareaView The misconfigured textarea view instance.\n             * @param minRows The value of `minRows` property.\n             * @param maxRows The value of `maxRows` property.\n             */\n            throw new CKEditorError('ui-textarea-view-min-rows-greater-than-max-rows', {\n                textareaView: this,\n                minRows: this.minRows,\n                maxRows: this.maxRows\n            });\n        }\n    }\n}\nfunction getTextareaElementClone(element, value) {\n    const clone = element.cloneNode();\n    clone.style.position = 'absolute';\n    clone.style.top = '-99999px';\n    clone.style.left = '-99999px';\n    clone.style.height = 'auto';\n    clone.style.overflow = 'hidden';\n    clone.style.width = element.ownerDocument.defaultView.getComputedStyle(element).width;\n    clone.tabIndex = -1;\n    clone.rows = 1;\n    clone.value = value;\n    element.parentNode.insertBefore(clone, element);\n    return clone;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/dropdownpanelview\n */\nimport View from '../view.js';\nimport { logWarning } from '@ckeditor/ckeditor5-utils';\n/**\n * The dropdown panel view class.\n *\n * See {@link module:ui/dropdown/dropdownview~DropdownView} to learn about the common usage.\n */\nexport default class DropdownPanelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('isVisible', false);\n        this.set('position', 'se');\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset',\n                    'ck-dropdown__panel',\n                    bind.to('position', value => `ck-dropdown__panel_${value}`),\n                    bind.if('isVisible', 'ck-dropdown__panel-visible')\n                ],\n                tabindex: '-1'\n            },\n            children: this.children,\n            on: {\n                // Drag and drop in the panel should not break the selection in the editor.\n                // https://github.com/ckeditor/ckeditor5-ui/issues/228\n                selectstart: bind.to(evt => {\n                    if (evt.target.tagName.toLocaleLowerCase() === 'input') {\n                        return;\n                    }\n                    evt.preventDefault();\n                })\n            }\n        });\n    }\n    /**\n     * Focuses the first view in the {@link #children} collection.\n     *\n     * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n     */\n    focus() {\n        if (this.children.length) {\n            const firstChild = this.children.first;\n            if (typeof firstChild.focus === 'function') {\n                firstChild.focus();\n            }\n            else {\n                /**\n                 * The child view of a dropdown could not be focused because it is missing the `focus()` method.\n                 *\n                 * This warning appears when a dropdown {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open} and it\n                 * attempts to focus the {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#children first child} of its panel\n                 * but the child does not implement the\n                 * {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable focusable interface}.\n                 *\n                 * Focusing the content of a dropdown on open greatly improves the accessibility. Please make sure the view instance\n                 * provides the `focus()` method for the best user experience.\n                 *\n                 * @error ui-dropdown-panel-focus-child-missing-focus\n                 * @param childView\n                 * @param dropdownPanel\n                 */\n                logWarning('ui-dropdown-panel-focus-child-missing-focus', { childView: this.children.first, dropdownPanel: this });\n            }\n        }\n    }\n    /**\n     * Focuses the view element or last item in view collection on opening dropdown's panel.\n     *\n     * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n     */\n    focusLast() {\n        if (this.children.length) {\n            const lastChild = this.children.last;\n            if (typeof lastChild.focusLast === 'function') {\n                lastChild.focusLast();\n            }\n            else {\n                lastChild.focus();\n            }\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/dropdownview\n */\nimport View from '../view.js';\nimport { KeystrokeHandler, FocusTracker, getOptimalPosition } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/dropdown/dropdown.css';\n/**\n * The dropdown view class. It manages the dropdown button and dropdown panel.\n *\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\n * util:\n *\n * ```ts\n * const dropdown = createDropdown( locale );\n *\n * // Configure dropdown's button properties:\n * dropdown.buttonView.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.render();\n *\n * dropdown.panelView.element.textContent = 'Content of the panel';\n *\n * // Will render a dropdown with a panel containing a \"Content of the panel\" text.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\n *\n * If you want to create a completely custom dropdown, then you can compose it manually:\n *\n * ```ts\n * const button = new DropdownButtonView( locale );\n * const panel = new DropdownPanelView( locale );\n * const dropdown = new DropdownView( locale, button, panel );\n *\n * button.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.render();\n *\n * panel.element.textContent = 'Content of the panel';\n *\n * // Will render a dropdown with a panel containing a \"Content of the panel\" text.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\n */\nclass DropdownView extends View {\n    /**\n     * Creates an instance of the dropdown.\n     *\n     * Also see {@link #render}.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale, buttonView, panelView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.buttonView = buttonView;\n        this.panelView = panelView;\n        this.set('isOpen', false);\n        this.set('isEnabled', true);\n        this.set('class', undefined);\n        this.set('id', undefined);\n        this.set('panelPosition', 'auto');\n        // Toggle the visibility of the panel when the dropdown becomes open.\n        this.panelView.bind('isVisible').to(this, 'isOpen');\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-dropdown',\n                    bind.to('class'),\n                    bind.if('isEnabled', 'ck-disabled', value => !value)\n                ],\n                id: bind.to('id'),\n                'aria-describedby': bind.to('ariaDescribedById')\n            },\n            children: [\n                buttonView,\n                panelView\n            ]\n        });\n        buttonView.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-dropdown__button'\n                ],\n                'data-cke-tooltip-disabled': bind.to('isOpen')\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.buttonView.element);\n        this.focusTracker.add(this.panelView.element);\n        // Toggle the dropdown when its button has been clicked.\n        this.listenTo(this.buttonView, 'open', () => {\n            this.isOpen = !this.isOpen;\n        });\n        // Let the dropdown control the position of the panel. The position must\n        // be updated every time the dropdown is open.\n        this.on('change:isOpen', (evt, name, isOpen) => {\n            if (!isOpen) {\n                return;\n            }\n            // If \"auto\", find the best position of the panel to fit into the viewport.\n            // Otherwise, simply assign the static position.\n            if (this.panelPosition === 'auto') {\n                const optimalPanelPosition = DropdownView._getOptimalPosition({\n                    element: this.panelView.element,\n                    target: this.buttonView.element,\n                    fitInViewport: true,\n                    positions: this._panelPositions\n                });\n                this.panelView.position = (optimalPanelPosition ? optimalPanelPosition.name : this._defaultPanelPositionName);\n            }\n            else {\n                this.panelView.position = this.panelPosition;\n            }\n        });\n        // Listen for keystrokes coming from within #element.\n        this.keystrokes.listenTo(this.element);\n        const closeDropdown = (data, cancel) => {\n            if (this.isOpen) {\n                this.isOpen = false;\n                cancel();\n            }\n        };\n        // Open the dropdown panel using the arrow down key, just like with return or space.\n        this.keystrokes.set('arrowdown', (data, cancel) => {\n            // Don't open if the dropdown is disabled or already open.\n            if (this.buttonView.isEnabled && !this.isOpen) {\n                this.isOpen = true;\n                cancel();\n            }\n        });\n        // Block the right arrow key (until nested dropdowns are implemented).\n        this.keystrokes.set('arrowright', (data, cancel) => {\n            if (this.isOpen) {\n                cancel();\n            }\n        });\n        // Close the dropdown using the arrow left/escape key.\n        this.keystrokes.set('arrowleft', closeDropdown);\n        this.keystrokes.set('esc', closeDropdown);\n    }\n    /**\n     * Focuses the {@link #buttonView}.\n     */\n    focus() {\n        this.buttonView.focus();\n    }\n    /**\n     * Returns {@link #panelView panel} positions to be used by the\n     * {@link module:utils/dom/position~getOptimalPosition `getOptimalPosition()`}\n     * utility considering the direction of the language the UI of the editor is displayed in.\n     */\n    get _panelPositions() {\n        const { south, north, southEast, southWest, northEast, northWest, southMiddleEast, southMiddleWest, northMiddleEast, northMiddleWest } = DropdownView.defaultPanelPositions;\n        if (this.locale.uiLanguageDirection !== 'rtl') {\n            return [\n                southEast, southWest, southMiddleEast, southMiddleWest, south,\n                northEast, northWest, northMiddleEast, northMiddleWest, north\n            ];\n        }\n        else {\n            return [\n                southWest, southEast, southMiddleWest, southMiddleEast, south,\n                northWest, northEast, northMiddleWest, northMiddleEast, north\n            ];\n        }\n    }\n    /**\n     * Returns the default position of the dropdown panel based on the direction of the UI language.\n     * It is used when the {@link #panelPosition} is set to `'auto'` and the panel has not found a\n     * suitable position to fit into the viewport.\n     */\n    get _defaultPanelPositionName() {\n        return this.locale.uiLanguageDirection === 'rtl' ? 'sw' : 'se';\n    }\n}\n/**\n * A set of positioning functions used by the dropdown view to determine\n * the optimal position (i.e. fitting into the browser viewport) of its\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel} when\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition} is set to 'auto'`.\n *\n * The available positioning functions are as follow:\n *\n * **South**\n *\n * * `south`\n *\n * ```\n *\t\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southEast`\n *\n * ```\n *\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southWest`\n *\n * ```\n *\t\t         [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southMiddleEast`\n *\n * ```\n *\t\t  [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southMiddleWest`\n *\n * ```\n *\t\t       [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * **North**\n *\n * * `north`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t    [ Button ]\n * ```\n *\n * * `northEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t[ Button ]\n * ```\n *\n * * `northWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t         [ Button ]\n * ```\n *\n * * `northMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t  [ Button ]\n * ```\n *\n * * `northMiddleWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t       [ Button ]\n * ```\n *\n * Positioning functions are compatible with {@link module:utils/dom/position~DomPoint}.\n *\n * The name that position function returns will be reflected in dropdown panel's class that\n * controls its placement. See {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition}\n * to learn more.\n */\nDropdownView.defaultPanelPositions = {\n    south: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 2,\n            name: 's'\n        };\n    },\n    southEast: buttonRect => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left,\n            name: 'se'\n        };\n    },\n    southWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - panelRect.width + buttonRect.width,\n            name: 'sw'\n        };\n    },\n    southMiddleEast: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 4,\n            name: 'sme'\n        };\n    },\n    southMiddleWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) * 3 / 4,\n            name: 'smw'\n        };\n    },\n    north: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 2,\n            name: 'n'\n        };\n    },\n    northEast: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left,\n            name: 'ne'\n        };\n    },\n    northWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - panelRect.width + buttonRect.width,\n            name: 'nw'\n        };\n    },\n    northMiddleEast: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 4,\n            name: 'nme'\n        };\n    },\n    northMiddleWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) * 3 / 4,\n            name: 'nmw'\n        };\n    }\n};\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n */\nDropdownView._getOptimalPosition = getOptimalPosition;\nexport default DropdownView;\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\nimport ButtonView from '../../button/buttonview.js';\nimport IconView from '../../icon/iconview.js';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\n/**\n * The default dropdown button view class.\n *\n * ```ts\n * const view = new DropdownButtonView();\n *\n * view.set( {\n * \tlabel: 'A button',\n * \tkeystroke: 'Ctrl+B',\n * \ttooltip: true\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n */\nexport default class DropdownButtonView extends ButtonView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.arrowView = this._createArrowView();\n        this.extendTemplate({\n            attributes: {\n                'aria-haspopup': true,\n                'aria-expanded': this.bindTemplate.to('isOn', value => String(value))\n            }\n        });\n        // The DropdownButton interface expects the open event upon which will open the dropdown.\n        this.delegate('execute').to(this, 'open');\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.arrowView);\n    }\n    /**\n     * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n     */\n    _createArrowView() {\n        const arrowView = new IconView();\n        arrowView.content = dropdownArrowIcon;\n        arrowView.extendTemplate({\n            attributes: {\n                class: 'ck-dropdown__arrow'\n            }\n        });\n        return arrowView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport ButtonView from '../../button/buttonview.js';\nimport '../../../theme/components/dropdown/menu/dropdownmenulistitembutton.css';\n/**\n * Represents a view for a button in a dropdown menu list item.\n */\nexport default class DropdownMenuListItemButtonView extends ButtonView {\n    constructor(locale, id, label) {\n        super(locale);\n        this.id = id;\n        this.set({\n            withText: true,\n            withKeystroke: true,\n            tooltip: false,\n            role: 'menuitem',\n            label\n        });\n        this.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-dropdown-menu-list__nested-menu__item__button'\n                ]\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/menu/dropdownmenubuttonview\n */\nimport IconView from '../../icon/iconview.js';\nimport ListItemButtonView from '../../button/listitembuttonview.js';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport '../../../theme/components/dropdown/menu/dropdownmenubutton.css';\n/**\n * Represents a view for a dropdown menu button.\n */\nexport default class DropdownMenuButtonView extends ListItemButtonView {\n    /**\n     * Creates an instance of the dropdown menu button view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set({\n            withText: true,\n            role: 'menuitem'\n        });\n        this.arrowView = this._createArrowView();\n        this.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-dropdown-menu-list__nested-menu__button'\n                ],\n                'aria-haspopup': true,\n                'aria-expanded': this.bindTemplate.to('isOn', value => String(value)),\n                'data-cke-tooltip-disabled': bind.to('isOn')\n            },\n            on: {\n                'mouseenter': bind.to('mouseenter')\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.arrowView);\n    }\n    /**\n     * Creates the arrow view instance.\n     *\n     * @private\n     */\n    _createArrowView() {\n        const arrowView = new IconView();\n        arrowView.content = dropdownArrowIcon;\n        arrowView.extendTemplate({\n            attributes: {\n                class: 'ck-dropdown-menu-list__nested-menu__button__arrow'\n            }\n        });\n        return arrowView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/list/listitemview\n */\nimport View from '../view.js';\n/**\n * The list item view class.\n */\nexport default class ListItemView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('isVisible', true);\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'li',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-list__item',\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ],\n                role: 'presentation'\n            },\n            children: this.children\n        });\n    }\n    /**\n     * Focuses the list item.\n     */\n    focus() {\n        if (this.children.first) {\n            this.children.first.focus();\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/list/listseparatorview\n */\nimport View from '../view.js';\n/**\n * The list separator view class.\n */\nexport default class ListSeparatorView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.setTemplate({\n            tag: 'li',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-list__separator'\n                ]\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/list/listitemgroupview\n */\nimport View from '../view.js';\nimport ListView from './listview.js';\nimport LabelView from '../label/labelview.js';\nimport ListSeparatorView from './listseparatorview.js';\n/**\n * The list item group view class.\n */\nexport default class ListItemGroupView extends View {\n    /**\n     * Creates an instance of the list item group view class.\n     *\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param labelView The instance of the group's label. If not provided, an instance of\n     * {@link module:ui/label/labelview~LabelView} is used.\n     */\n    constructor(locale, labelView = new LabelView()) {\n        super(locale);\n        const bind = this.bindTemplate;\n        const nestedList = new ListView(locale);\n        this.set({\n            label: '',\n            isVisible: true\n        });\n        this.labelView = labelView;\n        this.labelView.bind('text').to(this, 'label');\n        this.children = this.createCollection();\n        this.children.addMany([this.labelView, nestedList]);\n        nestedList.set({\n            role: 'group',\n            ariaLabelledBy: labelView.id\n        });\n        // Disable focus tracking and accessible navigation in the child list.\n        nestedList.focusTracker.destroy();\n        nestedList.keystrokes.destroy();\n        this.items = nestedList.items;\n        this.setTemplate({\n            tag: 'li',\n            attributes: {\n                role: 'presentation',\n                class: [\n                    'ck',\n                    'ck-list__group',\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ]\n            },\n            children: this.children\n        });\n    }\n    /**\n     * Focuses the list item (which is not a separator).\n     */\n    focus() {\n        if (this.items) {\n            const firstListItem = this.items.find(item => !(item instanceof ListSeparatorView));\n            if (firstListItem) {\n                firstListItem.focus();\n            }\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/list/listview\n */\nimport View from '../view.js';\nimport FocusCycler from '../focuscycler.js';\nimport ListItemView from './listitemview.js';\nimport ListItemGroupView from './listitemgroupview.js';\nimport ViewCollection from '../viewcollection.js';\nimport { FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/list/list.css';\n/**\n * The list view class.\n */\nexport default class ListView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        /**\n         * A cached map of {@link module:ui/list/listitemgroupview~ListItemGroupView} to `change` event listeners for their `items`.\n         * Used for accessibility and keyboard navigation purposes.\n         */\n        this._listItemGroupToChangeListeners = new WeakMap();\n        const bind = this.bindTemplate;\n        this.focusables = new ViewCollection();\n        this.items = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this._focusCycler = new FocusCycler({\n            focusables: this.focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate list items backwards using the arrowup key.\n                focusPrevious: 'arrowup',\n                // Navigate toolbar items forwards using the arrowdown key.\n                focusNext: 'arrowdown'\n            }\n        });\n        this.set('ariaLabel', undefined);\n        this.set('ariaLabelledBy', undefined);\n        this.set('role', undefined);\n        this.setTemplate({\n            tag: 'ul',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset',\n                    'ck-list'\n                ],\n                role: bind.to('role'),\n                'aria-label': bind.to('ariaLabel'),\n                'aria-labelledby': bind.to('ariaLabelledBy')\n            },\n            children: this.items\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Items added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            if (item instanceof ListItemGroupView) {\n                this._registerFocusableItemsGroup(item);\n            }\n            else if (item instanceof ListItemView) {\n                this._registerFocusableListItem(item);\n            }\n        }\n        this.items.on('change', (evt, data) => {\n            for (const removed of data.removed) {\n                if (removed instanceof ListItemGroupView) {\n                    this._deregisterFocusableItemsGroup(removed);\n                }\n                else if (removed instanceof ListItemView) {\n                    this._deregisterFocusableListItem(removed);\n                }\n            }\n            for (const added of Array.from(data.added).reverse()) {\n                if (added instanceof ListItemGroupView) {\n                    this._registerFocusableItemsGroup(added, data.index);\n                }\n                else {\n                    this._registerFocusableListItem(added, data.index);\n                }\n            }\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the first focusable in {@link #items}.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the first focusable in {@link #items}.\n     */\n    focusFirst() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the last focusable in {@link #items}.\n     */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n     * Registers a list item view in the focus tracker.\n     *\n     * @param item The list item view to be registered.\n     * @param index Index of the list item view in the {@link #items} collection. If not specified, the item will be added at the end.\n     */\n    _registerFocusableListItem(item, index) {\n        this.focusTracker.add(item.element);\n        this.focusables.add(item, index);\n    }\n    /**\n     * Removes a list item view from the focus tracker.\n     *\n     * @param item The list item view to be removed.\n     */\n    _deregisterFocusableListItem(item) {\n        this.focusTracker.remove(item.element);\n        this.focusables.remove(item);\n    }\n    /**\n     * Gets a callback that will be called when the `items` collection of a {@link module:ui/list/listitemgroupview~ListItemGroupView}\n     * change.\n     *\n     * @param groupView The group view for which the callback will be created.\n     * @returns The callback function to be used for the items `change` event listener in a group.\n     */\n    _getOnGroupItemsChangeCallback(groupView) {\n        return (evt, data) => {\n            for (const removed of data.removed) {\n                this._deregisterFocusableListItem(removed);\n            }\n            for (const added of Array.from(data.added).reverse()) {\n                this._registerFocusableListItem(added, this.items.getIndex(groupView) + data.index);\n            }\n        };\n    }\n    /**\n     * Registers a list item group view (and its children) in the focus tracker.\n     *\n     * @param groupView A group view to be registered.\n     * @param groupIndex Index of the group view in the {@link #items} collection. If not specified, the group will be added at the end.\n     */\n    _registerFocusableItemsGroup(groupView, groupIndex) {\n        Array.from(groupView.items).forEach((child, childIndex) => {\n            const registeredChildIndex = typeof groupIndex !== 'undefined' ? groupIndex + childIndex : undefined;\n            this._registerFocusableListItem(child, registeredChildIndex);\n        });\n        const groupItemsChangeCallback = this._getOnGroupItemsChangeCallback(groupView);\n        // Cache the reference to the callback in case the group is removed (see _deregisterFocusableItemsGroup()).\n        this._listItemGroupToChangeListeners.set(groupView, groupItemsChangeCallback);\n        groupView.items.on('change', groupItemsChangeCallback);\n    }\n    /**\n     * Removes a list item group view (and its children) from the focus tracker.\n     *\n     * @param groupView The group view to be removed.\n     */\n    _deregisterFocusableItemsGroup(groupView) {\n        for (const child of groupView.items) {\n            this._deregisterFocusableListItem(child);\n        }\n        groupView.items.off('change', this._listItemGroupToChangeListeners.get(groupView));\n        this._listItemGroupToChangeListeners.delete(groupView);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport ListView from '../../list/listview.js';\n/**\n * Represents a dropdown menu list view.\n */\nexport default class DropdownMenuListView extends ListView {\n    /**\n     * Creates an instance of the dropdown menu list view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.role = 'menu';\n        this.set('isVisible', true);\n        this.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-dropdown-menu-list',\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ]\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nconst NESTED_PANEL_HORIZONTAL_OFFSET = 5;\n/**\n * Contains every positioning function used by {@link module:ui/dropdown/menu/dropdownmenunestedmenuview~DropdownMenuNestedMenuView} that\n * decides where the {@link module:ui/dropdown/menu/dropdownmenunestedmenuview~DropdownMenuNestedMenuView#panelView} should be placed.\n *\n * Positioning functions:\n *\n *\t┌──────┬───────────────┐\n *\t│      │               │\n *\t└──────┤               │\n *\t       │               │\n *\t       │            ES │\n *\t       └───────────────┘\n *\n *\t┌───────────────┬──────┐\n *\t│               │      │\n *\t│               ├──────┘\n *\t│               │\n *\t│ WS            │\n *\t└───────────────┘\n *\n *\t       ┌───────────────┐\n *\t       │            EN │\n *\t       │               │\n *\t┌──────┤               │\n *\t│      │               │\n *\t└──────┴───────────────┘\n *\n *\t┌───────────────┐\n *\t│ WN            │\n *\t│               │\n *\t│               ├──────┐\n *\t│               │      │\n *\t└───────────────┴──────┘\n */\nexport const DropdownMenuPanelPositioningFunctions = {\n    eastSouth: buttonRect => ({\n        top: buttonRect.top,\n        left: buttonRect.right - NESTED_PANEL_HORIZONTAL_OFFSET,\n        name: 'es'\n    }),\n    eastNorth: (buttonRect, panelRect) => ({\n        top: buttonRect.top - panelRect.height + buttonRect.height,\n        left: buttonRect.right - NESTED_PANEL_HORIZONTAL_OFFSET,\n        name: 'en'\n    }),\n    westSouth: (buttonRect, panelRect) => ({\n        top: buttonRect.top,\n        left: buttonRect.left - panelRect.width + NESTED_PANEL_HORIZONTAL_OFFSET,\n        name: 'ws'\n    }),\n    westNorth: (buttonRect, panelRect) => ({\n        top: buttonRect.top - panelRect.height + buttonRect.height,\n        left: buttonRect.left - panelRect.width + NESTED_PANEL_HORIZONTAL_OFFSET,\n        name: 'wn'\n    })\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport ListItemView from '../../list/listitemview.js';\nimport DropdownMenuListItemButtonView from './dropdownmenulistitembuttonview.js';\nimport '../../../theme/components/dropdown/menu/dropdownmenulistitem.css';\n/**\n * Represents a view for a single item in a dropdown menu list.\n */\nexport default class DropdownMenuListItemView extends ListItemView {\n    constructor(locale, parentMenuView, childView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.childView = childView;\n        this.children.add(childView);\n        this.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-dropdown-menu-list__nested-menu__item'\n                ]\n            },\n            on: {\n                'mouseenter': bind.to('mouseenter')\n            }\n        });\n        if (parentMenuView) {\n            this.delegate('mouseenter').to(parentMenuView);\n            if (childView instanceof DropdownMenuListItemButtonView) {\n                childView.delegate('execute').to(parentMenuView);\n            }\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport DropdownMenuListItemView from './dropdownmenulistitemview.js';\nexport const DropdownRootMenuBehaviors = {\n    /**\n     * Move focus to a menu item on mouse hover. If it is a button to open a nested menu, open that menu.\n     */\n    toggleMenusAndFocusItemsOnHover(rootList) {\n        rootList.on('menu:mouseenter', evt => {\n            const [pathLeaf] = evt.path;\n            evt.source.focus();\n            for (const menuView of rootList.menus) {\n                const isListItemContainingMenu = pathLeaf instanceof DropdownMenuListItemView && pathLeaf.childView === menuView;\n                menuView.isOpen = (evt.path.includes(menuView) || isListItemContainingMenu) && menuView.isEnabled;\n            }\n        });\n    },\n    /**\n     * Handles the following case:\n     *\n     * 1. Hover to open a sub-menu (A). The button has focus.\n     * 2. Press arrow up/down to move focus to another sub-menu (B) button.\n     * 3. Press arrow right to open the sub-menu (B).\n     * 4. The sub-menu (A) should close (if not, there are two open menus).\n     */\n    closeMenuWhenAnotherOnTheSameLevelOpens(rootList) {\n        rootList.on('menu:change:isOpen', (evt, name, isOpen) => {\n            if (!isOpen) {\n                return;\n            }\n            const evtMenu = evt.source;\n            for (const menuView of rootList.menus) {\n                if (evtMenu.parentMenuView === menuView.parentMenuView && evtMenu !== menuView) {\n                    menuView.isOpen = false;\n                }\n            }\n        });\n    }\n};\nexport const DropdownMenuBehaviors = {\n    /**\n     * Open the menu on the right arrow key press (left, in RTL mode). This allows for navigating to sub-menus using the keyboard.\n     */\n    openOnArrowRightKey(menuView) {\n        const keystroke = menuView.locale.uiLanguageDirection === 'rtl' ? 'arrowleft' : 'arrowright';\n        menuView.keystrokes.set(keystroke, (data, cancel) => {\n            if (menuView.focusTracker.focusedElement !== menuView.buttonView.element || !menuView.isEnabled) {\n                return;\n            }\n            if (!menuView.isOpen) {\n                menuView.isOpen = true;\n            }\n            menuView.panelView.focus();\n            cancel();\n        });\n    },\n    /**\n     * Opens the menu on its button click as well as enter and space keys press (if the button is focused).\n     */\n    openOnButtonClick(menuView) {\n        menuView.buttonView.on('execute', () => {\n            if (menuView.isEnabled) {\n                menuView.isOpen = true;\n            }\n        });\n    },\n    /**\n     * Opens the menu and focuses the panel content upon pressing the Enter key.\n     */\n    openAndFocusOnEnterKeyPress(menuView) {\n        menuView.keystrokes.set('enter', (data, cancel) => {\n            // Engage only for Enter key press when the button is focused. The panel can contain\n            // other UI components and features that rely on the Enter key press.\n            if (menuView.focusTracker.focusedElement !== menuView.buttonView.element) {\n                return;\n            }\n            menuView.isOpen = true;\n            menuView.panelView.focus();\n            cancel();\n        });\n    },\n    /**\n     * Closes the menu on the left key press (right, in RTL mode). This allows for navigating to sub-menus using the keyboard.\n     */\n    closeOnArrowLeftKey(menuView) {\n        const keystroke = menuView.locale.uiLanguageDirection === 'rtl' ? 'arrowright' : 'arrowleft';\n        menuView.keystrokes.set(keystroke, (data, cancel) => {\n            if (menuView.isOpen) {\n                // Focus first, then close the panel. Otherwise, Safari won't send blur events for detached DOM elements, leading to errors.\n                menuView.focus();\n                menuView.isOpen = false;\n                cancel();\n            }\n        });\n    },\n    closeOnEscKey(menuView) {\n        menuView.keystrokes.set('esc', (data, cancel) => {\n            if (menuView.isOpen) {\n                // Focus first, then close the panel. Otherwise, Safari won't send blur events for detached DOM elements, leading to errors.\n                menuView.focus();\n                menuView.isOpen = false;\n                cancel();\n            }\n        });\n    },\n    /**\n     * Closes the menu when its parent menu closes. This prevents from leaving orphaned open menus.\n     */\n    closeOnParentClose(menuView, parentMenuView) {\n        parentMenuView.on('change:isOpen', (evt, name, isOpen) => {\n            // TODO: Remove checking `evt.source` if `change:isOpen` is no longer delegated.\n            if (!isOpen && evt.source === parentMenuView) {\n                menuView.isOpen = false;\n            }\n        });\n    }\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/balloon/balloonpanelview\n */\nimport View from '../../view.js';\nimport { getOptimalPosition, global, isRange, toUnit, isVisible, isText, ResizeObserver } from '@ckeditor/ckeditor5-utils';\nimport { isElement } from 'lodash-es';\nimport '../../../theme/components/panel/balloonpanel.css';\nconst toPx = /* #__PURE__ */ toUnit('px');\n// A static balloon panel positioning function that moves the balloon far off the viewport.\n// It is used as a fallback when there is no way to position the balloon using provided\n// positioning functions (see: `getOptimalPosition()`), for instance, when the target the\n// balloon should be attached to gets obscured by scrollable containers or the viewport.\n//\n// It prevents the balloon from being attached to the void and possible degradation of the UX.\n// At the same time, it keeps the balloon physically visible in the DOM so the focus remains\n// uninterrupted.\nconst POSITION_OFF_SCREEN = {\n    top: -99999,\n    left: -99999,\n    name: 'arrowless',\n    config: {\n        withArrow: false\n    }\n};\n/**\n * The balloon panel view class.\n *\n * A floating container which can\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#pin pin} to any\n * {@link module:utils/dom/position~Options#target target} in the DOM and remain in that position\n * e.g. when the web page is scrolled.\n *\n * The balloon panel can be used to display contextual, non-blocking UI like forms, toolbars and\n * the like in its {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#content} view\n * collection.\n *\n * There is a number of {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}\n * that the balloon can use, automatically switching from one to another when the viewport space becomes\n * scarce to keep the balloon visible to the user as long as it is possible. The balloon will also\n * accept any custom position set provided by the user compatible with the\n * {@link module:utils/dom/position~Options options}.\n *\n * ```ts\n * const panel = new BalloonPanelView( locale );\n * const childView = new ChildView();\n * const positions = BalloonPanelView.defaultPositions;\n *\n * panel.render();\n *\n * // Add a child view to the panel's content collection.\n * panel.content.add( childView );\n *\n * // Start pinning the panel to an element with the \"target\" id DOM.\n * // The balloon will remain pinned until unpin() is called.\n * panel.pin( {\n * \ttarget: document.querySelector( '#target' ),\n * \tpositions: [\n * \t\tpositions.northArrowSouth,\n * \t\tpositions.southArrowNorth\n * \t]\n * } );\n * ```\n */\nclass BalloonPanelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('top', 0);\n        this.set('left', 0);\n        this.set('position', 'arrow_nw');\n        this.set('isVisible', false);\n        this.set('withArrow', true);\n        this.set('class', undefined);\n        this._pinWhenIsVisibleCallback = null;\n        this._resizeObserver = null;\n        this.content = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-balloon-panel',\n                    bind.to('position', value => `ck-balloon-panel_${value}`),\n                    bind.if('isVisible', 'ck-balloon-panel_visible'),\n                    bind.if('withArrow', 'ck-balloon-panel_with-arrow'),\n                    bind.to('class')\n                ],\n                style: {\n                    top: bind.to('top', toPx),\n                    left: bind.to('left', toPx)\n                }\n            },\n            children: this.content\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this.hide();\n        super.destroy();\n    }\n    /**\n     * Shows the panel.\n     *\n     * See {@link #isVisible}.\n     */\n    show() {\n        this.isVisible = true;\n    }\n    /**\n     * Hides the panel.\n     *\n     * See {@link #isVisible}.\n     */\n    hide() {\n        this.isVisible = false;\n    }\n    /**\n     * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a\n     * smart positioning heuristics that chooses from available positions to make sure the panel\n     * is visible to the user i.e. within the limits of the viewport.\n     *\n     * This method accepts configuration {@link module:utils/dom/position~Options options}\n     * to set the `target`, optional `limiter` and `positions` the balloon should choose from.\n     *\n     * ```ts\n     * const panel = new BalloonPanelView( locale );\n     * const positions = BalloonPanelView.defaultPositions;\n     *\n     * panel.render();\n     *\n     * // Attach the panel to an element with the \"target\" id DOM.\n     * panel.attachTo( {\n     * \ttarget: document.querySelector( '#target' ),\n     * \tpositions: [\n     * \t\tpositions.northArrowSouth,\n     * \t\tpositions.southArrowNorth\n     * \t]\n     * } );\n     * ```\n     *\n     * **Note**: Attaching the panel will also automatically {@link #show} it.\n     *\n     * **Note**: An attached panel will not follow its target when the window is scrolled or resized.\n     * See the {@link #pin} method for a more permanent positioning strategy.\n     *\n     * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.\n     * Default `positions` array is {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     * @returns Whether the balloon was shown and successfully attached or not. Attaching can fail if the target\n     * provided in the options is invisible (e.g. element detached from DOM).\n     */\n    attachTo(options) {\n        const target = getDomElement(options.target);\n        if (target && !isVisible(target)) {\n            return false;\n        }\n        this.show();\n        const defaultPositions = BalloonPanelView.defaultPositions;\n        const positionOptions = Object.assign({}, {\n            element: this.element,\n            positions: [\n                defaultPositions.southArrowNorth,\n                defaultPositions.southArrowNorthMiddleWest,\n                defaultPositions.southArrowNorthMiddleEast,\n                defaultPositions.southArrowNorthWest,\n                defaultPositions.southArrowNorthEast,\n                defaultPositions.northArrowSouth,\n                defaultPositions.northArrowSouthMiddleWest,\n                defaultPositions.northArrowSouthMiddleEast,\n                defaultPositions.northArrowSouthWest,\n                defaultPositions.northArrowSouthEast,\n                defaultPositions.viewportStickyNorth\n            ],\n            limiter: global.document.body,\n            fitInViewport: true\n        }, options);\n        const optimalPosition = BalloonPanelView._getOptimalPosition(positionOptions) || POSITION_OFF_SCREEN;\n        // Usually browsers make some problems with super accurate values like 104.345px\n        // so it is better to use int values.\n        const left = parseInt(optimalPosition.left);\n        const top = parseInt(optimalPosition.top);\n        const position = optimalPosition.name;\n        const config = optimalPosition.config || {};\n        const { withArrow = true } = config;\n        this.top = top;\n        this.left = left;\n        this.position = position;\n        this.withArrow = withArrow;\n        return true;\n    }\n    /**\n     * Works the same way as the {@link #attachTo} method except that the position of the panel is\n     * continuously updated when:\n     *\n     * * any ancestor of the {@link module:utils/dom/position~Options#target}\n     * or {@link module:utils/dom/position~Options#limiter} is scrolled,\n     * * the browser window gets resized or scrolled.\n     *\n     * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target}\n     * and is immune to the changing environment.\n     *\n     * ```ts\n     * const panel = new BalloonPanelView( locale );\n     * const positions = BalloonPanelView.defaultPositions;\n     *\n     * panel.render();\n     *\n     * // Pin the panel to an element with the \"target\" id DOM.\n     * panel.pin( {\n     * \ttarget: document.querySelector( '#target' ),\n     * \tpositions: [\n     * \t\tpositions.northArrowSouth,\n     * \t\tpositions.southArrowNorth\n     * \t]\n     * } );\n     * ```\n     *\n     * To leave the pinned state, use the {@link #unpin} method.\n     *\n     * **Note**: Pinning the panel will also automatically {@link #show} it.\n     *\n     * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.\n     * Default `positions` array is {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     */\n    pin(options) {\n        this.unpin();\n        if (!this._startPinning(options)) {\n            return;\n        }\n        this._pinWhenIsVisibleCallback = () => {\n            if (this.isVisible) {\n                this._startPinning(options);\n            }\n            else {\n                this._stopPinning();\n            }\n        };\n        // Control the state of the listeners depending on whether the panel is visible\n        // or not.\n        // TODO: Use on() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n        this.listenTo(this, 'change:isVisible', this._pinWhenIsVisibleCallback);\n    }\n    /**\n     * Stops pinning the panel, as set up by {@link #pin}.\n     */\n    unpin() {\n        if (this._pinWhenIsVisibleCallback) {\n            // Deactivate listeners attached by pin().\n            this._stopPinning();\n            // Deactivate the panel pin() control logic.\n            // TODO: Use off() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n            this.stopListening(this, 'change:isVisible', this._pinWhenIsVisibleCallback);\n            this._pinWhenIsVisibleCallback = null;\n            this.hide();\n        }\n    }\n    /**\n     * Starts managing the pinned state of the panel. See {@link #pin}.\n     *\n     * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.\n     * @returns Whether the balloon was shown and successfully attached or not. Attaching can fail if the target\n     * provided in the options is invisible (e.g. element detached from DOM).\n     */\n    _startPinning(options) {\n        if (!this.attachTo(options)) {\n            return false;\n        }\n        let targetElement = getDomElement(options.target);\n        const limiterElement = options.limiter ? getDomElement(options.limiter) : global.document.body;\n        // Then we need to listen on scroll event of eny element in the document.\n        this.listenTo(global.document, 'scroll', (evt, domEvt) => {\n            const scrollTarget = domEvt.target;\n            // The position needs to be updated if the positioning target is within the scrolled element.\n            const isWithinScrollTarget = targetElement && scrollTarget.contains(targetElement);\n            // The position needs to be updated if the positioning limiter is within the scrolled element.\n            const isLimiterWithinScrollTarget = limiterElement && scrollTarget.contains(limiterElement);\n            // The positioning target and/or limiter can be a Rect, object etc..\n            // There's no way to optimize the listener then.\n            if (isWithinScrollTarget || isLimiterWithinScrollTarget || !targetElement || !limiterElement) {\n                this.attachTo(options);\n            }\n        }, { useCapture: true });\n        // We need to listen on window resize event and update position.\n        this.listenTo(global.window, 'resize', () => {\n            this.attachTo(options);\n        });\n        // Hide the panel if the target element is no longer visible.\n        if (!this._resizeObserver) {\n            // If the target element is a text node, we need to check the parent element.\n            // It's because `ResizeObserver` accept only elements, not text nodes.\n            if (targetElement && isText(targetElement)) {\n                targetElement = targetElement.parentElement;\n            }\n            if (targetElement) {\n                const checkVisibility = () => {\n                    // If the target element is no longer visible, hide the panel.\n                    if (!isVisible(targetElement)) {\n                        this.unpin();\n                    }\n                };\n                // Element is being resized to 0x0 after it's parent became hidden,\n                // so we need to check size in order to determine if it's visible or not.\n                this._resizeObserver = new ResizeObserver(targetElement, checkVisibility);\n            }\n        }\n        return true;\n    }\n    /**\n     * Stops managing the pinned state of the panel. See {@link #pin}.\n     */\n    _stopPinning() {\n        this.stopListening(global.document, 'scroll');\n        this.stopListening(global.window, 'resize');\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n            this._resizeObserver = null;\n        }\n    }\n    /**\n     * Returns available {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n     * {@link module:utils/dom/position~PositioningFunction positioning functions} adjusted by the specific offsets.\n     *\n     * @internal\n     * @param options Options to generate positions. If not specified, this helper will simply return\n     * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     * @param options.sideOffset A custom side offset (in pixels) of each position. If\n     * not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowSideOffset the default value}\n     * will be used.\n     * @param options.heightOffset A custom height offset (in pixels) of each position. If\n     * not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHeightOffset the default value}\n     * will be used.\n     * @param options.stickyVerticalOffset A custom offset (in pixels) of the `viewportStickyNorth` positioning function.\n     * If not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.stickyVerticalOffset the default value}\n     * will be used.\n     * @param options.config Additional configuration of the balloon balloon panel view.\n     * Currently only {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#withArrow} is supported. Learn more\n     * about {@link module:utils/dom/position~PositioningFunction positioning functions}.\n     */\n    static generatePositions(options = {}) {\n        const { sideOffset = BalloonPanelView.arrowSideOffset, heightOffset = BalloonPanelView.arrowHeightOffset, stickyVerticalOffset = BalloonPanelView.stickyVerticalOffset, config } = options;\n        return {\n            // ------- North west\n            northWestArrowSouthWest: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.left - sideOffset,\n                name: 'arrow_sw',\n                ...(config && { config })\n            }),\n            northWestArrowSouthMiddleWest: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.left - (balloonRect.width * .25) - sideOffset,\n                name: 'arrow_smw',\n                ...(config && { config })\n            }),\n            northWestArrowSouth: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.left - balloonRect.width / 2,\n                name: 'arrow_s',\n                ...(config && { config })\n            }),\n            northWestArrowSouthMiddleEast: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.left - (balloonRect.width * .75) + sideOffset,\n                name: 'arrow_sme',\n                ...(config && { config })\n            }),\n            northWestArrowSouthEast: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.left - balloonRect.width + sideOffset,\n                name: 'arrow_se',\n                ...(config && { config })\n            }),\n            // ------- North\n            northArrowSouthWest: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.left + targetRect.width / 2 - sideOffset,\n                name: 'arrow_sw',\n                ...(config && { config })\n            }),\n            northArrowSouthMiddleWest: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.left + targetRect.width / 2 - (balloonRect.width * .25) - sideOffset,\n                name: 'arrow_smw',\n                ...(config && { config })\n            }),\n            northArrowSouth: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n                name: 'arrow_s',\n                ...(config && { config })\n            }),\n            northArrowSouthMiddleEast: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.left + targetRect.width / 2 - (balloonRect.width * .75) + sideOffset,\n                name: 'arrow_sme',\n                ...(config && { config })\n            }),\n            northArrowSouthEast: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.left + targetRect.width / 2 - balloonRect.width + sideOffset,\n                name: 'arrow_se',\n                ...(config && { config })\n            }),\n            // ------- North east\n            northEastArrowSouthWest: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.right - sideOffset,\n                name: 'arrow_sw',\n                ...(config && { config })\n            }),\n            northEastArrowSouthMiddleWest: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.right - (balloonRect.width * .25) - sideOffset,\n                name: 'arrow_smw',\n                ...(config && { config })\n            }),\n            northEastArrowSouth: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.right - balloonRect.width / 2,\n                name: 'arrow_s',\n                ...(config && { config })\n            }),\n            northEastArrowSouthMiddleEast: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.right - (balloonRect.width * .75) + sideOffset,\n                name: 'arrow_sme',\n                ...(config && { config })\n            }),\n            northEastArrowSouthEast: (targetRect, balloonRect) => ({\n                top: getNorthTop(targetRect, balloonRect),\n                left: targetRect.right - balloonRect.width + sideOffset,\n                name: 'arrow_se',\n                ...(config && { config })\n            }),\n            // ------- South west\n            southWestArrowNorthWest: targetRect => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.left - sideOffset,\n                name: 'arrow_nw',\n                ...(config && { config })\n            }),\n            southWestArrowNorthMiddleWest: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.left - (balloonRect.width * .25) - sideOffset,\n                name: 'arrow_nmw',\n                ...(config && { config })\n            }),\n            southWestArrowNorth: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.left - balloonRect.width / 2,\n                name: 'arrow_n',\n                ...(config && { config })\n            }),\n            southWestArrowNorthMiddleEast: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.left - (balloonRect.width * .75) + sideOffset,\n                name: 'arrow_nme',\n                ...(config && { config })\n            }),\n            southWestArrowNorthEast: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.left - balloonRect.width + sideOffset,\n                name: 'arrow_ne',\n                ...(config && { config })\n            }),\n            // ------- South\n            southArrowNorthWest: targetRect => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.left + targetRect.width / 2 - sideOffset,\n                name: 'arrow_nw',\n                ...(config && { config })\n            }),\n            southArrowNorthMiddleWest: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.left + targetRect.width / 2 - (balloonRect.width * 0.25) - sideOffset,\n                name: 'arrow_nmw',\n                ...(config && { config })\n            }),\n            southArrowNorth: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n                name: 'arrow_n',\n                ...(config && { config })\n            }),\n            southArrowNorthMiddleEast: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.left + targetRect.width / 2 - (balloonRect.width * 0.75) + sideOffset,\n                name: 'arrow_nme',\n                ...(config && { config })\n            }),\n            southArrowNorthEast: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.left + targetRect.width / 2 - balloonRect.width + sideOffset,\n                name: 'arrow_ne',\n                ...(config && { config })\n            }),\n            // ------- South east\n            southEastArrowNorthWest: targetRect => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.right - sideOffset,\n                name: 'arrow_nw',\n                ...(config && { config })\n            }),\n            southEastArrowNorthMiddleWest: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.right - (balloonRect.width * .25) - sideOffset,\n                name: 'arrow_nmw',\n                ...(config && { config })\n            }),\n            southEastArrowNorth: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.right - balloonRect.width / 2,\n                name: 'arrow_n',\n                ...(config && { config })\n            }),\n            southEastArrowNorthMiddleEast: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.right - (balloonRect.width * .75) + sideOffset,\n                name: 'arrow_nme',\n                ...(config && { config })\n            }),\n            southEastArrowNorthEast: (targetRect, balloonRect) => ({\n                top: getSouthTop(targetRect),\n                left: targetRect.right - balloonRect.width + sideOffset,\n                name: 'arrow_ne',\n                ...(config && { config })\n            }),\n            // ------- West\n            westArrowEast: (targetRect, balloonRect) => ({\n                top: targetRect.top + targetRect.height / 2 - balloonRect.height / 2,\n                left: targetRect.left - balloonRect.width - heightOffset,\n                name: 'arrow_e',\n                ...(config && { config })\n            }),\n            // ------- East\n            eastArrowWest: (targetRect, balloonRect) => ({\n                top: targetRect.top + targetRect.height / 2 - balloonRect.height / 2,\n                left: targetRect.right + heightOffset,\n                name: 'arrow_w',\n                ...(config && { config })\n            }),\n            // ------- Sticky\n            viewportStickyNorth: (targetRect, balloonRect, viewportRect, limiterRect) => {\n                const boundaryRect = limiterRect || viewportRect;\n                if (!targetRect.getIntersection(boundaryRect)) {\n                    return null;\n                }\n                // Engage when the target top and bottom edges are close or off the boundary.\n                // By close, it means there's not enough space for the balloon arrow (offset).\n                if (boundaryRect.height - targetRect.height > stickyVerticalOffset) {\n                    return null;\n                }\n                return {\n                    top: boundaryRect.top + stickyVerticalOffset,\n                    left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n                    name: 'arrowless',\n                    config: {\n                        withArrow: false,\n                        ...config\n                    }\n                };\n            }\n        };\n        /**\n         * Returns the top coordinate for positions starting with `north*`.\n         *\n         * @param targetRect A rect of the target.\n         * @param balloonRect A rect of the balloon.\n         */\n        function getNorthTop(targetRect, balloonRect) {\n            return targetRect.top - balloonRect.height - heightOffset;\n        }\n        /**\n         * Returns the top coordinate for positions starting with `south*`.\n         *\n         * @param targetRect A rect of the target.\n         */\n        function getSouthTop(targetRect) {\n            return targetRect.bottom + heightOffset;\n        }\n    }\n}\n/**\n * A side offset of the arrow tip from the edge of the balloon. Controlled by CSS.\n *\n * ```\n *\t\t ┌───────────────────────┐\n *\t\t │                       │\n *\t\t │         Balloon       │\n *\t\t │         Content       │\n *\t\t │                       │\n *\t\t └──+    +───────────────┘\n *\t\t |   \\  /\n *\t\t |    \\/\n *\t\t>┼─────┼< ─────────────────────── side offset\n *\n * ```\n *\n * @default 25\n */\nBalloonPanelView.arrowSideOffset = 25;\n/**\n * A height offset of the arrow from the edge of the balloon. Controlled by CSS.\n *\n * ```\n *\t\t ┌───────────────────────┐\n *\t\t │                       │\n *\t\t │         Balloon       │\n *\t\t │         Content       │      ╱-- arrow height offset\n *\t\t │                       │      V\n *\t\t └──+    +───────────────┘ --- ─┼───────\n *\t\t     \\  /                       │\n *\t\t      \\/                        │\n *\t\t────────────────────────────────┼───────\n *\t\t                                ^\n *\n *\n *\t\t>┼────┼<  arrow height offset\n *\t\t │    │\n *\t\t │    ┌────────────────────────┐\n *\t\t │    │                        │\n *\t\t │   ╱                         │\n *\t\t │ ╱            Balloon        │\n *\t\t │ ╲            Content        │\n *\t\t │   ╲                         │\n *\t\t │    │                        │\n *\t\t │    └────────────────────────┘\n * ```\n *\n * @default 10\n*/\nBalloonPanelView.arrowHeightOffset = 10;\n/**\n * A vertical offset of the balloon panel from the edge of the viewport if sticky.\n * It helps in accessing toolbar buttons underneath the balloon panel.\n *\n * ```\n *\t\t  ┌───────────────────────────────────────────────────┐\n *\t\t  │                      Target                       │\n *\t\t  │                                                   │\n *\t\t  │                            /── vertical offset    │\n *\t\t┌─────────────────────────────V─────────────────────────┐\n *\t\t│ Toolbar            ┌─────────────┐                    │\n *\t\t├────────────────────│   Balloon   │────────────────────┤\n *\t\t│ │                  └─────────────┘                  │ │\n *\t\t│ │                                                   │ │\n *\t\t│ │                                                   │ │\n *\t\t│ │                                                   │ │\n *\t\t│ └───────────────────────────────────────────────────┘ │\n *\t\t│                        Viewport                       │\n *\t\t└───────────────────────────────────────────────────────┘\n * ```\n *\n * @default 20\n */\nBalloonPanelView.stickyVerticalOffset = 20;\n/**\n * Function used to calculate the optimal position for the balloon.\n */\nBalloonPanelView._getOptimalPosition = getOptimalPosition;\n/**\n * A default set of positioning functions used by the balloon panel view\n * when attaching using the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo} method.\n *\n * The available positioning functions are as follows:\n *\n * **North west**\n *\n * * `northWestArrowSouthWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t V\n *\t\t [ Target ]\n * ```\n *\n * * `northWestArrowSouthMiddleWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t    V\n *\t\t    [ Target ]\n * ```\n *\n * * `northWestArrowSouth`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t         [ Target ]\n * ```\n *\n * * `northWestArrowSouthMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t             [ Target ]\n * ```\n *\n * * `northWestArrowSouthEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                 V\n *\t\t                 [ Target ]\n * ```\n *\n * **North**\n *\n * * `northArrowSouthWest`\n *\n * ```\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n *\t\t     V\n *\t\t[ Target ]\n * ```\n *\n * * `northArrowSouthMiddleWest`\n *\n * ```\n *\t\t +-----------------+\n *\t\t |     Balloon     |\n *\t\t +-----------------+\n *\t\t     V\n *\t\t[ Target ]\n * ```\n * * `northArrowSouth`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t    [ Target ]\n * ```\n *\n * * `northArrowSouthMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t        [ Target ]\n * ```\n *\n * * `northArrowSouthEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                V\n *\t\t           [ Target ]\n * ```\n *\n * **North east**\n *\n * * `northEastArrowSouthWest`\n *\n * ```\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n *\t\t         V\n *\t\t[ Target ]\n * ```\n *\n * * `northEastArrowSouthMiddleWest`\n *\n * ```\n *\t\t     +-----------------+\n *\t\t     |     Balloon     |\n *\t\t     +-----------------+\n *\t\t         V\n *\t\t[ Target ]\n * ```\n *\n * * `northEastArrowSouth`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t[ Target ]\n * ```\n *\n * * `northEastArrowSouthMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t    [ Target ]\n * ```\n *\n * * `northEastArrowSouthEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                 V\n *\t\t        [ Target ]\n * ```\n *\n * **South**\n *\n * * `southArrowNorthWest`\n *\n * ```\n *\t\t[ Target ]\n *\t\t     ^\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n * ```\n *\n * * `southArrowNorthMiddleWest`\n *\n * ```\n *\t\t   [ Target ]\n *\t\t        ^\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n * ```\n *\n * * `southArrowNorth`\n *\n * ```\n *\t\t    [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southArrowNorthMiddleEast`\n *\n * ```\n *\t\t            [ Target ]\n *\t\t                 ^\n *\t\t   +-----------------+\n *\t\t   |     Balloon     |\n *\t\t   +-----------------+\n * ```\n *\n * * `southArrowNorthEast`\n *\n * ```\n *\t\t            [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * **South west**\n *\n * * `southWestArrowNorthWest`\n *\n *\n * ```\n *\t\t [ Target ]\n *\t\t ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southWestArrowNorthMiddleWest`\n *\n * ```\n *\t\t     [ Target ]\n *\t\t     ^\n *\t\t +-----------------+\n *\t\t |     Balloon     |\n *\t\t +-----------------+\n * ```\n *\n * * `southWestArrowNorth`\n *\n * ```\n *\t\t         [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southWestArrowNorthMiddleEast`\n *\n * ```\n *\t\t              [ Target ]\n *\t\t              ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southWestArrowNorthEast`\n *\n * ```\n *\t\t                 [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * **South east**\n *\n * * `southEastArrowNorthWest`\n *\n * ```\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n * ```\n *\n * * `southEastArrowNorthMiddleWest`\n *\n * ```\n *\t\t   [ Target ]\n *\t\t            ^\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n * ```\n *\n * * `southEastArrowNorth`\n *\n * ```\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southEastArrowNorthMiddleEast`\n *\n * ```\n *\t\t     [ Target ]\n *\t\t              ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southEastArrowNorthEast`\n *\n * ```\n *\t\t        [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * **West**\n *\n * * `westArrowEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |>[ Target ]\n *\t\t+-----------------+\n * ```\n *\n * **East**\n *\n * * `eastArrowWest`\n *\n * ```\n *\t\t           +-----------------+\n *\t\t[ Target ]<|     Balloon     |\n *\t\t           +-----------------+\n * ```\n *\n * **Sticky**\n *\n * * `viewportStickyNorth`\n *\n * ```\n *\t\t    +---------------------------+\n *\t\t    |        [ Target ]         |\n *\t\t    |                           |\n *\t\t+-----------------------------------+\n *\t\t|   |    +-----------------+    |   |\n *\t\t|   |    |     Balloon     |    |   |\n *\t\t|   |    +-----------------+    |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   +---------------------------+   |\n *\t\t|             Viewport              |\n *\t\t+-----------------------------------+\n * ```\n *\n * See {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo}.\n *\n * Positioning functions must be compatible with {@link module:utils/dom/position~DomPoint}.\n *\n * Default positioning functions with customized offsets can be generated using\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.generatePositions}.\n *\n * The name that the position function returns will be reflected in the balloon panel's class that\n * controls the placement of the \"arrow\". See {@link #position} to learn more.\n */\nBalloonPanelView.defaultPositions = BalloonPanelView.generatePositions();\nexport default BalloonPanelView;\n/**\n * Returns the DOM element for given object or null, if there is none,\n * e.g. when the passed object is a Rect instance or so.\n */\nfunction getDomElement(object) {\n    if (isElement(object)) {\n        return object;\n    }\n    if (isRange(object)) {\n        return object.commonAncestorContainer;\n    }\n    if (typeof object == 'function') {\n        return getDomElement(object());\n    }\n    return null;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview.js';\nimport '../../../theme/components/dropdown/menu/dropdownmenupanel.css';\n/**\n * Represents the view for the dropdown menu panel.\n */\nexport default class DropdownMenuNestedMenuPanelView extends BalloonPanelView {\n    /**\n     * Creates an instance of the menu panel view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set({\n            isVisible: false,\n            position: 'se',\n            class: null,\n            top: 0,\n            left: 0\n        });\n        this.extendTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck-reset',\n                    'ck-dropdown-menu__nested-menu__panel'\n                ],\n                tabindex: '-1'\n            },\n            on: {\n                // Drag and drop in the panel should not break the selection in the editor.\n                // https://github.com/ckeditor/ckeditor5-ui/issues/228\n                selectstart: bind.to(evt => {\n                    if (evt.target.tagName.toLocaleLowerCase() === 'input') {\n                        return;\n                    }\n                    evt.preventDefault();\n                })\n            }\n        });\n    }\n    /**\n     * Focuses the first child of the panel (default) or the last one if the `direction` is `-1`.\n     *\n     * @param direction The direction to focus. Default is `1`.\n     */\n    focus(direction = 1) {\n        const { content } = this;\n        if (content.length) {\n            if (direction === 1) {\n                content.first.focus();\n            }\n            else {\n                content.last.focus();\n            }\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/menu/dropdownmenunestedmenuview\n */\nimport { FocusTracker, KeystrokeHandler, global } from '@ckeditor/ckeditor5-utils';\nimport DropdownMenuButtonView from './dropdownmenubuttonview.js';\nimport DropdownMenuListView from './dropdownmenulistview.js';\nimport { DropdownMenuPanelPositioningFunctions } from './utils.js';\nimport { DropdownMenuBehaviors } from './dropdownmenubehaviors.js';\nimport View from '../../view.js';\nimport DropdownMenuNestedMenuPanelView from './dropdownmenunestedmenupanelview.js';\nimport '../../../theme/components/dropdown/menu/dropdownmenu.css';\n/**\n * Represents a nested menu view.\n */\nclass DropdownMenuNestedMenuView extends View {\n    /**\n     * Creates a new instance of the DropdownMenuView class.\n     *\n     * @param locale\n     * @param bodyCollection\n     * @param id\n     * @param label The label for the dropdown menu button.\n     * @param parentMenuView The parent dropdown menu view, if any.\n     */\n    constructor(locale, bodyCollection, id, label, parentMenuView) {\n        super(locale);\n        this._bodyCollection = bodyCollection;\n        this.id = id;\n        this.set({\n            isOpen: false,\n            isEnabled: true,\n            panelPosition: 'w',\n            class: undefined,\n            parentMenuView: null\n        });\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.buttonView = new DropdownMenuButtonView(locale);\n        this.buttonView.delegate('mouseenter').to(this);\n        this.buttonView.bind('isOn', 'isEnabled').to(this, 'isOpen', 'isEnabled');\n        this.buttonView.label = label;\n        this.panelView = new DropdownMenuNestedMenuPanelView(locale);\n        this.panelView.isVisible = true;\n        this.listView = new DropdownMenuListView(locale);\n        this.listView.bind('ariaLabel').to(this.buttonView, 'label');\n        this.panelView.content.add(this.listView);\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-dropdown-menu-list__nested-menu',\n                    bind.to('class'),\n                    bind.if('isEnabled', 'ck-disabled', value => !value)\n                ],\n                role: 'presentation'\n            },\n            children: [\n                this.buttonView\n            ]\n        });\n        this.parentMenuView = parentMenuView;\n        if (this.parentMenuView) {\n            this._handleParentMenuView();\n        }\n        this._attachBehaviors();\n    }\n    /**\n     * An array of positioning functions used to determine the position of the dropdown menu panel.\n     * The order of the functions in the array determines the priority of the positions to be tried.\n     * The first function that returns a valid position will be used.\n     *\n     * @returns {Array<PositioningFunction>} An array of positioning functions.\n     * @internal\n     */\n    get _panelPositions() {\n        const { westSouth, eastSouth, westNorth, eastNorth } = DropdownMenuPanelPositioningFunctions;\n        if (this.locale.uiLanguageDirection === 'ltr') {\n            return [eastSouth, eastNorth, westSouth, westNorth];\n        }\n        else {\n            return [westSouth, westNorth, eastSouth, eastNorth];\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.panelView.render();\n        this.focusTracker.add(this.buttonView.element);\n        this.focusTracker.add(this.panelView.element);\n        this.focusTracker.add(this.listView);\n        // Listen for keystrokes coming from within #element.\n        this.keystrokes.listenTo(this.element);\n        this._mountPanelOnOpen();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this._removePanelFromBody();\n        this.panelView.destroy();\n        super.destroy();\n    }\n    /**\n     * @inheritDoc\n     */\n    focus() {\n        this.buttonView.focus();\n    }\n    _handleParentMenuView() {\n        // Propagate events from this component to parent-menu.\n        this.delegate(...DropdownMenuNestedMenuView.DELEGATED_EVENTS).to(this.parentMenuView);\n        // Close this menu if its parent closes.\n        DropdownMenuBehaviors.closeOnParentClose(this, this.parentMenuView);\n    }\n    /**\n     * Attach all keyboard behaviors for the menu view.\n     */\n    _attachBehaviors() {\n        DropdownMenuBehaviors.openOnButtonClick(this);\n        DropdownMenuBehaviors.openAndFocusOnEnterKeyPress(this);\n        DropdownMenuBehaviors.openOnArrowRightKey(this);\n        DropdownMenuBehaviors.closeOnEscKey(this);\n        DropdownMenuBehaviors.closeOnArrowLeftKey(this);\n    }\n    /**\n     * Mounts the portal view in the body when the menu is open and removes it when the menu is closed.\n     * Binds keystrokes to the portal view when the menu is open.\n     */\n    _mountPanelOnOpen() {\n        const { panelView } = this;\n        this.on('change:isOpen', (evt, name, isOpen) => {\n            // Ensure that the event was triggered by this instance.\n            // TODO: Remove checking `evt.source` if `change:isOpen` is no longer delegated.\n            if (evt.source !== this) {\n                return;\n            }\n            // Removes the panel view from the body when the menu is closed.\n            if (!isOpen && this._bodyCollection.has(panelView)) {\n                this._removePanelFromBody();\n                return;\n            }\n            // Adds the panel view to the body when the menu is open.\n            if (isOpen && !this._bodyCollection.has(panelView)) {\n                this._addPanelToBody();\n            }\n        });\n    }\n    /**\n     * Removes the panel view from the editor's body and removes it from the focus tracker.\n     */\n    _removePanelFromBody() {\n        const { panelView, keystrokes } = this;\n        if (this._bodyCollection.has(panelView)) {\n            this._bodyCollection.remove(panelView);\n            keystrokes.stopListening(panelView.element);\n        }\n    }\n    /**\n     * Adds the panel view to the editor's body and sets up event listeners.\n     */\n    _addPanelToBody() {\n        const { panelView, buttonView, keystrokes } = this;\n        if (!this._bodyCollection.has(panelView)) {\n            this._bodyCollection.add(panelView);\n            keystrokes.listenTo(panelView.element);\n            panelView.pin({\n                positions: this._panelPositions,\n                limiter: global.document.body,\n                element: panelView.element,\n                target: buttonView.element,\n                fitInViewport: true\n            });\n        }\n    }\n}\n/**\n * An array of delegated events for the dropdown menu definition controller.\n * These events are delegated to the dropdown menu element.\n */\n// Due to some spaghetti code we need to delegate `change:isOpen`.\nDropdownMenuNestedMenuView.DELEGATED_EVENTS = [\n    'mouseenter', 'execute', 'change:isOpen'\n];\nexport default DropdownMenuNestedMenuView;\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarseparatorview\n */\nimport View from '../view.js';\n/**\n * The toolbar separator view class.\n */\nexport default class ToolbarSeparatorView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar__separator'\n                ]\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarlinebreakview\n */\nimport View from '../view.js';\n/**\n * The toolbar line break view class.\n */\nexport default class ToolbarLineBreakView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar__line-break'\n                ]\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * A helper which executes a native `Event.preventDefault()` if the target of an event equals the\n * {@link module:ui/view~View#element element of the view}. It shortens the definition of a\n * {@link module:ui/view~View#template template}.\n *\n * ```ts\n * // In a class extending View.\n * import preventDefault from '@ckeditor/ckeditor5-ui/src/bindings/preventdefault';\n *\n * // ...\n *\n * this.setTemplate( {\n * \ttag: 'div',\n *\n * \ton: {\n * \t\t// Prevent the default mousedown action on this view.\n * \t\tmousedown: preventDefault( this )\n * \t}\n * } );\n * ```\n *\n * @param view View instance that defines the template.\n */\nexport default function preventDefault(view) {\n    return view.bindTemplate.to(evt => {\n        if (evt.target === view.element) {\n            evt.preventDefault();\n        }\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/normalizetoolbarconfig\n */\n/**\n * Normalizes the toolbar configuration (`config.toolbar`), which:\n *\n * * may be defined as an `Array`:\n *\n * ```\n * toolbar: [ 'heading', 'bold', 'italic', 'link', ... ]\n * ```\n *\n * * or an `Object`:\n *\n * ```\n * toolbar: {\n * \titems: [ 'heading', 'bold', 'italic', 'link', ... ],\n * \tremoveItems: [ 'bold' ],\n * \t...\n * }\n * ```\n *\n * * or may not be defined at all (`undefined`)\n *\n * and returns it in the object form.\n *\n * @param config The value of `config.toolbar`.\n * @returns A normalized toolbar config object.\n */\nexport default function normalizeToolbarConfig(config) {\n    if (Array.isArray(config)) {\n        return {\n            items: config,\n            removeItems: []\n        };\n    }\n    const predefinedConfigOptions = {\n        items: [],\n        removeItems: []\n    };\n    if (!config) {\n        return predefinedConfigOptions;\n    }\n    return {\n        ...predefinedConfigOptions,\n        ...config\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarview\n */\nimport View from '../view.js';\nimport FocusCycler, { isFocusable } from '../focuscycler.js';\nimport ToolbarSeparatorView from './toolbarseparatorview.js';\nimport ToolbarLineBreakView from './toolbarlinebreakview.js';\nimport preventDefault from '../bindings/preventdefault.js';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils.js';\nimport normalizeToolbarConfig from './normalizetoolbarconfig.js';\nimport { FocusTracker, KeystrokeHandler, Rect, ResizeObserver, global, isVisible, logWarning } from '@ckeditor/ckeditor5-utils';\nimport { icons } from '@ckeditor/ckeditor5-core';\nimport { isObject } from 'lodash-es';\nimport '../../theme/components/toolbar/toolbar.css';\nexport const NESTED_TOOLBAR_ICONS = /* #__PURE__ */ (() => ({\n    alignLeft: icons.alignLeft,\n    bold: icons.bold,\n    importExport: icons.importExport,\n    paragraph: icons.paragraph,\n    plus: icons.plus,\n    text: icons.text,\n    threeVerticalDots: icons.threeVerticalDots,\n    pilcrow: icons.pilcrow,\n    dragIndicator: icons.dragIndicator\n}))();\n/**\n * The toolbar view class.\n */\nexport default class ToolbarView extends View {\n    /**\n     * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n     *\n     * Also see {@link #render}.\n     *\n     * @param locale The localization services instance.\n     * @param options Configuration options of the toolbar.\n     */\n    constructor(locale, options) {\n        super(locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        this.options = options || {};\n        this.set('ariaLabel', t('Editor toolbar'));\n        this.set('maxWidth', 'auto');\n        this.items = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.set('class', undefined);\n        this.set('isCompact', false);\n        this.itemsView = new ItemsView(locale);\n        this.children = this.createCollection();\n        this.children.add(this.itemsView);\n        this.focusables = this.createCollection();\n        const isRtl = locale.uiLanguageDirection === 'rtl';\n        this._focusCycler = new FocusCycler({\n            focusables: this.focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate toolbar items backwards using the arrow[left,up] keys.\n                focusPrevious: [isRtl ? 'arrowright' : 'arrowleft', 'arrowup'],\n                // Navigate toolbar items forwards using the arrow[right,down] keys.\n                focusNext: [isRtl ? 'arrowleft' : 'arrowright', 'arrowdown']\n            }\n        });\n        const classes = [\n            'ck',\n            'ck-toolbar',\n            bind.to('class'),\n            bind.if('isCompact', 'ck-toolbar_compact')\n        ];\n        if (this.options.shouldGroupWhenFull && this.options.isFloating) {\n            classes.push('ck-toolbar_floating');\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: classes,\n                role: 'toolbar',\n                'aria-label': bind.to('ariaLabel'),\n                style: {\n                    maxWidth: bind.to('maxWidth')\n                },\n                tabindex: -1\n            },\n            children: this.children,\n            on: {\n                // https://github.com/ckeditor/ckeditor5-ui/issues/206\n                mousedown: preventDefault(this)\n            }\n        });\n        this._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping(this) : new StaticLayout(this);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n        // Children added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            this.focusTracker.add(item);\n        }\n        this.items.on('add', (evt, item) => {\n            this.focusTracker.add(item);\n        });\n        this.items.on('remove', (evt, item) => {\n            this.focusTracker.remove(item);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        this._behavior.render(this);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this._behavior.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n        return super.destroy();\n    }\n    /**\n     * Focuses the first focusable in {@link #focusables}.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the last focusable in {@link #focusables}.\n     */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n     * A utility that expands the plain toolbar configuration into\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n     *\n     * @param itemsOrConfig The toolbar items or the entire toolbar configuration object.\n     * @param factory A factory producing toolbar items.\n     * @param removeItems An array of items names to be removed from the configuration. When present, applies\n     * to this toolbar and all nested ones as well.\n     */\n    fillFromConfig(itemsOrConfig, factory, removeItems) {\n        this.items.addMany(this._buildItemsFromConfig(itemsOrConfig, factory, removeItems));\n    }\n    /**\n     * A utility that expands the plain toolbar configuration into a list of view items using a given component factory.\n     *\n     * @param itemsOrConfig The toolbar items or the entire toolbar configuration object.\n     * @param factory A factory producing toolbar items.\n     * @param removeItems An array of items names to be removed from the configuration. When present, applies\n     * to this toolbar and all nested ones as well.\n     */\n    _buildItemsFromConfig(itemsOrConfig, factory, removeItems) {\n        const config = normalizeToolbarConfig(itemsOrConfig);\n        const normalizedRemoveItems = removeItems || config.removeItems;\n        const itemsToAdd = this._cleanItemsConfiguration(config.items, factory, normalizedRemoveItems)\n            .map(item => {\n            if (isObject(item)) {\n                return this._createNestedToolbarDropdown(item, factory, normalizedRemoveItems);\n            }\n            else if (item === '|') {\n                return new ToolbarSeparatorView();\n            }\n            else if (item === '-') {\n                return new ToolbarLineBreakView();\n            }\n            return factory.create(item);\n        })\n            .filter((item) => !!item);\n        return itemsToAdd;\n    }\n    /**\n     * Cleans up the {@link module:ui/toolbar/toolbarview~ToolbarView#items} of the toolbar by removing unwanted items and\n     * duplicated (obsolete) separators or line breaks.\n     *\n     * @param items The toolbar items configuration.\n     * @param factory A factory producing toolbar items.\n     * @param removeItems An array of items names to be removed from the configuration.\n     * @returns Items after the clean-up.\n     */\n    _cleanItemsConfiguration(items, factory, removeItems) {\n        const filteredItems = items\n            .filter((item, idx, items) => {\n            if (item === '|') {\n                return true;\n            }\n            // Items listed in `config.removeItems` should not be added to the toolbar.\n            if (removeItems.indexOf(item) !== -1) {\n                return false;\n            }\n            if (item === '-') {\n                // The toolbar line breaks must not be rendered when toolbar grouping is enabled.\n                // (https://github.com/ckeditor/ckeditor5/issues/8582)\n                if (this.options.shouldGroupWhenFull) {\n                    /**\n                     * The toolbar multiline breaks (`-` items) only work when the automatic button grouping\n                     * is disabled in the toolbar configuration.\n                     * To do this, set the `shouldNotGroupWhenFull` option to `true` in the editor configuration:\n                     *\n                     * ```ts\n                     * const config = {\n                     * \ttoolbar: {\n                     * \t\titems: [ ... ],\n                     * \t\tshouldNotGroupWhenFull: true\n                     * \t}\n                     * }\n                     * ```\n                     *\n                     * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n                     *\n                     * @error toolbarview-line-break-ignored-when-grouping-items\n                     */\n                    logWarning('toolbarview-line-break-ignored-when-grouping-items', items);\n                    return false;\n                }\n                return true;\n            }\n            // For the items that cannot be instantiated we are sending warning message. We also filter them out.\n            if (!isObject(item) && !factory.has(item)) {\n                /**\n                 * There was a problem processing the configuration of the toolbar. The item with the given\n                 * name does not exist so it was omitted when rendering the toolbar.\n                 *\n                 * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n                 * to provide a toolbar item has not been loaded or there is a typo in the\n                 * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n                 *\n                 * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n                 * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n                 *\n                 * You can use the following snippet to retrieve all available toolbar items:\n                 *\n                 * ```ts\n                 * Array.from( editor.ui.componentFactory.names() );\n                 * ```\n                 *\n                 * @error toolbarview-item-unavailable\n                 * @param item The name of the component or nested toolbar definition.\n                 */\n                logWarning('toolbarview-item-unavailable', { item });\n                return false;\n            }\n            return true;\n        });\n        return this._cleanSeparatorsAndLineBreaks(filteredItems);\n    }\n    /**\n     * Remove leading, trailing, and duplicated separators (`-` and `|`).\n     *\n     * @returns Toolbar items after the separator and line break clean-up.\n     */\n    _cleanSeparatorsAndLineBreaks(items) {\n        const nonSeparatorPredicate = (item) => (item !== '-' && item !== '|');\n        const count = items.length;\n        // Find an index of the first item that is not a separator.\n        const firstCommandItemIndex = items.findIndex(nonSeparatorPredicate);\n        // Items include separators only. There is no point in displaying them.\n        if (firstCommandItemIndex === -1) {\n            return [];\n        }\n        // Search from the end of the list, then convert found index back to the original direction.\n        const lastCommandItemIndex = count - items\n            .slice()\n            .reverse()\n            .findIndex(nonSeparatorPredicate);\n        return items\n            // Return items without the leading and trailing separators.\n            .slice(firstCommandItemIndex, lastCommandItemIndex)\n            // Remove duplicated separators.\n            .filter((name, idx, items) => {\n            // Filter only separators.\n            if (nonSeparatorPredicate(name)) {\n                return true;\n            }\n            const isDuplicated = idx > 0 && items[idx - 1] === name;\n            return !isDuplicated;\n        });\n    }\n    /**\n     * Creates a user-defined dropdown containing a toolbar with items.\n     *\n     * @param definition A definition of the nested toolbar dropdown.\n     * @param definition.label A label of the dropdown.\n     * @param definition.icon An icon of the drop-down. One of 'bold', 'plus', 'text', 'importExport', 'alignLeft',\n     * 'paragraph' or an SVG string. When `false` is passed, no icon will be used.\n     * @param definition.withText When set `true`, the label of the dropdown will be visible. See\n     * {@link module:ui/button/buttonview~ButtonView#withText} to learn more.\n     * @param definition.tooltip A tooltip of the dropdown button. See\n     * {@link module:ui/button/buttonview~ButtonView#tooltip} to learn more. Defaults to `true`.\n     * @param componentFactory Component factory used to create items\n     * of the nested toolbar.\n     */\n    _createNestedToolbarDropdown(definition, componentFactory, removeItems) {\n        let { label, icon, items, tooltip = true, withText = false } = definition;\n        items = this._cleanItemsConfiguration(items, componentFactory, removeItems);\n        // There is no point in rendering a dropdown without items.\n        if (!items.length) {\n            return null;\n        }\n        const locale = this.locale;\n        const dropdownView = createDropdown(locale);\n        if (!label) {\n            /**\n             * A dropdown definition in the toolbar configuration is missing a text label.\n             *\n             * Without a label, the dropdown becomes inaccessible to users relying on assistive technologies.\n             * Make sure the `label` property is set in your drop-down configuration:\n             *\n             * ```json\n             * {\n             * \tlabel: 'A human-readable label',\n             * \ticon: '...',\n             * \titems: [ ... ]\n             * },\n             * ```\n             *\n             * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n             *\n             * @error toolbarview-nested-toolbar-dropdown-missing-label\n             */\n            logWarning('toolbarview-nested-toolbar-dropdown-missing-label', definition);\n        }\n        dropdownView.class = 'ck-toolbar__nested-toolbar-dropdown';\n        dropdownView.buttonView.set({\n            label,\n            tooltip,\n            withText: !!withText\n        });\n        // Allow disabling icon by passing false.\n        if (icon !== false) {\n            // A pre-defined icon picked by name, SVG string, a fallback (default) icon.\n            dropdownView.buttonView.icon = NESTED_TOOLBAR_ICONS[icon] || icon || icons.threeVerticalDots;\n        }\n        // If the icon is disabled, display the label automatically.\n        else {\n            dropdownView.buttonView.withText = true;\n        }\n        addToolbarToDropdown(dropdownView, () => (dropdownView.toolbarView._buildItemsFromConfig(items, componentFactory, removeItems)));\n        return dropdownView;\n    }\n}\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n */\nclass ItemsView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar__items'\n                ]\n            },\n            children: this.children\n        });\n    }\n}\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n */\nclass StaticLayout {\n    /**\n     * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n     * behavior.\n     *\n     * @param view An instance of the toolbar that this behavior is added to.\n     */\n    constructor(view) {\n        const bind = view.bindTemplate;\n        // Static toolbar can be vertical when needed.\n        view.set('isVertical', false);\n        // 1:1 pass–through binding, all ToolbarView#items are visible.\n        view.itemsView.children.bindTo(view.items).using(item => item);\n        // 1:1 pass–through binding, all ToolbarView#items are focusable.\n        view.focusables.bindTo(view.items).using(item => isFocusable(item) ? item : null);\n        view.extendTemplate({\n            attributes: {\n                class: [\n                    // When vertical, the toolbar has an additional CSS class.\n                    bind.if('isVertical', 'ck-toolbar_vertical')\n                ]\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() { }\n    /**\n     * @inheritDoc\n     */\n    destroy() { }\n}\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n * ```\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow -------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n * ```\n */\nclass DynamicGrouping {\n    /**\n     * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n     * behavior.\n     *\n     * @param view An instance of the toolbar that this behavior is added to.\n     */\n    constructor(view) {\n        /**\n         * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n         * and manage items that do not fit into a single row.\n         *\n         * **Note:** Created in {@link #_enableGroupingOnResize}.\n         *\n         * @readonly\n         */\n        this.resizeObserver = null;\n        /**\n         * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n         * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n         * a single toolbar line. This value can be reused between updates because it is unlikely that\n         * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n         *\n         * @readonly\n         */\n        this.cachedPadding = null;\n        /**\n         * A flag indicating that an items grouping update has been queued (e.g. due to the toolbar being visible)\n         * and should be executed immediately the next time the toolbar shows up.\n         *\n         * @readonly\n         */\n        this.shouldUpdateGroupingOnNextResize = false;\n        this.view = view;\n        this.viewChildren = view.children;\n        this.viewFocusables = view.focusables;\n        this.viewItemsView = view.itemsView;\n        this.viewFocusTracker = view.focusTracker;\n        this.viewLocale = view.locale;\n        this.ungroupedItems = view.createCollection();\n        this.groupedItems = view.createCollection();\n        this.groupedItemsDropdown = this._createGroupedItemsDropdown();\n        // Only those items that were not grouped are visible to the user.\n        view.itemsView.children.bindTo(this.ungroupedItems).using(item => item);\n        // Make sure all #items visible in the main space of the toolbar are \"focuscyclable\".\n        this.ungroupedItems.on('change', this._updateFocusCyclableItems.bind(this));\n        // Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n        view.children.on('change', this._updateFocusCyclableItems.bind(this));\n        // ToolbarView#items is dynamic. When an item is added or removed, it should be automatically\n        // represented in either grouped or ungrouped items at the right index.\n        // In other words #items == concat( #ungroupedItems, #groupedItems )\n        // (in length and order).\n        view.items.on('change', (evt, changeData) => {\n            const index = changeData.index;\n            const added = Array.from(changeData.added);\n            // Removing.\n            for (const removedItem of changeData.removed) {\n                if (index >= this.ungroupedItems.length) {\n                    this.groupedItems.remove(removedItem);\n                }\n                else {\n                    this.ungroupedItems.remove(removedItem);\n                }\n            }\n            // Adding.\n            for (let currentIndex = index; currentIndex < index + added.length; currentIndex++) {\n                const addedItem = added[currentIndex - index];\n                if (currentIndex > this.ungroupedItems.length) {\n                    this.groupedItems.add(addedItem, currentIndex - this.ungroupedItems.length);\n                }\n                else {\n                    this.ungroupedItems.add(addedItem, currentIndex);\n                }\n            }\n            // When new ungrouped items join in and land in #ungroupedItems, there's a chance it causes\n            // the toolbar to overflow.\n            // Consequently if removed from grouped or ungrouped items, there is a chance\n            // some new space is available and we could do some ungrouping.\n            this._updateGrouping();\n        });\n        view.extendTemplate({\n            attributes: {\n                class: [\n                    // To group items dynamically, the toolbar needs a dedicated CSS class.\n                    'ck-toolbar_grouping'\n                ]\n            }\n        });\n    }\n    /**\n     * Enables dynamic items grouping based on the dimensions of the toolbar.\n     *\n     * @param view An instance of the toolbar that this behavior is added to.\n     */\n    render(view) {\n        this.viewElement = view.element;\n        this._enableGroupingOnResize();\n        this._enableGroupingOnMaxWidthChange(view);\n    }\n    /**\n     * Cleans up the internals used by this behavior.\n     */\n    destroy() {\n        // The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n        // so let's make sure it's actually destroyed along with the toolbar.\n        this.groupedItemsDropdown.destroy();\n        this.resizeObserver.destroy();\n    }\n    /**\n     * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n     * and it will move them to the {@link #groupedItems} when it happens.\n     *\n     * At the same time, it will also check if there is enough space in the toolbar for the first of the\n     * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n     * without the toolbar wrapping.\n     */\n    _updateGrouping() {\n        // Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n        // for instance before #render(), or after render but without a parent or a parent detached\n        // from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n        // nothing else. This happens, for instance, when the toolbar is detached from DOM and\n        // some logic adds or removes its #items.\n        if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) {\n            return;\n        }\n        // Do not update grouping when the element is invisible. Such toolbar has DOMRect filled with zeros\n        // and that would cause all items to be grouped. Instead, queue the grouping so it runs next time\n        // the toolbar is visible (the next ResizeObserver callback execution). This is handy because\n        // the grouping could be caused by increasing the #maxWidth when the toolbar was invisible and the next\n        // time it shows up, some items could actually be ungrouped (https://github.com/ckeditor/ckeditor5/issues/6575).\n        if (!isVisible(this.viewElement)) {\n            this.shouldUpdateGroupingOnNextResize = true;\n            return;\n        }\n        // Remember how many items were initially grouped so at the it is possible to figure out if the number\n        // of grouped items has changed. If the number has changed, geometry of the toolbar has also changed.\n        const initialGroupedItemsCount = this.groupedItems.length;\n        let wereItemsGrouped;\n        // Group #items as long as some wrap to the next row. This will happen, for instance,\n        // when the toolbar is getting narrow and there is not enough space to display all items in\n        // a single row.\n        while (this._areItemsOverflowing) {\n            this._groupLastItem();\n            wereItemsGrouped = true;\n        }\n        // If none were grouped now but there were some items already grouped before,\n        // then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n        // for instance, the toolbar is stretching and there's more space in it than before.\n        if (!wereItemsGrouped && this.groupedItems.length) {\n            // Ungroup items as long as none are overflowing or there are none to ungroup left.\n            while (this.groupedItems.length && !this._areItemsOverflowing) {\n                this._ungroupFirstItem();\n            }\n            // If the ungrouping ended up with some item wrapping to the next row,\n            // put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n            // an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n            // clean–up is vital for the algorithm.\n            if (this._areItemsOverflowing) {\n                this._groupLastItem();\n            }\n        }\n        if (this.groupedItems.length !== initialGroupedItemsCount) {\n            this.view.fire('groupedItemsUpdate');\n        }\n    }\n    /**\n     * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n     * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n     */\n    get _areItemsOverflowing() {\n        // An empty toolbar cannot overflow.\n        if (!this.ungroupedItems.length) {\n            return false;\n        }\n        const element = this.viewElement;\n        const uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n        const lastChildRect = new Rect(element.lastChild);\n        const toolbarRect = new Rect(element);\n        if (!this.cachedPadding) {\n            const computedStyle = global.window.getComputedStyle(element);\n            const paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n            // parseInt() is essential because of quirky floating point numbers logic and DOM.\n            // If the padding turned out too big because of that, the grouped items dropdown would\n            // always look (from the Rect perspective) like it overflows (while it's not).\n            this.cachedPadding = Number.parseInt(computedStyle[paddingProperty]);\n        }\n        if (uiLanguageDirection === 'ltr') {\n            return lastChildRect.right > toolbarRect.right - this.cachedPadding;\n        }\n        else {\n            return lastChildRect.left < toolbarRect.left + this.cachedPadding;\n        }\n    }\n    /**\n     * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n     * upon resize when there is little space available. Instead, the toolbar items are moved to the\n     * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n     *\n     * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n     * them in the dropdown if necessary. It will also observe the browser window for size changes in\n     * the future and respond to them by grouping more items or reverting already grouped back, depending\n     * on the visual space available.\n     */\n    _enableGroupingOnResize() {\n        let previousWidth;\n        // TODO: Consider debounce.\n        this.resizeObserver = new ResizeObserver(this.viewElement, entry => {\n            if (!previousWidth || previousWidth !== entry.contentRect.width || this.shouldUpdateGroupingOnNextResize) {\n                this.shouldUpdateGroupingOnNextResize = false;\n                this._updateGrouping();\n                previousWidth = entry.contentRect.width;\n            }\n        });\n        this._updateGrouping();\n    }\n    /**\n     * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n     * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n     */\n    _enableGroupingOnMaxWidthChange(view) {\n        view.on('change:maxWidth', () => {\n            this._updateGrouping();\n        });\n    }\n    /**\n     * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n     * to the {@link #groupedItems} collection.\n     *\n     * The opposite of {@link #_ungroupFirstItem}.\n     */\n    _groupLastItem() {\n        if (!this.groupedItems.length) {\n            this.viewChildren.add(new ToolbarSeparatorView());\n            this.viewChildren.add(this.groupedItemsDropdown);\n            this.viewFocusTracker.add(this.groupedItemsDropdown.element);\n        }\n        this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0);\n    }\n    /**\n     * Moves the very first item belonging to {@link #groupedItems} back\n     * to the {@link #ungroupedItems} collection.\n     *\n     * The opposite of {@link #_groupLastItem}.\n     */\n    _ungroupFirstItem() {\n        this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first));\n        if (!this.groupedItems.length) {\n            this.viewChildren.remove(this.groupedItemsDropdown);\n            this.viewChildren.remove(this.viewChildren.last);\n            this.viewFocusTracker.remove(this.groupedItemsDropdown.element);\n        }\n    }\n    /**\n     * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n     * collection when there is not enough space in the toolbar to display all items in a single row.\n     */\n    _createGroupedItemsDropdown() {\n        const locale = this.viewLocale;\n        const t = locale.t;\n        const dropdown = createDropdown(locale);\n        dropdown.class = 'ck-toolbar__grouped-dropdown';\n        // Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n        // (https://github.com/ckeditor/ckeditor5/issues/5608)\n        dropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n        addToolbarToDropdown(dropdown, this.groupedItems);\n        dropdown.buttonView.set({\n            label: t('Show more items'),\n            tooltip: true,\n            tooltipPosition: locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw',\n            icon: icons.threeVerticalDots\n        });\n        return dropdown;\n    }\n    /**\n     * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cyclable items}\n     * collection so it represents the up–to–date state of the UI from the perspective of the user.\n     *\n     * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n     * it must be subject to focus cycling in the toolbar.\n     *\n     * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n     * to learn more about the purpose of this method.\n     */\n    _updateFocusCyclableItems() {\n        this.viewFocusables.clear();\n        this.ungroupedItems.map(item => {\n            if (isFocusable(item)) {\n                this.viewFocusables.add(item);\n            }\n        });\n        if (this.groupedItems.length) {\n            this.viewFocusables.add(this.groupedItemsDropdown);\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/button/splitbuttonview\n */\nimport View from '../../view.js';\nimport ButtonView from '../../button/buttonview.js';\nimport { KeystrokeHandler, FocusTracker } from '@ckeditor/ckeditor5-utils';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport '../../../theme/components/dropdown/splitbutton.css';\n/**\n * The split button view class.\n *\n * ```ts\n * const view = new SplitButtonView();\n *\n * view.set( {\n * \tlabel: 'A button',\n * \tkeystroke: 'Ctrl+B',\n * \ttooltip: true\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n */\nexport default class SplitButtonView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, actionButton) {\n        super(locale);\n        const bind = this.bindTemplate;\n        // Implement the Button interface.\n        this.set('class', undefined);\n        this.set('labelStyle', undefined);\n        this.set('icon', undefined);\n        this.set('isEnabled', true);\n        this.set('isOn', false);\n        this.set('isToggleable', false);\n        this.set('isVisible', true);\n        this.set('keystroke', undefined);\n        this.set('withKeystroke', false);\n        this.set('label', undefined);\n        this.set('tabindex', -1);\n        this.set('tooltip', false);\n        this.set('tooltipPosition', 's');\n        this.set('type', 'button');\n        this.set('withText', false);\n        this.children = this.createCollection();\n        this.actionView = this._createActionView(actionButton);\n        this.arrowView = this._createArrowView();\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-splitbutton',\n                    bind.to('class'),\n                    bind.if('isVisible', 'ck-hidden', value => !value),\n                    this.arrowView.bindTemplate.if('isOn', 'ck-splitbutton_open')\n                ]\n            },\n            children: this.children\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.actionView);\n        this.children.add(this.arrowView);\n        this.focusTracker.add(this.actionView.element);\n        this.focusTracker.add(this.arrowView.element);\n        this.keystrokes.listenTo(this.element);\n        // Overrides toolbar focus cycling behavior.\n        this.keystrokes.set('arrowright', (evt, cancel) => {\n            if (this.focusTracker.focusedElement === this.actionView.element) {\n                this.arrowView.focus();\n                cancel();\n            }\n        });\n        // Overrides toolbar focus cycling behavior.\n        this.keystrokes.set('arrowleft', (evt, cancel) => {\n            if (this.focusTracker.focusedElement === this.arrowView.element) {\n                this.actionView.focus();\n                cancel();\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the {@link module:ui/button/buttonview~ButtonView#element} of the action part of split button.\n     */\n    focus() {\n        this.actionView.focus();\n    }\n    /**\n     * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #actionView} and binds it with main split button\n     * attributes.\n     */\n    _createActionView(actionButton) {\n        const actionView = actionButton || new ButtonView();\n        if (!actionButton) {\n            actionView.bind('icon', 'isEnabled', 'isOn', 'isToggleable', 'keystroke', 'label', 'tabindex', 'tooltip', 'tooltipPosition', 'type', 'withText').to(this);\n        }\n        actionView.extendTemplate({\n            attributes: {\n                class: 'ck-splitbutton__action'\n            }\n        });\n        actionView.delegate('execute').to(this);\n        return actionView;\n    }\n    /**\n     * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #arrowView} and binds it with main split button\n     * attributes.\n     */\n    _createArrowView() {\n        const arrowView = new ButtonView();\n        const bind = arrowView.bindTemplate;\n        arrowView.icon = dropdownArrowIcon;\n        arrowView.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-splitbutton__arrow'\n                ],\n                'data-cke-tooltip-disabled': bind.to('isOn'),\n                'aria-haspopup': true,\n                'aria-expanded': bind.to('isOn', value => String(value))\n            }\n        });\n        arrowView.bind('isEnabled').to(this);\n        arrowView.bind('label').to(this);\n        arrowView.bind('tooltip').to(this);\n        arrowView.delegate('execute').to(this, 'open');\n        return arrowView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/utils\n */\nimport DropdownPanelView from './dropdownpanelview.js';\nimport DropdownView from './dropdownview.js';\nimport DropdownButtonView from './button/dropdownbuttonview.js';\nimport DropdownMenuRootListView from './menu/dropdownmenurootlistview.js';\nimport ToolbarView from '../toolbar/toolbarview.js';\nimport ListView from '../list/listview.js';\nimport ListItemView from '../list/listitemview.js';\nimport ListSeparatorView from '../list/listseparatorview.js';\nimport SplitButtonView from './button/splitbuttonview.js';\nimport SwitchButtonView from '../button/switchbuttonview.js';\nimport ViewCollection from '../viewcollection.js';\nimport clickOutsideHandler from '../bindings/clickoutsidehandler.js';\nimport { global, priorities, logWarning } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\nimport ListItemGroupView from '../list/listitemgroupview.js';\nimport ListItemButtonView from '../button/listitembuttonview.js';\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n * ```ts\n * const dropdown = createDropdown( model );\n *\n * // Configure dropdown's button properties:\n * dropdown.buttonView.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.render();\n *\n * // Will render a dropdown labeled \"A dropdown\" with an empty panel.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * You can also provide other button views (they need to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n * ```ts\n * const dropdown = createDropdown( locale, SplitButtonView );\n *\n * // Configure dropdown's button properties:\n * dropdown.buttonView.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.buttonView.on( 'execute', () => {\n * \t// Add the behavior of the \"action part\" of the split button.\n * \t// Split button consists of the \"action part\" and \"arrow part\".\n * \t// The arrow opens the dropdown while the action part can have some other behavior.\n * } );\n *\n * dropdown.render();\n *\n * // Will render a dropdown labeled \"A dropdown\" with an empty panel.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n * ```ts\n * dropdown.panelView.element.textContent = 'Content of the panel';\n * ```\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param locale The locale instance.\n * @param ButtonClassOrInstance The dropdown button view class. Needs to implement the\n * @param behaviorOptions Attributes for the default behavior of the dropdown.\n *\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns The dropdown view instance.\n */\nexport function createDropdown(locale, ButtonClassOrInstance = DropdownButtonView) {\n    const buttonView = typeof ButtonClassOrInstance == 'function' ? new ButtonClassOrInstance(locale) : ButtonClassOrInstance;\n    const panelView = new DropdownPanelView(locale);\n    const dropdownView = new DropdownView(locale, buttonView, panelView);\n    buttonView.bind('isEnabled').to(dropdownView);\n    if (buttonView instanceof SplitButtonView) {\n        buttonView.arrowView.bind('isOn').to(dropdownView, 'isOpen');\n    }\n    else {\n        buttonView.bind('isOn').to(dropdownView, 'isOpen');\n    }\n    addDefaultBehaviors(dropdownView);\n    return dropdownView;\n}\n/**\n * Adds a menu UI component to a dropdown and sets all common behaviors and interactions between the dropdown and the menu.\n *\n * Use this helper to create multi-level dropdown menus that are displayed in a toolbar.\n *\n * Internally, it creates an instance of {@link module:ui/dropdown/menu/dropdownmenurootlistview~DropdownMenuRootListView}.\n *\n * Example:\n *\n * ```ts\n * const definitions = [\n * \t{\n * \t\tid: 'menu_1',\n * \t\tmenu: 'Menu 1',\n * \t\tchildren: [\n * \t\t\t{\n * \t\t\t\tid: 'menu_1_a',\n * \t\t\t\tlabel: 'Item A'\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tid: 'menu_1_b',\n * \t\t\t\tlabel: 'Item B'\n * \t\t\t}\n * \t\t]\n * \t},\n * \t{\n * \t\tid: 'top_a',\n * \t\tlabel: 'Top Item A'\n * \t},\n * \t{\n * \t\tid: 'top_b',\n * \t\tlabel: 'Top Item B'\n * \t}\n * ];\n *\n * const dropdownView = createDropdown( editor.locale );\n *\n * addMenuToDropdown( dropdownView, editor.ui.view.body, definitions );\n * ```\n *\n * After using this helper, the `dropdown` will fire {@link module:ui/dropdown/dropdownview~DropdownViewEvent `execute`} event when\n * a nested menu button is pressed.\n *\n * The helper will make sure that the `dropdownMenuRootListView` is lazy loaded, i.e., the menu component structure will be initialized\n * and rendered only after the `dropdown` is opened for the first time.\n *\n * @param dropdownView A dropdown instance to which the menu component will be added.\n * @param body Body collection to which floating menu panels will be added.\n * @param definition The menu component definition.\n * @param options.ariaLabel Label used by assistive technologies to describe the top-level menu.\n */\nexport function addMenuToDropdown(dropdownView, body, definition, options = {}) {\n    dropdownView.menuView = new DropdownMenuRootListView(dropdownView.locale, body, definition);\n    dropdownView.focusTracker.add(dropdownView.menuView);\n    if (dropdownView.isOpen) {\n        addMenuToOpenDropdown(dropdownView, options);\n    }\n    else {\n        // Load the UI elements only after the dropdown is opened for the first time - lazy loading.\n        dropdownView.once('change:isOpen', () => {\n            addMenuToOpenDropdown(dropdownView, options);\n        }, { priority: 'highest' });\n    }\n}\nfunction addMenuToOpenDropdown(dropdownView, options) {\n    const dropdownMenuRootListView = dropdownView.menuView;\n    const t = dropdownView.locale.t;\n    dropdownMenuRootListView.delegate('menu:execute').to(dropdownView, 'execute');\n    dropdownMenuRootListView.listenTo(dropdownView, 'change:isOpen', (evt, name, isOpen) => {\n        if (!isOpen) {\n            dropdownMenuRootListView.closeMenus();\n        }\n    }, { priority: 'low' }); // Make sure this is fired after `focusDropdownButtonOnClose` behavior.\n    // When `dropdownMenuRootListView` is added as a `panelView` child, it becomes rendered (`panelView` is rendered at this point).\n    dropdownView.panelView.children.add(dropdownMenuRootListView);\n    // Nested menu panels are added to body collection, so they are not children of the `dropdownView` from DOM perspective.\n    // Add these panels to `dropdownView` focus tracker, so they are treated like part of the `dropdownView` for focus-related purposes.\n    for (const menu of dropdownMenuRootListView.menus) {\n        dropdownView.focusTracker.add(menu);\n    }\n    dropdownMenuRootListView.ariaLabel = options.ariaLabel || t('Dropdown menu');\n}\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n * ```ts\n * const buttonsCreator = () => {\n * \tconst buttons = [];\n *\n * \t// Either create a new ButtonView instance or create existing.\n * \tbuttons.push( new ButtonView() );\n * \tbuttons.push( editor.ui.componentFactory.create( 'someButton' ) );\n * };\n *\n * const dropdown = createDropdown( locale );\n *\n * addToolbarToDropdown( dropdown, buttonsCreator, { isVertical: true } );\n *\n * // Will render a vertical button dropdown labeled \"A button dropdown\"\n * // with a button group in the panel containing two buttons.\n * // Buttons inside the dropdown will be created on first dropdown panel open.\n * dropdown.render()\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * **Note:** To improve the accessibility, you can tell the dropdown to focus the first active button of the toolbar when the dropdown\n * {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open}. See the documentation of `options` to learn more.\n *\n * **Note:** Toolbar view will be created on first open of the dropdown.\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param options.enableActiveItemFocusOnDropdownOpen When set `true`, the focus will automatically move to the first\n * active {@link module:ui/toolbar/toolbarview~ToolbarView#items item} of the toolbar upon\n * {@link module:ui/dropdown/dropdownview~DropdownView#isOpen opening} the dropdown. Active items are those with the `isOn` property set\n * `true` (for instance {@link module:ui/button/buttonview~ButtonView buttons}). If no active items is found, the toolbar will be focused\n * as a whole resulting in the focus moving to its first focusable item (default behavior of\n * {@link module:ui/dropdown/dropdownview~DropdownView}).\n * @param options.ariaLabel Label used by assistive technologies to describe toolbar element.\n * @param options.maxWidth The maximum width of the toolbar element.\n * Details: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n * @param options.class An additional CSS class added to the toolbar element.\n * @param options.isCompact When set true, makes the toolbar look compact with toolbar element.\n * @param options.isVertical Controls the orientation of toolbar items.\n */\nexport function addToolbarToDropdown(dropdownView, buttonsOrCallback, options = {}) {\n    dropdownView.extendTemplate({\n        attributes: {\n            class: ['ck-toolbar-dropdown']\n        }\n    });\n    if (dropdownView.isOpen) {\n        addToolbarToOpenDropdown(dropdownView, buttonsOrCallback, options);\n    }\n    else {\n        dropdownView.once('change:isOpen', () => addToolbarToOpenDropdown(dropdownView, buttonsOrCallback, options), { priority: 'highest' });\n    }\n    if (options.enableActiveItemFocusOnDropdownOpen) {\n        // Accessibility: Focus the first active button in the toolbar when the dropdown gets open.\n        focusChildOnDropdownOpen(dropdownView, () => dropdownView.toolbarView.items.find((item) => item.isOn));\n    }\n}\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n */\nfunction addToolbarToOpenDropdown(dropdownView, buttonsOrCallback, options) {\n    const locale = dropdownView.locale;\n    const t = locale.t;\n    const toolbarView = dropdownView.toolbarView = new ToolbarView(locale);\n    const buttons = typeof buttonsOrCallback == 'function' ? buttonsOrCallback() : buttonsOrCallback;\n    toolbarView.ariaLabel = options.ariaLabel || t('Dropdown toolbar');\n    if (options.maxWidth) {\n        toolbarView.maxWidth = options.maxWidth;\n    }\n    if (options.class) {\n        toolbarView.class = options.class;\n    }\n    if (options.isCompact) {\n        toolbarView.isCompact = options.isCompact;\n    }\n    if (options.isVertical) {\n        toolbarView.isVertical = true;\n    }\n    if (buttons instanceof ViewCollection) {\n        toolbarView.items.bindTo(buttons).using(item => item);\n    }\n    else {\n        toolbarView.items.addMany(buttons);\n    }\n    dropdownView.panelView.children.add(toolbarView);\n    dropdownView.focusTracker.add(toolbarView);\n    toolbarView.items.delegate('execute').to(dropdownView);\n}\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n * ```ts\n * const items = new Collection<ListDropdownItemDefinition>();\n *\n * items.add( {\n * \ttype: 'button',\n * \tmodel: new Model( {\n * \t\twithText: true,\n * \t\tlabel: 'First item',\n * \t\tlabelStyle: 'color: red'\n * \t} )\n * } );\n *\n * items.add( {\n * \t type: 'button',\n * \t model: new Model( {\n * \t\twithText: true,\n * \t\tlabel: 'Second item',\n * \t\tlabelStyle: 'color: green',\n * \t\tclass: 'foo'\n * \t} )\n * } );\n *\n * const dropdown = createDropdown( locale );\n *\n * addListToDropdown( dropdown, items );\n *\n * // Will render a dropdown with a list in the panel containing two items.\n * dropdown.render()\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n * **Note:** To improve the accessibility, when a list is added to the dropdown using this helper the dropdown will automatically attempt\n * to focus the first active item (a host to a {@link module:ui/button/buttonview~ButtonView} with\n * {@link module:ui/button/buttonview~ButtonView#isOn} set `true`) or the very first item when none are active.\n *\n * **Note:** List view will be created on first open of the dropdown.\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param itemsOrCallback A collection of the list item definitions or a callback returning a list item definitions to populate the list.\n * @param options.ariaLabel Label used by assistive technologies to describe list element.\n * @param options.role Will be reflected by the `role` DOM attribute in `ListVIew` and used by assistive technologies.\n */\nexport function addListToDropdown(dropdownView, itemsOrCallback, options = {}) {\n    if (dropdownView.isOpen) {\n        addListToOpenDropdown(dropdownView, itemsOrCallback, options);\n    }\n    else {\n        dropdownView.once('change:isOpen', () => addListToOpenDropdown(dropdownView, itemsOrCallback, options), { priority: 'highest' });\n    }\n    // Accessibility: Focus the first active button in the list when the dropdown gets open.\n    focusChildOnDropdownOpen(dropdownView, () => dropdownView.listView.items.find(item => {\n        if (item instanceof ListItemView) {\n            return item.children.first.isOn;\n        }\n        return false;\n    }));\n}\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n */\nfunction addListToOpenDropdown(dropdownView, itemsOrCallback, options) {\n    const locale = dropdownView.locale;\n    const listView = dropdownView.listView = new ListView(locale);\n    const items = typeof itemsOrCallback == 'function' ? itemsOrCallback() : itemsOrCallback;\n    listView.ariaLabel = options.ariaLabel;\n    listView.role = options.role;\n    bindViewCollectionItemsToDefinitions(dropdownView, listView.items, items, locale);\n    dropdownView.panelView.children.add(listView);\n    listView.items.delegate('execute').to(dropdownView);\n}\n/**\n * A helper to be used on an existing {@link module:ui/dropdown/dropdownview~DropdownView} that focuses\n * a specific child in DOM when the dropdown {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open}.\n *\n * @param dropdownView A dropdown instance to which the focus behavior will be added.\n * @param childSelectorCallback A callback executed when the dropdown gets open. It should return a {@link module:ui/view~View}\n * instance (child of {@link module:ui/dropdown/dropdownview~DropdownView#panelView}) that will get focused or a falsy value.\n * If falsy value is returned, a default behavior of the dropdown will engage focusing the first focusable child in\n * the {@link module:ui/dropdown/dropdownview~DropdownView#panelView}.\n */\nexport function focusChildOnDropdownOpen(dropdownView, childSelectorCallback) {\n    dropdownView.on('change:isOpen', () => {\n        if (!dropdownView.isOpen) {\n            return;\n        }\n        const childToFocus = childSelectorCallback();\n        if (!childToFocus) {\n            return;\n        }\n        if (typeof childToFocus.focus === 'function') {\n            childToFocus.focus();\n        }\n        else {\n            /**\n             * The child view of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} is missing the `focus()` method\n             * and could not be focused when the dropdown got {@link module:ui/dropdown/dropdownview~DropdownView#isOpen open}.\n             *\n             * Making the content of a dropdown focusable in this case greatly improves the accessibility. Please make the view instance\n             * implements the {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable focusable interface} for the best user\n             * experience.\n             *\n             * @error ui-dropdown-focus-child-on-open-child-missing-focus\n             * @param {module:ui/view~View} view\n             */\n            logWarning('ui-dropdown-focus-child-on-open-child-missing-focus', { view: childToFocus });\n        }\n        // * Let the panel show up first (do not focus an invisible element).\n        // * Execute after focusDropdownPanelOnOpen(). See focusDropdownPanelOnOpen() to learn more.\n    }, { priority: priorities.low - 10 });\n}\n/**\n * Add a set of default behaviors to dropdown view.\n */\nfunction addDefaultBehaviors(dropdownView) {\n    closeDropdownOnClickOutside(dropdownView);\n    closeDropdownOnExecute(dropdownView);\n    closeDropdownOnBlur(dropdownView);\n    focusDropdownContentsOnArrows(dropdownView);\n    focusDropdownButtonOnClose(dropdownView);\n    focusDropdownPanelOnOpen(dropdownView);\n}\n/**\n * Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n */\nfunction closeDropdownOnClickOutside(dropdownView) {\n    clickOutsideHandler({\n        emitter: dropdownView,\n        activator: () => dropdownView.isRendered && dropdownView.isOpen,\n        callback: () => {\n            dropdownView.isOpen = false;\n        },\n        contextElements: () => [\n            dropdownView.element,\n            // Include all elements connected to the dropdown's focus tracker, but exclude those that are direct children\n            // of DropdownView#element. They would be identified as descendants of #element anyway upon clicking and would\n            // not contribute to the logic.\n            ...getFocusTrackerTreeElements(dropdownView.focusTracker).filter(element => !dropdownView.element.contains(element))\n        ]\n    });\n}\n/**\n * Returns all DOM elements connected to a DropdownView's focus tracker, either directly (same DOM sub-tree)\n * or indirectly (external views registered in the focus tracker).\n */\nfunction getFocusTrackerTreeElements(focusTracker) {\n    return [\n        ...focusTracker.elements,\n        ...focusTracker.externalViews.flatMap(view => getFocusTrackerTreeElements(view.focusTracker))\n    ];\n}\n/**\n * Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n */\nfunction closeDropdownOnExecute(dropdownView) {\n    // Close the dropdown when one of the list items has been executed.\n    dropdownView.on('execute', evt => {\n        // Toggling a switch button view should not close the dropdown.\n        if (evt.source instanceof SwitchButtonView) {\n            return;\n        }\n        dropdownView.isOpen = false;\n    });\n}\n/**\n * Adds a behavior to a dropdown view that closes opened dropdown when it loses focus.\n */\nfunction closeDropdownOnBlur(dropdownView) {\n    dropdownView.focusTracker.on('change:isFocused', (evt, name, isFocused) => {\n        if (isFocused || !dropdownView.isOpen) {\n            return;\n        }\n        dropdownView.isOpen = false;\n    });\n}\n/**\n * Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n */\nfunction focusDropdownContentsOnArrows(dropdownView) {\n    // If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n    dropdownView.keystrokes.set('arrowdown', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focus();\n            cancel();\n        }\n    });\n    // If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n    dropdownView.keystrokes.set('arrowup', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focusLast();\n            cancel();\n        }\n    });\n}\n/**\n * Adds a behavior that focuses the #buttonView when the dropdown was closed but focus was within the #panelView element.\n * This makes sure the focus is never lost.\n */\nfunction focusDropdownButtonOnClose(dropdownView) {\n    dropdownView.on('change:isOpen', (evt, name, isOpen) => {\n        if (isOpen) {\n            return;\n        }\n        const elements = dropdownView.focusTracker.elements;\n        // If the dropdown was closed, move the focus back to the button (#12125).\n        // Don't touch the focus, if it moved somewhere else (e.g. moved to the editing root on #execute) (#12178).\n        // Note: Don't use the state of the DropdownView#focusTracker here. It fires #blur with the timeout.\n        if (elements.some(element => element.contains(global.document.activeElement))) {\n            dropdownView.buttonView.focus();\n        }\n    });\n}\n/**\n * Adds a behavior that focuses the #panelView when dropdown gets open (accessibility).\n */\nfunction focusDropdownPanelOnOpen(dropdownView) {\n    dropdownView.on('change:isOpen', (evt, name, isOpen) => {\n        if (!isOpen) {\n            return;\n        }\n        // Focus the first item in the dropdown when the dropdown opened.\n        dropdownView.panelView.focus();\n        // * Let the panel show up first (do not focus an invisible element).\n        // * Also, execute before focusChildOnDropdownOpen() to make sure this helper does not break the\n        //   focus of a specific child by kicking in too late and resetting the focus in the panel.\n    }, { priority: 'low' });\n}\n/**\n * This helper populates a dropdown list with items and groups according to the\n * collection of item definitions. A permanent binding is created in this process allowing\n * dynamic management of the dropdown list content.\n *\n * @param dropdownView\n * @param listItems\n * @param definitions\n * @param locale\n */\nfunction bindViewCollectionItemsToDefinitions(dropdownView, listItems, definitions, locale) {\n    // List item checkboxes have a reserved space for the check icon, so we need to know if there are any checkboxes in the list\n    // to adjust the layout accordingly. It'd look weird if the items on the list were not aligned horizontally.\n    //\n    // Possible theoretical performance problem if many items are added one by one, as this will be called for each item.\n    listItems.on('change', () => {\n        // Filter-map. Check all items, leave only these that have buttons and return the buttons.\n        const listItemButtons = [...listItems].reduce((acc, item) => {\n            if (item instanceof ListItemView && item.children.first instanceof ListItemButtonView) {\n                acc.push(item.children.first);\n            }\n            return acc;\n        }, []);\n        const hasAnyCheckboxOnList = listItemButtons.some(button => button.isToggleable);\n        listItemButtons.forEach(item => {\n            item.hasCheckSpace = hasAnyCheckboxOnList;\n        });\n    });\n    listItems.bindTo(definitions).using(def => {\n        if (def.type === 'separator') {\n            return new ListSeparatorView(locale);\n        }\n        else if (def.type === 'group') {\n            const groupView = new ListItemGroupView(locale);\n            groupView.set({ label: def.label });\n            bindViewCollectionItemsToDefinitions(dropdownView, groupView.items, def.items, locale);\n            groupView.items.delegate('execute').to(dropdownView);\n            return groupView;\n        }\n        else if (def.type === 'button' || def.type === 'switchbutton') {\n            const isToggleable = def.model.role === 'menuitemcheckbox' || def.model.role === 'menuitemradio';\n            const listItemView = new ListItemView(locale);\n            let buttonView;\n            if (def.type === 'button') {\n                buttonView = new ListItemButtonView(locale);\n                buttonView.set({\n                    isToggleable\n                });\n            }\n            else {\n                buttonView = new SwitchButtonView(locale);\n            }\n            // Bind all model properties to the button view.\n            buttonView.bind(...Object.keys(def.model)).to(def.model);\n            buttonView.delegate('execute').to(listItemView);\n            listItemView.children.add(buttonView);\n            return listItemView;\n        }\n        return null;\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/labeledfield/utils\n */\nimport InputTextView from '../inputtext/inputtextview.js';\nimport InputNumberView from '../inputnumber/inputnumberview.js';\nimport TextareaView from '../textarea/textareaview.js';\nimport { createDropdown } from '../dropdown/utils.js';\n/**\n * A helper for creating labeled inputs.\n *\n * It creates an instance of a {@link module:ui/inputtext/inputtextview~InputTextView input text} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input.\n *\n * Usage:\n *\n * ```ts\n * const labeledInputView = new LabeledFieldView( locale, createLabeledInputText );\n * console.log( labeledInputView.fieldView ); // A text input instance.\n * ```\n *\n * @param labeledFieldView The instance of the labeled field view.\n * @param viewUid A UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param statusUid A UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns The input text view instance.\n */\nconst createLabeledInputText = (labeledFieldView, viewUid, statusUid) => {\n    const inputView = new InputTextView(labeledFieldView.locale);\n    inputView.set({\n        id: viewUid,\n        ariaDescribedById: statusUid\n    });\n    inputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n    inputView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n    inputView.on('input', () => {\n        // UX: Make the error text disappear and disable the error indicator as the user\n        // starts fixing the errors.\n        labeledFieldView.errorText = null;\n    });\n    labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(inputView);\n    return inputView;\n};\n/**\n * A helper for creating labeled number inputs.\n *\n * It creates an instance of a {@link module:ui/inputnumber/inputnumberview~InputNumberView input number} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input.\n *\n * Usage:\n *\n * ```ts\n * const labeledInputView = new LabeledFieldView( locale, createLabeledInputNumber );\n * console.log( labeledInputView.fieldView ); // A number input instance.\n * ```\n *\n * @param labeledFieldView The instance of the labeled field view.\n * @param viewUid A UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param statusUid A UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns The input number view instance.\n */\nconst createLabeledInputNumber = (labeledFieldView, viewUid, statusUid) => {\n    const inputView = new InputNumberView(labeledFieldView.locale);\n    inputView.set({\n        id: viewUid,\n        ariaDescribedById: statusUid,\n        inputMode: 'numeric'\n    });\n    inputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n    inputView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n    inputView.on('input', () => {\n        // UX: Make the error text disappear and disable the error indicator as the user\n        // starts fixing the errors.\n        labeledFieldView.errorText = null;\n    });\n    labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(inputView);\n    return inputView;\n};\n/**\n * A helper for creating labeled textarea.\n *\n * It creates an instance of a {@link module:ui/textarea/textareaview~TextareaView textarea} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets textarea's `id` and `ariaDescribedById` attributes.\n * * It binds textarea's `isReadOnly` to the labeled view.\n * * It binds textarea's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the textarea.\n *\n * Usage:\n *\n * ```ts\n * const labeledTextarea = new LabeledFieldView( locale, createLabeledTextarea );\n * console.log( labeledTextarea.fieldView ); // A textarea instance.\n * ```\n *\n * @param labeledFieldView The instance of the labeled field view.\n * @param viewUid A UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the textarea.\n * @param statusUid A UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the textarea.\n * @returns The textarea view instance.\n */\nconst createLabeledTextarea = (labeledFieldView, viewUid, statusUid) => {\n    const textareaView = new TextareaView(labeledFieldView.locale);\n    textareaView.set({\n        id: viewUid,\n        ariaDescribedById: statusUid\n    });\n    textareaView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n    textareaView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n    textareaView.on('input', () => {\n        // UX: Make the error text disappear and disable the error indicator as the user\n        // starts fixing the errors.\n        labeledFieldView.errorText = null;\n    });\n    labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(textareaView);\n    return textareaView;\n};\n/**\n * A helper for creating labeled dropdowns.\n *\n * It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled field view}.\n *\n * The helper does the following:\n *\n * * It sets dropdown's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isEnabled` to the labeled view.\n *\n * Usage:\n *\n * ```ts\n * const labeledInputView = new LabeledFieldView( locale, createLabeledDropdown );\n * console.log( labeledInputView.fieldView ); // A dropdown instance.\n * ```\n *\n * @param labeledFieldView The instance of the labeled field view.\n * @param viewUid A UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view label} and the dropdown.\n * @param statusUid A UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view status} and the dropdown.\n * @returns The dropdown view instance.\n */\nconst createLabeledDropdown = (labeledFieldView, viewUid, statusUid) => {\n    const dropdownView = createDropdown(labeledFieldView.locale);\n    dropdownView.set({\n        id: viewUid,\n        ariaDescribedById: statusUid\n    });\n    dropdownView.bind('isEnabled').to(labeledFieldView);\n    return dropdownView;\n};\nexport { createLabeledInputNumber, createLabeledInputText, createLabeledTextarea, createLabeledDropdown };\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorpicker/colorpickerview\n */\nimport { convertColor, convertToHex, registerCustomElement } from './utils.js';\nimport { global, env } from '@ckeditor/ckeditor5-utils';\nimport { debounce } from 'lodash-es';\nimport View from '../view.js';\nimport LabeledFieldView from '../labeledfield/labeledfieldview.js';\nimport { createLabeledInputText } from '../labeledfield/utils.js';\n// Custom export due to https://github.com/ckeditor/ckeditor5/issues/15698.\nimport { HexBase } from 'vanilla-colorful/lib/entrypoints/hex';\nimport '../../theme/components/colorpicker/colorpicker.css';\nconst waitingTime = 150;\n/**\n * A class which represents a color picker with an input field for defining custom colors.\n */\nexport default class ColorPickerView extends View {\n    /**\n     * Creates a view of color picker.\n     *\n     * @param locale\n     * @param config\n     */\n    constructor(locale, config = {}) {\n        super(locale);\n        this.set({\n            color: '',\n            _hexColor: ''\n        });\n        this.hexInputRow = this._createInputRow();\n        const children = this.createCollection();\n        if (!config.hideInput) {\n            children.add(this.hexInputRow);\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck', 'ck-color-picker'],\n                tabindex: -1\n            },\n            children\n        });\n        this._config = config;\n        this._debounceColorPickerEvent = debounce((color) => {\n            // At first, set the color internally in the component. It's converted to the configured output format.\n            this.set('color', color);\n            // Then let the outside world know that the user changed the color.\n            this.fire('colorSelected', { color: this.color });\n        }, waitingTime, {\n            leading: true\n        });\n        // The `color` property holds the color in the configured output format.\n        // Ensure it before actually setting the value.\n        this.on('set:color', (evt, propertyName, newValue) => {\n            evt.return = convertColor(newValue, this._config.format || 'hsl');\n        });\n        // The `_hexColor` property is bound to the `color` one, but requires conversion.\n        this.on('change:color', () => {\n            this._hexColor = convertColorToCommonHexFormat(this.color);\n        });\n        this.on('change:_hexColor', () => {\n            // Update the selected color in the color picker palette when it's not focused.\n            // It means the user typed the color in the input.\n            if (document.activeElement !== this.picker) {\n                this.picker.setAttribute('color', this._hexColor);\n            }\n            // There has to be two way binding between properties.\n            // Extra precaution has to be taken to trigger change back only when the color really changes.\n            if (convertColorToCommonHexFormat(this.color) != convertColorToCommonHexFormat(this._hexColor)) {\n                this.color = this._hexColor;\n            }\n        });\n    }\n    /**\n     * Renders color picker in the view.\n     */\n    render() {\n        super.render();\n        // Extracted to the helper to make it testable.\n        registerCustomElement('hex-color-picker', HexBase);\n        this.picker = global.document.createElement('hex-color-picker');\n        this.picker.setAttribute('class', 'hex-color-picker');\n        this.picker.setAttribute('tabindex', '-1');\n        this._createSlidersView();\n        if (this.element) {\n            if (this.hexInputRow.element) {\n                this.element.insertBefore(this.picker, this.hexInputRow.element);\n            }\n            else {\n                this.element.appendChild(this.picker);\n            }\n            // Create custom stylesheet with a look of focused pointer in color picker and append it into the color picker shadowDom\n            const styleSheetForFocusedColorPicker = document.createElement('style');\n            styleSheetForFocusedColorPicker.textContent = '[role=\"slider\"]:focus [part$=\"pointer\"] {' +\n                'border: 1px solid #fff;' +\n                'outline: 1px solid var(--ck-color-focus-border);' +\n                'box-shadow: 0 0 0 2px #fff;' +\n                '}';\n            this.picker.shadowRoot.appendChild(styleSheetForFocusedColorPicker);\n        }\n        this.picker.addEventListener('color-changed', event => {\n            const color = event.detail.value;\n            this._debounceColorPickerEvent(color);\n        });\n    }\n    /**\n     * Focuses the first pointer in color picker.\n     *\n     */\n    focus() {\n        // In some browsers we need to move the focus to the input first.\n        // Otherwise, the color picker doesn't behave as expected.\n        // In FF, after selecting the color via slider, it instantly moves back to the previous color.\n        // In all iOS browsers and desktop Safari, once the saturation slider is moved for the first time,\n        // editor collapses the selection and doesn't apply the color change.\n        // See: https://github.com/cksource/ckeditor5-internal/issues/3245, https://github.com/ckeditor/ckeditor5/issues/14119,\n        // https://github.com/cksource/ckeditor5-internal/issues/3268.\n        /* istanbul ignore next -- @preserve */\n        if (!this._config.hideInput && (env.isGecko || env.isiOS || env.isSafari)) {\n            const input = this.hexInputRow.children.get(1);\n            input.focus();\n        }\n        const firstSlider = this.slidersView.first;\n        firstSlider.focus();\n    }\n    /**\n     * Creates collection of sliders in color picker.\n     *\n     * @private\n     */\n    _createSlidersView() {\n        const colorPickersChildren = [...this.picker.shadowRoot.children];\n        const sliders = colorPickersChildren.filter(item => item.getAttribute('role') === 'slider');\n        const slidersView = sliders.map(slider => {\n            const view = new SliderView(slider);\n            return view;\n        });\n        this.slidersView = this.createCollection();\n        slidersView.forEach(item => {\n            this.slidersView.add(item);\n        });\n    }\n    /**\n     * Creates input row for defining custom colors in color picker.\n     *\n     * @private\n     */\n    _createInputRow() {\n        const colorInput = this._createColorInput();\n        return new ColorPickerInputRowView(this.locale, colorInput);\n    }\n    /**\n     * Creates the input where user can type or paste the color in hex format.\n     *\n     * @private\n     */\n    _createColorInput() {\n        const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n        const { t } = this.locale;\n        labeledInput.set({\n            label: t('HEX'),\n            class: 'color-picker-hex-input'\n        });\n        labeledInput.fieldView.bind('value').to(this, '_hexColor', pickerColor => {\n            if (labeledInput.isFocused) {\n                // Text field shouldn't be updated with color change if the text field is focused.\n                // Imagine user typing hex code and getting the value of field changed.\n                return labeledInput.fieldView.value;\n            }\n            else {\n                return pickerColor.startsWith('#') ? pickerColor.substring(1) : pickerColor;\n            }\n        });\n        // Only accept valid hex colors as input.\n        labeledInput.fieldView.on('input', () => {\n            const inputValue = labeledInput.fieldView.element.value;\n            if (inputValue) {\n                const maybeHexColor = tryParseHexColor(inputValue);\n                if (maybeHexColor) {\n                    // If so, set the color.\n                    // Otherwise, do nothing.\n                    this._debounceColorPickerEvent(maybeHexColor);\n                }\n            }\n        });\n        return labeledInput;\n    }\n    /**\n     * Validates the view and returns `false` when some fields are invalid.\n     */\n    isValid() {\n        const { t } = this.locale;\n        // If the input is hidden, it's always valid, because there is no way to select\n        // invalid color value using diagram color picker.\n        if (this._config.hideInput) {\n            return true;\n        }\n        this.resetValidationStatus();\n        // One error per field is enough.\n        if (!this.hexInputRow.getParsedColor()) {\n            // Apply updated error.\n            this.hexInputRow.inputView.errorText = t('Please enter a valid color (e.g. \"ff0000\").');\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Cleans up the supplementary error and information text of input inside the {@link #hexInputRow}\n     * bringing them back to the state when the form has been displayed for the first time.\n     *\n     * See {@link #isValid}.\n     */\n    resetValidationStatus() {\n        this.hexInputRow.inputView.errorText = null;\n    }\n}\n// Converts any color format to a unified hex format.\n//\n// @param inputColor\n// @returns An unified hex string.\nfunction convertColorToCommonHexFormat(inputColor) {\n    let ret = convertToHex(inputColor);\n    if (!ret) {\n        ret = '#000';\n    }\n    if (ret.length === 4) {\n        // Unfold shortcut format.\n        ret = '#' + [ret[1], ret[1], ret[2], ret[2], ret[3], ret[3]].join('');\n    }\n    return ret.toLowerCase();\n}\n// View abstraction over pointer in color picker.\nclass SliderView extends View {\n    /**\n     * @param element HTML element of slider in color picker.\n     */\n    constructor(element) {\n        super();\n        this.element = element;\n    }\n    /**\n     * Focuses element.\n     */\n    focus() {\n        this.element.focus();\n    }\n}\n// View abstraction over the `#` character before color input.\nclass HashView extends View {\n    constructor(locale) {\n        super(locale);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-color-picker__hash-view'\n                ]\n            },\n            children: '#'\n        });\n    }\n}\n// The class representing a row containing hex color input field.\n// **Note**: For now this class is private. When more use cases appear (beyond `ckeditor5-table` and `ckeditor5-image`),\n// it will become a component in `ckeditor5-ui`.\n//\n// @private\nclass ColorPickerInputRowView extends View {\n    /**\n     * Creates an instance of the form row class.\n     *\n     * @param locale The locale instance.\n     * @param inputView Hex color input element.\n     */\n    constructor(locale, inputView) {\n        super(locale);\n        this.inputView = inputView;\n        this.children = this.createCollection([\n            new HashView(),\n            this.inputView\n        ]);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-color-picker__row'\n                ]\n            },\n            children: this.children\n        });\n    }\n    /**\n     * Returns false if color input value is not in hex format.\n     */\n    getParsedColor() {\n        return tryParseHexColor(this.inputView.fieldView.element.value);\n    }\n}\n/**\n * Trim spaces from provided color and check if hex is valid.\n *\n * @param color Unsafe color string.\n * @returns Null if provided color is not hex value.\n * @export\n */\nexport function tryParseHexColor(color) {\n    if (!color) {\n        return null;\n    }\n    const hashLessColor = color.trim().replace(/^#/, '');\n    // Incorrect length.\n    if (![3, 4, 6, 8].includes(hashLessColor.length)) {\n        return null;\n    }\n    // Incorrect characters.\n    if (!/^(([0-9a-fA-F]{2}){3,4}|([0-9a-fA-F]){3,4})$/.test(hashLessColor)) {\n        return null;\n    }\n    return `#${hashLessColor}`;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Collection, ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * A collection to store document colors. It enforces colors to be unique.\n */\nexport default class DocumentColorCollection extends /* #__PURE__ */ ObservableMixin((Collection)) {\n    constructor(options) {\n        super(options);\n        this.set('isEmpty', true);\n        this.on('change', () => {\n            this.set('isEmpty', this.length === 0);\n        });\n    }\n    /**\n     * Adds a color to the document color collection.\n     *\n     * This method ensures that no color duplicates are inserted (compared using\n     * the color value of the {@link module:ui/colorgrid/colorgridview~ColorDefinition}).\n     *\n     * If the item does not have an ID, it will be automatically generated and set on the item.\n     *\n     * @param index The position of the item in the collection. The item is pushed to the collection when `index` is not specified.\n     * @fires add\n     * @fires change\n     */\n    add(item, index) {\n        if (this.find(element => element.color === item.color)) {\n            // No duplicates are allowed.\n            return this;\n        }\n        return super.add(item, index);\n    }\n    /**\n     * Checks if an object with given colors is present in the document color collection.\n     */\n    hasColor(color) {\n        return !!this.find(item => item.color === color);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorselector/colorselectorview\n */\nimport FocusCycler from '../focuscycler.js';\nimport View from '../view.js';\nimport ViewCollection from '../viewcollection.js';\nimport { FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\nimport ColorGridsFragmentView from './colorgridsfragmentview.js';\nimport ColorPickerFragmentView from './colorpickerfragmentview.js';\nimport '../../theme/components/colorselector/colorselector.css';\n/**\n * The configurable color selector view class. It allows users to select colors from a predefined set of colors as well as from\n * a color picker.\n *\n * This meta-view is is made of two components (fragments):\n *\n * * {@link module:ui/colorselector/colorselectorview~ColorSelectorView#colorGridsFragmentView},\n * * {@link module:ui/colorselector/colorselectorview~ColorSelectorView#colorPickerFragmentView}.\n *\n * ```ts\n * const colorDefinitions = [\n * \t{ color: '#000', label: 'Black', options: { hasBorder: false } },\n * \t{ color: 'rgb(255, 255, 255)', label: 'White', options: { hasBorder: true } },\n * \t{ color: 'red', label: 'Red', options: { hasBorder: false } }\n * ];\n *\n * const selectorView = new ColorSelectorView( locale, {\n * \tcolors: colorDefinitions,\n * \tcolumns: 5,\n * \tremoveButtonLabel: 'Remove color',\n * \tdocumentColorsLabel: 'Document colors',\n * \tdocumentColorsCount: 4,\n * \tcolorPickerViewConfig: {\n * \t\tformat: 'hsl'\n * \t}\n * } );\n *\n * selectorView.appendUI();\n * selectorView.selectedColor = 'red';\n * selectorView.updateSelectedColors();\n *\n * selectorView.on<ColorSelectorExecuteEvent>( 'execute', ( evt, data ) => {\n * \tconsole.log( 'Color changed', data.value, data.source );\n * } );\n *\n * selectorView.on<ColorSelectorColorPickerShowEvent>( 'colorPicker:show', ( evt ) => {\n * \tconsole.log( 'Color picker showed up', evt );\n * } );\n *\n * selectorView.on<ColorSelectorColorPickerCancelEvent>( 'colorPicker:cancel', ( evt ) => {\n * \tconsole.log( 'Color picker cancel', evt );\n * } );\n *\n * selectorView.render();\n *\n * document.body.appendChild( selectorView.element );\n * ```\n */\nexport default class ColorSelectorView extends View {\n    /**\n     * Creates a view to be inserted as a child of {@link module:ui/dropdown/dropdownview~DropdownView}.\n     *\n     * @param locale The localization services instance.\n     * @param colors An array with definitions of colors to be displayed in the table.\n     * @param columns The number of columns in the color grid.\n     * @param removeButtonLabel The label of the button responsible for removing the color.\n     * @param colorPickerLabel The label of the button responsible for color picker appearing.\n     * @param documentColorsLabel The label for the section with the document colors.\n     * @param documentColorsCount The number of colors in the document colors section inside the color dropdown.\n     * @param colorPickerViewConfig The configuration of color picker feature. If set to `false`, the color picker will be hidden.\n     */\n    constructor(locale, { colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount, colorPickerLabel, colorPickerViewConfig }) {\n        super(locale);\n        this.items = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this._focusables = new ViewCollection();\n        this._colorPickerViewConfig = colorPickerViewConfig;\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate list items backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate list items forwards using the <kbd>Tab</kbd> key.\n                focusNext: 'tab'\n            }\n        });\n        this.colorGridsFragmentView = new ColorGridsFragmentView(locale, {\n            colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount, colorPickerLabel,\n            focusTracker: this.focusTracker,\n            focusables: this._focusables\n        });\n        this.colorPickerFragmentView = new ColorPickerFragmentView(locale, {\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokes: this.keystrokes,\n            colorPickerViewConfig\n        });\n        this.set('_isColorGridsFragmentVisible', true);\n        this.set('_isColorPickerFragmentVisible', false);\n        this.set('selectedColor', undefined);\n        this.colorGridsFragmentView.bind('isVisible').to(this, '_isColorGridsFragmentVisible');\n        this.colorPickerFragmentView.bind('isVisible').to(this, '_isColorPickerFragmentVisible');\n        /**\n         * This is kind of bindings. Unfortunately we could not use this.bind() method because the same property\n         * can not be bound twice. So this is work around how to bind 'selectedColor' property between components.\n         */\n        this.on('change:selectedColor', (evt, evtName, data) => {\n            this.colorGridsFragmentView.set('selectedColor', data);\n            this.colorPickerFragmentView.set('selectedColor', data);\n        });\n        this.colorGridsFragmentView.on('change:selectedColor', (evt, evtName, data) => {\n            this.set('selectedColor', data);\n        });\n        this.colorPickerFragmentView.on('change:selectedColor', (evt, evtName, data) => {\n            this.set('selectedColor', data);\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-color-selector'\n                ]\n            },\n            children: this.items\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Renders the internals of the component on demand:\n     * * {@link #colorPickerFragmentView},\n     * * {@link #colorGridsFragmentView}.\n     *\n     * It allows for deferring component initialization to improve the performance.\n     *\n     * See {@link #showColorPickerFragment}, {@link #showColorGridsFragment}.\n     */\n    appendUI() {\n        this._appendColorGridsFragment();\n        if (this._colorPickerViewConfig) {\n            this._appendColorPickerFragment();\n        }\n    }\n    /**\n     * Shows the {@link #colorPickerFragmentView} and hides the {@link #colorGridsFragmentView}.\n     *\n     * **Note**: It requires {@link #appendUI} to be called first.\n     *\n     * See {@link #showColorGridsFragment}, {@link ~ColorSelectorView#event:colorPicker:show}.\n     */\n    showColorPickerFragment() {\n        if (!this.colorPickerFragmentView.colorPickerView || this._isColorPickerFragmentVisible) {\n            return;\n        }\n        this._isColorPickerFragmentVisible = true;\n        this.colorPickerFragmentView.focus();\n        this.colorPickerFragmentView.resetValidationStatus();\n        this._isColorGridsFragmentVisible = false;\n    }\n    /**\n     * Shows the {@link #colorGridsFragmentView} and hides the {@link #colorPickerFragmentView}.\n     *\n     * See {@link #showColorPickerFragment}.\n     *\n     * **Note**: It requires {@link #appendUI} to be called first.\n     */\n    showColorGridsFragment() {\n        if (this._isColorGridsFragmentVisible) {\n            return;\n        }\n        this._isColorGridsFragmentVisible = true;\n        this.colorGridsFragmentView.focus();\n        this._isColorPickerFragmentVisible = false;\n    }\n    /**\n     * Focuses the first focusable element in {@link #items}.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the last focusable element in {@link #items}.\n     */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n     * Scans through the editor model and searches for text node attributes with the given `attributeName`.\n     * Found entries are set as document colors in {@link #colorGridsFragmentView}.\n     *\n     * All the previously stored document colors will be lost in the process.\n     *\n     * @param model The model used as a source to obtain the document colors.\n     * @param attributeName Determines the name of the related model's attribute for a given dropdown.\n     */\n    updateDocumentColors(model, attributeName) {\n        this.colorGridsFragmentView.updateDocumentColors(model, attributeName);\n    }\n    /**\n     * Refreshes the state of the selected color in one or both grids located in {@link #colorGridsFragmentView}.\n     *\n     * It guarantees that the selection will occur only in one of them.\n     */\n    updateSelectedColors() {\n        this.colorGridsFragmentView.updateSelectedColors();\n    }\n    /**\n     * Appends the view containing static and document color grid views.\n     */\n    _appendColorGridsFragment() {\n        if (this.items.length) {\n            return;\n        }\n        this.items.add(this.colorGridsFragmentView);\n        this.colorGridsFragmentView.delegate('execute').to(this);\n        this.colorGridsFragmentView.delegate('colorPicker:show').to(this);\n    }\n    /**\n     * Appends the view with the color picker.\n     */\n    _appendColorPickerFragment() {\n        if (this.items.length === 2) {\n            return;\n        }\n        this.items.add(this.colorPickerFragmentView);\n        if (this.colorGridsFragmentView.colorPickerButtonView) {\n            this.colorGridsFragmentView.colorPickerButtonView.on('execute', () => {\n                this.showColorPickerFragment();\n            });\n        }\n        this.colorGridsFragmentView.addColorPickerButton();\n        this.colorPickerFragmentView.delegate('execute').to(this);\n        this.colorPickerFragmentView.delegate('colorPicker:cancel').to(this);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/componentfactory\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that the names are case insensitive.\n *\n * ```ts\n * // The editor provides localization tools for the factory.\n * const factory = new ComponentFactory( editor );\n *\n * factory.add( 'foo', locale => new FooView( locale ) );\n * factory.add( 'bar', locale => new BarView( locale ) );\n *\n * // An instance of FooView.\n * const fooInstance = factory.create( 'foo' );\n *\n * // Names are case insensitive so this is also allowed:\n * const barInstance = factory.create( 'Bar' );\n * ```\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\nexport default class ComponentFactory {\n    /**\n     * Creates an instance of the factory.\n     *\n     * @param editor The editor instance.\n     */\n    constructor(editor) {\n        /**\n         * Registered component factories.\n         */\n        this._components = new Map();\n        this.editor = editor;\n    }\n    /**\n     * Returns an iterator of registered component names. Names are returned in lower case.\n     */\n    *names() {\n        for (const value of this._components.values()) {\n            yield value.originalName;\n        }\n    }\n    /**\n     * Registers a component factory function that will be used by the\n     * {@link #create create} method and called with the\n     * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n     * allowing localization of the {@link module:ui/view~View view}.\n     *\n     * @param name The name of the component.\n     * @param callback The callback that returns the component.\n     */\n    add(name, callback) {\n        this._components.set(getNormalized(name), { callback, originalName: name });\n    }\n    /**\n     * Creates an instance of a component registered in the factory under a specific name.\n     *\n     * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n     * the previously {@link #add added} factory function, allowing localization of the\n     * {@link module:ui/view~View view}.\n     *\n     * @param name The name of the component.\n     * @returns The instantiated component view.\n     */\n    create(name) {\n        if (!this.has(name)) {\n            /**\n             * The required component is not registered in the component factory. Please make sure\n             * the provided name is correct and the component has been correctly\n             * {@link module:ui/componentfactory~ComponentFactory#add added} to the factory.\n             *\n             * @error componentfactory-item-missing\n             * @param name The name of the missing component.\n             */\n            throw new CKEditorError('componentfactory-item-missing', this, { name });\n        }\n        return this._components.get(getNormalized(name)).callback(this.editor.locale);\n    }\n    /**\n     * Checks if a component of a given name is registered in the factory.\n     *\n     * @param name The name of the component.\n     */\n    has(name) {\n        return this._components.has(getNormalized(name));\n    }\n}\n/**\n * Ensures that the component name used as the key in the internal map is in lower case.\n */\nfunction getNormalized(name) {\n    return String(name).toLowerCase();\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/tooltipmanager\n */\nimport View from './view.js';\nimport BalloonPanelView from './panel/balloon/balloonpanelview.js';\nimport { DomEmitterMixin, first, global, isVisible } from '@ckeditor/ckeditor5-utils';\nimport { isElement, debounce } from 'lodash-es';\nimport '../theme/components/tooltip/tooltip.css';\nconst BALLOON_CLASS = 'ck-tooltip';\n/**\n * A tooltip manager class for the UI of the editor.\n *\n * **Note**: Most likely you do not have to use the `TooltipManager` API listed below in order to display tooltips. Popular\n * {@glink framework/architecture/ui-library UI components} support tooltips out-of-the-box via observable properties\n * (see {@link module:ui/button/buttonview~ButtonView#tooltip} and {@link module:ui/button/buttonview~ButtonView#tooltipPosition}).\n *\n * # Displaying tooltips\n *\n * To display a tooltip, set `data-cke-tooltip-text` attribute on any DOM element:\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'My tooltip';\n * ```\n *\n * The tooltip will show up whenever the user moves the mouse over the element or the element gets focus in DOM.\n *\n * # Positioning tooltips\n *\n * To change the position of the tooltip, use the `data-cke-tooltip-position` attribute (`s`, `se`, `sw`, `n`, `e`, or `w`):\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'Tooltip to the north';\n * domElement.dataset.ckeTooltipPosition = 'n';\n * ```\n *\n * # Disabling tooltips\n *\n * In order to disable the tooltip  temporarily, use the `data-cke-tooltip-disabled` attribute:\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'Disabled. For now.';\n * domElement.dataset.ckeTooltipDisabled = 'true';\n * ```\n *\n * # Styling tooltips\n *\n * By default, the tooltip has `.ck-tooltip` class and its text inner `.ck-tooltip__text`.\n *\n * If your tooltip requires custom styling, using `data-cke-tooltip-class` attribute will add additional class to the balloon\n * displaying the tooltip:\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'Tooltip with a red text';\n * domElement.dataset.ckeTooltipClass = 'my-class';\n * ```\n *\n * ```css\n * .ck.ck-tooltip.my-class { color: red }\n * ```\n *\n * **Note**: This class is a singleton. All editor instances re-use the same instance loaded by\n * {@link module:ui/editorui/editorui~EditorUI} of the first editor.\n */\nclass TooltipManager extends /* #__PURE__ */ DomEmitterMixin() {\n    /**\n     * Creates an instance of the tooltip manager.\n     */\n    constructor(editor) {\n        super();\n        /**\n         * Stores the reference to the DOM element the tooltip is attached to. `null` when there's no tooltip\n         * in the UI.\n         */\n        this._currentElementWithTooltip = null;\n        /**\n         * Stores the current tooltip position. `null` when there's no tooltip in the UI.\n         */\n        this._currentTooltipPosition = null;\n        /**\n         * An instance of the mutation observer that keeps track on target element attributes changes.\n         */\n        this._mutationObserver = null;\n        TooltipManager._editors.add(editor);\n        // TooltipManager must be a singleton. Multiple instances would mean multiple tooltips attached\n        // to the same DOM element with data-cke-tooltip-* attributes.\n        if (TooltipManager._instance) {\n            return TooltipManager._instance;\n        }\n        TooltipManager._instance = this;\n        this.tooltipTextView = new View(editor.locale);\n        this.tooltipTextView.set('text', '');\n        this.tooltipTextView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-tooltip__text'\n                ]\n            },\n            children: [\n                {\n                    text: this.tooltipTextView.bindTemplate.to('text')\n                }\n            ]\n        });\n        this.balloonPanelView = new BalloonPanelView(editor.locale);\n        this.balloonPanelView.class = BALLOON_CLASS;\n        this.balloonPanelView.content.add(this.tooltipTextView);\n        this._mutationObserver = createMutationObserver(() => {\n            this._updateTooltipPosition();\n        });\n        this._pinTooltipDebounced = debounce(this._pinTooltip, 600);\n        this._unpinTooltipDebounced = debounce(this._unpinTooltip, 400);\n        this.listenTo(global.document, 'keydown', this._onKeyDown.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'mouseenter', this._onEnterOrFocus.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'mouseleave', this._onLeaveOrBlur.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'focus', this._onEnterOrFocus.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'blur', this._onLeaveOrBlur.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'scroll', this._onScroll.bind(this), { useCapture: true });\n        // Because this class is a singleton, its only instance is shared across all editors and connects them through the reference.\n        // This causes issues with the ContextWatchdog. When an error is thrown in one editor, the watchdog traverses the references\n        // and (because of shared tooltip manager) figures that the error affects all editors and restarts them all.\n        // This flag, excludes tooltip manager instance from the traversal and brings ContextWatchdog back to normal.\n        // More in https://github.com/ckeditor/ckeditor5/issues/12292.\n        this._watchdogExcluded = true;\n    }\n    /**\n     * Destroys the tooltip manager.\n     *\n     * **Note**: The manager singleton cannot be destroyed until all editors that use it are destroyed.\n     *\n     * @param editor The editor the manager was created for.\n     */\n    destroy(editor) {\n        const editorBodyViewCollection = editor.ui.view && editor.ui.view.body;\n        TooltipManager._editors.delete(editor);\n        this.stopListening(editor.ui);\n        // Prevent the balloon panel from being destroyed in the EditorUI#destroy() cascade. It should be destroyed along\n        // with the last editor only (https://github.com/ckeditor/ckeditor5/issues/12602).\n        if (editorBodyViewCollection && editorBodyViewCollection.has(this.balloonPanelView)) {\n            editorBodyViewCollection.remove(this.balloonPanelView);\n        }\n        if (!TooltipManager._editors.size) {\n            this._unpinTooltip();\n            this.balloonPanelView.destroy();\n            this.stopListening();\n            TooltipManager._instance = null;\n        }\n    }\n    /**\n     * Returns {@link #balloonPanelView} {@link module:utils/dom/position~PositioningFunction positioning functions} for a given position\n     * name.\n     *\n     * @param position Name of the position (`s`, `se`, `sw`, `n`, `e`, or `w`).\n     * @returns Positioning functions to be used by the {@link #balloonPanelView}.\n     */\n    static getPositioningFunctions(position) {\n        const defaultPositions = TooltipManager.defaultBalloonPositions;\n        return {\n            // South is most popular. We can use positioning heuristics to avoid clipping by the viewport with the sane fallback.\n            s: [\n                defaultPositions.southArrowNorth,\n                defaultPositions.southArrowNorthEast,\n                defaultPositions.southArrowNorthWest\n            ],\n            n: [defaultPositions.northArrowSouth],\n            e: [defaultPositions.eastArrowWest],\n            w: [defaultPositions.westArrowEast],\n            sw: [defaultPositions.southArrowNorthEast],\n            se: [defaultPositions.southArrowNorthWest]\n        }[position];\n    }\n    /**\n     * Handles hiding tooltips on `keydown` in DOM.\n     *\n     * @param evt An object containing information about the fired event.\n     * @param domEvent The DOM event.\n     */\n    _onKeyDown(evt, domEvent) {\n        if (domEvent.key === 'Escape' && this._currentElementWithTooltip) {\n            this._unpinTooltip();\n            domEvent.stopPropagation();\n        }\n    }\n    /**\n     * Handles displaying tooltips on `mouseenter` and `focus` in DOM.\n     *\n     * @param evt An object containing information about the fired event.\n     * @param domEvent The DOM event.\n     */\n    _onEnterOrFocus(evt, { target }) {\n        const elementWithTooltipAttribute = getDescendantWithTooltip(target);\n        // Abort when there's no descendant needing tooltip.\n        if (!elementWithTooltipAttribute) {\n            // Unpin if element is focused, regardless of whether it contains a label or not.\n            // It also prevents tooltips from overlapping the menu bar\n            if (evt.name === 'focus') {\n                this._unpinTooltip();\n            }\n            return;\n        }\n        // Abort to avoid flashing when, for instance:\n        // * a tooltip is displayed for a focused element, then the same element gets mouseentered,\n        // * a tooltip is displayed for an element via mouseenter, then the focus moves to the same element.\n        if (elementWithTooltipAttribute === this._currentElementWithTooltip) {\n            return;\n        }\n        this._unpinTooltip();\n        // The tooltip should be pinned immediately when the element gets focused using keyboard.\n        // If it is focused using the mouse, the tooltip should be pinned after a delay to prevent flashing.\n        // See https://github.com/ckeditor/ckeditor5/issues/16383\n        if (evt.name === 'focus' && !elementWithTooltipAttribute.matches(':hover')) {\n            this._pinTooltip(elementWithTooltipAttribute, getTooltipData(elementWithTooltipAttribute));\n        }\n        else {\n            this._pinTooltipDebounced(elementWithTooltipAttribute, getTooltipData(elementWithTooltipAttribute));\n        }\n    }\n    /**\n     * Handles hiding tooltips on `mouseleave` and `blur` in DOM.\n     *\n     * @param evt An object containing information about the fired event.\n     * @param domEvent The DOM event.\n     */\n    _onLeaveOrBlur(evt, { target, relatedTarget }) {\n        if (evt.name === 'mouseleave') {\n            // Don't act when the event does not concern a DOM element (e.g. a mouseleave out of an entire document),\n            if (!isElement(target)) {\n                return;\n            }\n            const balloonElement = this.balloonPanelView.element;\n            const isEnteringBalloon = balloonElement && (balloonElement === relatedTarget || balloonElement.contains(relatedTarget));\n            const isLeavingBalloon = !isEnteringBalloon && target === balloonElement;\n            // Do not hide the tooltip when the user moves the cursor over it.\n            if (isEnteringBalloon) {\n                this._unpinTooltipDebounced.cancel();\n                return;\n            }\n            // If a tooltip is currently visible, don't act for a targets other than the one it is attached to.\n            // The only exception is leaving balloon, in this scenario tooltip should be closed.\n            // For instance, a random mouseleave far away in the page should not unpin the tooltip that was pinned because\n            // of a previous focus. Only leaving the same element should hide the tooltip.\n            if (!isLeavingBalloon && this._currentElementWithTooltip && target !== this._currentElementWithTooltip) {\n                return;\n            }\n            const descendantWithTooltip = getDescendantWithTooltip(target);\n            const relatedDescendantWithTooltip = getDescendantWithTooltip(relatedTarget);\n            // Unpin when the mouse was leaving element with a tooltip to a place which does not have or has a different tooltip.\n            // Note that this should happen whether the tooltip is already visible or not, for instance,\n            // it could be invisible but queued (debounced): it should get canceled.\n            if (isLeavingBalloon || (descendantWithTooltip && descendantWithTooltip !== relatedDescendantWithTooltip)) {\n                this._unpinTooltipDebounced();\n            }\n        }\n        else {\n            // If a tooltip is currently visible, don't act for a targets other than the one it is attached to.\n            // For instance, a random blur in the web page should not unpin the tooltip that was pinned because of a previous mouseenter.\n            if (this._currentElementWithTooltip && target !== this._currentElementWithTooltip) {\n                return;\n            }\n            // Note that unpinning should happen whether the tooltip is already visible or not, for instance, it could be invisible but\n            // queued (debounced): it should get canceled (e.g. quick focus then quick blur using the keyboard).\n            this._unpinTooltipDebounced();\n        }\n    }\n    /**\n     * Handles hiding tooltips on `scroll` in DOM.\n     *\n     * @param evt An object containing information about the fired event.\n     * @param domEvent The DOM event.\n     */\n    _onScroll(evt, { target }) {\n        // No tooltip, no reason to react on scroll.\n        if (!this._currentElementWithTooltip) {\n            return;\n        }\n        // When scrolling a container that has both the balloon and the current element (common ancestor), the balloon can remain\n        // visible (e.g. scrolling ≤body>). Otherwise, to avoid glitches (clipping, lagging) better just hide the tooltip.\n        // Also, don't do anything when scrolling an unrelated DOM element that has nothing to do with the current element and the balloon.\n        if (target.contains(this.balloonPanelView.element) && target.contains(this._currentElementWithTooltip)) {\n            return;\n        }\n        this._unpinTooltip();\n    }\n    /**\n     * Pins the tooltip to a specific DOM element.\n     *\n     * @param options.text Text of the tooltip to display.\n     * @param options.position The position of the tooltip.\n     * @param options.cssClass Additional CSS class of the balloon with the tooltip.\n     */\n    _pinTooltip(targetDomElement, { text, position, cssClass }) {\n        this._unpinTooltip();\n        // Use the body collection of the first editor.\n        const bodyViewCollection = first(TooltipManager._editors.values()).ui.view.body;\n        if (!bodyViewCollection.has(this.balloonPanelView)) {\n            bodyViewCollection.add(this.balloonPanelView);\n        }\n        this.tooltipTextView.text = text;\n        this.balloonPanelView.class = [BALLOON_CLASS, cssClass]\n            .filter(className => className)\n            .join(' ');\n        // Ensure that all changes to the tooltip are set before pinning it.\n        // Setting class or text after pinning can cause the tooltip to be pinned in the wrong position.\n        // It happens especially often when tooltip has class modified (like adding `ck-tooltip_multi-line`).\n        // See https://github.com/ckeditor/ckeditor5/issues/16365\n        this.balloonPanelView.pin({\n            target: targetDomElement,\n            positions: TooltipManager.getPositioningFunctions(position)\n        });\n        this._mutationObserver.attach(targetDomElement);\n        // Start responding to changes in editor UI or content layout. For instance, when collaborators change content\n        // and a contextual toolbar attached to a content starts to move (and so should move the tooltip).\n        // Note: Using low priority to let other listeners that position contextual toolbars etc. to react first.\n        for (const editor of TooltipManager._editors) {\n            this.listenTo(editor.ui, 'update', this._updateTooltipPosition.bind(this), { priority: 'low' });\n        }\n        this._currentElementWithTooltip = targetDomElement;\n        this._currentTooltipPosition = position;\n    }\n    /**\n     * Unpins the tooltip and cancels all queued pinning.\n     */\n    _unpinTooltip() {\n        this._unpinTooltipDebounced.cancel();\n        this._pinTooltipDebounced.cancel();\n        this.balloonPanelView.unpin();\n        for (const editor of TooltipManager._editors) {\n            this.stopListening(editor.ui, 'update');\n        }\n        this._currentElementWithTooltip = null;\n        this._currentTooltipPosition = null;\n        this.tooltipTextView.text = '';\n        this._mutationObserver.detach();\n    }\n    /**\n     * Updates the position of the tooltip so it stays in sync with the element it is pinned to.\n     *\n     * Hides the tooltip when the element is no longer visible in DOM or the tooltip text was removed.\n     */\n    _updateTooltipPosition() {\n        // The tooltip might get removed by focus listener triggered by the same UI `update` event.\n        // See https://github.com/ckeditor/ckeditor5/pull/16363.\n        if (!this._currentElementWithTooltip) {\n            return;\n        }\n        const tooltipData = getTooltipData(this._currentElementWithTooltip);\n        // This could happen if the tooltip was attached somewhere in a contextual content toolbar and the toolbar\n        // disappeared (e.g. removed an image), or the tooltip text was removed.\n        if (!isVisible(this._currentElementWithTooltip) || !tooltipData.text) {\n            this._unpinTooltip();\n            return;\n        }\n        this.balloonPanelView.pin({\n            target: this._currentElementWithTooltip,\n            positions: TooltipManager.getPositioningFunctions(tooltipData.position)\n        });\n    }\n}\n/**\n * A set of default {@link module:utils/dom/position~PositioningFunction positioning functions} used by the `TooltipManager`\n * to pin tooltips in different positions.\n */\nTooltipManager.defaultBalloonPositions = BalloonPanelView.generatePositions({\n    heightOffset: 5,\n    sideOffset: 13\n});\n/**\n * A set of editors the single tooltip manager instance must listen to.\n * This is mostly to handle `EditorUI#update` listeners from individual editors.\n */\nTooltipManager._editors = new Set();\n/**\n * A reference to the `TooltipManager` instance. The class is a singleton and as such,\n * successive attempts at creating instances should return this instance.\n */\nTooltipManager._instance = null;\nexport default TooltipManager;\nfunction getDescendantWithTooltip(element) {\n    if (!isElement(element)) {\n        return null;\n    }\n    return element.closest('[data-cke-tooltip-text]:not([data-cke-tooltip-disabled])');\n}\nfunction getTooltipData(element) {\n    return {\n        text: element.dataset.ckeTooltipText,\n        position: (element.dataset.ckeTooltipPosition || 's'),\n        cssClass: element.dataset.ckeTooltipClass || ''\n    };\n}\n// Creates a simple `MutationObserver` instance wrapper that observes changes in the tooltip-related attributes of the given element.\n// Used instead of the `MutationObserver` from the engine for simplicity.\nfunction createMutationObserver(callback) {\n    const mutationObserver = new MutationObserver(() => {\n        callback();\n    });\n    return {\n        attach(element) {\n            mutationObserver.observe(element, {\n                attributes: true,\n                attributeFilter: ['data-cke-tooltip-text', 'data-cke-tooltip-position']\n            });\n        },\n        detach() {\n            mutationObserver.disconnect();\n        }\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Rect, DomEmitterMixin } from '@ckeditor/ckeditor5-utils';\nimport BalloonPanelView from '../panel/balloon/balloonpanelview.js';\nimport { throttle } from 'lodash-es';\n// ⚠ Note, whenever changing the threshold, make sure to update the docs/support/managing-ckeditor-logo.md docs\n// as this information is also mentioned there ⚠.\nconst NARROW_ROOT_HEIGHT_THRESHOLD = 50;\nconst NARROW_ROOT_WIDTH_THRESHOLD = 350;\n/**\n * A helper that enables the badge feature in the editor and renders a custom view next to the bottom of the editable element\n * (editor root, source editing area, etc.) when the editor is focused.\n *\n * @private\n */\nexport default class Badge extends /* #__PURE__ */ DomEmitterMixin() {\n    /**\n     * Creates a badge for a given editor. The feature is initialized on Editor#ready\n     * event.\n     */\n    constructor(editor, options = {}) {\n        super();\n        /**\n         * A reference to the balloon panel hosting and positioning the badge content.\n         */\n        this._balloonView = null;\n        /**\n         * A throttled version of the {@link #_showBalloon} method meant for frequent use to avoid performance loss.\n         */\n        this._showBalloonThrottled = throttle(() => this._showBalloon(), 50, { leading: true });\n        /**\n         * A reference to the last editable element (root, source editing area, etc.) focused by the user.\n         * Since the focus can move to other focusable elements in the UI, this reference allows positioning the balloon over the\n         * right element whether the user is typing or using the UI.\n         */\n        this._lastFocusedEditableElement = null;\n        this.editor = editor;\n        this._balloonClass = options.balloonClass;\n        editor.on('ready', () => this._handleEditorReady());\n    }\n    /**\n     * Destroys the badge along with its view.\n     */\n    destroy() {\n        const balloon = this._balloonView;\n        if (balloon) {\n            // Balloon gets destroyed by the body collection.\n            // The badge view gets destroyed by the balloon.\n            balloon.unpin();\n            this._balloonView = null;\n        }\n        this._showBalloonThrottled.cancel();\n        this.stopListening();\n    }\n    /**\n     * Enables badge label once the editor (ui) is ready.\n     */\n    _handleEditorReady() {\n        const editor = this.editor;\n        if (!this._isEnabled()) {\n            return;\n        }\n        // No view means no body collection to append the badge balloon to.\n        if (!editor.ui.view) {\n            return;\n        }\n        editor.ui.focusTracker.on('change:isFocused', (evt, data, isFocused) => {\n            this._updateLastFocusedEditableElement();\n            if (isFocused) {\n                this._showBalloon();\n            }\n            else {\n                this._hideBalloon();\n            }\n        });\n        editor.ui.focusTracker.on('change:focusedElement', (evt, data, focusedElement) => {\n            this._updateLastFocusedEditableElement();\n            if (focusedElement) {\n                this._showBalloon();\n            }\n        });\n        editor.ui.on('update', () => {\n            this._showBalloonThrottled();\n        });\n    }\n    /**\n     * Returns normalized configuration for the badge.\n     */\n    _getNormalizedConfig() {\n        return {\n            side: this.editor.locale.contentLanguageDirection === 'ltr' ? 'right' : 'left',\n            position: 'border',\n            verticalOffset: 0,\n            horizontalOffset: 5\n        };\n    }\n    /**\n     * Attempts to display the balloon with the badge view.\n     */\n    _showBalloon() {\n        const attachOptions = this._getBalloonAttachOptions();\n        if (!attachOptions) {\n            return;\n        }\n        if (!this._balloonView) {\n            this._balloonView = this._createBalloonView();\n        }\n        this._balloonView.pin(attachOptions);\n    }\n    /**\n     * Hides the badge balloon if already visible.\n     */\n    _hideBalloon() {\n        if (this._balloonView) {\n            this._balloonView.unpin();\n        }\n    }\n    /**\n     * Creates an instance of the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView balloon panel}\n     * with the badge view inside ready for positioning.\n     */\n    _createBalloonView() {\n        const editor = this.editor;\n        const balloon = new BalloonPanelView();\n        const view = this._createBadgeContent();\n        balloon.content.add(view);\n        if (this._balloonClass) {\n            balloon.class = this._balloonClass;\n        }\n        editor.ui.view.body.add(balloon);\n        return balloon;\n    }\n    /**\n     * Returns the options for attaching the balloon to the focused editable element.\n     */\n    _getBalloonAttachOptions() {\n        if (!this._lastFocusedEditableElement) {\n            return null;\n        }\n        const badgeConfig = this._getNormalizedConfig();\n        const positioningFunction = badgeConfig.side === 'right' ?\n            getLowerRightCornerPosition(this._lastFocusedEditableElement, badgeConfig) :\n            getLowerLeftCornerPosition(this._lastFocusedEditableElement, badgeConfig);\n        return {\n            target: this._lastFocusedEditableElement,\n            positions: [positioningFunction]\n        };\n    }\n    /**\n     * Updates the {@link #_lastFocusedEditableElement} based on the state of the global focus tracker.\n     */\n    _updateLastFocusedEditableElement() {\n        const editor = this.editor;\n        const isFocused = editor.ui.focusTracker.isFocused;\n        const focusedElement = editor.ui.focusTracker.focusedElement;\n        if (!isFocused || !focusedElement) {\n            this._lastFocusedEditableElement = null;\n            return;\n        }\n        const editableEditorElements = Array.from(editor.ui.getEditableElementsNames()).map(name => {\n            return editor.ui.getEditableElement(name);\n        });\n        if (editableEditorElements.includes(focusedElement)) {\n            this._lastFocusedEditableElement = focusedElement;\n        }\n        else {\n            // If it's none of the editable element, then the focus is somewhere in the UI. Let's display the badge\n            // over the first element then.\n            this._lastFocusedEditableElement = editableEditorElements[0];\n        }\n    }\n}\nfunction getLowerRightCornerPosition(focusedEditableElement, config) {\n    return getLowerCornerPosition(focusedEditableElement, config, (rootRect, balloonRect) => {\n        return rootRect.left + rootRect.width - balloonRect.width - config.horizontalOffset;\n    });\n}\nfunction getLowerLeftCornerPosition(focusedEditableElement, config) {\n    return getLowerCornerPosition(focusedEditableElement, config, rootRect => rootRect.left + config.horizontalOffset);\n}\nfunction getLowerCornerPosition(focusedEditableElement, config, getBalloonLeft) {\n    return (visibleEditableElementRect, balloonRect) => {\n        const editableElementRect = new Rect(focusedEditableElement);\n        if (editableElementRect.width < NARROW_ROOT_WIDTH_THRESHOLD || editableElementRect.height < NARROW_ROOT_HEIGHT_THRESHOLD) {\n            return null;\n        }\n        let balloonTop;\n        if (config.position === 'inside') {\n            balloonTop = editableElementRect.bottom - balloonRect.height;\n        }\n        else {\n            balloonTop = editableElementRect.bottom - balloonRect.height / 2;\n        }\n        balloonTop -= config.verticalOffset;\n        const balloonLeft = getBalloonLeft(editableElementRect, balloonRect);\n        // Clone the editable element rect and place it where the balloon would be placed.\n        // This will allow getVisible() to work from editable element's perspective (rect source).\n        // and yield a result as if the balloon was on the same (scrollable) layer as the editable element.\n        const newBalloonPositionRect = visibleEditableElementRect\n            .clone()\n            .moveTo(balloonLeft, balloonTop)\n            .getIntersection(balloonRect.clone().moveTo(balloonLeft, balloonTop));\n        const newBalloonPositionVisibleRect = newBalloonPositionRect.getVisible();\n        if (!newBalloonPositionVisibleRect || newBalloonPositionVisibleRect.getArea() < balloonRect.getArea()) {\n            return null;\n        }\n        return {\n            top: balloonTop,\n            left: balloonLeft,\n            name: `position_${config.position}-side_${config.side}`,\n            config: {\n                withArrow: false\n            }\n        };\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { parseBase64EncodedObject } from '@ckeditor/ckeditor5-utils';\nimport View from '../view.js';\nimport Badge from '../badge/badge.js';\nimport IconView from '../icon/iconview.js';\nimport poweredByIcon from '../../theme/icons/project-logo.svg';\nconst DEFAULT_LABEL = 'Powered by';\n/**\n * A helper that enables the \"powered by\" feature in the editor and renders a link to the project's\n * webpage next to the bottom of the editable element (editor root, source editing area, etc.) when the editor is focused.\n *\n * @private\n */\nexport default class PoweredBy extends Badge {\n    constructor(editor) {\n        super(editor, { balloonClass: 'ck-powered-by-balloon' });\n    }\n    /**\n     * Enables \"powered by\" label.\n     */\n    _isEnabled() {\n        const editor = this.editor;\n        const forceVisible = editor.config.get('ui.poweredBy.forceVisible');\n        if (forceVisible) {\n            return true;\n        }\n        const licenseKey = editor.config.get('licenseKey');\n        if (licenseKey == 'GPL') {\n            return true;\n        }\n        const licenseContent = parseBase64EncodedObject(licenseKey.split('.')[1]);\n        if (!licenseContent) {\n            return true;\n        }\n        return !licenseContent.whiteLabel;\n    }\n    /**\n     * Creates a \"powered by\" badge content.\n     */\n    _createBadgeContent() {\n        return new PoweredByView(this.editor.locale, this._getNormalizedConfig().label);\n    }\n    /**\n     * Returns the normalized configuration for the \"powered by\" badge.\n     * It takes the user configuration into account and falls back to the default one.\n     */\n    _getNormalizedConfig() {\n        const badgeConfig = super._getNormalizedConfig();\n        const userConfig = this.editor.config.get('ui.poweredBy') || {};\n        const position = userConfig.position || badgeConfig.position;\n        const verticalOffset = position === 'inside' ? 5 : badgeConfig.verticalOffset;\n        return {\n            position,\n            side: userConfig.side || badgeConfig.side,\n            label: userConfig.label === undefined ? DEFAULT_LABEL : userConfig.label,\n            verticalOffset: userConfig.verticalOffset !== undefined ? userConfig.verticalOffset : verticalOffset,\n            horizontalOffset: userConfig.horizontalOffset !== undefined ? userConfig.horizontalOffset : badgeConfig.horizontalOffset,\n            forceVisible: !!userConfig.forceVisible\n        };\n    }\n}\n/**\n * A view displaying a \"powered by\" label and project logo wrapped in a link.\n */\nclass PoweredByView extends View {\n    /**\n     * Creates an instance of the \"powered by\" view.\n     *\n     * @param locale The localization services instance.\n     * @param label The label text.\n     */\n    constructor(locale, label) {\n        super(locale);\n        const iconView = new IconView();\n        const bind = this.bindTemplate;\n        iconView.set({\n            content: poweredByIcon,\n            isColorInherited: false\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck', 'ck-powered-by'],\n                'aria-hidden': true\n            },\n            children: [\n                {\n                    tag: 'a',\n                    attributes: {\n                        href: 'https://ckeditor.com/powered-by-ckeditor/?utm_source=ckeditor&' +\n                            'utm_medium=referral&utm_campaign=701Dn000000hVgmIAE_powered_by_ckeditor_logo',\n                        target: '_blank',\n                        tabindex: '-1'\n                    },\n                    children: [\n                        ...label ? [\n                            {\n                                tag: 'span',\n                                attributes: {\n                                    class: ['ck', 'ck-powered-by__label']\n                                },\n                                children: [label]\n                            }\n                        ] : [],\n                        iconView\n                    ],\n                    on: {\n                        dragstart: bind.to(evt => evt.preventDefault())\n                    }\n                }\n            ]\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { parseBase64EncodedObject } from '@ckeditor/ckeditor5-utils';\nimport View from '../view.js';\nimport Badge from '../badge/badge.js';\n/**\n * A helper that enables the \"evaluation badge\" feature in the editor at the bottom of the editable element\n * (editor root, source editing area, etc.) when the editor is focused.\n *\n * @private\n */\nexport default class EvaluationBadge extends Badge {\n    constructor(editor) {\n        super(editor, { balloonClass: 'ck-evaluation-badge-balloon' });\n        this.licenseTypeMessage = {\n            evaluation: 'For evaluation purposes only',\n            trial: 'For evaluation purposes only',\n            development: 'For development purposes only'\n        };\n    }\n    /**\n     * Enables \"evaluation badge\" label.\n     */\n    _isEnabled() {\n        const editor = this.editor;\n        const licenseKey = editor.config.get('licenseKey');\n        const licenseType = getLicenseTypeFromLicenseKey(licenseKey);\n        return Boolean(licenseType && this.licenseTypeMessage[licenseType]);\n    }\n    /**\n     * Creates the content of the \"evaluation badge\".\n     */\n    _createBadgeContent() {\n        const licenseKey = this.editor.config.get('licenseKey');\n        const licenseType = getLicenseTypeFromLicenseKey(licenseKey);\n        return new EvaluationBadgeView(this.editor.locale, this.licenseTypeMessage[licenseType]);\n    }\n    /**\n     * Returns the normalized configuration for the \"evaluation badge\".\n     * It takes 'ui.poweredBy' configuration into account to determine the badge position and side.\n     */\n    _getNormalizedConfig() {\n        const badgeConfig = super._getNormalizedConfig();\n        const userConfig = this.editor.config.get('ui.poweredBy') || {};\n        const position = userConfig.position || badgeConfig.position;\n        const poweredBySide = userConfig.side || badgeConfig.side;\n        return {\n            position,\n            side: poweredBySide === 'left' ? 'right' : 'left',\n            verticalOffset: badgeConfig.verticalOffset,\n            horizontalOffset: badgeConfig.horizontalOffset\n        };\n    }\n}\n/**\n * A view displaying the \"evaluation badge\".\n */\nclass EvaluationBadgeView extends View {\n    /**\n     * Creates an instance of the \"evaluation badge\" view.\n     *\n     * @param locale The localization services instance.\n     * @param label The label text.\n     */\n    constructor(locale, label) {\n        super(locale);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck', 'ck-evaluation-badge'],\n                'aria-hidden': true\n            },\n            children: [\n                {\n                    tag: 'span',\n                    attributes: {\n                        class: ['ck', 'ck-evaluation-badge__label']\n                    },\n                    children: [label]\n                }\n            ]\n        });\n    }\n}\n/**\n * Returns the license type based on the license key.\n */\nfunction getLicenseTypeFromLicenseKey(licenseKey) {\n    if (licenseKey == 'GPL') {\n        return 'GPL';\n    }\n    const licenseContent = parseBase64EncodedObject(licenseKey.split('.')[1]);\n    if (!licenseContent) {\n        return null;\n    }\n    return licenseContent.licenseType || 'production';\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport View from './view.js';\nimport '../theme/components/arialiveannouncer/arialiveannouncer.css';\n/**\n * The politeness level of an `aria-live` announcement.\n *\n * Available keys are:\n * * `AriaLiveAnnouncerPoliteness.POLITE`,\n * * `AriaLiveAnnouncerPoliteness.ASSERTIVE`\n *\n * [Learn more](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions#Politeness_levels).\n */\nexport const AriaLiveAnnouncerPoliteness = {\n    POLITE: 'polite',\n    ASSERTIVE: 'assertive'\n};\n/**\n * An accessibility helper that manages all ARIA live regions associated with an editor instance. ARIA live regions announce changes\n * to the state of the editor features.\n *\n * These announcements are consumed and propagated by screen readers and give users a better understanding of the current\n * state of the editor.\n *\n * To announce a state change to an editor use the {@link #announce} method:\n *\n * ```ts\n * editor.ui.ariaLiveAnnouncer.announce( 'Text of an announcement.' );\n * ```\n */\nexport default class AriaLiveAnnouncer {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        this.editor = editor;\n        /**\n         * Some screen readers only look at changes in the aria-live region.\n         * They might not read a region that already has content when it is added.\n         * To stop this problem, make sure to set up regions for all politeness settings when the editor starts.\n         */\n        editor.once('ready', () => {\n            for (const politeness of Object.values(AriaLiveAnnouncerPoliteness)) {\n                this.announce('', politeness);\n            }\n        });\n    }\n    /**\n     * Sets an announcement text to an aria region that is then announced by a screen reader to the user.\n     *\n     * If the aria region of a specified politeness does not exist, it will be created and can be re-used later.\n     *\n     * The default announcement politeness level is `'polite'`.\n     *\n     * ```ts\n     * // Most screen readers will queue announcements from multiple aria-live regions and read them out in the order they were emitted.\n     * editor.ui.ariaLiveAnnouncer.announce( 'Image uploaded.' );\n     * editor.ui.ariaLiveAnnouncer.announce( 'Connection lost. Reconnecting.' );\n     * ```\n     */\n    announce(announcement, attributes = AriaLiveAnnouncerPoliteness.POLITE) {\n        const editor = this.editor;\n        if (!editor.ui.view) {\n            return;\n        }\n        if (!this.view) {\n            this.view = new AriaLiveAnnouncerView(editor.locale);\n            editor.ui.view.body.add(this.view);\n        }\n        const { politeness, isUnsafeHTML } = typeof attributes === 'string' ? {\n            politeness: attributes\n        } : attributes;\n        let politenessRegionView = this.view.regionViews.find(view => view.politeness === politeness);\n        if (!politenessRegionView) {\n            politenessRegionView = new AriaLiveAnnouncerRegionView(editor, politeness);\n            this.view.regionViews.add(politenessRegionView);\n        }\n        politenessRegionView.announce({\n            announcement,\n            isUnsafeHTML\n        });\n    }\n}\n/**\n * The view that aggregates all `aria-live` regions.\n */\nexport class AriaLiveAnnouncerView extends View {\n    constructor(locale) {\n        super(locale);\n        this.regionViews = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-aria-live-announcer'\n                ]\n            },\n            children: this.regionViews\n        });\n    }\n}\n/**\n * The view that represents a single `aria-live`.\n */\nexport class AriaLiveAnnouncerRegionView extends View {\n    constructor(editor, politeness) {\n        super(editor.locale);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                'aria-live': politeness,\n                'aria-relevant': 'additions'\n            },\n            children: [\n                {\n                    tag: 'ul',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-aria-live-region-list'\n                        ]\n                    }\n                }\n            ]\n        });\n        editor.on('destroy', () => {\n            if (this._pruneAnnouncementsInterval !== null) {\n                clearInterval(this._pruneAnnouncementsInterval);\n                this._pruneAnnouncementsInterval = null;\n            }\n        });\n        this.politeness = politeness;\n        this._domConverter = editor.data.htmlProcessor.domConverter;\n        this._pruneAnnouncementsInterval = setInterval(() => {\n            if (this.element && this._listElement.firstChild) {\n                this._listElement.firstChild.remove();\n            }\n        }, 5000);\n    }\n    /**\n     * Appends new announcement to region.\n     */\n    announce({ announcement, isUnsafeHTML }) {\n        if (!announcement.trim().length) {\n            return;\n        }\n        const messageListItem = document.createElement('li');\n        if (isUnsafeHTML) {\n            this._domConverter.setContentOf(messageListItem, announcement);\n        }\n        else {\n            messageListItem.innerText = announcement;\n        }\n        this._listElement.appendChild(messageListItem);\n    }\n    /**\n     * Return current announcements list HTML element.\n     */\n    get _listElement() {\n        return this.element.querySelector('ul');\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport ListItemView from '../list/listitemview.js';\nimport '../../theme/components/menubar/menubarmenulistitem.css';\n/**\n * A menu bar list item view, a child of {@link module:ui/menubar/menubarmenulistview~MenuBarMenuListView}.\n *\n * Populate this item with a {@link module:ui/menubar/menubarmenulistitembuttonview~MenuBarMenuListItemButtonView} instance\n * or a {@link module:ui/menubar/menubarmenuview~MenuBarMenuView} instance to create a sub-menu.\n */\nexport default class MenuBarMenuListItemView extends ListItemView {\n    /**\n     * Creates an instance of the list item view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale, parentMenuView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-menu-bar__menu__item'\n                ]\n            },\n            on: {\n                'mouseenter': bind.to('mouseenter')\n            }\n        });\n        this.delegate('mouseenter').to(parentMenuView);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/menubar/utils\n */\nimport MenuBarMenuListItemView from './menubarmenulistitemview.js';\nimport clickOutsideHandler from '../bindings/clickoutsidehandler.js';\nimport { logWarning } from '@ckeditor/ckeditor5-utils';\nimport { cloneDeep } from 'lodash-es';\nconst NESTED_PANEL_HORIZONTAL_OFFSET = 5;\n/**\n * Behaviors of the {@link module:ui/menubar/menubarview~MenuBarView} component.\n */\nexport const MenuBarBehaviors = {\n    /**\n     * When the bar is already open:\n     * * Opens the menu when the user hovers over its button.\n     * * Closes open menu when another menu's button gets hovered.\n     */\n    toggleMenusAndFocusItemsOnHover(menuBarView) {\n        menuBarView.on('menu:mouseenter', evt => {\n            // This behavior should be activated when one of condition is present:\n            // 1. The user opened any submenu of menubar and hover over items in the menu bar.\n            // 2. The user focused whole menubar using keyboard interaction and enabled focus borders and hover over items in the menu bar.\n            if (!menuBarView.isFocusBorderEnabled && !menuBarView.isOpen) {\n                return;\n            }\n            if (menuBarView.isOpen) {\n                for (const menuView of menuBarView.menus) {\n                    // @if CK_DEBUG_MENU_BAR // const wasOpen = menuView.isOpen;\n                    const pathLeaf = evt.path[0];\n                    const isListItemContainingMenu = pathLeaf instanceof MenuBarMenuListItemView && pathLeaf.children.first === menuView;\n                    menuView.isOpen = (evt.path.includes(menuView) || isListItemContainingMenu) && menuView.isEnabled;\n                    // @if CK_DEBUG_MENU_BAR // if ( wasOpen !== menuView.isOpen ) {\n                    // @if CK_DEBUG_MENU_BAR // console.log( '[BEHAVIOR] toggleMenusAndFocusItemsOnHover(): Toggle',\n                    // @if CK_DEBUG_MENU_BAR // \tlogMenu( menuView ), 'isOpen', menuView.isOpen\n                    // @if CK_DEBUG_MENU_BAR // );\n                    // @if CK_DEBUG_MENU_BAR // }\n                }\n            }\n            evt.source.focus();\n        });\n    },\n    /**\n     * Moves between top-level menus using the arrow left and right keys.\n     *\n     * If the menubar has already been open, the arrow keys move focus between top-level menu buttons and open them.\n     * If the menubar is closed, the arrow keys only move focus between top-level menu buttons.\n     */\n    focusCycleMenusOnArrows(menuBarView) {\n        const isContentRTL = menuBarView.locale.uiLanguageDirection === 'rtl';\n        menuBarView.on('menu:arrowright', evt => {\n            cycleTopLevelMenus(evt.source, isContentRTL ? -1 : 1);\n        });\n        menuBarView.on('menu:arrowleft', evt => {\n            cycleTopLevelMenus(evt.source, isContentRTL ? 1 : -1);\n        });\n        function cycleTopLevelMenus(currentMenuView, step) {\n            const currentIndex = menuBarView.children.getIndex(currentMenuView);\n            const isCurrentMenuViewOpen = currentMenuView.isOpen;\n            const menusCount = menuBarView.children.length;\n            const menuViewToOpen = menuBarView.children.get((currentIndex + menusCount + step) % menusCount);\n            currentMenuView.isOpen = false;\n            if (isCurrentMenuViewOpen) {\n                menuViewToOpen.isOpen = true;\n            }\n            menuViewToOpen.buttonView.focus();\n        }\n    },\n    /**\n     * Closes the entire sub-menu structure when the bar is closed. This prevents sub-menus from being open if the user\n     * closes the entire bar, and then re-opens some top-level menu.\n     */\n    closeMenusWhenTheBarCloses(menuBarView) {\n        menuBarView.on('change:isOpen', () => {\n            if (!menuBarView.isOpen) {\n                menuBarView.menus.forEach(menuView => {\n                    menuView.isOpen = false;\n                    // @if CK_DEBUG_MENU_BAR // console.log( '[BEHAVIOR] closeMenusWhenTheBarCloses(): Closing', logMenu( menuView ) );\n                });\n            }\n        });\n    },\n    /**\n     * Handles the following case:\n     * 1. Hover to open a sub-menu (A). The button has focus.\n     * 2. Press arrow up/down to move focus to another sub-menu (B) button.\n     * 3. Press arrow right to open the sub-menu (B).\n     * 4. The sub-menu (A) should close as it would with `toggleMenusAndFocusItemsOnHover()`.\n     */\n    closeMenuWhenAnotherOnTheSameLevelOpens(menuBarView) {\n        menuBarView.on('menu:change:isOpen', (evt, name, isOpen) => {\n            if (isOpen) {\n                menuBarView.menus\n                    .filter(menuView => {\n                    return evt.source.parentMenuView === menuView.parentMenuView &&\n                        evt.source !== menuView &&\n                        menuView.isOpen;\n                }).forEach(menuView => {\n                    menuView.isOpen = false;\n                    // @if CK_DEBUG_MENU_BAR // console.log( '[BEHAVIOR] closeMenuWhenAnotherOpens(): Closing', logMenu( menuView ) );\n                });\n            }\n        });\n    },\n    /**\n     * Closes the bar when the user clicked outside of it (page body, editor root, etc.).\n     */\n    closeOnClickOutside(menuBarView) {\n        clickOutsideHandler({\n            emitter: menuBarView,\n            activator: () => menuBarView.isOpen,\n            callback: () => menuBarView.close(),\n            contextElements: () => menuBarView.children.map(child => child.element)\n        });\n    },\n    /**\n     * Tracks the keyboard focus interaction on the menu bar view. It is used to determine if the nested items\n     * of the menu bar should render focus rings after first interaction with the keyboard.\n     */\n    enableFocusHighlightOnInteraction(menuBarView) {\n        let isKeyPressed = false;\n        menuBarView.on('change:isOpen', (_, evt, isOpen) => {\n            if (!isOpen) {\n                // Keep the focus border if the menu bar was closed by a keyboard interaction (Esc key).\n                // The user remains in the keyboard navigation mode and can traverse the main categories.\n                // See https://github.com/ckeditor/ckeditor5/issues/16719.\n                if (!isKeyPressed) {\n                    menuBarView.isFocusBorderEnabled = false;\n                }\n                // Reset the flag when the menu bar is closed, menu items tend to intercept `keyup` event\n                // and sometimes, after pressing `enter` on focused item, `isKeyPressed` stuck in `true` state.\n                isKeyPressed = false;\n            }\n        });\n        menuBarView.listenTo(menuBarView.element, 'keydown', () => {\n            isKeyPressed = true;\n        }, { useCapture: true });\n        menuBarView.listenTo(menuBarView.element, 'keyup', () => {\n            isKeyPressed = false;\n        }, { useCapture: true });\n        menuBarView.listenTo(menuBarView.element, 'focus', () => {\n            if (isKeyPressed) {\n                menuBarView.isFocusBorderEnabled = true;\n            }\n        }, { useCapture: true });\n    }\n};\n/**\n * Behaviors of the {@link module:ui/menubar/menubarmenuview~MenuBarMenuView} component.\n */\nexport const MenuBarMenuBehaviors = {\n    /**\n     * If the button of the menu is focused, pressing the arrow down key should open the panel and focus it.\n     * This is analogous to the {@link module:ui/dropdown/dropdownview~DropdownView}.\n     */\n    openAndFocusPanelOnArrowDownKey(menuView) {\n        menuView.keystrokes.set('arrowdown', (data, cancel) => {\n            if (menuView.focusTracker.focusedElement === menuView.buttonView.element) {\n                if (!menuView.isOpen) {\n                    menuView.isOpen = true;\n                }\n                menuView.panelView.focus();\n                cancel();\n            }\n        });\n    },\n    /**\n     * Open the menu on the right arrow key press. This allows for navigating to sub-menus using the keyboard.\n     */\n    openOnArrowRightKey(menuView) {\n        const keystroke = menuView.locale.uiLanguageDirection === 'rtl' ? 'arrowleft' : 'arrowright';\n        menuView.keystrokes.set(keystroke, (data, cancel) => {\n            if (menuView.focusTracker.focusedElement !== menuView.buttonView.element || !menuView.isEnabled) {\n                return;\n            }\n            // @if CK_DEBUG_MENU_BAR // console.log( '[BEHAVIOR] openOnArrowRightKey(): Opening', logMenu( menuView ) );\n            if (!menuView.isOpen) {\n                menuView.isOpen = true;\n            }\n            menuView.panelView.focus();\n            cancel();\n        });\n    },\n    /**\n     * Opens the menu on its button click. Note that this behavior only opens but never closes the menu (unlike\n     * {@link module:ui/dropdown/dropdownview~DropdownView}).\n     */\n    openOnButtonClick(menuView) {\n        menuView.buttonView.on('execute', () => {\n            menuView.isOpen = true;\n        });\n    },\n    /**\n     * Toggles the menu on its button click. This behavior is analogous to {@link module:ui/dropdown/dropdownview~DropdownView}.\n     */\n    toggleOnButtonClick(menuView) {\n        menuView.buttonView.on('execute', () => {\n            menuView.isOpen = !menuView.isOpen;\n        });\n    },\n    /**\n     * Opens the menu and focuses the panel content upon pressing the Enter key.\n     */\n    openAndFocusOnEnterKeyPress(menuView) {\n        menuView.keystrokes.set('enter', (data, cancel) => {\n            // Engage only for Enter key press when the button is focused. The panel can contain\n            // other UI components and features that rely on the Enter key press.\n            if (menuView.focusTracker.focusedElement !== menuView.buttonView.element) {\n                return;\n            }\n            menuView.isOpen = true;\n            menuView.panelView.focus();\n            cancel();\n        });\n    },\n    /**\n     * Closes the menu on the right left key press. This allows for navigating to sub-menus using the keyboard.\n     */\n    closeOnArrowLeftKey(menuView) {\n        const keystroke = menuView.locale.uiLanguageDirection === 'rtl' ? 'arrowright' : 'arrowleft';\n        menuView.keystrokes.set(keystroke, (data, cancel) => {\n            if (menuView.isOpen) {\n                menuView.isOpen = false;\n                menuView.focus();\n                cancel();\n            }\n        });\n    },\n    /**\n     * Closes the menu on the esc key press. This allows for navigating to sub-menus using the keyboard.\n     */\n    closeOnEscKey(menuView) {\n        menuView.keystrokes.set('esc', (data, cancel) => {\n            if (menuView.isOpen) {\n                menuView.isOpen = false;\n                menuView.focus();\n                cancel();\n            }\n        });\n    },\n    /**\n     * Closes the menu when its parent menu also closed. This prevents from orphaned open menus when the parent menu re-opens.\n     */\n    closeOnParentClose(menuView) {\n        menuView.parentMenuView.on('change:isOpen', (evt, name, isOpen) => {\n            if (!isOpen && evt.source === menuView.parentMenuView) {\n                // @if CK_DEBUG_MENU_BAR // console.log( '[BEHAVIOR] closeOnParentClose(): Closing', logMenu( menuView ) );\n                menuView.isOpen = false;\n            }\n        });\n    }\n};\n// @if CK_DEBUG_MENU_BAR // function logMenu( menuView: MenuBarMenuView ) {\n// @if CK_DEBUG_MENU_BAR //\treturn `\"${ menuView.buttonView.label }\"`;\n// @if CK_DEBUG_MENU_BAR // }\n/**\n * Contains every positioning function used by {@link module:ui/menubar/menubarmenuview~MenuBarMenuView} that decides where the\n * {@link module:ui/menubar/menubarmenuview~MenuBarMenuView#panelView} should be placed.\n *\n * Top-level menu positioning functions:\n *\n *\t┌──────┐\n *\t│      │\n *\t├──────┴────────┐\n *\t│               │\n *\t│               │\n *\t│               │\n *\t│            SE │\n *\t└───────────────┘\n *\n *\t         ┌──────┐\n *\t         │      │\n *\t┌────────┴──────┤\n *\t│               │\n *\t│               │\n *\t│               │\n *\t│ SW            │\n *\t└───────────────┘\n *\n *\t┌───────────────┐\n *\t│ NW            │\n *\t│               │\n *\t│               │\n *\t│               │\n *\t└────────┬──────┤\n *\t         │      │\n *\t         └──────┘\n *\n *\t┌───────────────┐\n *\t│            NE │\n *\t│               │\n *\t│               │\n *\t│               │\n *\t├──────┬────────┘\n *\t│      │\n *\t└──────┘\n *\n * Sub-menu positioning functions:\n *\n *\t┌──────┬───────────────┐\n *\t│      │               │\n *\t└──────┤               │\n *\t       │               │\n *\t       │            ES │\n *\t       └───────────────┘\n *\n *\t┌───────────────┬──────┐\n *\t│               │      │\n *\t│               ├──────┘\n *\t│               │\n *\t│ WS            │\n *\t└───────────────┘\n *\n *\t       ┌───────────────┐\n *\t       │            EN │\n *\t       │               │\n *\t┌──────┤               │\n *\t│      │               │\n *\t└──────┴───────────────┘\n *\n *\t┌───────────────┐\n *\t│ WN            │\n *\t│               │\n *\t│               ├──────┐\n *\t│               │      │\n *\t└───────────────┴──────┘\n */\nexport const MenuBarMenuViewPanelPositioningFunctions = {\n    southEast: buttonRect => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left,\n            name: 'se'\n        };\n    },\n    southWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - panelRect.width + buttonRect.width,\n            name: 'sw'\n        };\n    },\n    northEast: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left,\n            name: 'ne'\n        };\n    },\n    northWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - panelRect.width + buttonRect.width,\n            name: 'nw'\n        };\n    },\n    eastSouth: buttonRect => {\n        return {\n            top: buttonRect.top,\n            left: buttonRect.right - NESTED_PANEL_HORIZONTAL_OFFSET,\n            name: 'es'\n        };\n    },\n    eastNorth: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.right - NESTED_PANEL_HORIZONTAL_OFFSET,\n            name: 'en'\n        };\n    },\n    westSouth: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top,\n            left: buttonRect.left - panelRect.width + NESTED_PANEL_HORIZONTAL_OFFSET,\n            name: 'ws'\n        };\n    },\n    westNorth: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - panelRect.width + NESTED_PANEL_HORIZONTAL_OFFSET,\n            name: 'wn'\n        };\n    }\n};\n/**\n * The default items {@link module:core/editor/editorconfig~EditorConfig#menuBar configuration} of the\n * {@link module:ui/menubar/menubarview~MenuBarView} component. It contains names of all menu bar components\n * registered in the {@link module:ui/componentfactory~ComponentFactory component factory} (available in the project).\n *\n * **Note**: Menu bar component names provided by core editor features are prefixed with `menuBar:` in order to distinguish\n * them from components referenced by the {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}, for instance,\n * `'menuBar:bold'` is a menu bar button but `'bold'` is a toolbar button.\n *\n * Below is the preset menu bar structure (the default value of `config.menuBar.items` property):\n *\n * ```ts\n * [\n * \t{\n * \t\tmenuId: 'file',\n * \t\tlabel: 'File',\n * \t\tgroups: [\n * \t\t\t{\n * \t\t\t\tgroupId: 'export',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:exportPdf',\n * \t\t\t\t\t'menuBar:exportWord'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'import',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:importWord'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'revisionHistory',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:revisionHistory'\n * \t\t\t\t]\n * \t\t\t}\n * \t\t]\n * \t},\n * \t{\n * \t\tmenuId: 'edit',\n * \t\tlabel: 'Edit',\n * \t\tgroups: [\n * \t\t\t{\n * \t\t\t\tgroupId: 'undo',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:undo',\n * \t\t\t\t\t'menuBar:redo'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'selectAll',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:selectAll'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'findAndReplace',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:findAndReplace'\n * \t\t\t\t]\n * \t\t\t}\n * \t\t]\n * \t},\n * \t{\n * \t\tmenuId: 'view',\n * \t\tlabel: 'View',\n * \t\tgroups: [\n * \t\t\t{\n * \t\t\t\tgroupId: 'sourceEditing',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:sourceEditing'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'showBlocks',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:showBlocks'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'previewMergeFields',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:previewMergeFields'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'restrictedEditingException',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:restrictedEditingException'\n * \t\t\t\t]\n * \t\t\t}\n * \t\t]\n * \t},\n * \t{\n * \t\tmenuId: 'insert',\n * \t\tlabel: 'Insert',\n * \t\tgroups: [\n * \t\t\t{\n * \t\t\t\tgroupId: 'insertMainWidgets',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:insertImage',\n * \t\t\t\t\t'menuBar:ckbox',\n * \t\t\t\t\t'menuBar:ckfinder',\n * \t\t\t\t\t'menuBar:insertTable'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'insertInline',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:link',\n * \t\t\t\t\t'menuBar:bookmark',\n * \t\t\t\t\t'menuBar:comment',\n * \t\t\t\t\t'menuBar:insertMergeField'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'insertMinorWidgets',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:mediaEmbed',\n * \t\t\t\t\t'menuBar:insertTemplate',\n * \t\t\t\t\t'menuBar:blockQuote',\n * \t\t\t\t\t'menuBar:codeBlock',\n * \t\t\t\t\t'menuBar:htmlEmbed'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'insertStructureWidgets',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:horizontalLine',\n * \t\t\t\t\t'menuBar:pageBreak',\n * \t\t\t\t\t'menuBar:tableOfContents'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'restrictedEditing',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:restrictedEditing'\n * \t\t\t\t]\n * \t\t\t}\n * \t\t]\n * \t},\n * \t{\n * \t\tmenuId: 'format',\n * \t\tlabel: 'Format',\n * \t\tgroups: [\n * \t\t\t{\n * \t\t\t\tgroupId: 'textAndFont',\n * \t\t\t\titems: [\n * \t\t\t\t\t{\n * \t\t\t\t\t\tmenuId: 'text',\n * \t\t\t\t\t\tlabel: 'Text',\n * \t\t\t\t\t\tgroups: [\n * \t\t\t\t\t\t\t{\n * \t\t\t\t\t\t\t\tgroupId: 'basicStyles',\n * \t\t\t\t\t\t\t\titems: [\n * \t\t\t\t\t\t\t\t\t'menuBar:bold',\n * \t\t\t\t\t\t\t\t\t'menuBar:italic',\n * \t\t\t\t\t\t\t\t\t'menuBar:underline',\n * \t\t\t\t\t\t\t\t\t'menuBar:strikethrough',\n * \t\t\t\t\t\t\t\t\t'menuBar:superscript',\n * \t\t\t\t\t\t\t\t\t'menuBar:subscript',\n * \t\t\t\t\t\t\t\t\t'menuBar:code'\n * \t\t\t\t\t\t\t\t]\n * \t\t\t\t\t\t\t},\n * \t\t\t\t\t\t\t{\n * \t\t\t\t\t\t\t\tgroupId: 'textPartLanguage',\n * \t\t\t\t\t\t\t\titems: [\n * \t\t\t\t\t\t\t\t\t'menuBar:textPartLanguage'\n * \t\t\t\t\t\t\t\t]\n * \t\t\t\t\t\t\t}\n * \t\t\t\t\t\t]\n * \t\t\t\t\t},\n * \t\t\t\t\t{\n * \t\t\t\t\t\tmenuId: 'font',\n * \t\t\t\t\t\tlabel: 'Font',\n * \t\t\t\t\t\tgroups: [\n * \t\t\t\t\t\t\t{\n * \t\t\t\t\t\t\t\tgroupId: 'fontProperties',\n * \t\t\t\t\t\t\t\titems: [\n * \t\t\t\t\t\t\t\t\t'menuBar:fontSize',\n * \t\t\t\t\t\t\t\t\t'menuBar:fontFamily'\n * \t\t\t\t\t\t\t\t]\n * \t\t\t\t\t\t\t},\n * \t\t\t\t\t\t\t{\n * \t\t\t\t\t\t\t\tgroupId: 'fontColors',\n * \t\t\t\t\t\t\t\titems: [\n * \t\t\t\t\t\t\t\t\t'menuBar:fontColor',\n * \t\t\t\t\t\t\t\t\t'menuBar:fontBackgroundColor'\n * \t\t\t\t\t\t\t\t]\n * \t\t\t\t\t\t\t},\n * \t\t\t\t\t\t\t{\n * \t\t\t\t\t\t\t\tgroupId: 'highlight',\n * \t\t\t\t\t\t\t\titems: [\n * \t\t\t\t\t\t\t\t\t'menuBar:highlight'\n * \t\t\t\t\t\t\t\t]\n * \t\t\t\t\t\t\t}\n * \t\t\t\t\t\t]\n * \t\t\t\t\t},\n * \t\t\t\t\t'menuBar:heading'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'list',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:bulletedList',\n * \t\t\t\t\t'menuBar:numberedList',\n * \t\t\t\t\t'menuBar:multiLevelList',\n * \t\t\t\t\t'menuBar:todoList'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'indent',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:alignment',\n * \t\t\t\t\t'menuBar:indent',\n * \t\t\t\t\t'menuBar:outdent'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'caseChange',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:caseChange'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'removeFormat',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:removeFormat'\n * \t\t\t\t]\n * \t\t\t}\n * \t\t]\n * \t},\n * \t{\n * \t\tmenuId: 'tools',\n * \t\tlabel: 'Tools',\n * \t\tgroups: [\n * \t\t\t{\n * \t\t\t\tgroupId: 'aiTools',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:aiAssistant',\n * \t\t\t\t\t'menuBar:aiCommands'\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\t{\n * \t\t\t\tgroupId: 'tools',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:trackChanges',\n * \t\t\t\t\t'menuBar:commentsArchive'\n * \t\t\t\t]\n * \t\t\t}\n * \t\t]\n * \t},\n * \t{\n * \t\tmenuId: 'help',\n * \t\tlabel: 'Help',\n * \t\tgroups: [\n * \t\t\t{\n * \t\t\t\tgroupId: 'help',\n * \t\t\t\titems: [\n * \t\t\t\t\t'menuBar:accessibilityHelp'\n * \t\t\t\t]\n * \t\t\t}\n * \t\t]\n * \t}\n * ];\n * ```\n *\n * The menu bar can be customized using the `config.menuBar.removeItems` and `config.menuBar.addItems` properties.\n */\n// **NOTE: Whenever you make changes to this value, reflect it in the documentation above!**\nexport const DefaultMenuBarItems = [\n    {\n        menuId: 'file',\n        label: 'File',\n        groups: [\n            {\n                groupId: 'export',\n                items: [\n                    'menuBar:exportPdf',\n                    'menuBar:exportWord'\n                ]\n            },\n            {\n                groupId: 'import',\n                items: [\n                    'menuBar:importWord'\n                ]\n            },\n            {\n                groupId: 'revisionHistory',\n                items: [\n                    'menuBar:revisionHistory'\n                ]\n            }\n        ]\n    },\n    {\n        menuId: 'edit',\n        label: 'Edit',\n        groups: [\n            {\n                groupId: 'undo',\n                items: [\n                    'menuBar:undo',\n                    'menuBar:redo'\n                ]\n            },\n            {\n                groupId: 'selectAll',\n                items: [\n                    'menuBar:selectAll'\n                ]\n            },\n            {\n                groupId: 'findAndReplace',\n                items: [\n                    'menuBar:findAndReplace'\n                ]\n            }\n        ]\n    },\n    {\n        menuId: 'view',\n        label: 'View',\n        groups: [\n            {\n                groupId: 'sourceEditing',\n                items: [\n                    'menuBar:sourceEditing'\n                ]\n            },\n            {\n                groupId: 'showBlocks',\n                items: [\n                    'menuBar:showBlocks'\n                ]\n            },\n            {\n                groupId: 'previewMergeFields',\n                items: [\n                    'menuBar:previewMergeFields'\n                ]\n            },\n            {\n                groupId: 'restrictedEditing',\n                items: [\n                    'menuBar:restrictedEditing'\n                ]\n            }\n        ]\n    },\n    {\n        menuId: 'insert',\n        label: 'Insert',\n        groups: [\n            {\n                groupId: 'insertMainWidgets',\n                items: [\n                    'menuBar:insertImage',\n                    'menuBar:ckbox',\n                    'menuBar:ckfinder',\n                    'menuBar:insertTable'\n                ]\n            },\n            {\n                groupId: 'insertInline',\n                items: [\n                    'menuBar:link',\n                    'menuBar:bookmark',\n                    'menuBar:comment',\n                    'menuBar:insertMergeField'\n                ]\n            },\n            {\n                groupId: 'insertMinorWidgets',\n                items: [\n                    'menuBar:mediaEmbed',\n                    'menuBar:insertTemplate',\n                    'menuBar:specialCharacters',\n                    'menuBar:blockQuote',\n                    'menuBar:codeBlock',\n                    'menuBar:htmlEmbed'\n                ]\n            },\n            {\n                groupId: 'insertStructureWidgets',\n                items: [\n                    'menuBar:horizontalLine',\n                    'menuBar:pageBreak',\n                    'menuBar:tableOfContents'\n                ]\n            },\n            {\n                groupId: 'restrictedEditingException',\n                items: [\n                    'menuBar:restrictedEditingException'\n                ]\n            }\n        ]\n    },\n    {\n        menuId: 'format',\n        label: 'Format',\n        groups: [\n            {\n                groupId: 'textAndFont',\n                items: [\n                    {\n                        menuId: 'text',\n                        label: 'Text',\n                        groups: [\n                            {\n                                groupId: 'basicStyles',\n                                items: [\n                                    'menuBar:bold',\n                                    'menuBar:italic',\n                                    'menuBar:underline',\n                                    'menuBar:strikethrough',\n                                    'menuBar:superscript',\n                                    'menuBar:subscript',\n                                    'menuBar:code'\n                                ]\n                            },\n                            {\n                                groupId: 'textPartLanguage',\n                                items: [\n                                    'menuBar:textPartLanguage'\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        menuId: 'font',\n                        label: 'Font',\n                        groups: [\n                            {\n                                groupId: 'fontProperties',\n                                items: [\n                                    'menuBar:fontSize',\n                                    'menuBar:fontFamily'\n                                ]\n                            },\n                            {\n                                groupId: 'fontColors',\n                                items: [\n                                    'menuBar:fontColor',\n                                    'menuBar:fontBackgroundColor'\n                                ]\n                            },\n                            {\n                                groupId: 'highlight',\n                                items: [\n                                    'menuBar:highlight'\n                                ]\n                            }\n                        ]\n                    },\n                    'menuBar:heading'\n                ]\n            },\n            {\n                groupId: 'list',\n                items: [\n                    'menuBar:bulletedList',\n                    'menuBar:numberedList',\n                    'menuBar:multiLevelList',\n                    'menuBar:todoList'\n                ]\n            },\n            {\n                groupId: 'indent',\n                items: [\n                    'menuBar:alignment',\n                    'menuBar:indent',\n                    'menuBar:outdent'\n                ]\n            },\n            {\n                groupId: 'caseChange',\n                items: [\n                    'menuBar:caseChange'\n                ]\n            },\n            {\n                groupId: 'removeFormat',\n                items: [\n                    'menuBar:removeFormat'\n                ]\n            }\n        ]\n    },\n    {\n        menuId: 'tools',\n        label: 'Tools',\n        groups: [\n            {\n                groupId: 'aiTools',\n                items: [\n                    'menuBar:aiAssistant',\n                    'menuBar:aiCommands'\n                ]\n            },\n            {\n                groupId: 'tools',\n                items: [\n                    'menuBar:trackChanges',\n                    'menuBar:commentsArchive'\n                ]\n            }\n        ]\n    },\n    {\n        menuId: 'help',\n        label: 'Help',\n        groups: [\n            {\n                groupId: 'help',\n                items: [\n                    'menuBar:accessibilityHelp'\n                ]\n            }\n        ]\n    }\n];\n/**\n * Performs a cleanup and normalization of the menu bar configuration.\n */\nexport function normalizeMenuBarConfig(config) {\n    let configObject;\n    // The integrator specified the config as an object but without items. Let's give them defaults but respect their\n    // additions and removals.\n    if (!('items' in config) || !config.items) {\n        configObject = {\n            items: cloneDeep(DefaultMenuBarItems),\n            addItems: [],\n            removeItems: [],\n            isVisible: true,\n            isUsingDefaultConfig: true,\n            ...config\n        };\n    }\n    // The integrator specified the config as an object and there are items there. Let's take it as it is.\n    else {\n        configObject = {\n            items: config.items,\n            removeItems: [],\n            addItems: [],\n            isVisible: true,\n            isUsingDefaultConfig: false,\n            ...config\n        };\n    }\n    return configObject;\n}\n/**\n * Processes a normalized menu bar config and returns a config clone with the following modifications:\n *\n * * Removed components that are not available in the component factory,\n * * Removed obsolete separators,\n * * Purged empty menus,\n * * Localized top-level menu labels.\n */\nexport function processMenuBarConfig({ normalizedConfig, locale, componentFactory, extraItems }) {\n    const configClone = cloneDeep(normalizedConfig);\n    handleAdditions(normalizedConfig, configClone, extraItems);\n    handleRemovals(normalizedConfig, configClone);\n    handleAdditions(normalizedConfig, configClone, configClone.addItems);\n    purgeUnavailableComponents(normalizedConfig, configClone, componentFactory);\n    purgeEmptyMenus(normalizedConfig, configClone);\n    localizeMenuLabels(configClone, locale);\n    return configClone;\n}\n/**\n * Removes items from the menu bar config based on user `removeItems` configuration. Users can remove\n * individual items, groups, or entire menus. For each removed item, a warning is logged if the item\n * was not found in the configuration.\n */\nfunction handleRemovals(originalConfig, config) {\n    const itemsToBeRemoved = config.removeItems;\n    const successfullyRemovedItems = [];\n    // Remove top-level menus.\n    config.items = config.items.filter(({ menuId }) => {\n        if (itemsToBeRemoved.includes(menuId)) {\n            successfullyRemovedItems.push(menuId);\n            return false;\n        }\n        return true;\n    });\n    walkConfigMenus(config.items, menuDefinition => {\n        // Remove groups from menus.\n        menuDefinition.groups = menuDefinition.groups.filter(({ groupId }) => {\n            if (itemsToBeRemoved.includes(groupId)) {\n                successfullyRemovedItems.push(groupId);\n                return false;\n            }\n            return true;\n        });\n        // Remove sub-menus and items from groups.\n        for (const groupDefinition of menuDefinition.groups) {\n            groupDefinition.items = groupDefinition.items.filter(item => {\n                const itemId = getIdFromGroupItem(item);\n                if (itemsToBeRemoved.includes(itemId)) {\n                    successfullyRemovedItems.push(itemId);\n                    return false;\n                }\n                return true;\n            });\n        }\n    });\n    for (const itemName of itemsToBeRemoved) {\n        if (!successfullyRemovedItems.includes(itemName)) {\n            /**\n             * There was a problem processing the configuration of the menu bar. The item with the given\n             * name does could not be removed from the menu bar configuration.\n             *\n             * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n             * to provide a menu bar item has not been loaded or there is a typo in the\n             * {@link module:core/editor/editorconfig~EditorConfig#menuBar menu bar configuration}.\n             *\n             * @error menu-bar-item-could-not-be-removed\n             * @param menuBarConfig The full configuration of the menu bar.\n             * @param itemName The name of the item that was not removed from the menu bar.\n             */\n            logWarning('menu-bar-item-could-not-be-removed', {\n                menuBarConfig: originalConfig,\n                itemName\n            });\n        }\n    }\n}\n/**\n * Adds provided items to config. It allows for adding menus, groups, and items at arbitrary\n * positions in the menu bar. If the position does not exist, a warning is logged.\n */\nfunction handleAdditions(originalConfig, config, items) {\n    const successFullyAddedItems = [];\n    if (items.length == 0) {\n        return;\n    }\n    for (const itemToAdd of items) {\n        const relation = getRelationFromPosition(itemToAdd.position);\n        const relativeId = getRelativeIdFromPosition(itemToAdd.position);\n        // Adding a menu.\n        if (isMenuBarMenuAddition(itemToAdd)) {\n            if (!relativeId) {\n                // Adding a top-level menu at the beginning of the menu bar.\n                if (relation === 'start') {\n                    config.items.unshift(itemToAdd.menu);\n                    successFullyAddedItems.push(itemToAdd);\n                }\n                // Adding a top-level menu at the end of the menu bar.\n                else if (relation === 'end') {\n                    config.items.push(itemToAdd.menu);\n                    successFullyAddedItems.push(itemToAdd);\n                }\n            }\n            else {\n                const topLevelMenuDefinitionIndex = config.items.findIndex(menuDefinition => menuDefinition.menuId === relativeId);\n                // Adding a top-level menu somewhere between existing menu bar menus.\n                if (topLevelMenuDefinitionIndex != -1) {\n                    if (relation === 'before') {\n                        config.items.splice(topLevelMenuDefinitionIndex, 0, itemToAdd.menu);\n                        successFullyAddedItems.push(itemToAdd);\n                    }\n                    else if (relation === 'after') {\n                        config.items.splice(topLevelMenuDefinitionIndex + 1, 0, itemToAdd.menu);\n                        successFullyAddedItems.push(itemToAdd);\n                    }\n                }\n                // Adding a sub-menu to an existing items group.\n                else {\n                    const wasAdded = addMenuOrItemToGroup(config, itemToAdd.menu, relativeId, relation);\n                    if (wasAdded) {\n                        successFullyAddedItems.push(itemToAdd);\n                    }\n                }\n            }\n        }\n        // Adding a group.\n        else if (isMenuBarMenuGroupAddition(itemToAdd)) {\n            walkConfigMenus(config.items, menuDefinition => {\n                if (menuDefinition.menuId === relativeId) {\n                    // Add a group at the start of a menu.\n                    if (relation === 'start') {\n                        menuDefinition.groups.unshift(itemToAdd.group);\n                        successFullyAddedItems.push(itemToAdd);\n                    }\n                    // Add a group at the end of a menu.\n                    else if (relation === 'end') {\n                        menuDefinition.groups.push(itemToAdd.group);\n                        successFullyAddedItems.push(itemToAdd);\n                    }\n                }\n                else {\n                    const relativeGroupIndex = menuDefinition.groups.findIndex(group => group.groupId === relativeId);\n                    if (relativeGroupIndex !== -1) {\n                        // Add a group before an existing group in a menu.\n                        if (relation === 'before') {\n                            menuDefinition.groups.splice(relativeGroupIndex, 0, itemToAdd.group);\n                            successFullyAddedItems.push(itemToAdd);\n                        }\n                        // Add a group after an existing group in a menu.\n                        else if (relation === 'after') {\n                            menuDefinition.groups.splice(relativeGroupIndex + 1, 0, itemToAdd.group);\n                            successFullyAddedItems.push(itemToAdd);\n                        }\n                    }\n                }\n            });\n        }\n        // Adding an item to an existing items group.\n        else {\n            const wasAdded = addMenuOrItemToGroup(config, itemToAdd.item, relativeId, relation);\n            if (wasAdded) {\n                successFullyAddedItems.push(itemToAdd);\n            }\n        }\n    }\n    for (const addedItemConfig of items) {\n        if (!successFullyAddedItems.includes(addedItemConfig)) {\n            /**\n             * There was a problem processing the configuration of the menu bar. The configured item could not be added\n             * because the position it was supposed to be added to does not exist.\n             *\n             * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n             * to provide a menu bar item has not been loaded or there is a typo in the\n             * {@link module:core/editor/editorconfig~EditorConfig#menuBar menu bar configuration}.\n             *\n             * @error menu-bar-item-could-not-be-removed\n             * @param menuBarConfig The full configuration of the menu bar.\n             * @param itemName The name of the item that was not removed from the menu bar.\n             */\n            logWarning('menu-bar-item-could-not-be-added', {\n                menuBarConfig: originalConfig,\n                addedItemConfig\n            });\n        }\n    }\n}\n/**\n * Handles adding a sub-menu or an item into a group. The logic is the same for both cases.\n */\nfunction addMenuOrItemToGroup(config, itemOrMenuToAdd, relativeId, relation) {\n    let wasAdded = false;\n    walkConfigMenus(config.items, menuDefinition => {\n        for (const { groupId, items: groupItems } of menuDefinition.groups) {\n            // Avoid infinite loops.\n            if (wasAdded) {\n                return;\n            }\n            if (groupId === relativeId) {\n                // Adding an item/menu at the beginning of a group.\n                if (relation === 'start') {\n                    groupItems.unshift(itemOrMenuToAdd);\n                    wasAdded = true;\n                }\n                // Adding an item/menu at the end of a group.\n                else if (relation === 'end') {\n                    groupItems.push(itemOrMenuToAdd);\n                    wasAdded = true;\n                }\n            }\n            else {\n                // Adding an item/menu relative to an existing item/menu.\n                const relativeItemIndex = groupItems.findIndex(groupItem => {\n                    return getIdFromGroupItem(groupItem) === relativeId;\n                });\n                if (relativeItemIndex !== -1) {\n                    if (relation === 'before') {\n                        groupItems.splice(relativeItemIndex, 0, itemOrMenuToAdd);\n                        wasAdded = true;\n                    }\n                    else if (relation === 'after') {\n                        groupItems.splice(relativeItemIndex + 1, 0, itemOrMenuToAdd);\n                        wasAdded = true;\n                    }\n                }\n            }\n        }\n    });\n    return wasAdded;\n}\n/**\n * Removes components from the menu bar configuration that are not available in the factory and would\n * not be instantiated. Warns about missing components if the menu bar configuration was specified by the user.\n */\nfunction purgeUnavailableComponents(originalConfig, config, componentFactory) {\n    walkConfigMenus(config.items, menuDefinition => {\n        for (const groupDefinition of menuDefinition.groups) {\n            groupDefinition.items = groupDefinition.items.filter(item => {\n                const isItemUnavailable = typeof item === 'string' && !componentFactory.has(item);\n                // The default configuration contains all possible editor features. But integrators' editors rarely load\n                // every possible feature. This is why we do not want to log warnings about unavailable items for the default config\n                // because they would show up in almost every integration. If the configuration has been provided by\n                // the integrator, on the other hand, then these warnings bring value.\n                if (isItemUnavailable && !config.isUsingDefaultConfig) {\n                    /**\n                     * There was a problem processing the configuration of the menu bar. The item with the given\n                     * name does not exist so it was omitted when rendering the menu bar.\n                     *\n                     * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n                     * to provide a menu bar item has not been loaded or there is a typo in the\n                     * {@link module:core/editor/editorconfig~EditorConfig#menuBar menu bar configuration}.\n                     *\n                     * Make sure the plugin responsible for this menu bar item is loaded and the menu bar configuration\n                     * is correct, e.g. {@link module:basic-styles/bold/boldui~BoldUI} is loaded for the `'menuBar:bold'`\n                     * menu bar item.\n                     *\n                     * @error menu-bar-item-unavailable\n                     * @param menuBarConfig The full configuration of the menu bar.\n                     * @param parentMenuConfig The config of the menu the unavailable component was defined in.\n                     * @param componentName The name of the unavailable component.\n                     */\n                    logWarning('menu-bar-item-unavailable', {\n                        menuBarConfig: originalConfig,\n                        parentMenuConfig: cloneDeep(menuDefinition),\n                        componentName: item\n                    });\n                }\n                return !isItemUnavailable;\n            });\n        }\n    });\n}\n/**\n * Removes empty menus from the menu bar configuration to improve the visual UX. Such menus can occur\n * when some plugins responsible for providing menu bar items have not been loaded and some part of\n * the configuration populated menus using these components exclusively.\n */\nfunction purgeEmptyMenus(originalConfig, config) {\n    const isUsingDefaultConfig = config.isUsingDefaultConfig;\n    let wasSubMenuPurged = false;\n    // Purge top-level menus.\n    config.items = config.items.filter(menuDefinition => {\n        if (!menuDefinition.groups.length) {\n            warnAboutEmptyMenu(originalConfig, menuDefinition, isUsingDefaultConfig);\n            return false;\n        }\n        return true;\n    });\n    // Warn if there were no top-level menus left in the menu bar after purging.\n    if (!config.items.length) {\n        warnAboutEmptyMenu(originalConfig, originalConfig, isUsingDefaultConfig);\n        return;\n    }\n    // Purge sub-menus and groups.\n    walkConfigMenus(config.items, menuDefinition => {\n        // Get rid of empty groups.\n        menuDefinition.groups = menuDefinition.groups.filter(groupDefinition => {\n            if (!groupDefinition.items.length) {\n                wasSubMenuPurged = true;\n                return false;\n            }\n            return true;\n        });\n        // Get rid of empty sub-menus.\n        for (const groupDefinition of menuDefinition.groups) {\n            groupDefinition.items = groupDefinition.items.filter(item => {\n                // If no groups were left after removing empty ones.\n                if (isMenuDefinition(item) && !item.groups.length) {\n                    warnAboutEmptyMenu(originalConfig, item, isUsingDefaultConfig);\n                    wasSubMenuPurged = true;\n                    return false;\n                }\n                return true;\n            });\n        }\n    });\n    if (wasSubMenuPurged) {\n        // The config is walked from the root to the leaves so if anything gets removed, we need to re-run the\n        // whole process because it could've affected parents.\n        purgeEmptyMenus(originalConfig, config);\n    }\n}\nfunction warnAboutEmptyMenu(originalConfig, emptyMenuConfig, isUsingDefaultConfig) {\n    if (isUsingDefaultConfig) {\n        return;\n    }\n    /**\n     * There was a problem processing the configuration of the menu bar. One of the menus\n     * is empty so it was omitted when rendering the menu bar.\n     *\n     * This warning usually shows up when some {@link module:core/plugin~Plugin plugins} responsible for\n     * providing menu bar items have not been loaded and the\n     * {@link module:core/editor/editorconfig~EditorConfig#menuBar menu bar configuration} was not updated.\n     *\n     * Make sure all necessary editor plugins are loaded and/or update the menu bar configuration\n     * to account for the missing menu items.\n     *\n     * @error menu-bar-menu-empty\n     * @param menuBarConfig The full configuration of the menu bar.\n     * @param emptyMenuConfig The definition of the menu that has no child items.\n     */\n    logWarning('menu-bar-menu-empty', {\n        menuBarConfig: originalConfig,\n        emptyMenuConfig\n    });\n}\n/**\n * Localizes the user-config using pre-defined localized category labels.\n */\nfunction localizeMenuLabels(config, locale) {\n    const t = locale.t;\n    const localizedCategoryLabels = {\n        // Top-level categories.\n        'File': t({\n            string: 'File',\n            id: 'MENU_BAR_MENU_FILE'\n        }),\n        'Edit': t({\n            string: 'Edit',\n            id: 'MENU_BAR_MENU_EDIT'\n        }),\n        'View': t({\n            string: 'View',\n            id: 'MENU_BAR_MENU_VIEW'\n        }),\n        'Insert': t({\n            string: 'Insert',\n            id: 'MENU_BAR_MENU_INSERT'\n        }),\n        'Format': t({\n            string: 'Format',\n            id: 'MENU_BAR_MENU_FORMAT'\n        }),\n        'Tools': t({\n            string: 'Tools',\n            id: 'MENU_BAR_MENU_TOOLS'\n        }),\n        'Help': t({\n            string: 'Help',\n            id: 'MENU_BAR_MENU_HELP'\n        }),\n        // Sub-menus.\n        'Text': t({\n            string: 'Text',\n            id: 'MENU_BAR_MENU_TEXT'\n        }),\n        'Font': t({\n            string: 'Font',\n            id: 'MENU_BAR_MENU_FONT'\n        })\n    };\n    walkConfigMenus(config.items, definition => {\n        if (definition.label in localizedCategoryLabels) {\n            definition.label = localizedCategoryLabels[definition.label];\n        }\n    });\n}\n/**\n * Recursively visits all menu definitions in the config and calls the callback for each of them.\n */\nfunction walkConfigMenus(definition, callback) {\n    if (Array.isArray(definition)) {\n        for (const topLevelMenuDefinition of definition) {\n            walk(topLevelMenuDefinition);\n        }\n    }\n    function walk(menuDefinition) {\n        callback(menuDefinition);\n        for (const groupDefinition of menuDefinition.groups) {\n            for (const groupItem of groupDefinition.items) {\n                if (isMenuDefinition(groupItem)) {\n                    walk(groupItem);\n                }\n            }\n        }\n    }\n}\nfunction isMenuBarMenuAddition(definition) {\n    return typeof definition === 'object' && 'menu' in definition;\n}\nfunction isMenuBarMenuGroupAddition(definition) {\n    return typeof definition === 'object' && 'group' in definition;\n}\nfunction getRelationFromPosition(position) {\n    if (position.startsWith('start')) {\n        return 'start';\n    }\n    else if (position.startsWith('end')) {\n        return 'end';\n    }\n    else if (position.startsWith('after')) {\n        return 'after';\n    }\n    else {\n        return 'before';\n    }\n}\nfunction getRelativeIdFromPosition(position) {\n    const match = position.match(/^[^:]+:(.+)/);\n    if (match) {\n        return match[1];\n    }\n    return null;\n}\nfunction getIdFromGroupItem(item) {\n    return typeof item === 'string' ? item : item.menuId;\n}\nfunction isMenuDefinition(definition) {\n    return typeof definition === 'object' && 'menuId' in definition;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/editorui\n */\n/* globals console */\nimport ComponentFactory from '../componentfactory.js';\nimport TooltipManager from '../tooltipmanager.js';\nimport PoweredBy from './poweredby.js';\nimport EvaluationBadge from './evaluationbadge.js';\nimport AriaLiveAnnouncer from '../arialiveannouncer.js';\nimport { ObservableMixin, isVisible, FocusTracker } from '@ckeditor/ckeditor5-utils';\nimport { normalizeMenuBarConfig } from '../menubar/utils.js';\n/**\n * A class providing the minimal interface that is required to successfully bootstrap any editor UI.\n */\nexport default class EditorUI extends /* #__PURE__ */ ObservableMixin() {\n    /**\n     * Creates an instance of the editor UI class.\n     *\n     * @param editor The editor instance.\n     */\n    constructor(editor) {\n        super();\n        /**\n         * Indicates the UI is ready. Set `true` after {@link #event:ready} event is fired.\n         *\n         * @readonly\n         * @default false\n         */\n        this.isReady = false;\n        /**\n         * Stores all editable elements used by the editor instance.\n         */\n        this._editableElementsMap = new Map();\n        /**\n         * All available & focusable toolbars.\n         */\n        this._focusableToolbarDefinitions = [];\n        /**\n         * All additional menu bar items, groups or menus that have their default location defined.\n         */\n        this._extraMenuBarElements = [];\n        /**\n         * The last focused element to which focus should return on `Esc` press.\n         */\n        this._lastFocusedForeignElement = null;\n        const editingView = editor.editing.view;\n        this.editor = editor;\n        this.componentFactory = new ComponentFactory(editor);\n        this.focusTracker = new FocusTracker();\n        this.tooltipManager = new TooltipManager(editor);\n        this.poweredBy = new PoweredBy(editor);\n        this.evaluationBadge = new EvaluationBadge(editor);\n        this.ariaLiveAnnouncer = new AriaLiveAnnouncer(editor);\n        this.set('viewportOffset', this._readViewportOffsetFromConfig());\n        this.once('ready', () => {\n            this._bindBodyCollectionWithFocusTracker();\n            this.isReady = true;\n        });\n        // Informs UI components that should be refreshed after layout change.\n        this.listenTo(editingView.document, 'layoutChanged', this.update.bind(this));\n        this.listenTo(editingView, 'scrollToTheSelection', this._handleScrollToTheSelection.bind(this));\n        this._initFocusTracking();\n    }\n    /**\n     * The main (outermost) DOM element of the editor UI.\n     *\n     * For example, in {@link module:editor-classic/classiceditor~ClassicEditor} it is a `<div>` which\n     * wraps the editable element and the toolbar. In {@link module:editor-inline/inlineeditor~InlineEditor}\n     * it is the editable element itself (as there is no other wrapper). However, in\n     * {@link module:editor-decoupled/decouplededitor~DecoupledEditor} it is set to `null` because this editor does not\n     * come with a single \"main\" HTML element (its editable element and toolbar are separate).\n     *\n     * This property can be understood as a shorthand for retrieving the element that a specific editor integration\n     * considers to be its main DOM element.\n     */\n    get element() {\n        return null;\n    }\n    /**\n     * Fires the {@link module:ui/editorui/editorui~EditorUI#event:update `update`} event.\n     *\n     * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to\n     * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).\n     */\n    update() {\n        this.fire('update');\n    }\n    /**\n     * Destroys the UI.\n     */\n    destroy() {\n        this.stopListening();\n        this.focusTracker.destroy();\n        this.tooltipManager.destroy(this.editor);\n        this.poweredBy.destroy();\n        this.evaluationBadge.destroy();\n        // Clean–up the references to the CKEditor instance stored in the native editable DOM elements.\n        for (const domElement of this._editableElementsMap.values()) {\n            domElement.ckeditorInstance = null;\n            this.editor.keystrokes.stopListening(domElement);\n        }\n        this._editableElementsMap = new Map();\n        this._focusableToolbarDefinitions = [];\n    }\n    /**\n     * Stores the native DOM editable element used by the editor under a unique name.\n     *\n     * Also, registers the element in the editor to maintain the accessibility of the UI. When the user is editing text in a focusable\n     * editable area, they can use the <kbd>Alt</kbd> + <kbd>F10</kbd> keystroke to navigate over editor toolbars. See {@link #addToolbar}.\n     *\n     * @param rootName The unique name of the editable element.\n     * @param domElement The native DOM editable element.\n     */\n    setEditableElement(rootName, domElement) {\n        this._editableElementsMap.set(rootName, domElement);\n        // Put a reference to the CKEditor instance in the editable native DOM element.\n        // It helps 3rd–party software (browser extensions, other libraries) access and recognize\n        // CKEditor 5 instances (editing roots) and use their API (there is no global editor\n        // instance registry).\n        if (!domElement.ckeditorInstance) {\n            domElement.ckeditorInstance = this.editor;\n        }\n        // Register the element, so it becomes available for Alt+F10 and Esc navigation.\n        this.focusTracker.add(domElement);\n        const setUpKeystrokeHandler = () => {\n            // The editing view of the editor is already listening to keystrokes from DOM roots (see: KeyObserver).\n            // Do not duplicate listeners.\n            if (this.editor.editing.view.getDomRoot(rootName)) {\n                return;\n            }\n            this.editor.keystrokes.listenTo(domElement);\n        };\n        // For editable elements set by features after EditorUI is ready (e.g. source editing).\n        if (this.isReady) {\n            setUpKeystrokeHandler();\n        }\n        // For editable elements set while the editor is being created (e.g. DOM roots).\n        else {\n            this.once('ready', setUpKeystrokeHandler);\n        }\n    }\n    /**\n     * Removes the editable from the editor UI. Removes all handlers added by {@link #setEditableElement}.\n     *\n     * @param rootName The name of the editable element to remove.\n     */\n    removeEditableElement(rootName) {\n        const domElement = this._editableElementsMap.get(rootName);\n        if (!domElement) {\n            return;\n        }\n        this._editableElementsMap.delete(rootName);\n        this.editor.keystrokes.stopListening(domElement);\n        this.focusTracker.remove(domElement);\n        domElement.ckeditorInstance = null;\n    }\n    /**\n     * Returns the editable editor element with the given name or null if editable does not exist.\n     *\n     * @param rootName The editable name.\n     */\n    getEditableElement(rootName = 'main') {\n        return this._editableElementsMap.get(rootName);\n    }\n    /**\n     * Returns array of names of all editor editable elements.\n     */\n    getEditableElementsNames() {\n        return this._editableElementsMap.keys();\n    }\n    /**\n     * Adds a toolbar to the editor UI. Used primarily to maintain the accessibility of the UI.\n     *\n     * Focusable toolbars can be accessed (focused) by users by pressing the <kbd>Alt</kbd> + <kbd>F10</kbd> keystroke.\n     * Successive keystroke presses navigate over available toolbars.\n     *\n     * @param toolbarView A instance of the toolbar to be registered.\n     */\n    addToolbar(toolbarView, options = {}) {\n        if (toolbarView.isRendered) {\n            this.focusTracker.add(toolbarView);\n            this.editor.keystrokes.listenTo(toolbarView.element);\n        }\n        else {\n            toolbarView.once('render', () => {\n                this.focusTracker.add(toolbarView);\n                this.editor.keystrokes.listenTo(toolbarView.element);\n            });\n        }\n        this._focusableToolbarDefinitions.push({ toolbarView, options });\n    }\n    /**\n     * Registers an extra menu bar element, which could be a single item, a group of items, or a menu containing groups.\n     *\n     * ```ts\n     * // Register a new menu bar item.\n     * editor.ui.extendMenuBar( {\n     *   item: 'menuBar:customFunctionButton',\n     *   position: 'after:menuBar:bold'\n     * } );\n     *\n     * // Register a new menu bar group.\n     * editor.ui.extendMenuBar( {\n     *   group: {\n     *     groupId: 'customGroup',\n     *     items: [\n     *       'menuBar:customFunctionButton'\n     *     ]\n     *   },\n     *   position: 'start:help'\n     * } );\n     *\n     * // Register a new menu bar menu.\n     * editor.ui.extendMenuBar( {\n     *   menu: {\n     *     menuId: 'customMenu',\n     *     label: 'customMenu',\n     *     groups: [\n     *       {\n     *         groupId: 'customGroup',\n     *         items: [\n     *           'menuBar:customFunctionButton'\n     *         ]\n     *       }\n     *     ]\n     *   },\n     *   position: 'after:help'\n     * } );\n     * ```\n     */\n    extendMenuBar(config) {\n        this._extraMenuBarElements.push(config);\n    }\n    /**\n     * Stores all editable elements used by the editor instance.\n     *\n     * @deprecated\n     */\n    get _editableElements() {\n        /**\n         * The {@link module:ui/editorui/editorui~EditorUI#_editableElements `EditorUI#_editableElements`} property has been\n         * deprecated and will be removed in the near future. Please use\n         * {@link module:ui/editorui/editorui~EditorUI#setEditableElement `setEditableElement()`} and\n         * {@link module:ui/editorui/editorui~EditorUI#getEditableElement `getEditableElement()`} methods instead.\n         *\n         * @error editor-ui-deprecated-editable-elements\n         * @param editorUI Editor UI instance the deprecated property belongs to.\n         */\n        console.warn('editor-ui-deprecated-editable-elements: ' +\n            'The EditorUI#_editableElements property has been deprecated and will be removed in the near future.', { editorUI: this });\n        return this._editableElementsMap;\n    }\n    /**\n     * Initializes menu bar.\n     */\n    _initMenuBar(menuBarView) {\n        const menuBarViewElement = menuBarView.element;\n        this.focusTracker.add(menuBarViewElement);\n        this.editor.keystrokes.listenTo(menuBarViewElement);\n        const normalizedMenuBarConfig = normalizeMenuBarConfig(this.editor.config.get('menuBar') || {});\n        menuBarView.fillFromConfig(normalizedMenuBarConfig, this.componentFactory, this._extraMenuBarElements);\n        this.editor.keystrokes.set('Esc', (data, cancel) => {\n            if (!menuBarViewElement.contains(this.editor.ui.focusTracker.focusedElement)) {\n                return;\n            }\n            // Bring focus back to where it came from before focusing the toolbar:\n            // If it came from outside the engine view (e.g. source editing), move it there.\n            if (this._lastFocusedForeignElement) {\n                this._lastFocusedForeignElement.focus();\n                this._lastFocusedForeignElement = null;\n            }\n            // Else just focus the view editing.\n            else {\n                this.editor.editing.view.focus();\n            }\n            cancel();\n        });\n        this.editor.keystrokes.set('Alt+F9', (data, cancel) => {\n            // If menu bar is already focused do nothing.\n            if (menuBarViewElement.contains(this.editor.ui.focusTracker.focusedElement)) {\n                return;\n            }\n            this._saveLastFocusedForeignElement();\n            menuBarView.isFocusBorderEnabled = true;\n            menuBarView.focus();\n            cancel();\n        });\n    }\n    /**\n     * Returns viewport offsets object:\n     *\n     * ```js\n     * {\n     * \ttop: Number,\n     * \tright: Number,\n     * \tbottom: Number,\n     * \tleft: Number\n     * }\n     * ```\n     *\n     * Only top property is currently supported.\n     */\n    _readViewportOffsetFromConfig() {\n        const editor = this.editor;\n        const viewportOffsetConfig = editor.config.get('ui.viewportOffset');\n        if (viewportOffsetConfig) {\n            return viewportOffsetConfig;\n        }\n        // Not present in EditorConfig type, because it's legacy. Hence the `as` expression.\n        const legacyOffsetConfig = editor.config.get('toolbar.viewportTopOffset');\n        // Fall back to deprecated toolbar config.\n        if (legacyOffsetConfig) {\n            /**\n             * The {@link module:core/editor/editorconfig~EditorConfig#toolbar `EditorConfig#toolbar.viewportTopOffset`}\n             * property has been deprecated and will be removed in the near future. Please use\n             * {@link module:core/editor/editorconfig~EditorConfig#ui `EditorConfig#ui.viewportOffset`} instead.\n             *\n             * @error editor-ui-deprecated-viewport-offset-config\n             */\n            console.warn('editor-ui-deprecated-viewport-offset-config: ' +\n                'The `toolbar.vieportTopOffset` configuration option is deprecated. ' +\n                'It will be removed from future CKEditor versions. Use `ui.viewportOffset.top` instead.');\n            return { top: legacyOffsetConfig };\n        }\n        // More keys to come in the future.\n        return { top: 0 };\n    }\n    /**\n     * Starts listening for <kbd>Alt</kbd> + <kbd>F10</kbd> and <kbd>Esc</kbd> keystrokes in the context of focusable\n     * {@link #setEditableElement editable elements} and {@link #addToolbar toolbars}\n     * to allow users navigate across the UI.\n     */\n    _initFocusTracking() {\n        const editor = this.editor;\n        let candidateDefinitions;\n        // Focus the next focusable toolbar on <kbd>Alt</kbd> + <kbd>F10</kbd>.\n        editor.keystrokes.set('Alt+F10', (data, cancel) => {\n            this._saveLastFocusedForeignElement();\n            const currentFocusedToolbarDefinition = this._getCurrentFocusedToolbarDefinition();\n            // * When focusing a toolbar for the first time, set the array of definitions for successive presses of Alt+F10.\n            // This ensures, the navigation works always the same and no pair of toolbars takes over\n            // (e.g. image and table toolbars when a selected image is inside a cell).\n            // * It could be that the focus went to the toolbar by clicking a toolbar item (e.g. a dropdown). In this case,\n            // there were no candidates so they must be obtained (#12339).\n            if (!currentFocusedToolbarDefinition || !candidateDefinitions) {\n                candidateDefinitions = this._getFocusableCandidateToolbarDefinitions();\n            }\n            // In a single Alt+F10 press, check all candidates but if none were focused, don't go any further.\n            // This prevents an infinite loop.\n            for (let i = 0; i < candidateDefinitions.length; i++) {\n                const candidateDefinition = candidateDefinitions.shift();\n                // Put the first definition to the back of the array. This allows circular navigation over all toolbars\n                // on successive presses of Alt+F10.\n                candidateDefinitions.push(candidateDefinition);\n                // Don't focus the same toolbar again. If you did, this would move focus from the nth focused toolbar item back to the\n                // first item as per ToolbarView#focus() if the user navigated inside the toolbar.\n                if (candidateDefinition !== currentFocusedToolbarDefinition &&\n                    this._focusFocusableCandidateToolbar(candidateDefinition)) {\n                    // Clean up after a current visible toolbar when switching to the next one.\n                    if (currentFocusedToolbarDefinition && currentFocusedToolbarDefinition.options.afterBlur) {\n                        currentFocusedToolbarDefinition.options.afterBlur();\n                    }\n                    break;\n                }\n            }\n            cancel();\n        });\n        // Blur the focused toolbar on <kbd>Esc</kbd> and bring the focus back to its origin.\n        editor.keystrokes.set('Esc', (data, cancel) => {\n            const focusedToolbarDef = this._getCurrentFocusedToolbarDefinition();\n            if (!focusedToolbarDef) {\n                return;\n            }\n            // Bring focus back to where it came from before focusing the toolbar:\n            // 1. If it came from outside the engine view (e.g. source editing), move it there.\n            if (this._lastFocusedForeignElement) {\n                this._lastFocusedForeignElement.focus();\n                this._lastFocusedForeignElement = null;\n            }\n            // 2. There are two possibilities left:\n            //   2.1. It could be that the focus went from an editable element in the view (root or nested).\n            //   2.2. It could be the focus went straight to the toolbar before even focusing the editing area.\n            // In either case, just focus the view editing. The focus will land where it belongs.\n            else {\n                editor.editing.view.focus();\n            }\n            // Clean up after the toolbar if there is anything to do there.\n            if (focusedToolbarDef.options.afterBlur) {\n                focusedToolbarDef.options.afterBlur();\n            }\n            cancel();\n        });\n    }\n    /**\n     * Saves last focused element that doen not belong to editing view to restore focus on `Esc`.\n     */\n    _saveLastFocusedForeignElement() {\n        const focusedElement = this.focusTracker.focusedElement;\n        // Focus moved out of a DOM element that\n        // * is not a toolbar,\n        // * does not belong to the editing view (e.g. source editing).\n        if (Array.from(this._editableElementsMap.values()).includes(focusedElement) &&\n            !Array.from(this.editor.editing.view.domRoots.values()).includes(focusedElement)) {\n            this._lastFocusedForeignElement = focusedElement;\n        }\n    }\n    /**\n     * Returns definitions of toolbars that could potentially be focused, sorted by their importance for the user.\n     *\n     * Focusable toolbars candidates are either:\n     * * already visible,\n     * * have `beforeFocus()` set in their {@link module:ui/editorui/editorui~FocusableToolbarDefinition definition} that suggests that\n     * they might show up when called. Keep in mind that determining whether a toolbar will show up (and become focusable) is impossible\n     * at this stage because it depends on its implementation, that in turn depends on the editing context (selection).\n     *\n     * **Note**: Contextual toolbars take precedence over regular toolbars.\n     */\n    _getFocusableCandidateToolbarDefinitions() {\n        const definitions = [];\n        for (const toolbarDef of this._focusableToolbarDefinitions) {\n            const { toolbarView, options } = toolbarDef;\n            if (isVisible(toolbarView.element) || options.beforeFocus) {\n                definitions.push(toolbarDef);\n            }\n        }\n        // Contextual and already visible toolbars have higher priority. If both are true, the toolbar will always focus first.\n        // For instance, a selected widget toolbar vs inline editor toolbar: both are visible but the widget toolbar is contextual.\n        definitions.sort((defA, defB) => getToolbarDefinitionWeight(defA) - getToolbarDefinitionWeight(defB));\n        return definitions;\n    }\n    /**\n     * Returns a definition of the toolbar that is currently visible and focused (one of its children has focus).\n     *\n     * `null` is returned when no toolbar is currently focused.\n     */\n    _getCurrentFocusedToolbarDefinition() {\n        for (const definition of this._focusableToolbarDefinitions) {\n            if (definition.toolbarView.element && definition.toolbarView.element.contains(this.focusTracker.focusedElement)) {\n                return definition;\n            }\n        }\n        return null;\n    }\n    /**\n     * Focuses a focusable toolbar candidate using its definition.\n     *\n     * @param candidateToolbarDefinition A definition of the toolbar to focus.\n     * @returns `true` when the toolbar candidate was focused. `false` otherwise.\n     */\n    _focusFocusableCandidateToolbar(candidateToolbarDefinition) {\n        const { toolbarView, options: { beforeFocus } } = candidateToolbarDefinition;\n        if (beforeFocus) {\n            beforeFocus();\n        }\n        // If it didn't show up after beforeFocus(), it's not focusable at all.\n        if (!isVisible(toolbarView.element)) {\n            return false;\n        }\n        toolbarView.focus();\n        return true;\n    }\n    /**\n     * Provides an integration between {@link #viewportOffset} and {@link module:utils/dom/scroll~scrollViewportToShowTarget}.\n     * It allows the UI-agnostic engine method to consider user-configured viewport offsets specific for the integration.\n     *\n     * @param evt The `scrollToTheSelection` event info.\n     * @param data The payload carried by the `scrollToTheSelection` event.\n     */\n    _handleScrollToTheSelection(evt, data) {\n        const configuredViewportOffset = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            ...this.viewportOffset\n        };\n        data.viewportOffset.top += configuredViewportOffset.top;\n        data.viewportOffset.bottom += configuredViewportOffset.bottom;\n        data.viewportOffset.left += configuredViewportOffset.left;\n        data.viewportOffset.right += configuredViewportOffset.right;\n    }\n    /**\n     * Ensures that the focus tracker is aware of all views' DOM elements in the body collection.\n     */\n    _bindBodyCollectionWithFocusTracker() {\n        const body = this.view.body;\n        for (const view of body) {\n            this.focusTracker.add(view.element);\n        }\n        body.on('add', (evt, view) => {\n            this.focusTracker.add(view.element);\n        });\n        body.on('remove', (evt, view) => {\n            this.focusTracker.remove(view.element);\n        });\n    }\n}\n/**\n * Returns a number (weight) for a toolbar definition. Visible toolbars have a higher priority and so do\n * contextual toolbars (displayed in the context of a content, for instance, an image toolbar).\n *\n * A standard invisible toolbar is the heaviest. A visible contextual toolbar is the lightest.\n *\n * @param toolbarDef A toolbar definition to be weighted.\n */\nfunction getToolbarDefinitionWeight(toolbarDef) {\n    const { toolbarView, options } = toolbarDef;\n    let weight = 10;\n    // Prioritize already visible toolbars. They should get focused first.\n    if (isVisible(toolbarView.element)) {\n        weight--;\n    }\n    // Prioritize contextual toolbars. They are displayed at the selection.\n    if (options.isContextual) {\n        weight--;\n    }\n    return weight;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/editoruiview\n */\nimport View from '../view.js';\nimport BodyCollection from './bodycollection.js';\nimport '../../theme/components/editorui/editorui.css';\n/**\n * The editor UI view class. Base class for the editor main views.\n */\nexport default class EditorUIView extends View {\n    /**\n     * Creates an instance of the editor UI view class.\n     *\n     * @param locale The locale instance.\n     */\n    constructor(locale) {\n        super(locale);\n        this.body = new BodyCollection(locale);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.body.attachToDom();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this.body.detachFromDom();\n        return super.destroy();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/boxed/boxededitoruiview\n */\nimport EditorUIView from '../editoruiview.js';\nimport LabelView from '../../label/labelview.js';\n/**\n * The boxed editor UI view class. This class represents an editor interface\n * consisting of a toolbar and an editable area, enclosed within a box.\n */\nexport default class BoxedEditorUIView extends EditorUIView {\n    /**\n     * Creates an instance of the boxed editor UI view class.\n     *\n     * @param locale The locale instance..\n     */\n    constructor(locale) {\n        super(locale);\n        this.top = this.createCollection();\n        this.main = this.createCollection();\n        this._voiceLabelView = this._createVoiceLabel();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset',\n                    'ck-editor',\n                    'ck-rounded-corners'\n                ],\n                role: 'application',\n                dir: locale.uiLanguageDirection,\n                lang: locale.uiLanguage,\n                'aria-labelledby': this._voiceLabelView.id\n            },\n            children: [\n                this._voiceLabelView,\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-editor__top',\n                            'ck-reset_all'\n                        ],\n                        role: 'presentation'\n                    },\n                    children: this.top\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-editor__main'\n                        ],\n                        role: 'presentation'\n                    },\n                    children: this.main\n                }\n            ]\n        });\n    }\n    /**\n     * Creates a voice label view instance.\n     */\n    _createVoiceLabel() {\n        const t = this.t;\n        const voiceLabel = new LabelView();\n        voiceLabel.text = t('Rich Text Editor');\n        voiceLabel.extendTemplate({\n            attributes: {\n                class: 'ck-voice-label'\n            }\n        });\n        return voiceLabel;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editableui/editableuiview\n */\nimport View from '../view.js';\n/**\n * The editable UI view class.\n */\nexport default class EditableUIView extends View {\n    /**\n     * Creates an instance of EditableUIView class.\n     *\n     * @param locale The locale instance.\n     * @param editingView The editing view instance the editable is related to.\n     * @param editableElement The editable element. If not specified, this view\n     * should create it. Otherwise, the existing element should be used.\n     */\n    constructor(locale, editingView, editableElement) {\n        super(locale);\n        /**\n         * The name of the editable UI view.\n         */\n        this.name = null;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-content',\n                    'ck-editor__editable',\n                    'ck-rounded-corners'\n                ],\n                lang: locale.contentLanguage,\n                dir: locale.contentLanguageDirection\n            }\n        });\n        this.set('isFocused', false);\n        this._editableElement = editableElement;\n        this._hasExternalElement = !!this._editableElement;\n        this._editingView = editingView;\n    }\n    /**\n     * Renders the view by either applying the {@link #template} to the existing\n     * {@link module:ui/editableui/editableuiview~EditableUIView#_editableElement} or assigning {@link #element}\n     * as {@link module:ui/editableui/editableuiview~EditableUIView#_editableElement}.\n     */\n    render() {\n        super.render();\n        if (this._hasExternalElement) {\n            this.template.apply(this.element = this._editableElement);\n        }\n        else {\n            this._editableElement = this.element;\n        }\n        this.on('change:isFocused', () => this._updateIsFocusedClasses());\n        this._updateIsFocusedClasses();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        if (this._hasExternalElement) {\n            this.template.revert(this._editableElement);\n        }\n        super.destroy();\n    }\n    /**\n     * Whether an external {@link #_editableElement} was passed into the constructor, which also means\n     * the view will not render its {@link #template}.\n     */\n    get hasExternalElement() {\n        return this._hasExternalElement;\n    }\n    /**\n     * Updates the `ck-focused` and `ck-blurred` CSS classes on the {@link #element} according to\n     * the {@link #isFocused} property value using the {@link #_editingView editing view} API.\n     */\n    _updateIsFocusedClasses() {\n        const editingView = this._editingView;\n        if (editingView.isRenderingInProgress) {\n            updateAfterRender(this);\n        }\n        else {\n            update(this);\n        }\n        function update(view) {\n            editingView.change(writer => {\n                const viewRoot = editingView.document.getRoot(view.name);\n                writer.addClass(view.isFocused ? 'ck-focused' : 'ck-blurred', viewRoot);\n                writer.removeClass(view.isFocused ? 'ck-blurred' : 'ck-focused', viewRoot);\n            });\n        }\n        // In a case of a multi-root editor, a callback will be attached more than once (one callback for each root).\n        // While executing one callback the `isRenderingInProgress` observable is changing what causes executing another\n        // callback and render is called inside the already pending render.\n        // We need to be sure that callback is executed only when the value has changed from `true` to `false`.\n        // See https://github.com/ckeditor/ckeditor5/issues/1676.\n        function updateAfterRender(view) {\n            editingView.once('change:isRenderingInProgress', (evt, name, value) => {\n                if (!value) {\n                    update(view);\n                }\n                else {\n                    updateAfterRender(view);\n                }\n            });\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editableui/inline/inlineeditableuiview\n */\nimport EditableUIView from '../editableuiview.js';\n/**\n * The inline editable UI class implementing an inline {@link module:ui/editableui/editableuiview~EditableUIView}.\n */\nexport default class InlineEditableUIView extends EditableUIView {\n    /**\n     * Creates an instance of the InlineEditableUIView class.\n     *\n     * @param locale The locale instance.\n     * @param editingView The editing view instance the editable is related to.\n     * @param editableElement The editable element. If not specified, the\n     * {@link module:ui/editableui/editableuiview~EditableUIView}\n     * will create it. Otherwise, the existing element will be used.\n     * @param options Additional configuration of the view.\n     * @param options.label The label of the editable for assistive technologies. If not provided, a default label is used or,\n     * the existing `aria-label` attribute value from the specified `editableElement` is preserved.\n     */\n    constructor(locale, editingView, editableElement, options = {}) {\n        super(locale, editingView, editableElement);\n        this._options = options;\n        this.extendTemplate({\n            attributes: {\n                role: 'textbox',\n                class: 'ck-editor__editable_inline'\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        const editingView = this._editingView;\n        editingView.change(writer => {\n            const viewRoot = editingView.document.getRoot(this.name);\n            writer.setAttribute('aria-label', this.getEditableAriaLabel(), viewRoot);\n        });\n    }\n    /**\n     * Returns a normalized label for the editable view based on the environment.\n     */\n    getEditableAriaLabel() {\n        const t = this.locale.t;\n        const label = this._options.label;\n        const editableElement = this._editableElement;\n        const editableName = this.name;\n        if (typeof label == 'string') {\n            return label;\n        }\n        else if (typeof label === 'object') {\n            return label[editableName];\n        }\n        else if (typeof label === 'function') {\n            return label(this);\n        }\n        else if (editableElement) {\n            const existingLabel = editableElement.getAttribute('aria-label');\n            if (existingLabel) {\n                return existingLabel;\n            }\n        }\n        return t('Rich Text Editor. Editing area: %0', editableName);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/model\n */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\nimport { extend } from 'lodash-es';\n/**\n * The base MVC model class.\n */\nexport default class Model extends /* #__PURE__ */ ObservableMixin() {\n    /**\n     * Creates a new Model instance.\n     *\n     * @param attributes The model state attributes to be defined during the instance creation.\n     * @param properties The (out of state) properties to be appended to the instance during creation.\n     */\n    constructor(attributes, properties) {\n        super();\n        // Extend this instance with the additional (out of state) properties.\n        if (properties) {\n            extend(this, properties);\n        }\n        // Initialize the attributes.\n        if (attributes) {\n            this.set(attributes);\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/balloon/contextualballoon\n */\nimport BalloonPanelView from './balloonpanelview.js';\nimport View from '../../view.js';\nimport ButtonView from '../../button/buttonview.js';\nimport { Plugin, icons } from '@ckeditor/ckeditor5-core';\nimport { CKEditorError, FocusTracker, Rect, toUnit } from '@ckeditor/ckeditor5-utils';\nimport '../../../theme/components/panel/balloonrotator.css';\nimport '../../../theme/components/panel/fakepanel.css';\nconst toPx = /* #__PURE__ */ toUnit('px');\n/**\n * Provides the common contextual balloon for the editor.\n *\n * The role of this plugin is to unify the contextual balloons logic, simplify views management and help\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * This plugin allows for creating single or multiple panel stacks.\n *\n * Each stack may have multiple views, with the one on the top being visible. When the visible view is removed from the stack,\n * the previous view becomes visible.\n *\n * It might be useful to implement nested navigation in a balloon. For instance, a toolbar view may contain a link button.\n * When you click it, a link view (which lets you set the URL) is created and put on top of the toolbar view, so the link panel\n * is displayed. When you finish editing the link and close (remove) the link view, the toolbar view is visible again.\n *\n * However, there are cases when there are multiple independent balloons to be displayed, for instance, if the selection\n * is inside two inline comments at the same time. For such cases, you can create two independent panel stacks.\n * The contextual balloon plugin will create a navigation bar to let the users switch between these panel stacks using the \"Next\"\n * and \"Previous\" buttons.\n *\n * If there are no views in the current stack, the balloon panel will try to switch to the next stack. If there are no\n * panels in any stack, the balloon panel will be hidden.\n *\n * **Note**: To force the balloon panel to show only one view, even if there are other stacks, use the `singleViewMode=true` option\n * when {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#add adding} a view to a panel.\n *\n * From the implementation point of view, the contextual ballon plugin is reusing a single\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance to display multiple contextual balloon\n * panels in the editor. It also creates a special {@link module:ui/panel/balloon/contextualballoon~RotatorView rotator view},\n * used to manage multiple panel stacks. Rotator view is a child of the balloon panel view and the parent of the specific\n * view you want to display. If there is more than one panel stack to be displayed, the rotator view will add a\n * navigation bar. If there is only one stack, the rotator view is transparent (it does not add any UI elements).\n */\nexport default class ContextualBalloon extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ContextualBalloon';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * The map of views and their stacks.\n         */\n        this._viewToStack = new Map();\n        /**\n         * The map of IDs and stacks.\n         */\n        this._idToStack = new Map();\n        /**\n         * The common balloon panel view.\n         */\n        this._view = null;\n        /**\n         * Rotator view embedded in the contextual balloon.\n         * Displays the currently visible view in the balloon and provides navigation for switching stacks.\n         */\n        this._rotatorView = null;\n        /**\n         * Displays fake panels under the balloon panel view when multiple stacks are added to the balloon.\n         */\n        this._fakePanelsView = null;\n        this.positionLimiter = () => {\n            const view = this.editor.editing.view;\n            const viewDocument = view.document;\n            const editableElement = viewDocument.selection.editableElement;\n            if (editableElement) {\n                return view.domConverter.mapViewToDom(editableElement.root);\n            }\n            return null;\n        };\n        this.decorate('getPositionOptions');\n        this.set('visibleView', null);\n        this.set('_numberOfStacks', 0);\n        this.set('_singleViewMode', false);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        if (this._view) {\n            this._view.destroy();\n        }\n        if (this._rotatorView) {\n            this._rotatorView.destroy();\n        }\n        if (this._fakePanelsView) {\n            this._fakePanelsView.destroy();\n        }\n    }\n    /**\n     * The common balloon panel view.\n     */\n    get view() {\n        if (!this._view) {\n            this._createPanelView();\n        }\n        return this._view;\n    }\n    /**\n     * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.\n     */\n    hasView(view) {\n        return Array.from(this._viewToStack.keys()).includes(view);\n    }\n    /**\n     * Adds a new view to the stack and makes it visible if the current stack is visible\n     * or it is the first view in the balloon.\n     *\n     * @param data The configuration of the view.\n     * @param data.stackId The ID of the stack that the view is added to. Defaults to `'main'`.\n     * @param data.view The content of the balloon.\n     * @param data.position Positioning options.\n     * @param data.balloonClassName An additional CSS class added to the {@link #view balloon} when visible.\n     * @param data.withArrow Whether the {@link #view balloon} should be rendered with an arrow. Defaults to `true`.\n     * @param data.singleViewMode Whether the view should be the only visible view even if other stacks were added. Defaults to `false`.\n     */\n    add(data) {\n        if (!this._view) {\n            this._createPanelView();\n        }\n        if (this.hasView(data.view)) {\n            /**\n             * Trying to add configuration of the same view more than once.\n             *\n             * @error contextualballoon-add-view-exist\n             */\n            throw new CKEditorError('contextualballoon-add-view-exist', [this, data]);\n        }\n        const stackId = data.stackId || 'main';\n        // If new stack is added, creates it and show view from this stack.\n        if (!this._idToStack.has(stackId)) {\n            this._idToStack.set(stackId, new Map([[data.view, data]]));\n            this._viewToStack.set(data.view, this._idToStack.get(stackId));\n            this._numberOfStacks = this._idToStack.size;\n            if (!this._visibleStack || data.singleViewMode) {\n                this.showStack(stackId);\n            }\n            return;\n        }\n        const stack = this._idToStack.get(stackId);\n        if (data.singleViewMode) {\n            this.showStack(stackId);\n        }\n        // Add new view to the stack.\n        stack.set(data.view, data);\n        this._viewToStack.set(data.view, stack);\n        // And display it if is added to the currently visible stack.\n        if (stack === this._visibleStack) {\n            this._showView(data);\n        }\n    }\n    /**\n     * Removes the given view from the stack. If the removed view was visible,\n     * the view preceding it in the stack will become visible instead.\n     * When there is no view in the stack, the next stack will be displayed.\n     * When there are no more stacks, the balloon will hide.\n     *\n     * @param view A view to be removed from the balloon.\n     */\n    remove(view) {\n        if (!this.hasView(view)) {\n            /**\n             * Trying to remove the configuration of the view not defined in the stack.\n             *\n             * @error contextualballoon-remove-view-not-exist\n             */\n            throw new CKEditorError('contextualballoon-remove-view-not-exist', [this, view]);\n        }\n        const stack = this._viewToStack.get(view);\n        if (this._singleViewMode && this.visibleView === view) {\n            this._singleViewMode = false;\n        }\n        // When visible view will be removed we need to show a preceding view or next stack\n        // if a view is the only view in the stack.\n        if (this.visibleView === view) {\n            if (stack.size === 1) {\n                if (this._idToStack.size > 1) {\n                    this._showNextStack();\n                }\n                else {\n                    this.view.hide();\n                    this.visibleView = null;\n                    this._rotatorView.hideView();\n                }\n            }\n            else {\n                this._showView(Array.from(stack.values())[stack.size - 2]);\n            }\n        }\n        if (stack.size === 1) {\n            this._idToStack.delete(this._getStackId(stack));\n            this._numberOfStacks = this._idToStack.size;\n        }\n        else {\n            stack.delete(view);\n        }\n        this._viewToStack.delete(view);\n    }\n    /**\n     * Updates the position of the balloon using the position data of the first visible view in the stack.\n     * When new position data is given, the position data of the currently visible view will be updated.\n     *\n     * @param position Position options.\n     */\n    updatePosition(position) {\n        if (position) {\n            this._visibleStack.get(this.visibleView).position = position;\n        }\n        this.view.pin(this.getPositionOptions());\n        this._fakePanelsView.updatePosition();\n    }\n    /**\n     * Returns position options of the last view in the stack.\n     * This keeps the balloon in the same position when the view is changed.\n     */\n    getPositionOptions() {\n        let position = Array.from(this._visibleStack.values()).pop().position;\n        if (position) {\n            // Use the default limiter if none has been specified.\n            if (!position.limiter) {\n                // Don't modify the original options object.\n                position = Object.assign({}, position, {\n                    limiter: this.positionLimiter\n                });\n            }\n            // Don't modify the original options object.\n            position = Object.assign({}, position, {\n                viewportOffsetConfig: this.editor.ui.viewportOffset\n            });\n        }\n        return position;\n    }\n    /**\n     * Shows the last view from the stack of a given ID.\n     */\n    showStack(id) {\n        this.visibleStack = id;\n        const stack = this._idToStack.get(id);\n        if (!stack) {\n            /**\n             * Trying to show a stack that does not exist.\n             *\n             * @error contextualballoon-showstack-stack-not-exist\n             */\n            throw new CKEditorError('contextualballoon-showstack-stack-not-exist', this);\n        }\n        if (this._visibleStack === stack) {\n            return;\n        }\n        this._showView(Array.from(stack.values()).pop());\n    }\n    /**\n     * Initializes view instances.\n     */\n    _createPanelView() {\n        this._view = new BalloonPanelView(this.editor.locale);\n        this.editor.ui.view.body.add(this._view);\n        this._rotatorView = this._createRotatorView();\n        this._fakePanelsView = this._createFakePanelsView();\n    }\n    /**\n     * Returns the stack of the currently visible view.\n     */\n    get _visibleStack() {\n        return this._viewToStack.get(this.visibleView);\n    }\n    /**\n     * Returns the ID of the given stack.\n     */\n    _getStackId(stack) {\n        const entry = Array.from(this._idToStack.entries()).find(entry => entry[1] === stack);\n        return entry[0];\n    }\n    /**\n     * Shows the last view from the next stack.\n     */\n    _showNextStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) + 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = 0;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n     * Shows the last view from the previous stack.\n     */\n    _showPrevStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) - 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = stacks.length - 1;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n     * Creates a rotator view.\n     */\n    _createRotatorView() {\n        const view = new RotatorView(this.editor.locale);\n        const t = this.editor.locale.t;\n        this.view.content.add(view);\n        // Hide navigation when there is only a one stack & not in single view mode.\n        view.bind('isNavigationVisible').to(this, '_numberOfStacks', this, '_singleViewMode', (value, isSingleViewMode) => {\n            return !isSingleViewMode && value > 1;\n        });\n        // Update balloon position after toggling navigation.\n        view.on('change:isNavigationVisible', () => (this.updatePosition()), { priority: 'low' });\n        // Update stacks counter value.\n        view.bind('counter').to(this, 'visibleView', this, '_numberOfStacks', (visibleView, numberOfStacks) => {\n            if (numberOfStacks < 2) {\n                return '';\n            }\n            const current = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;\n            return t('%0 of %1', [current, numberOfStacks]);\n        });\n        view.buttonNextView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showNextStack();\n        });\n        view.buttonPrevView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showPrevStack();\n        });\n        return view;\n    }\n    /**\n     * Creates a fake panels view.\n     */\n    _createFakePanelsView() {\n        const view = new FakePanelsView(this.editor.locale, this.view);\n        view.bind('numberOfPanels').to(this, '_numberOfStacks', this, '_singleViewMode', (number, isSingleViewMode) => {\n            const showPanels = !isSingleViewMode && number >= 2;\n            return showPanels ? Math.min(number - 1, 2) : 0;\n        });\n        view.listenTo(this.view, 'change:top', () => view.updatePosition());\n        view.listenTo(this.view, 'change:left', () => view.updatePosition());\n        this.editor.ui.view.body.add(view);\n        return view;\n    }\n    /**\n     * Sets the view as the content of the balloon and attaches the balloon using position\n     * options of the first view.\n     *\n     * @param data Configuration.\n     * @param data.view The view to show in the balloon.\n     * @param data.balloonClassName Additional class name which will be added to the {@link #view balloon}.\n     * @param data.withArrow Whether the {@link #view balloon} should be rendered with an arrow.\n     */\n    _showView({ view, balloonClassName = '', withArrow = true, singleViewMode = false }) {\n        this.view.class = balloonClassName;\n        this.view.withArrow = withArrow;\n        this._rotatorView.showView(view);\n        this.visibleView = view;\n        this.view.pin(this.getPositionOptions());\n        this._fakePanelsView.updatePosition();\n        if (singleViewMode) {\n            this._singleViewMode = true;\n        }\n    }\n}\n/**\n * Rotator view is a helper class for the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon}.\n * It is used for displaying the last view from the current stack and providing navigation buttons for switching stacks.\n * See the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon} documentation to learn more.\n */\nexport class RotatorView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        this.set('isNavigationVisible', true);\n        this.focusTracker = new FocusTracker();\n        this.buttonPrevView = this._createButtonView(t('Previous'), icons.previousArrow);\n        this.buttonNextView = this._createButtonView(t('Next'), icons.nextArrow);\n        this.content = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-balloon-rotator'\n                ],\n                'z-index': '-1'\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck-balloon-rotator__navigation',\n                            bind.to('isNavigationVisible', value => value ? '' : 'ck-hidden')\n                        ]\n                    },\n                    children: [\n                        this.buttonPrevView,\n                        {\n                            tag: 'span',\n                            attributes: {\n                                class: [\n                                    'ck-balloon-rotator__counter'\n                                ]\n                            },\n                            children: [\n                                {\n                                    text: bind.to('counter')\n                                }\n                            ]\n                        },\n                        this.buttonNextView\n                    ]\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: 'ck-balloon-rotator__content'\n                    },\n                    children: this.content\n                }\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n    }\n    /**\n     * Shows a given view.\n     *\n     * @param view The view to show.\n     */\n    showView(view) {\n        this.hideView();\n        this.content.add(view);\n    }\n    /**\n     * Hides the currently displayed view.\n     */\n    hideView() {\n        this.content.clear();\n    }\n    /**\n     * Creates a navigation button view.\n     *\n     * @param label The button label.\n     * @param icon The button icon.\n     */\n    _createButtonView(label, icon) {\n        const view = new ButtonView(this.locale);\n        view.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        return view;\n    }\n}\n/**\n * Displays additional layers under the balloon when multiple stacks are added to the balloon.\n */\nclass FakePanelsView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, balloonPanelView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('top', 0);\n        this.set('left', 0);\n        this.set('height', 0);\n        this.set('width', 0);\n        this.set('numberOfPanels', 0);\n        this.content = this.createCollection();\n        this._balloonPanelView = balloonPanelView;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck-fake-panel',\n                    bind.to('numberOfPanels', number => number ? '' : 'ck-hidden')\n                ],\n                style: {\n                    top: bind.to('top', toPx),\n                    left: bind.to('left', toPx),\n                    width: bind.to('width', toPx),\n                    height: bind.to('height', toPx)\n                }\n            },\n            children: this.content\n        });\n        this.on('change:numberOfPanels', (evt, name, next, prev) => {\n            if (next > prev) {\n                this._addPanels(next - prev);\n            }\n            else {\n                this._removePanels(prev - next);\n            }\n            this.updatePosition();\n        });\n    }\n    _addPanels(number) {\n        while (number--) {\n            const view = new View();\n            view.setTemplate({ tag: 'div' });\n            this.content.add(view);\n            this.registerChild(view);\n        }\n    }\n    _removePanels(number) {\n        while (number--) {\n            const view = this.content.last;\n            this.content.remove(view);\n            this.deregisterChild(view);\n            view.destroy();\n        }\n    }\n    /**\n     * Updates coordinates of fake panels.\n     */\n    updatePosition() {\n        if (this.numberOfPanels) {\n            const { top, left } = this._balloonPanelView;\n            const { width, height } = new Rect(this._balloonPanelView.element);\n            Object.assign(this, { top, left, width, height });\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/sticky/stickypanelview\n */\nimport View from '../../view.js';\nimport Template from '../../template.js';\nimport { global, toUnit, Rect } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_STICKYPANEL // const {\n// @if CK_DEBUG_STICKYPANEL // \tdefault: RectDrawer,\n// @if CK_DEBUG_STICKYPANEL // \tdiagonalStylesBlack\n// @if CK_DEBUG_STICKYPANEL // } = require( '@ckeditor/ckeditor5-utils/tests/_utils/rectdrawer' );\nimport '../../../theme/components/panel/stickypanel.css';\nconst toPx = /* #__PURE__ */ toUnit('px');\n/**\n * The sticky panel view class.\n */\nexport default class StickyPanelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('isActive', false);\n        this.set('isSticky', false);\n        this.set('limiterElement', null);\n        this.set('limiterBottomOffset', 50);\n        this.set('viewportTopOffset', 0);\n        this.set('_marginLeft', null);\n        this.set('_isStickyToTheBottomOfLimiter', false);\n        this.set('_stickyTopOffset', null);\n        this.set('_stickyBottomOffset', null);\n        this.content = this.createCollection();\n        this._contentPanelPlaceholder = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-sticky-panel__placeholder'\n                ],\n                style: {\n                    display: bind.to('isSticky', isSticky => isSticky ? 'block' : 'none'),\n                    height: bind.to('isSticky', isSticky => {\n                        return isSticky ? toPx(this._contentPanelRect.height) : null;\n                    })\n                }\n            }\n        }).render();\n        this.contentPanelElement = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-sticky-panel__content',\n                    // Toggle class of the panel when \"sticky\" state changes in the view.\n                    bind.if('isSticky', 'ck-sticky-panel__content_sticky'),\n                    bind.if('_isStickyToTheBottomOfLimiter', 'ck-sticky-panel__content_sticky_bottom-limit')\n                ],\n                style: {\n                    width: bind.to('isSticky', isSticky => {\n                        return isSticky ? toPx(this._contentPanelPlaceholder.getBoundingClientRect().width) : null;\n                    }),\n                    top: bind.to('_stickyTopOffset', value => value ? toPx(value) : value),\n                    bottom: bind.to('_stickyBottomOffset', value => value ? toPx(value) : value),\n                    marginLeft: bind.to('_marginLeft')\n                }\n            },\n            children: this.content\n        }).render();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-sticky-panel'\n                ]\n            },\n            children: [\n                this._contentPanelPlaceholder,\n                this.contentPanelElement\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Check if the panel should go into the sticky state immediately.\n        this.checkIfShouldBeSticky();\n        // Update sticky state of the panel as the window and ancestors are being scrolled.\n        this.listenTo(global.document, 'scroll', () => {\n            this.checkIfShouldBeSticky();\n        }, { useCapture: true });\n        // Synchronize with `model.isActive` because sticking an inactive panel is pointless.\n        this.listenTo(this, 'change:isActive', () => {\n            this.checkIfShouldBeSticky();\n        });\n    }\n    /**\n     * Analyzes the environment to decide whether the panel should be sticky or not.\n     * Then handles the positioning of the panel.\n     */\n    checkIfShouldBeSticky() {\n        // @if CK_DEBUG_STICKYPANEL // RectDrawer.clear();\n        if (!this.limiterElement || !this.isActive) {\n            this._unstick();\n            return;\n        }\n        const limiterRect = new Rect(this.limiterElement);\n        let visibleLimiterRect = limiterRect.getVisible();\n        if (visibleLimiterRect) {\n            const windowRect = new Rect(global.window);\n            windowRect.top += this.viewportTopOffset;\n            windowRect.height -= this.viewportTopOffset;\n            visibleLimiterRect = visibleLimiterRect.getIntersection(windowRect);\n        }\n        // @if CK_DEBUG_STICKYPANEL // if ( visibleLimiterRect ) {\n        // @if CK_DEBUG_STICKYPANEL // \tRectDrawer.draw( visibleLimiterRect,\n        // @if CK_DEBUG_STICKYPANEL // \t\t{ outlineWidth: '3px', opacity: '.8', outlineColor: 'red', outlineOffset: '-3px' },\n        // @if CK_DEBUG_STICKYPANEL // \t\t'Visible anc'\n        // @if CK_DEBUG_STICKYPANEL // \t);\n        // @if CK_DEBUG_STICKYPANEL // }\n        // @if CK_DEBUG_STICKYPANEL //\n        // @if CK_DEBUG_STICKYPANEL // RectDrawer.draw( limiterRect,\n        // @if CK_DEBUG_STICKYPANEL // \t{ outlineWidth: '3px', opacity: '.8', outlineColor: 'green', outlineOffset: '-3px' },\n        // @if CK_DEBUG_STICKYPANEL // \t'Limiter'\n        // @if CK_DEBUG_STICKYPANEL // );\n        // Stick the panel only if\n        // * the limiter's ancestors are intersecting with each other so that some of their rects are visible,\n        // * and the limiter's top edge is above the visible ancestors' top edge.\n        if (visibleLimiterRect && limiterRect.top < visibleLimiterRect.top) {\n            // @if CK_DEBUG_STICKYPANEL // RectDrawer.draw( visibleLimiterRect,\n            // @if CK_DEBUG_STICKYPANEL // \t{ outlineWidth: '3px', opacity: '.8', outlineColor: 'fuchsia', outlineOffset: '-3px',\n            // @if CK_DEBUG_STICKYPANEL // \t\tbackgroundColor: 'rgba(255, 0, 255, .3)' },\n            // @if CK_DEBUG_STICKYPANEL // \t'Visible limiter'\n            // @if CK_DEBUG_STICKYPANEL // );\n            const visibleLimiterTop = visibleLimiterRect.top;\n            // Check if there's a change the panel can be sticky to the bottom of the limiter.\n            if (visibleLimiterTop + this._contentPanelRect.height + this.limiterBottomOffset > visibleLimiterRect.bottom) {\n                const stickyBottomOffset = Math.max(limiterRect.bottom - visibleLimiterRect.bottom, 0) + this.limiterBottomOffset;\n                // @if CK_DEBUG_STICKYPANEL // const stickyBottomOffsetRect = new Rect( {\n                // @if CK_DEBUG_STICKYPANEL // \ttop: limiterRect.bottom - stickyBottomOffset, left: 0, right: 2000,\n                // @if CK_DEBUG_STICKYPANEL // \tbottom: limiterRect.bottom - stickyBottomOffset, width: 2000, height: 1\n                // @if CK_DEBUG_STICKYPANEL // } );\n                // @if CK_DEBUG_STICKYPANEL // RectDrawer.draw( stickyBottomOffsetRect,\n                // @if CK_DEBUG_STICKYPANEL // \t{ outlineWidth: '1px', opacity: '.8', outlineColor: 'black' },\n                // @if CK_DEBUG_STICKYPANEL // \t'Sticky bottom offset'\n                // @if CK_DEBUG_STICKYPANEL // );\n                // Check if sticking the panel to the bottom of the limiter does not cause it to suddenly\n                // move upwards if there's not enough space for it.\n                if (limiterRect.bottom - stickyBottomOffset > limiterRect.top + this._contentPanelRect.height) {\n                    this._stickToBottomOfLimiter(stickyBottomOffset);\n                }\n                else {\n                    this._unstick();\n                }\n            }\n            else {\n                if (this._contentPanelRect.height + this.limiterBottomOffset < limiterRect.height) {\n                    this._stickToTopOfAncestors(visibleLimiterTop);\n                }\n                else {\n                    this._unstick();\n                }\n            }\n        }\n        else {\n            this._unstick();\n        }\n        // @if CK_DEBUG_STICKYPANEL // console.clear();\n        // @if CK_DEBUG_STICKYPANEL // console.log( 'isSticky', this.isSticky );\n        // @if CK_DEBUG_STICKYPANEL // console.log( '_isStickyToTheBottomOfLimiter', this._isStickyToTheBottomOfLimiter );\n        // @if CK_DEBUG_STICKYPANEL // console.log( '_stickyTopOffset', this._stickyTopOffset );\n        // @if CK_DEBUG_STICKYPANEL // console.log( '_stickyBottomOffset', this._stickyBottomOffset );\n        // @if CK_DEBUG_STICKYPANEL // if ( visibleLimiterRect ) {\n        // @if CK_DEBUG_STICKYPANEL // \tRectDrawer.draw( visibleLimiterRect,\n        // @if CK_DEBUG_STICKYPANEL // \t\t{ ...diagonalStylesBlack,\n        // @if CK_DEBUG_STICKYPANEL // \t\t\toutlineWidth: '3px', opacity: '.8', outlineColor: 'orange', outlineOffset: '-3px',\n        // @if CK_DEBUG_STICKYPANEL // \t\t\tbackgroundColor: 'rgba(0, 0, 255, .2)' },\n        // @if CK_DEBUG_STICKYPANEL // \t\t'visibleLimiterRect'\n        // @if CK_DEBUG_STICKYPANEL // \t);\n        // @if CK_DEBUG_STICKYPANEL // }\n    }\n    /**\n     * Sticks the panel at the given CSS `top` offset.\n     *\n     * @private\n     * @param topOffset\n     */\n    _stickToTopOfAncestors(topOffset) {\n        this.isSticky = true;\n        this._isStickyToTheBottomOfLimiter = false;\n        this._stickyTopOffset = topOffset;\n        this._stickyBottomOffset = null;\n        this._marginLeft = toPx(-global.window.scrollX);\n    }\n    /**\n     * Sticks the panel at the bottom of the limiter with a given CSS `bottom` offset.\n     *\n     * @private\n     * @param stickyBottomOffset\n     */\n    _stickToBottomOfLimiter(stickyBottomOffset) {\n        this.isSticky = true;\n        this._isStickyToTheBottomOfLimiter = true;\n        this._stickyTopOffset = null;\n        this._stickyBottomOffset = stickyBottomOffset;\n        this._marginLeft = toPx(-global.window.scrollX);\n    }\n    /**\n     * Unsticks the panel putting it back to its original position.\n     *\n     * @private\n     */\n    _unstick() {\n        this.isSticky = false;\n        this._isStickyToTheBottomOfLimiter = false;\n        this._stickyTopOffset = null;\n        this._stickyBottomOffset = null;\n        this._marginLeft = null;\n    }\n    /**\n     * Returns the bounding rect of the {@link #contentPanelElement}.\n     *\n     * @private\n     */\n    get _contentPanelRect() {\n        return new Rect(this.contentPanelElement);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/search/text/searchtextqueryview\n */\nimport ButtonView from '../../button/buttonview.js';\nimport IconView from '../../icon/iconview.js';\nimport LabeledFieldView from '../../labeledfield/labeledfieldview.js';\nimport { createLabeledInputText } from '../../labeledfield/utils.js';\nimport { icons } from '@ckeditor/ckeditor5-core';\n/**\n * A search input field for the {@link module:ui/search/text/searchtextview~SearchTextView} component.\n *\n * @internal\n * @extends module:ui/labeledfield/labeledfieldview~LabeledFieldView\n */\nexport default class SearchTextQueryView extends LabeledFieldView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, config) {\n        const t = locale.t;\n        const viewConfig = Object.assign({}, {\n            showResetButton: true,\n            showIcon: true,\n            creator: createLabeledInputText\n        }, config);\n        super(locale, viewConfig.creator);\n        this.label = config.label;\n        this._viewConfig = viewConfig;\n        if (this._viewConfig.showIcon) {\n            this.iconView = new IconView();\n            this.iconView.content = icons.loupe;\n            this.fieldWrapperChildren.add(this.iconView, 0);\n            this.extendTemplate({\n                attributes: {\n                    class: 'ck-search__query_with-icon'\n                }\n            });\n        }\n        if (this._viewConfig.showResetButton) {\n            this.resetButtonView = new ButtonView(locale);\n            this.resetButtonView.set({\n                label: t('Clear'),\n                icon: icons.cancel,\n                class: 'ck-search__reset',\n                isVisible: false,\n                tooltip: true\n            });\n            this.resetButtonView.on('execute', () => {\n                this.reset();\n                this.focus();\n                this.fire('reset');\n            });\n            this.resetButtonView.bind('isVisible').to(this.fieldView, 'isEmpty', isEmpty => !isEmpty);\n            this.fieldWrapperChildren.add(this.resetButtonView);\n            this.extendTemplate({\n                attributes: {\n                    class: 'ck-search__query_with-reset'\n                }\n            });\n        }\n    }\n    /**\n     * Resets the search field to its default state.\n     */\n    reset() {\n        this.fieldView.reset();\n        if (this._viewConfig.showResetButton) {\n            this.resetButtonView.isVisible = false;\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport View from '../view.js';\n/**\n * A view displaying an information text related to different states of {@link module:ui/search/text/searchtextview~SearchTextView}.\n *\n * @internal\n */\nexport default class SearchInfoView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        const bind = this.bindTemplate;\n        this.set({\n            isVisible: false,\n            primaryText: '',\n            secondaryText: ''\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-search__info',\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ],\n                tabindex: -1\n            },\n            children: [\n                {\n                    tag: 'span',\n                    children: [\n                        {\n                            text: [bind.to('primaryText')]\n                        }\n                    ]\n                },\n                {\n                    tag: 'span',\n                    children: [\n                        {\n                            text: [bind.to('secondaryText')]\n                        }\n                    ]\n                }\n            ]\n        });\n    }\n    /**\n     * Focuses the view\n     */\n    focus() {\n        this.element.focus();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/search/searchresultsview\n */\nimport View from '../view.js';\nimport { FocusTracker } from '@ckeditor/ckeditor5-utils';\nimport { default as FocusCycler } from '../focuscycler.js';\n/**\n * A sub-component of {@link module:ui/search/text/searchtextview~SearchTextView}. It hosts the filtered and the information views.\n */\nexport default class SearchResultsView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.children = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-search__results'\n                ],\n                tabindex: -1\n            },\n            children: this.children\n        });\n        this._focusCycler = new FocusCycler({\n            focusables: this.children,\n            focusTracker: this.focusTracker\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        for (const child of this.children) {\n            this.focusTracker.add(child.element);\n        }\n    }\n    /**\n     * Focuses the view.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the first child view.\n     */\n    focusFirst() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the last child view.\n     */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/search/text/searchtextview\n*/\nimport { FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\nimport View from '../../view.js';\nimport { default as SearchTextQueryView } from './searchtextqueryview.js';\nimport SearchInfoView from '../searchinfoview.js';\nimport SearchResultsView from '../searchresultsview.js';\nimport FocusCycler from '../../focuscycler.js';\nimport { escapeRegExp } from 'lodash-es';\nimport '../../../theme/components/search/search.css';\n/**\n * A search component that allows filtering of an arbitrary view based on a search query\n * specified by the user in a text field.\n *\n *```ts\n * // This view must specify the `filter()` and `focus()` methods.\n * const filteredView = ...;\n *\n * const searchView = new SearchTextView( locale, {\n * \tsearchFieldLabel: 'Search list items',\n * \tfilteredView\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n */\nexport default class SearchTextView extends View {\n    /**\n     * Creates an instance of the {@link module:ui/search/text/searchtextview~SearchTextView} class.\n     *\n     * @param locale The localization services instance.\n     * @param config Configuration of the view.\n     */\n    constructor(locale, config) {\n        super(locale);\n        this._config = config;\n        this.filteredView = config.filteredView;\n        this.queryView = this._createSearchTextQueryView();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.resultsView = new SearchResultsView(locale);\n        this.children = this.createCollection();\n        this.focusableChildren = this.createCollection([this.queryView, this.resultsView]);\n        this.set('isEnabled', true);\n        this.set('resultsCount', 0);\n        this.set('totalItemsCount', 0);\n        if (config.infoView && config.infoView.instance) {\n            this.infoView = config.infoView.instance;\n        }\n        else {\n            this.infoView = new SearchInfoView();\n            this._enableDefaultInfoViewBehavior();\n            this.on('render', () => {\n                // Initial search that determines if there are any searchable items\n                // and displays the corresponding info text.\n                this.search('');\n            });\n        }\n        this.resultsView.children.addMany([this.infoView, this.filteredView]);\n        this.focusCycler = new FocusCycler({\n            focusables: this.focusableChildren,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.on('search', (evt, { resultsCount, totalItemsCount }) => {\n            this.resultsCount = resultsCount;\n            this.totalItemsCount = totalItemsCount;\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-search',\n                    config.class || null\n                ],\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.addMany([\n            this.queryView,\n            this.resultsView\n        ]);\n        const stopPropagation = (data) => data.stopPropagation();\n        for (const focusableChild of this.focusableChildren) {\n            this.focusTracker.add(focusableChild.element);\n        }\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n        // keystroke handler would take over the key management in the URL input. We need to prevent\n        // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n        this.keystrokes.set('arrowright', stopPropagation);\n        this.keystrokes.set('arrowleft', stopPropagation);\n        this.keystrokes.set('arrowup', stopPropagation);\n        this.keystrokes.set('arrowdown', stopPropagation);\n    }\n    /**\n     * Focuses the {@link #queryView}.\n     */\n    focus() {\n        this.queryView.focus();\n    }\n    /**\n     * Resets the component to its initial state.\n     */\n    reset() {\n        this.queryView.reset();\n        this.search('');\n        this.filteredView.element.scrollTo(0, 0);\n    }\n    /**\n     * Searches the {@link #filteredView} for the given query.\n     *\n     * @internal\n     * @param query The search query string.\n     */\n    search(query) {\n        const regExp = query ? new RegExp(escapeRegExp(query), 'ig') : null;\n        const filteringResults = this.filteredView.filter(regExp);\n        this.fire('search', { query, ...filteringResults });\n    }\n    /**\n     * Creates a search field view based on configured creator..\n     */\n    _createSearchTextQueryView() {\n        const queryView = new SearchTextQueryView(this.locale, this._config.queryView);\n        this.listenTo(queryView.fieldView, 'input', () => {\n            this.search(queryView.fieldView.element.value);\n        });\n        queryView.on('reset', () => this.reset());\n        queryView.bind('isEnabled').to(this);\n        return queryView;\n    }\n    /**\n     * Initializes the default {@link #infoView} behavior with default text labels when no custom info view\n     * was specified in the view config.\n     */\n    _enableDefaultInfoViewBehavior() {\n        const t = this.locale.t;\n        const infoView = this.infoView;\n        this.on('search', (evt, data) => {\n            if (!data.resultsCount) {\n                const defaultTextConfig = this._config.infoView && this._config.infoView.text;\n                let primaryText, secondaryText;\n                if (data.totalItemsCount) {\n                    if (defaultTextConfig && defaultTextConfig.notFound) {\n                        primaryText = defaultTextConfig.notFound.primary;\n                        secondaryText = defaultTextConfig.notFound.secondary;\n                    }\n                    else {\n                        primaryText = t('No results found');\n                        secondaryText = '';\n                    }\n                }\n                else {\n                    if (defaultTextConfig && defaultTextConfig.noSearchableItems) {\n                        primaryText = defaultTextConfig.noSearchableItems.primary;\n                        secondaryText = defaultTextConfig.noSearchableItems.secondary;\n                    }\n                    else {\n                        primaryText = t('No searchable items');\n                        secondaryText = '';\n                    }\n                }\n                infoView.set({\n                    primaryText: normalizeInfoText(primaryText, data),\n                    secondaryText: normalizeInfoText(secondaryText, data),\n                    isVisible: true\n                });\n            }\n            else {\n                infoView.set({\n                    isVisible: false\n                });\n            }\n        });\n        function normalizeInfoText(text, { query, resultsCount, totalItemsCount }) {\n            return typeof text === 'function' ? text(query, resultsCount, totalItemsCount) : text;\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/autocomplete/autocompleteview\n*/\nimport { getOptimalPosition, global, toUnit, Rect } from '@ckeditor/ckeditor5-utils';\nimport SearchTextView from '../search/text/searchtextview.js';\nimport '../../theme/components/autocomplete/autocomplete.css';\n/**\n * The autocomplete component's view class. It extends the {@link module:ui/search/text/searchtextview~SearchTextView} class\n * with a floating {@link #resultsView} that shows up when the user starts typing and hides when they blur\n * the component.\n */\nclass AutocompleteView extends SearchTextView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, config) {\n        super(locale, config);\n        this._config = config;\n        const toPx = toUnit('px');\n        this.extendTemplate({\n            attributes: {\n                class: ['ck-autocomplete']\n            }\n        });\n        const bindResultsView = this.resultsView.bindTemplate;\n        this.resultsView.set('isVisible', false);\n        this.resultsView.set('_position', 's');\n        this.resultsView.set('_width', 0);\n        this.resultsView.extendTemplate({\n            attributes: {\n                class: [\n                    bindResultsView.if('isVisible', 'ck-hidden', value => !value),\n                    bindResultsView.to('_position', value => `ck-search__results_${value}`)\n                ],\n                style: {\n                    width: bindResultsView.to('_width', toPx)\n                }\n            }\n        });\n        // Update the visibility of the results view when the user focuses or blurs the component.\n        // This is also integration for the `resetOnBlur` configuration.\n        this.focusTracker.on('change:isFocused', (evt, name, isFocused) => {\n            this._updateResultsVisibility();\n            if (isFocused) {\n                // Reset the scroll position of the results view whenever the autocomplete reopens.\n                this.resultsView.element.scrollTop = 0;\n            }\n            else if (config.resetOnBlur) {\n                this.queryView.reset();\n            }\n        });\n        // Update the visibility of the results view when the user types in the query field.\n        // This is an integration for `queryMinChars` configuration.\n        // This is an integration for search results changing length and the #resultsView requiring to be repositioned.\n        this.on('search', () => {\n            this._updateResultsVisibility();\n            this._updateResultsViewWidthAndPosition();\n        });\n        // Hide the results view when the user presses the ESC key.\n        this.keystrokes.set('esc', (evt, cancel) => {\n            // Let the DOM event pass through if the focus is in the query view.\n            if (!this.resultsView.isVisible) {\n                return;\n            }\n            // Focus the query view first and only then close the results view. Otherwise, if the focus\n            // was in the results view, it will get lost.\n            this.queryView.focus();\n            this.resultsView.isVisible = false;\n            cancel();\n        });\n        // Update the position of the results view when the user scrolls the page.\n        // TODO: This needs to be debounced down the road.\n        this.listenTo(global.document, 'scroll', () => {\n            this._updateResultsViewWidthAndPosition();\n        });\n        // Hide the results when the component becomes disabled.\n        this.on('change:isEnabled', () => {\n            this._updateResultsVisibility();\n        });\n        // Update the value of the query field when the user selects a result.\n        this.filteredView.on('execute', (evt, { value }) => {\n            // Focus the query view first to avoid losing the focus.\n            this.focus();\n            // Resetting the view will ensure that the #queryView will update its empty state correctly.\n            // This prevents bugs related to dynamic labels or auto-grow when re-setting the same value\n            // to #queryView.fieldView.value (which does not trigger empty state change) to an\n            // #queryView.fieldView.element that has been changed by the user.\n            this.reset();\n            // Update the value of the query field.\n            this.queryView.fieldView.value = this.queryView.fieldView.element.value = value;\n            // Finally, hide the results view. The focus has been moved earlier so this is safe.\n            this.resultsView.isVisible = false;\n        });\n        // Update the position and width of the results view when it becomes visible.\n        this.resultsView.on('change:isVisible', () => {\n            this._updateResultsViewWidthAndPosition();\n        });\n    }\n    /**\n     * Updates the position of the results view on demand.\n     */\n    _updateResultsViewWidthAndPosition() {\n        if (!this.resultsView.isVisible) {\n            return;\n        }\n        this.resultsView._width = new Rect(this.queryView.fieldView.element).width;\n        const optimalResultsPosition = AutocompleteView._getOptimalPosition({\n            element: this.resultsView.element,\n            target: this.queryView.element,\n            fitInViewport: true,\n            positions: AutocompleteView.defaultResultsPositions\n        });\n        // _getOptimalPosition will return null if there is no optimal position found (e.g. target is off the viewport).\n        this.resultsView._position = optimalResultsPosition ? optimalResultsPosition.name : 's';\n    }\n    /**\n     * Updates the visibility of the results view on demand.\n     */\n    _updateResultsVisibility() {\n        const queryMinChars = typeof this._config.queryMinChars === 'undefined' ? 0 : this._config.queryMinChars;\n        const queryLength = this.queryView.fieldView.element.value.length;\n        this.resultsView.isVisible = this.focusTracker.isFocused && this.isEnabled && queryLength >= queryMinChars;\n    }\n}\n/**\n * Positions for the autocomplete results view. Two positions are defined by default:\n * * `s` - below the search field,\n * * `n` - above the search field.\n */\nAutocompleteView.defaultResultsPositions = [\n    (fieldRect => {\n        return {\n            top: fieldRect.bottom,\n            left: fieldRect.left,\n            name: 's'\n        };\n    }),\n    ((fieldRect, resultsRect) => {\n        return {\n            top: fieldRect.top - resultsRect.height,\n            left: fieldRect.left,\n            name: 'n'\n        };\n    })\n];\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n */\nAutocompleteView._getOptimalPosition = getOptimalPosition;\nexport default AutocompleteView;\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/highlightedtext/highlightedtextview\n */\nimport View from '../view.js';\nimport { escape } from 'lodash-es';\nimport '../../theme/components/highlightedtext/highlightedtext.css';\n/**\n * A class representing a view that displays a text which subset can be highlighted using the\n * {@link #highlightText} method.\n */\nexport default class HighlightedTextView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        this.set('text', undefined);\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: ['ck', 'ck-highlighted-text']\n            }\n        });\n        this.on('render', () => {\n            // Classic setTemplate binding for #text will not work because highlightText() replaces the\n            // pre-rendered DOM text node new a new one (and <mark> elements).\n            this.on('change:text', () => {\n                this._updateInnerHTML(this.text);\n            });\n            this._updateInnerHTML(this.text);\n        });\n    }\n    /**\n     * Highlights view's {@link #text} according to the specified `RegExp`. If the passed RegExp is `null`, the\n     * highlighting is removed\n     *\n     * @param regExp\n     */\n    highlightText(regExp) {\n        this._updateInnerHTML(markText(this.text || '', regExp));\n    }\n    /**\n     * Updates element's `innerHTML` with the passed content.\n     */\n    _updateInnerHTML(newInnerHTML) {\n        this.element.innerHTML = newInnerHTML || '';\n    }\n}\n/**\n * Replaces `regExp` occurrences with `<mark>` tags in a text.\n *\n * @param text A text to get marked.\n * @param regExp An optional `RegExp`. If not passed, this is a pass-through function.\n * @returns A text with `RegExp` occurrences marked by `<mark>`.\n */\nfunction markText(text, regExp) {\n    if (!regExp) {\n        return escape(text);\n    }\n    const textParts = [];\n    let lastMatchEnd = 0;\n    let matchInfo = regExp.exec(text);\n    // Iterate over all matches and create an array of text parts. The idea is to mark which parts are query matches\n    // so that later on they can be highlighted.\n    while (matchInfo !== null) {\n        const curMatchStart = matchInfo.index;\n        // Detect if there was something between last match and this one.\n        if (curMatchStart !== lastMatchEnd) {\n            textParts.push({\n                text: text.substring(lastMatchEnd, curMatchStart),\n                isMatch: false\n            });\n        }\n        textParts.push({\n            text: matchInfo[0],\n            isMatch: true\n        });\n        lastMatchEnd = regExp.lastIndex;\n        matchInfo = regExp.exec(text);\n    }\n    // Your match might not be the last part of a string. Be sure to add any plain text following the last match.\n    if (lastMatchEnd !== text.length) {\n        textParts.push({\n            text: text.substring(lastMatchEnd),\n            isMatch: false\n        });\n    }\n    const outputHtml = textParts\n        // The entire text should be escaped.\n        .map(part => {\n        part.text = escape(part.text);\n        return part;\n    })\n        // Only matched text should be wrapped with HTML mark element.\n        .map(part => part.isMatch ? `<mark>${part.text}</mark>` : part.text)\n        .join('');\n    return outputHtml;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/spinner/spinnerview\n */\nimport View from '../view.js';\nimport '../../theme/components/spinner/spinner.css';\n/**\n * The spinner view class.\n */\nexport default class SpinnerView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        this.set('isVisible', false);\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-spinner-container',\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ]\n            },\n            children: [{\n                    tag: 'span',\n                    attributes: {\n                        class: ['ck', 'ck-spinner']\n                    }\n                }]\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/balloon/balloontoolbar\n */\nimport ContextualBalloon from '../../panel/balloon/contextualballoon.js';\nimport ToolbarView from '../toolbarview.js';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview.js';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig.js';\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { FocusTracker, Rect, ResizeObserver, env, global, toUnit } from '@ckeditor/ckeditor5-utils';\nimport { Observer } from '@ckeditor/ckeditor5-engine';\nimport { debounce } from 'lodash-es';\nconst toPx = /* #__PURE__ */ toUnit('px');\n/**\n * The contextual toolbar.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nexport default class BalloonToolbar extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BalloonToolbar';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * An instance of the resize observer that allows to respond to changes in editable's geometry\n         * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n         *\n         * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n         * {@link module:core/editor/editorconfig~EditorConfig#balloonToolbar configuration}.\n         *\n         * **Note:** Created in {@link #init}.\n         */\n        this._resizeObserver = null;\n        this._balloonConfig = normalizeToolbarConfig(editor.config.get('balloonToolbar'));\n        this.toolbarView = this._createToolbarView();\n        this.focusTracker = new FocusTracker();\n        // Track focusable elements in the toolbar and the editable elements.\n        this._trackFocusableEditableElements();\n        this.focusTracker.add(this.toolbarView);\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        editor.ui.addToolbar(this.toolbarView, {\n            beforeFocus: () => this.show(true),\n            afterBlur: () => this.hide(),\n            isContextual: true\n        });\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        this._fireSelectionChangeDebounced = debounce(() => this.fire('_selectionChangeDebounced'), 200);\n        // The appearance of the BalloonToolbar method is event–driven.\n        // It is possible to stop the #show event and this prevent the toolbar from showing up.\n        this.decorate('show');\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        // Show/hide the toolbar on editable focus/blur.\n        this.listenTo(this.focusTracker, 'change:isFocused', (evt, name, isFocused) => {\n            const isToolbarVisible = this._balloon.visibleView === this.toolbarView;\n            if (!isFocused && isToolbarVisible) {\n                this.hide();\n            }\n            else if (isFocused) {\n                this.show();\n            }\n        });\n        // Hide the toolbar when the selection is changed by a direct change or has changed to collapsed.\n        this.listenTo(selection, 'change:range', (evt, data) => {\n            if (data.directChange || selection.isCollapsed) {\n                this.hide();\n            }\n            // Fire internal `_selectionChangeDebounced` event to use it for showing\n            // the toolbar after the selection stops changing.\n            this._fireSelectionChangeDebounced();\n        });\n        // Show the toolbar when the selection stops changing.\n        this.listenTo(this, '_selectionChangeDebounced', () => {\n            if (this.editor.editing.view.document.isFocused) {\n                this.show();\n            }\n        });\n        if (!this._balloonConfig.shouldNotGroupWhenFull) {\n            this.listenTo(editor, 'ready', () => {\n                const editableElement = editor.ui.view.editable.element;\n                // Set #toolbarView's max-width on the initialization and update it on the editable resize.\n                this._resizeObserver = new ResizeObserver(editableElement, entry => {\n                    // The max-width equals 90% of the editable's width for the best user experience.\n                    // The value keeps the balloon very close to the boundaries of the editable and limits the cases\n                    // when the balloon juts out from the editable element it belongs to.\n                    this.toolbarView.maxWidth = toPx(entry.contentRect.width * .9);\n                });\n            });\n        }\n        // Listen to the toolbar view and whenever it changes its geometry due to some items being\n        // grouped or ungrouped, update the position of the balloon because a shorter/longer toolbar\n        // means the balloon could be pointing at the wrong place. Once updated, the balloon will point\n        // at the right selection in the content again.\n        // https://github.com/ckeditor/ckeditor5/issues/6444\n        this.listenTo(this.toolbarView, 'groupedItemsUpdate', () => {\n            this._updatePosition();\n        });\n        // Creates toolbar components based on given configuration.\n        // This needs to be done when all plugins are ready.\n        editor.ui.once('ready', () => {\n            this.toolbarView.fillFromConfig(this._balloonConfig, this.editor.ui.componentFactory);\n        });\n    }\n    /**\n     * Creates the toolbar view instance.\n     */\n    _createToolbarView() {\n        const t = this.editor.locale.t;\n        const shouldGroupWhenFull = !this._balloonConfig.shouldNotGroupWhenFull;\n        const toolbarView = new ToolbarView(this.editor.locale, {\n            shouldGroupWhenFull,\n            isFloating: true\n        });\n        toolbarView.ariaLabel = t('Editor contextual toolbar');\n        toolbarView.render();\n        return toolbarView;\n    }\n    /**\n     * Shows the toolbar and attaches it to the selection.\n     *\n     * Fires {@link #event:show} event which can be stopped to prevent the toolbar from showing up.\n     *\n     * @param showForCollapsedSelection When set `true`, the toolbar will show despite collapsed selection in the\n     * editing view.\n     */\n    show(showForCollapsedSelection = false) {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const schema = editor.model.schema;\n        // Do not add the toolbar to the balloon stack twice.\n        if (this._balloon.hasView(this.toolbarView)) {\n            return;\n        }\n        // Do not show the toolbar when the selection is collapsed.\n        if (selection.isCollapsed && !showForCollapsedSelection) {\n            return;\n        }\n        // Do not show the toolbar when there is more than one range in the selection and they fully contain selectable elements.\n        // See https://github.com/ckeditor/ckeditor5/issues/6443.\n        if (selectionContainsOnlyMultipleSelectables(selection, schema)) {\n            return;\n        }\n        // Do not show the toolbar when all components inside are disabled\n        // see https://github.com/ckeditor/ckeditor5-ui/issues/269.\n        if (Array.from(this.toolbarView.items).every((item) => item.isEnabled !== undefined && !item.isEnabled)) {\n            return;\n        }\n        // Update the toolbar position when the editor ui should be refreshed.\n        this.listenTo(this.editor.ui, 'update', () => {\n            this._updatePosition();\n        });\n        // Add the toolbar to the common editor contextual balloon.\n        this._balloon.add({\n            view: this.toolbarView,\n            position: this._getBalloonPositionData(),\n            balloonClassName: 'ck-toolbar-container'\n        });\n    }\n    /**\n     * Hides the toolbar.\n     */\n    hide() {\n        if (this._balloon.hasView(this.toolbarView)) {\n            this.stopListening(this.editor.ui, 'update');\n            this._balloon.remove(this.toolbarView);\n        }\n    }\n    /**\n     * Add or remove editable elements to the focus tracker. It watches added and removed roots\n     * and adds or removes their editable elements to the focus tracker.\n     */\n    _trackFocusableEditableElements() {\n        const { editor, focusTracker } = this;\n        const { editing } = editor;\n        editing.view.addObserver(class TrackEditableElements extends Observer {\n            /**\n             * @inheritDoc\n             */\n            observe(domElement) {\n                focusTracker.add(domElement);\n            }\n            /**\n             * @inheritDoc\n             */\n            stopObserving(domElement) {\n                focusTracker.remove(domElement);\n            }\n        });\n    }\n    /**\n     * Returns positioning options for the {@link #_balloon}. They control the way balloon is attached\n     * to the selection.\n     */\n    _getBalloonPositionData() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const viewSelection = viewDocument.selection;\n        // Get direction of the selection.\n        const isBackward = viewDocument.selection.isBackward;\n        return {\n            // Because the target for BalloonPanelView is a Rect (not DOMRange), it's geometry will stay fixed\n            // as the window scrolls. To let the BalloonPanelView follow such Rect, is must be continuously\n            // computed and hence, the target is defined as a function instead of a static value.\n            // https://github.com/ckeditor/ckeditor5-ui/issues/195\n            target: () => {\n                const range = isBackward ? viewSelection.getFirstRange() : viewSelection.getLastRange();\n                const rangeRects = Rect.getDomRangeRects(view.domConverter.viewRangeToDom(range));\n                // Select the proper range rect depending on the direction of the selection.\n                if (isBackward) {\n                    return rangeRects[0];\n                }\n                else {\n                    // Ditch the zero-width \"orphan\" rect in the next line for the forward selection if there's\n                    // another one preceding it. It is not rendered as a selection by the web browser anyway.\n                    // https://github.com/ckeditor/ckeditor5-ui/issues/308\n                    if (rangeRects.length > 1 && rangeRects[rangeRects.length - 1].width === 0) {\n                        rangeRects.pop();\n                    }\n                    return rangeRects[rangeRects.length - 1];\n                }\n            },\n            positions: this._getBalloonPositions(isBackward)\n        };\n    }\n    /**\n     * Updates the position of the {@link #_balloon} to make up for changes:\n     *\n     * * in the geometry of the selection it is attached to (e.g. the selection moved in the viewport or expanded or shrunk),\n     * * or the geometry of the balloon toolbar itself (e.g. the toolbar has grouped or ungrouped some items and it is shorter or longer).\n     */\n    _updatePosition() {\n        this._balloon.updatePosition(this._getBalloonPositionData());\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.stopListening();\n        this._fireSelectionChangeDebounced.cancel();\n        this.toolbarView.destroy();\n        this.focusTracker.destroy();\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n        }\n    }\n    /**\n     * Returns toolbar positions for the given direction of the selection.\n     */\n    _getBalloonPositions(isBackward) {\n        const isSafariIniOS = env.isSafari && env.isiOS;\n        // https://github.com/ckeditor/ckeditor5/issues/7707\n        const positions = isSafariIniOS ? BalloonPanelView.generatePositions({\n            // 20px when zoomed out. Less then 20px when zoomed in; the \"radius\" of the native selection handle gets\n            // smaller as the user zooms in. No less than the default v-offset, though.\n            heightOffset: Math.max(BalloonPanelView.arrowHeightOffset, Math.round(20 / global.window.visualViewport.scale))\n        }) : BalloonPanelView.defaultPositions;\n        return isBackward ? [\n            positions.northWestArrowSouth,\n            positions.northWestArrowSouthWest,\n            positions.northWestArrowSouthEast,\n            positions.northWestArrowSouthMiddleEast,\n            positions.northWestArrowSouthMiddleWest,\n            positions.southWestArrowNorth,\n            positions.southWestArrowNorthWest,\n            positions.southWestArrowNorthEast,\n            positions.southWestArrowNorthMiddleWest,\n            positions.southWestArrowNorthMiddleEast\n        ] : [\n            positions.southEastArrowNorth,\n            positions.southEastArrowNorthEast,\n            positions.southEastArrowNorthWest,\n            positions.southEastArrowNorthMiddleEast,\n            positions.southEastArrowNorthMiddleWest,\n            positions.northEastArrowSouth,\n            positions.northEastArrowSouthEast,\n            positions.northEastArrowSouthWest,\n            positions.northEastArrowSouthMiddleEast,\n            positions.northEastArrowSouthMiddleWest\n        ];\n    }\n}\n/**\n * Returns \"true\" when the selection has multiple ranges and each range contains a selectable element\n * and nothing else.\n */\nfunction selectionContainsOnlyMultipleSelectables(selection, schema) {\n    // It doesn't contain multiple objects if there is only one range.\n    if (selection.rangeCount === 1) {\n        return false;\n    }\n    return [...selection.getRanges()].every(range => {\n        const element = range.getContainedElement();\n        return element && schema.isSelectable(element);\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/block/blockbuttonview\n */\nimport ButtonView from '../../button/buttonview.js';\nimport { toUnit } from '@ckeditor/ckeditor5-utils';\nimport '../../../theme/components/toolbar/blocktoolbar.css';\nconst toPx = /* #__PURE__ */ toUnit('px');\n/**\n * The block button view class.\n *\n * This view represents a button attached next to block element where the selection is anchored.\n *\n * See {@link module:ui/toolbar/block/blocktoolbar~BlockToolbar}.\n */\nexport default class BlockButtonView extends ButtonView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        // Hide button on init.\n        this.isVisible = false;\n        this.isToggleable = true;\n        this.set('top', 0);\n        this.set('left', 0);\n        this.extendTemplate({\n            attributes: {\n                class: 'ck-block-toolbar-button',\n                style: {\n                    top: bind.to('top', val => toPx(val)),\n                    left: bind.to('left', val => toPx(val))\n                }\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/block/blocktoolbar\n */\n/* global window */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { getAncestors, global, Rect, ResizeObserver, toUnit } from '@ckeditor/ckeditor5-utils';\nimport BlockButtonView from './blockbuttonview.js';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview.js';\nimport ToolbarView, { NESTED_TOOLBAR_ICONS } from '../toolbarview.js';\nimport clickOutsideHandler from '../../bindings/clickoutsidehandler.js';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig.js';\nconst toPx = /* #__PURE__ */ toUnit('px');\n/**\n * The block toolbar plugin.\n *\n * This plugin provides a button positioned next to the block of content where the selection is anchored.\n * Upon clicking the button, a dropdown providing access to editor features shows up, as configured in\n * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar}.\n *\n * By default, the button is displayed next to all elements marked in {@link module:engine/model/schema~Schema}\n * as `$block` for which the toolbar provides at least one option.\n *\n * By default, the button is attached so its right boundary is touching the\n * {@link module:engine/view/editableelement~EditableElement}:\n *\n * ```\n *  __ |\n * |  ||  This is a block of content that the\n *  ¯¯ |  button is attached to. This is a\n *     |  block of content that the button is\n *     |  attached to.\n * ```\n *\n * The position of the button can be adjusted using the CSS `transform` property:\n *\n * ```css\n * .ck-block-toolbar-button {\n * \ttransform: translateX( -10px );\n * }\n * ```\n *\n * ```\n *  __   |\n * |  |  |  This is a block of content that the\n *  ¯¯   |  button is attached to. This is a\n *       |  block of content that the button is\n *       |  attached to.\n * ```\n *\n * **Note**: If you plan to run the editor in a right–to–left (RTL) language, keep in mind the button\n * will be attached to the **right** boundary of the editable area. In that case, make sure the\n * CSS position adjustment works properly by adding the following styles:\n *\n * ```css\n * .ck[dir=\"rtl\"] .ck-block-toolbar-button {\n * \ttransform: translateX( 10px );\n * }\n * ```\n */\nexport default class BlockToolbar extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BlockToolbar';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * An instance of the resize observer that allows to respond to changes in editable's geometry\n         * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n         *\n         * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n         * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar configuration}.\n         */\n        this._resizeObserver = null;\n        this._blockToolbarConfig = normalizeToolbarConfig(this.editor.config.get('blockToolbar'));\n        this.toolbarView = this._createToolbarView();\n        this.panelView = this._createPanelView();\n        this.buttonView = this._createButtonView();\n        // Close the #panelView upon clicking outside of the plugin UI.\n        clickOutsideHandler({\n            emitter: this.panelView,\n            contextElements: [this.panelView.element, this.buttonView.element],\n            activator: () => this.panelView.isVisible,\n            callback: () => this._hidePanel()\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const editBlockText = t('Click to edit block');\n        const dragToMoveText = t('Drag to move');\n        const editBlockLabel = t('Edit block');\n        const isDragDropBlockToolbarPluginLoaded = editor.plugins.has('DragDropBlockToolbar');\n        const label = isDragDropBlockToolbarPluginLoaded ? `${editBlockText}\\n${dragToMoveText}` : editBlockLabel;\n        this.buttonView.label = label;\n        if (isDragDropBlockToolbarPluginLoaded) {\n            this.buttonView.element.dataset.ckeTooltipClass = 'ck-tooltip_multi-line';\n        }\n        // Hides panel on a direct selection change.\n        this.listenTo(editor.model.document.selection, 'change:range', (evt, data) => {\n            if (data.directChange) {\n                this._hidePanel();\n            }\n        });\n        this.listenTo(editor.ui, 'update', () => this._updateButton());\n        // `low` priority is used because of https://github.com/ckeditor/ckeditor5-core/issues/133.\n        this.listenTo(editor, 'change:isReadOnly', () => this._updateButton(), { priority: 'low' });\n        this.listenTo(editor.ui.focusTracker, 'change:isFocused', () => this._updateButton());\n        // Reposition button on resize.\n        this.listenTo(this.buttonView, 'change:isVisible', (evt, name, isVisible) => {\n            if (isVisible) {\n                // Keep correct position of button and panel on window#resize.\n                this.buttonView.listenTo(window, 'resize', () => this._updateButton());\n            }\n            else {\n                // Stop repositioning button when is hidden.\n                this.buttonView.stopListening(window, 'resize');\n                // Hide the panel when the button disappears.\n                this._hidePanel();\n            }\n        });\n        // Reposition button on scroll.\n        this._repositionButtonOnScroll();\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        editor.ui.addToolbar(this.toolbarView, {\n            beforeFocus: () => this._showPanel(),\n            afterBlur: () => this._hidePanel()\n        });\n        // Fills the toolbar with its items based on the configuration.\n        // This needs to be done after all plugins are ready.\n        editor.ui.once('ready', () => {\n            this.toolbarView.fillFromConfig(this._blockToolbarConfig, this.editor.ui.componentFactory);\n            // Hide panel before executing each button in the panel.\n            for (const item of this.toolbarView.items) {\n                item.on('execute', () => this._hidePanel(true), { priority: 'high' });\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        this.panelView.destroy();\n        this.buttonView.destroy();\n        this.toolbarView.destroy();\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n        }\n    }\n    /**\n     * Creates the {@link #toolbarView}.\n     */\n    _createToolbarView() {\n        const t = this.editor.locale.t;\n        const shouldGroupWhenFull = !this._blockToolbarConfig.shouldNotGroupWhenFull;\n        const toolbarView = new ToolbarView(this.editor.locale, {\n            shouldGroupWhenFull,\n            isFloating: true\n        });\n        toolbarView.ariaLabel = t('Editor block content toolbar');\n        return toolbarView;\n    }\n    /**\n     * Creates the {@link #panelView}.\n     */\n    _createPanelView() {\n        const editor = this.editor;\n        const panelView = new BalloonPanelView(editor.locale);\n        panelView.content.add(this.toolbarView);\n        panelView.class = 'ck-toolbar-container';\n        editor.ui.view.body.add(panelView);\n        // Close #panelView on `Esc` press.\n        this.toolbarView.keystrokes.set('Esc', (evt, cancel) => {\n            this._hidePanel(true);\n            cancel();\n        });\n        return panelView;\n    }\n    /**\n     * Creates the {@link #buttonView}.\n     */\n    _createButtonView() {\n        const editor = this.editor;\n        const t = editor.t;\n        const buttonView = new BlockButtonView(editor.locale);\n        const iconFromConfig = this._blockToolbarConfig.icon;\n        const icon = NESTED_TOOLBAR_ICONS[iconFromConfig] || iconFromConfig || NESTED_TOOLBAR_ICONS.dragIndicator;\n        buttonView.set({\n            label: t('Edit block'),\n            icon,\n            withText: false\n        });\n        // Bind the panelView observable properties to the buttonView.\n        buttonView.bind('isOn').to(this.panelView, 'isVisible');\n        buttonView.bind('tooltip').to(this.panelView, 'isVisible', isVisible => !isVisible);\n        // Toggle the panelView upon buttonView#execute.\n        this.listenTo(buttonView, 'execute', () => {\n            if (!this.panelView.isVisible) {\n                this._showPanel();\n            }\n            else {\n                this._hidePanel(true);\n            }\n        });\n        // Hide the panelView when the buttonView is disabled. `isEnabled` flag might be changed when\n        // user scrolls the viewport and the button is no longer visible. In such case, the panel should be hidden\n        // otherwise it will be displayed in the wrong place.\n        this.listenTo(buttonView, 'change:isEnabled', (evt, name, isEnabled) => {\n            if (!isEnabled && this.panelView.isVisible) {\n                this._hidePanel(false);\n            }\n        });\n        editor.ui.view.body.add(buttonView);\n        return buttonView;\n    }\n    /**\n     * Shows or hides the button.\n     * When all the conditions for displaying the button are matched, it shows the button. Hides otherwise.\n     */\n    _updateButton() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        // Hides the button when the editor is not focused.\n        if (!editor.ui.focusTracker.isFocused) {\n            this._hideButton();\n            return;\n        }\n        // Hides the button when the selection is in non-editable place.\n        if (!editor.model.canEditAt(editor.model.document.selection)) {\n            this._hideButton();\n            return;\n        }\n        // Get the first selected block, button will be attached to this element.\n        const modelTarget = Array.from(model.document.selection.getSelectedBlocks())[0];\n        // Hides the button when there is no enabled item in toolbar for the current block element.\n        if (!modelTarget || Array.from(this.toolbarView.items).every((item) => !item.isEnabled)) {\n            this._hideButton();\n            return;\n        }\n        // Get DOM target element.\n        const domTarget = view.domConverter.mapViewToDom(editor.editing.mapper.toViewElement(modelTarget));\n        // Show block button.\n        this.buttonView.isVisible = true;\n        // Make sure that the block toolbar panel is resized properly.\n        this._setupToolbarResize();\n        // Attach block button to target DOM element.\n        this._attachButtonToElement(domTarget);\n        // When panel is opened then refresh it position to be properly aligned with block button.\n        if (this.panelView.isVisible) {\n            this._showPanel();\n        }\n    }\n    /**\n     * Hides the button.\n     */\n    _hideButton() {\n        this.buttonView.isVisible = false;\n    }\n    /**\n     * Shows the {@link #toolbarView} attached to the {@link #buttonView}.\n     * If the toolbar is already visible, then it simply repositions it.\n     */\n    _showPanel() {\n        // Usually, the only way to show the toolbar is by pressing the block button. It makes it impossible for\n        // the toolbar to show up when the button is invisible (feature does not make sense for the selection then).\n        // The toolbar navigation using Alt+F10 does not access the button but shows the panel directly using this method.\n        // So we need to check whether this is possible first.\n        if (!this.buttonView.isVisible) {\n            return;\n        }\n        const wasVisible = this.panelView.isVisible;\n        // So here's the thing: If there was no initial panelView#show() or these two were in different order, the toolbar\n        // positioning will break in RTL editors. Weird, right? What you show know is that the toolbar\n        // grouping works thanks to:\n        //\n        // * the ResizeObserver, which kicks in as soon as the toolbar shows up in DOM (becomes visible again).\n        // * the observable ToolbarView#maxWidth, which triggers re-grouping when changed.\n        //\n        // Here are the possible scenarios:\n        //\n        // 1. (WRONG ❌) If the #maxWidth is set when the toolbar is invisible, it won't affect item grouping (no DOMRects, no grouping).\n        //    Then, when panelView.pin() is called, the position of the toolbar will be calculated for the old\n        //    items grouping state, and when finally ResizeObserver kicks in (hey, the toolbar is visible now, right?)\n        //    it will group/ungroup some items and the length of the toolbar will change. But since in RTL the toolbar\n        //    is attached on the right side and the positioning uses CSS \"left\", it will result in the toolbar shifting\n        //    to the left and being displayed in the wrong place.\n        // 2. (WRONG ❌) If the panelView.pin() is called first and #maxWidth set next, then basically the story repeats. The balloon\n        //    calculates the position for the old toolbar grouping state, then the toolbar re-groups items and because\n        //    it is positioned using CSS \"left\" it will move.\n        // 3. (RIGHT ✅) We show the panel first (the toolbar does re-grouping but it does not matter), then the #maxWidth\n        //    is set allowing the toolbar to re-group again and finally panelView.pin() does the positioning when the\n        //    items grouping state is stable and final.\n        //\n        // https://github.com/ckeditor/ckeditor5/issues/6449, https://github.com/ckeditor/ckeditor5/issues/6575\n        this.panelView.show();\n        const editableElement = this._getSelectedEditableElement();\n        this.toolbarView.maxWidth = this._getToolbarMaxWidth(editableElement);\n        this.panelView.pin({\n            target: this.buttonView.element,\n            limiter: editableElement\n        });\n        if (!wasVisible) {\n            this.toolbarView.items.get(0).focus();\n        }\n    }\n    /**\n     * Returns currently selected editable, based on the model selection.\n     */\n    _getSelectedEditableElement() {\n        const selectedModelRootName = this.editor.model.document.selection.getFirstRange().root.rootName;\n        return this.editor.ui.getEditableElement(selectedModelRootName);\n    }\n    /**\n     * Hides the {@link #toolbarView}.\n     *\n     * @param focusEditable When `true`, the editable will be focused after hiding the panel.\n     */\n    _hidePanel(focusEditable) {\n        this.panelView.isVisible = false;\n        if (focusEditable) {\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n     * Repositions the button on scroll.\n     */\n    _repositionButtonOnScroll() {\n        const { buttonView } = this;\n        let pendingAnimationFrame = false;\n        // Reposition the button on scroll, but do it only once per animation frame to avoid performance issues.\n        const repositionOnScroll = (evt, domEvt) => {\n            if (pendingAnimationFrame) {\n                return;\n            }\n            // It makes no sense to reposition the button when the user scrolls the dropdown or any other\n            // nested scrollable element. The button should be repositioned only when the user scrolls the\n            // editable or any other scrollable parent of the editable. Leaving it as it is buggy on Chrome\n            // where scrolling nested scrollables is not properly handled.\n            // See more: https://github.com/ckeditor/ckeditor5/issues/17067\n            const editableElement = this._getSelectedEditableElement();\n            if (domEvt.target !== global.document &&\n                !getAncestors(editableElement).includes(domEvt.target)) {\n                return;\n            }\n            pendingAnimationFrame = true;\n            global.window.requestAnimationFrame(() => {\n                this._updateButton();\n                pendingAnimationFrame = false;\n            });\n        };\n        // Watch scroll event only when the button is visible, it prevents attaching the scroll event listener\n        // to the document when the button is not visible.\n        buttonView.on('change:isVisible', (evt, name, isVisible) => {\n            if (isVisible) {\n                buttonView.listenTo(global.document, 'scroll', repositionOnScroll, {\n                    useCapture: true,\n                    usePassive: true\n                });\n            }\n            else {\n                buttonView.stopListening(global.document, 'scroll', repositionOnScroll);\n            }\n        });\n    }\n    /**\n     * Attaches the {@link #buttonView} to the target block of content.\n     *\n     * @param targetElement Target element.\n     */\n    _attachButtonToElement(targetElement) {\n        const buttonElement = this.buttonView.element;\n        const editableElement = this._getSelectedEditableElement();\n        const contentStyles = window.getComputedStyle(targetElement);\n        const editableRect = new Rect(editableElement);\n        const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n        // When line height is not an integer then treat it as \"normal\".\n        // MDN says that 'normal' == ~1.2 on desktop browsers.\n        const contentLineHeight = parseInt(contentStyles.lineHeight, 10) || parseInt(contentStyles.fontSize, 10) * 1.2;\n        const buttonRect = new Rect(buttonElement);\n        const contentRect = new Rect(targetElement);\n        let positionLeft;\n        if (this.editor.locale.uiLanguageDirection === 'ltr') {\n            positionLeft = editableRect.left - buttonRect.width;\n        }\n        else {\n            positionLeft = editableRect.right;\n        }\n        const positionTop = contentRect.top + contentPaddingTop + (contentLineHeight - buttonRect.height) / 2;\n        buttonRect.moveTo(positionLeft, positionTop);\n        const absoluteButtonRect = buttonRect.toAbsoluteRect();\n        this.buttonView.top = absoluteButtonRect.top;\n        this.buttonView.left = absoluteButtonRect.left;\n        this._clipButtonToViewport(this.buttonView, editableElement);\n    }\n    /**\n     * Clips the button element to the viewport of the editable element.\n     *\n     * \t* If the button overflows the editable viewport, it is clipped to make it look like it's cut off by the editable scrollable region.\n     * \t* If the button is fully hidden by the top of the editable, it is not clickable but still visible in the DOM.\n     *\n     * @param buttonView The button view to clip.\n     * @param editableElement The editable element whose viewport is used for clipping.\n     */\n    _clipButtonToViewport(buttonView, editableElement) {\n        const absoluteButtonRect = new Rect(buttonView.element);\n        const scrollViewportRect = new Rect(editableElement).getVisible();\n        // Sets polygon clip path for the button element, if there is no argument provided, the clip path is removed.\n        const setButtonClipping = (...paths) => {\n            buttonView.element.style.clipPath = paths.length ? `polygon(${paths.join(',')})` : '';\n        };\n        // Hide the button if it's fully hidden by the top of the editable.\n        // Note that the button is still visible in the DOM, but it's not clickable. It's because we don't\n        // want to hide the button completely, as there are plenty of `isVisible` watchers which toggles\n        // the button scroll listeners.\n        const markAsHidden = (isHidden) => {\n            buttonView.isEnabled = !isHidden;\n            buttonView.element.style.pointerEvents = isHidden ? 'none' : '';\n        };\n        if (scrollViewportRect && scrollViewportRect.bottom < absoluteButtonRect.bottom) {\n            // Calculate the delta between the button bottom and the editable bottom, and clip the button\n            // to make it look like it's cut off by the editable scrollable region.\n            const delta = Math.min(absoluteButtonRect.height, absoluteButtonRect.bottom - scrollViewportRect.bottom);\n            markAsHidden(delta >= absoluteButtonRect.height);\n            setButtonClipping('0 0', '100% 0', `100% calc(100% - ${toPx(delta)})`, `0 calc(100% - ${toPx(delta)}`);\n        }\n        else if (scrollViewportRect && scrollViewportRect.top > absoluteButtonRect.top) {\n            // Calculate the delta between the button top and the editable top, and clip the button\n            // to make it look like it's cut off by the editable scrollable region.\n            const delta = Math.min(absoluteButtonRect.height, scrollViewportRect.top - absoluteButtonRect.top);\n            markAsHidden(delta >= absoluteButtonRect.height);\n            setButtonClipping(`0 ${toPx(delta)}`, `100% ${toPx(delta)}`, '100% 100%', '0 100%');\n        }\n        else {\n            // Reset the clip path if button is fully visible.\n            markAsHidden(false);\n            setButtonClipping();\n        }\n    }\n    /**\n     * Creates a resize observer that observes selected editable and resizes the toolbar panel accordingly.\n     */\n    _setupToolbarResize() {\n        const editableElement = this._getSelectedEditableElement();\n        // Do this only if the automatic grouping is turned on.\n        if (!this._blockToolbarConfig.shouldNotGroupWhenFull) {\n            // If resize observer is attached to a different editable than currently selected editable, re-attach it.\n            if (this._resizeObserver && this._resizeObserver.element !== editableElement) {\n                this._resizeObserver.destroy();\n                this._resizeObserver = null;\n            }\n            if (!this._resizeObserver) {\n                this._resizeObserver = new ResizeObserver(editableElement, () => {\n                    this.toolbarView.maxWidth = this._getToolbarMaxWidth(editableElement);\n                });\n            }\n        }\n    }\n    /**\n     * Gets the {@link #toolbarView} max-width, based on given `editableElement` width plus the distance between the farthest\n     * edge of the {@link #buttonView} and the editable.\n     *\n     * @returns A maximum width that toolbar can have, in pixels.\n     */\n    _getToolbarMaxWidth(editableElement) {\n        const editableRect = new Rect(editableElement);\n        const buttonRect = new Rect(this.buttonView.element);\n        const isRTL = this.editor.locale.uiLanguageDirection === 'rtl';\n        const offset = isRTL ? (buttonRect.left - editableRect.right) + buttonRect.width : editableRect.left - buttonRect.left;\n        return toPx(editableRect.width + offset);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/menubar/menubarmenubuttonview\n */\nimport IconView from '../icon/iconview.js';\nimport ListItemButtonView from '../button/listitembuttonview.js';\nimport dropdownArrowIcon from '../../theme/icons/dropdown-arrow.svg';\nimport '../../theme/components/menubar/menubarmenubutton.css';\n/**\n * A menu {@link module:ui/menubar/menubarmenuview~MenuBarMenuView#buttonView} class. Buttons like this one\n * open both top-level bar menus as well as sub-menus.\n */\nexport default class MenuBarMenuButtonView extends ListItemButtonView {\n    /**\n     * Creates an instance of the menu bar button view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set({\n            withText: true,\n            role: 'menuitem'\n        });\n        this.arrowView = this._createArrowView();\n        this.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-menu-bar__menu__button'\n                ],\n                'aria-haspopup': true,\n                'aria-expanded': this.bindTemplate.to('isOn', value => String(value)),\n                'data-cke-tooltip-disabled': bind.to('isOn')\n            },\n            on: {\n                'mouseenter': bind.to('mouseenter')\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.arrowView);\n    }\n    /**\n     * Creates the {@link #arrowView} instance.\n     */\n    _createArrowView() {\n        const arrowView = new IconView();\n        arrowView.content = dropdownArrowIcon;\n        arrowView.extendTemplate({\n            attributes: {\n                class: 'ck-menu-bar__menu__button__arrow'\n            }\n        });\n        return arrowView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport View from '../view.js';\nimport '../../theme/components/menubar/menubarmenupanel.css';\n/**\n * A view representing a {@link module:ui/menubar/menubarmenuview~MenuBarMenuView#panelView} of a menu.\n */\nexport default class MenuBarMenuPanelView extends View {\n    /**\n     * Creates an instance of the menu panel view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('isVisible', false);\n        this.set('position', 'se');\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset',\n                    'ck-menu-bar__menu__panel',\n                    bind.to('position', value => `ck-menu-bar__menu__panel_position_${value}`),\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ],\n                tabindex: '-1'\n            },\n            children: this.children,\n            on: {\n                // Drag and drop in the panel should not break the selection in the editor.\n                // https://github.com/ckeditor/ckeditor5-ui/issues/228\n                selectstart: bind.to(evt => {\n                    if (evt.target.tagName.toLocaleLowerCase() === 'input') {\n                        return;\n                    }\n                    evt.preventDefault();\n                })\n            }\n        });\n    }\n    /**\n     * Focuses the first child of the panel (default) or the last one if the `direction` is `-1`.\n     */\n    focus(direction = 1) {\n        if (this.children.length) {\n            if (direction === 1) {\n                this.children.first.focus();\n            }\n            else {\n                this.children.last.focus();\n            }\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/menubar/menubarmenuview\n */\nimport { FocusTracker, KeystrokeHandler, getOptimalPosition } from '@ckeditor/ckeditor5-utils';\nimport MenuBarMenuButtonView from './menubarmenubuttonview.js';\nimport { MenuBarMenuBehaviors, MenuBarMenuViewPanelPositioningFunctions } from './utils.js';\nimport View from '../view.js';\nimport { default as MenuBarMenuPanelView } from './menubarmenupanelview.js';\nimport '../../theme/components/menubar/menubarmenu.css';\n/**\n * A menu view for the {@link module:ui/menubar/menubarview~MenuBarView}. Menus are building blocks of the menu bar,\n * they host other sub-menus and menu items (buttons) that users can interact with.\n */\nclass MenuBarMenuView extends View {\n    /**\n     * Creates an instance of the menu view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.buttonView = new MenuBarMenuButtonView(locale);\n        this.buttonView.delegate('mouseenter').to(this);\n        this.buttonView.bind('isOn', 'isEnabled').to(this, 'isOpen', 'isEnabled');\n        this.panelView = new MenuBarMenuPanelView(locale);\n        this.panelView.bind('isVisible').to(this, 'isOpen');\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.set('isOpen', false);\n        this.set('isEnabled', true);\n        this.set('panelPosition', 'w');\n        this.set('class', undefined);\n        this.set('parentMenuView', null);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-menu-bar__menu',\n                    bind.to('class'),\n                    bind.if('isEnabled', 'ck-disabled', value => !value),\n                    bind.if('parentMenuView', 'ck-menu-bar__menu_top-level', value => !value)\n                ]\n            },\n            children: [\n                this.buttonView,\n                this.panelView\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.buttonView.element);\n        this.focusTracker.add(this.panelView.element);\n        // Listen for keystrokes coming from within #element.\n        this.keystrokes.listenTo(this.element);\n        MenuBarMenuBehaviors.closeOnEscKey(this);\n        this._repositionPanelOnOpen();\n    }\n    // For now, this method cannot be called in the render process because the `parentMenuView` may be assigned\n    // after the rendering process.\n    //\n    // TODO: We should reconsider the way we handle this logic.\n    /**\n     * Attach all keyboard behaviors for the menu bar view.\n     *\n     * @internal\n     */\n    _attachBehaviors() {\n        // Top-level menus.\n        if (!this.parentMenuView) {\n            this._propagateArrowKeystrokeEvents();\n            MenuBarMenuBehaviors.openAndFocusPanelOnArrowDownKey(this);\n            MenuBarMenuBehaviors.toggleOnButtonClick(this);\n        }\n        else {\n            MenuBarMenuBehaviors.openOnButtonClick(this);\n            MenuBarMenuBehaviors.openOnArrowRightKey(this);\n            MenuBarMenuBehaviors.closeOnArrowLeftKey(this);\n            MenuBarMenuBehaviors.openAndFocusOnEnterKeyPress(this);\n            MenuBarMenuBehaviors.closeOnParentClose(this);\n        }\n    }\n    /**\n     * Fires `arrowright` and `arrowleft` events when the user pressed corresponding arrow keys.\n     */\n    _propagateArrowKeystrokeEvents() {\n        this.keystrokes.set('arrowright', (data, cancel) => {\n            this.fire('arrowright');\n            cancel();\n        });\n        this.keystrokes.set('arrowleft', (data, cancel) => {\n            this.fire('arrowleft');\n            cancel();\n        });\n    }\n    /**\n     * Sets the position of the panel when the menu opens. The panel is positioned\n     * so that it optimally uses the available space in the viewport.\n     */\n    _repositionPanelOnOpen() {\n        // Let the menu control the position of the panel. The position must be updated every time the menu is open.\n        this.on('change:isOpen', (evt, name, isOpen) => {\n            if (!isOpen) {\n                return;\n            }\n            const optimalPanelPosition = MenuBarMenuView._getOptimalPosition({\n                element: this.panelView.element,\n                target: this.buttonView.element,\n                fitInViewport: true,\n                positions: this._panelPositions\n            });\n            this.panelView.position = (optimalPanelPosition ? optimalPanelPosition.name : this._defaultMenuPositionName);\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    focus() {\n        this.buttonView.focus();\n    }\n    /**\n     * Positioning functions for the {@link #panelView} . They change depending on the role of the menu (top-level vs sub-menu) in\n     * the {@link module:ui/menubar/menubarview~MenuBarView menu bar} and the UI language direction.\n     */\n    get _panelPositions() {\n        const { southEast, southWest, northEast, northWest, westSouth, eastSouth, westNorth, eastNorth } = MenuBarMenuViewPanelPositioningFunctions;\n        if (this.locale.uiLanguageDirection === 'ltr') {\n            if (this.parentMenuView) {\n                return [eastSouth, eastNorth, westSouth, westNorth];\n            }\n            else {\n                return [southEast, southWest, northEast, northWest];\n            }\n        }\n        else {\n            if (this.parentMenuView) {\n                return [westSouth, westNorth, eastSouth, eastNorth];\n            }\n            else {\n                return [southWest, southEast, northWest, northEast];\n            }\n        }\n    }\n    /**\n     * The default position of the panel when the menu is opened.\n     * It is used when the optimal position cannot be calculated.\n     */\n    get _defaultMenuPositionName() {\n        if (this.locale.uiLanguageDirection === 'ltr') {\n            if (this.parentMenuView) {\n                return 'es';\n            }\n            else {\n                return 'se';\n            }\n        }\n        else {\n            if (this.parentMenuView) {\n                return 'ws';\n            }\n            else {\n                return 'sw';\n            }\n        }\n    }\n}\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n *\n * Referenced for unit testing purposes.\n */\nMenuBarMenuView._getOptimalPosition = getOptimalPosition;\nexport default MenuBarMenuView;\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport ListItemView from '../list/listitemview.js';\nimport ListView from '../list/listview.js';\nimport ListItemButtonView from '../button/listitembuttonview.js';\nimport ButtonView from '../button/buttonview.js';\n/**\n * A list of menu bar items, a child of {@link module:ui/menubar/menubarmenuview~MenuBarMenuView#panelView}.\n *\n * Use this class to create a list of items (options, buttons) to be displayed in a menu bar.\n *\n * To populate this list, use {@link module:ui/menubar/menubarmenulistitemview~MenuBarMenuListItemView} instances.\n */\nexport default class MenuBarMenuListView extends ListView {\n    /**\n     * Creates an instance of the list view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super(locale);\n        this.role = 'menu';\n        this.items.on('change', this._setItemsCheckSpace.bind(this));\n    }\n    /**\n     * This method adds empty space if there is any toggleable item in the list.\n     * It makes the list properly aligned.\n     */\n    _setItemsCheckSpace() {\n        const hasAnyToggleableItem = (Array\n            .from(this.items)\n            .some(item => {\n            const listButtonView = pickListButtonMenuViewIfPresent(item);\n            return listButtonView && listButtonView.isToggleable;\n        }));\n        this.items.forEach(item => {\n            const listButtonView = pickListButtonMenuViewIfPresent(item);\n            if (listButtonView) {\n                listButtonView.hasCheckSpace = hasAnyToggleableItem;\n            }\n        });\n    }\n}\n/**\n * Picks the first button menu view from the given item if present.\n *\n * @param item The item to check for a button menu view.\n * @returns The first button menu view found in the item, or `null` if not found.\n */\nfunction pickListButtonMenuViewIfPresent(item) {\n    if (!(item instanceof ListItemView)) {\n        return null;\n    }\n    return item\n        .children\n        .map(child => isNestedMenuLikeView(child) ? child.buttonView : child)\n        .find(item => item instanceof ListItemButtonView);\n}\n/**\n * Checks if the given item is a nested menu-like view. `MenuBarMenuView` imports this file\n * so to avoid circular dependencies, this function is defined in more generic way.\n *\n * @param item The item to check.\n * @returns `true` if the item is a nested menu-like view, `false` otherwise.\n */\nfunction isNestedMenuLikeView(item) {\n    return (typeof item === 'object' &&\n        'buttonView' in item &&\n        item.buttonView instanceof ButtonView);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { FileDialogListItemButtonView } from '../button/filedialogbuttonview.js';\nimport '../../theme/components/menubar/menubarmenulistitembutton.css';\n/**\n * A menu bar list file dialog button view. Buttons like this one execute user actions.\n *\n * This component provides a button that opens the native file selection dialog.\n */\nexport default class MenuBarMenuListItemFileDialogButtonView extends FileDialogListItemButtonView {\n    /**\n     * Creates an instance of the menu bar list button view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super(locale);\n        this.set({\n            withText: true,\n            withKeystroke: true,\n            tooltip: false,\n            role: 'menuitem'\n        });\n        this.extendTemplate({\n            attributes: {\n                class: ['ck-menu-bar__menu__item__button']\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/menubar/menubarview\n */\nimport { logWarning } from '@ckeditor/ckeditor5-utils';\nimport View from '../view.js';\nimport { isObject } from 'lodash-es';\nimport ListItemView from '../list/listitemview.js';\nimport ListSeparatorView from '../list/listseparatorview.js';\nimport MenuBarMenuView from './menubarmenuview.js';\nimport MenuBarMenuListView from './menubarmenulistview.js';\nimport MenuBarMenuListItemView from './menubarmenulistitemview.js';\nimport MenuBarMenuListItemButtonView from './menubarmenulistitembuttonview.js';\nimport MenuBarMenuListItemFileDialogButtonView from './menubarmenulistitemfiledialogbuttonview.js';\nimport { MenuBarBehaviors, processMenuBarConfig } from './utils.js';\nconst EVENT_NAME_DELEGATES = ['mouseenter', 'arrowleft', 'arrowright', 'change:isOpen'];\nimport '../../theme/components/menubar/menubar.css';\n/**\n * The application menu bar component. It brings a set of top-level menus (and sub-menus) that can be used\n * to organize and access a large number of buttons.\n */\nexport default class MenuBarView extends View {\n    /**\n     * Creates an instance of the menu bar view.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super(locale);\n        /**\n         * A list of {@link module:ui/menubar/menubarmenuview~MenuBarMenuView} instances registered in the menu bar.\n         *\n         * @observable\n         */\n        this.menus = [];\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        this.set({\n            isOpen: false,\n            isFocusBorderEnabled: false\n        });\n        this._setupIsOpenUpdater();\n        this.children = this.createCollection();\n        // @if CK_DEBUG_MENU_BAR // // Logs events in the main event bus of the component.\n        // @if CK_DEBUG_MENU_BAR // this.on( 'menu', ( evt, data ) => {\n        // @if CK_DEBUG_MENU_BAR // \tconsole.log( `MenuBarView:${ evt.name }`, evt.path.map( view => view.element ) );\n        // @if CK_DEBUG_MENU_BAR // } );\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-menu-bar',\n                    bind.if('isFocusBorderEnabled', 'ck-menu-bar_focus-border-enabled')\n                ],\n                'aria-label': t('Editor menu bar'),\n                role: 'menubar'\n            },\n            children: this.children\n        });\n    }\n    /**\n     * A utility that expands a plain menu bar configuration into a structure of menus (also: sub-menus)\n     * and items using a given {@link module:ui/componentfactory~ComponentFactory component factory}.\n     *\n     * See the {@link module:core/editor/editorconfig~EditorConfig#menuBar menu bar} in the editor\n     * configuration reference to learn how to configure the menu bar.\n     */\n    fillFromConfig(config, componentFactory, extraItems = []) {\n        const locale = this.locale;\n        const processedConfig = processMenuBarConfig({\n            normalizedConfig: config,\n            locale,\n            componentFactory,\n            extraItems\n        });\n        const topLevelCategoryMenuViews = processedConfig.items.map(menuDefinition => this._createMenu({\n            componentFactory,\n            menuDefinition\n        }));\n        this.children.addMany(topLevelCategoryMenuViews);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        MenuBarBehaviors.toggleMenusAndFocusItemsOnHover(this);\n        MenuBarBehaviors.closeMenusWhenTheBarCloses(this);\n        MenuBarBehaviors.closeMenuWhenAnotherOnTheSameLevelOpens(this);\n        MenuBarBehaviors.focusCycleMenusOnArrows(this);\n        MenuBarBehaviors.closeOnClickOutside(this);\n        MenuBarBehaviors.enableFocusHighlightOnInteraction(this);\n    }\n    /**\n     * Focuses the menu bar.\n     */\n    focus() {\n        if (this.children.first) {\n            this.children.first.focus();\n        }\n    }\n    /**\n     * Closes all menus in the bar.\n     */\n    close() {\n        for (const topLevelCategoryMenuView of this.children) {\n            topLevelCategoryMenuView.isOpen = false;\n        }\n    }\n    /**\n     * Registers a menu view in the menu bar. Every {@link module:ui/menubar/menubarmenuview~MenuBarMenuView} instance must be registered\n     * in the menu bar to be properly managed.\n     */\n    registerMenu(menuView, parentMenuView = null) {\n        if (parentMenuView) {\n            menuView.delegate(...EVENT_NAME_DELEGATES).to(parentMenuView);\n            menuView.parentMenuView = parentMenuView;\n        }\n        else {\n            menuView.delegate(...EVENT_NAME_DELEGATES).to(this, name => 'menu:' + name);\n        }\n        menuView._attachBehaviors();\n        this.menus.push(menuView);\n    }\n    /**\n     * Creates a {@link module:ui/menubar/menubarmenuview~MenuBarMenuView} based on the given definition.\n     */\n    _createMenu({ componentFactory, menuDefinition, parentMenuView }) {\n        const locale = this.locale;\n        const menuView = new MenuBarMenuView(locale);\n        this.registerMenu(menuView, parentMenuView);\n        menuView.buttonView.set({\n            label: menuDefinition.label\n        });\n        // Defer the creation of the menu structure until it gets open. This is a performance optimization\n        // that shortens the time needed to create the editor.\n        menuView.once('change:isOpen', () => {\n            const listView = new MenuBarMenuListView(locale);\n            listView.ariaLabel = menuDefinition.label;\n            menuView.panelView.children.add(listView);\n            listView.items.addMany(this._createMenuItems({ menuDefinition, parentMenuView: menuView, componentFactory }));\n        });\n        return menuView;\n    }\n    /**\n     * Creates a {@link module:ui/menubar/menubarmenuview~MenuBarMenuView} items based on the given definition.\n     */\n    _createMenuItems({ menuDefinition, parentMenuView, componentFactory }) {\n        const locale = this.locale;\n        const items = [];\n        for (const menuGroupDefinition of menuDefinition.groups) {\n            for (const itemDefinition of menuGroupDefinition.items) {\n                const menuItemView = new MenuBarMenuListItemView(locale, parentMenuView);\n                if (isObject(itemDefinition)) {\n                    menuItemView.children.add(this._createMenu({\n                        componentFactory,\n                        menuDefinition: itemDefinition,\n                        parentMenuView\n                    }));\n                }\n                else {\n                    const componentView = this._createMenuItemContentFromFactory({\n                        componentName: itemDefinition,\n                        componentFactory,\n                        parentMenuView\n                    });\n                    if (!componentView) {\n                        continue;\n                    }\n                    menuItemView.children.add(componentView);\n                }\n                items.push(menuItemView);\n            }\n            // Separate groups with a separator.\n            if (menuGroupDefinition !== menuDefinition.groups[menuDefinition.groups.length - 1]) {\n                items.push(new ListSeparatorView(locale));\n            }\n        }\n        return items;\n    }\n    /**\n     * Uses the component factory to create a content of the menu item (a button or a sub-menu).\n     */\n    _createMenuItemContentFromFactory({ componentName, parentMenuView, componentFactory }) {\n        const componentView = componentFactory.create(componentName);\n        if (!(componentView instanceof MenuBarMenuView ||\n            componentView instanceof MenuBarMenuListItemButtonView ||\n            componentView instanceof MenuBarMenuListItemFileDialogButtonView)) {\n            /**\n             * Adding unsupported components to the {@link module:ui/menubar/menubarview~MenuBarView} is not possible.\n             *\n             * A component should be either a {@link module:ui/menubar/menubarmenuview~MenuBarMenuView} (sub-menu) or a\n             * {@link module:ui/menubar/menubarmenulistitembuttonview~MenuBarMenuListItemButtonView} (button).\n             *\n             * @error menu-bar-component-unsupported\n             * @param componentName A name of the unsupported component used in the configuration.\n             * @param componentView An unsupported component view.\n             */\n            logWarning('menu-bar-component-unsupported', {\n                componentName,\n                componentView\n            });\n            return null;\n        }\n        this._registerMenuTree(componentView, parentMenuView);\n        // Close the whole menu bar when a component is executed.\n        componentView.on('execute', () => {\n            this.close();\n        });\n        return componentView;\n    }\n    /**\n     * Checks component and its children recursively and calls {@link #registerMenu}\n     * for each item that is {@link module:ui/menubar/menubarmenuview~MenuBarMenuView}.\n     *\n     * @internal\n     */\n    _registerMenuTree(componentView, parentMenuView) {\n        if (!(componentView instanceof MenuBarMenuView)) {\n            componentView.delegate('mouseenter').to(parentMenuView);\n            return;\n        }\n        this.registerMenu(componentView, parentMenuView);\n        const menuBarItemsList = componentView.panelView.children\n            .filter(child => child instanceof MenuBarMenuListView)[0];\n        if (!menuBarItemsList) {\n            componentView.delegate('mouseenter').to(parentMenuView);\n            return;\n        }\n        const nonSeparatorItems = menuBarItemsList.items.filter(item => item instanceof ListItemView);\n        for (const item of nonSeparatorItems) {\n            this._registerMenuTree(item.children.get(0), componentView);\n        }\n    }\n    /**\n     * Manages the state of the {@link #isOpen} property of the menu bar. Because the state is a sum of individual\n     * top-level menus' states, it's necessary to listen to their changes and update the state accordingly.\n     *\n     * Additionally, it prevents from unnecessary changes of `isOpen` when one top-level menu opens and another closes\n     * (regardless of in which order), maintaining a stable `isOpen === true` in that situation.\n     */\n    _setupIsOpenUpdater() {\n        let closeTimeout;\n        // TODO: This is not the prettiest approach but at least it's simple.\n        this.on('menu:change:isOpen', (evt, name, isOpen) => {\n            clearTimeout(closeTimeout);\n            if (isOpen) {\n                this.isOpen = true;\n            }\n            else {\n                closeTimeout = setTimeout(() => {\n                    this.isOpen = Array.from(this.children).some(menuView => menuView.isOpen);\n                }, 0);\n            }\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["text", "element", "text", "Node", "document", "Node", "document", "Node", "document", "count", "document", "document", "document", "first", "Node", "document", "getFillerOffset", "element", "document", "getFillerOffset", "Node", "document", "getFillerOffset", "Node", "document", "getFillerOffset", "Node", "document", "count", "normalize", "document", "count", "nodes", "isText", "diff", "action", "element", "document", "html", "currentNode", "domNode", "document", "MutationObserver", "domElement", "text", "sameNodes", "document", "MutationObserver", "document", "image", "View", "MutationObserver", "name", "TypeCheckable", "Node", "TypeCheckable", "Node", "Text", "Node", "TextProxy", "TypeCheckable", "Element", "Node", "normalize", "Text", "TextProxy", "TreeWalker", "Position", "Element", "Text", "TextProxy", "Position", "TypeCheckable", "TreeWalker", "diff", "Range", "TypeCheckable", "Position", "TreeWalker", "operations", "Position", "Range", "TextProxy", "Range", "range", "Selection", "TypeCheckable", "Range", "first", "Position", "Node", "element", "Range", "DocumentSelection", "TypeCheckable", "uid", "Selection", "TextProxy", "Text", "remove", "Selection", "DocumentSelection", "Element", "Range", "Position", "change", "element", "document", "paragraph", "text", "Range", "Position", "View", "remove", "Position", "Element", "Range", "element", "Text", "TreeWalker", "check", "Range", "Position", "document", "Range", "document", "document", "Range", "convert", "nodes", "Text", "TextProxy", "Node", "Range", "document", "Position", "Position", "document", "Element", "Text", "Position", "Range", "document", "Position", "Range", "document", "document", "Range", "document", "Range", "Element", "document", "Position", "document", "document", "document", "transform", "document", "operations", "Range", "range", "diff", "Position", "ranges", "Position", "bindWithDocument", "transform", "Range", "Position", "diff", "Element", "document", "Document", "DocumentSelection", "evt", "oldRange", "TypeCheckable", "Range", "DocumentFragment", "TypeCheckable", "Element", "Text", "normalize", "TextProxy", "Text", "Element", "DocumentFragment", "Position", "Range", "text", "document", "value", "uid", "DocumentSelection", "range", "getParentBlock", "element", "Range", "paragraph", "DocumentSelection", "Range", "DocumentSelection", "Element", "Position", "paragraph", "TreeWalker", "DocumentSelection", "Position", "Range", "Document", "Range", "Position", "Selection", "DocumentSelection", "Node", "html", "View", "document", "text", "index", "offset", "getData", "stringify", "setData", "Position", "Range", "parse", "DocumentFragment", "Selection", "DocumentSelection", "View", "data", "writer", "convertToModelFragment", "Editor", "document", "Context", "toArray", "pluginsToRemove", "plugins", "plugin", "pluginConstructors", "pluginInstances", "pluginsSubstitutions", "Plugin", "cancel", "config", "licenseKey", "licensePayload", "licensedHosts", "remove", "remove", "cancel", "cancel", "isVisible", "cancel", "cancel", "cancel", "dropdownArrowIcon", "dropdownArrowIcon", "cancel", "toPx", "items", "count", "dropdownArrowIcon", "cancel", "cancel", "text", "NESTED_PANEL_HORIZONTAL_OFFSET", "cancel", "cancel", "Model", "toPx", "toPx", "text", "toPx", "cancel", "toPx", "toPx", "toPx", "dropdownArrowIcon", "cancel", "item"]
}
