{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-ui/src/viewcollection.js", "../../@ckeditor/ckeditor5-ui/src/template.js", "../../@ckeditor/ckeditor5-ui/src/view.js", "../../@ckeditor/ckeditor5-ui/src/icon/iconview.js", "../../@ckeditor/ckeditor5-ui/src/button/buttonlabelview.js", "../../@ckeditor/ckeditor5-ui/src/button/buttonview.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/viewcollection\n */\nimport { CKEditorError, Collection } from '@ckeditor/ckeditor5-utils';\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n * ```ts\n * const parentView = new ParentView( locale );\n * const collection = new ViewCollection( locale );\n *\n * collection.setParent( parentView.element );\n *\n * const viewA = new ChildView( locale );\n * const viewB = new ChildView( locale );\n * ```\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n * ```ts\n * collection.add( viewA );\n * collection.add( viewB );\n *\n * console.log( parentView.element.firsChild ); // -> viewA.element\n * console.log( parentView.element.lastChild ); // -> viewB.element\n * ```\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n * ```ts\n * // Delegate #click and #keydown events from viewA and viewB to the parentView.\n * collection.delegate( 'click' ).to( parentView );\n *\n * parentView.on( 'click', ( evt ) => {\n * \tconsole.log( `${ evt.source } has been clicked.` );\n * } );\n *\n * // This event will be delegated to the parentView.\n * viewB.fire( 'click' );\n * ```\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n */\nexport default class ViewCollection extends Collection {\n    /**\n     * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n     *\n     * @param initialItems The initial items of the collection.\n     */\n    constructor(initialItems = []) {\n        super(initialItems, {\n            // An #id Number attribute should be legal and not break the `ViewCollection` instance.\n            // https://github.com/ckeditor/ckeditor5-ui/issues/93\n            idProperty: 'viewUid'\n        });\n        // Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n        this.on('add', (evt, view, index) => {\n            this._renderViewIntoCollectionParent(view, index);\n        });\n        // Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n        this.on('remove', (evt, view) => {\n            if (view.element && this._parentElement) {\n                view.element.remove();\n            }\n        });\n        this._parentElement = null;\n    }\n    /**\n     * Destroys the view collection along with child views.\n     * See the view {@link module:ui/view~View#destroy} method.\n     */\n    destroy() {\n        this.map(view => view.destroy());\n    }\n    /**\n     * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n     * {@link #remove removing} views in the collection synchronizes their\n     * {@link module:ui/view~View#element elements} in the parent element.\n     *\n     * @param element A new parent element.\n     */\n    setParent(elementOrDocFragment) {\n        this._parentElement = elementOrDocFragment;\n        // Take care of the initial collection items passed to the constructor.\n        for (const view of this) {\n            this._renderViewIntoCollectionParent(view);\n        }\n    }\n    /**\n     * Delegates selected events coming from within views in the collection to any\n     * {@link module:utils/emittermixin~Emitter}.\n     *\n     * For the following views and collection:\n     *\n     * ```ts\n     * const viewA = new View();\n     * const viewB = new View();\n     * const viewC = new View();\n     *\n     * const views = parentView.createCollection();\n     *\n     * views.delegate( 'eventX' ).to( viewB );\n     * views.delegate( 'eventX', 'eventY' ).to( viewC );\n     *\n     * views.add( viewA );\n     * ```\n     *\n     * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n     *\n     * ```ts\n     * viewA.fire( 'eventX', customData );\n     * ```\n     *\n     * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n     *\n     * ```ts\n     * viewA.fire( 'eventY', customData );\n     * ```\n     *\n     * See {@link module:utils/emittermixin~Emitter#delegate}.\n     *\n     * @param events {@link module:ui/view~View} event names to be delegated to another\n     * {@link module:utils/emittermixin~Emitter}.\n     * @returns Object with `to` property, a function which accepts the destination\n     * of {@link module:utils/emittermixin~Emitter#delegate delegated} events.\n     */\n    delegate(...events) {\n        if (!events.length || !isStringArray(events)) {\n            /**\n             * All event names must be strings.\n             *\n             * @error ui-viewcollection-delegate-wrong-events\n             */\n            throw new CKEditorError('ui-viewcollection-delegate-wrong-events', this);\n        }\n        return {\n            to: dest => {\n                // Activate delegating on existing views in this collection.\n                for (const view of this) {\n                    for (const evtName of events) {\n                        view.delegate(evtName).to(dest);\n                    }\n                }\n                // Activate delegating on future views in this collection.\n                this.on('add', (evt, view) => {\n                    for (const evtName of events) {\n                        view.delegate(evtName).to(dest);\n                    }\n                });\n                // Deactivate delegating when view is removed from this collection.\n                this.on('remove', (evt, view) => {\n                    for (const evtName of events) {\n                        view.stopDelegating(evtName, dest);\n                    }\n                });\n            }\n        };\n    }\n    /**\n     * This method {@link module:ui/view~View#render renders} a new view added to the collection.\n     *\n     * If the {@link #_parentElement parent element} of the collection is set, this method also adds\n     * the view's {@link module:ui/view~View#element} as a child of the parent in DOM at a specified index.\n     *\n     * **Note**: If index is not specified, the view's element is pushed as the last child\n     * of the parent element.\n     *\n     * @param view A new view added to the collection.\n     * @param index An index the view holds in the collection. When not specified,\n     * the view is added at the end.\n     */\n    _renderViewIntoCollectionParent(view, index) {\n        if (!view.isRendered) {\n            view.render();\n        }\n        if (view.element && this._parentElement) {\n            this._parentElement.insertBefore(view.element, this._parentElement.children[index]);\n        }\n    }\n    /**\n     * Removes a child view from the collection. If the {@link #setParent parent element} of the\n     * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n     * in DOM, reflecting the order of the collection.\n     *\n     * See the {@link #add} method.\n     *\n     * @param subject The view to remove, its id or index in the collection.\n     * @returns The removed view.\n     */\n    remove(subject) {\n        return super.remove(subject);\n    }\n}\n/**\n * Check if all entries of the array are of `String` type.\n *\n * @param arr An array to be checked.\n */\nfunction isStringArray(arr) {\n    return arr.every(a => typeof a == 'string');\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/template\n */\n/* global document */\nimport View from './view.js';\nimport ViewCollection from './viewcollection.js';\nimport { CKEditorError, EmitterMixin, isNode, toArray } from '@ckeditor/ckeditor5-utils';\nimport { isObject, cloneDeepWith } from 'lodash-es';\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n * ```ts\n * const bind = Template.bind( observable, emitter );\n *\n * new Template( {\n * \ttag: 'p',\n * \tattributes: {\n * \t\tclass: 'foo',\n * \t\tstyle: {\n * \t\t\tbackgroundColor: 'yellow'\n * \t\t}\n * \t},\n * \ton: {\n * \t\tclick: bind.to( 'clicked' )\n * \t},\n * \tchildren: [\n * \t\t'A paragraph.'\n * \t]\n * } ).render();\n * ```\n *\n * and it will render the following HTML element:\n *\n * ```html\n * <p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n * ```\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n */\nexport default class Template extends /* #__PURE__ */ EmitterMixin() {\n    /**\n     * Creates an instance of the {@link ~Template} class.\n     *\n     * @param def The definition of the template.\n     */\n    constructor(def) {\n        super();\n        Object.assign(this, normalize(clone(def)));\n        this._isRendered = false;\n        this._revertData = null;\n    }\n    /**\n     * Renders a DOM Node (an HTML element or text) out of the template.\n     *\n     * ```ts\n     * const domNode = new Template( { ... } ).render();\n     * ```\n     *\n     * See: {@link #apply}.\n     */\n    render() {\n        const node = this._renderNode({\n            intoFragment: true\n        });\n        this._isRendered = true;\n        return node;\n    }\n    /**\n     * Applies the template to an existing DOM Node, either HTML element or text.\n     *\n     * **Note:** No new DOM nodes will be created. Applying extends:\n     *\n     * {@link module:ui/template~TemplateDefinition attributes},\n     * {@link module:ui/template~TemplateDefinition event listeners}, and\n     * `textContent` of {@link module:ui/template~TemplateDefinition children} only.\n     *\n     * **Note:** Existing `class` and `style` attributes are extended when a template\n     * is applied to an HTML element, while other attributes and `textContent` are overridden.\n     *\n     * **Note:** The process of applying a template can be easily reverted using the\n     * {@link module:ui/template~Template#revert} method.\n     *\n     * ```ts\n     * const element = document.createElement( 'div' );\n     * const observable = new Model( { divClass: 'my-div' } );\n     * const emitter = Object.create( EmitterMixin );\n     * const bind = Template.bind( observable, emitter );\n     *\n     * new Template( {\n     * \tattributes: {\n     * \t\tid: 'first-div',\n     * \t\tclass: bind.to( 'divClass' )\n     * \t},\n     * \ton: {\n     * \t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n     * \t},\n     * \tchildren: [\n     * \t\t'Div text.'\n     * \t]\n     * } ).apply( element );\n     *\n     * console.log( element.outerHTML ); // -> '<div id=\"first-div\" class=\"my-div\"></div>'\n     * ```\n     *\n     * @see module:ui/template~Template#render\n     * @see module:ui/template~Template#revert\n     * @param node Root node for the template to apply.\n     */\n    apply(node) {\n        this._revertData = getEmptyRevertData();\n        this._renderNode({\n            node,\n            intoFragment: false,\n            isApplying: true,\n            revertData: this._revertData\n        });\n        return node;\n    }\n    /**\n     * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n     *\n     * @param node The root node for the template to revert. In most of the cases, it is the\n     * same node used by {@link module:ui/template~Template#apply}.\n     */\n    revert(node) {\n        if (!this._revertData) {\n            /**\n             * Attempting to revert a template which has not been applied yet.\n             *\n             * @error ui-template-revert-not-applied\n             */\n            throw new CKEditorError('ui-template-revert-not-applied', [this, node]);\n        }\n        this._revertTemplateFromNode(node, this._revertData);\n    }\n    /**\n     * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n     * instances and returns them one by one.\n     *\n     * ```ts\n     * const viewFoo = new View();\n     * const viewBar = new View();\n     * const viewBaz = new View();\n     * const template = new Template( {\n     * \ttag: 'div',\n     * \tchildren: [\n     * \t\tviewFoo,\n     * \t\t{\n     * \t\t\ttag: 'div',\n     * \t\t\tchildren: [\n     * \t\t\t\tviewBar\n     * \t\t\t]\n     * \t\t},\n     * \t\tviewBaz\n     * \t]\n     * } );\n     *\n     * // Logs: viewFoo, viewBar, viewBaz\n     * for ( const view of template.getViews() ) {\n     * \tconsole.log( view );\n     * }\n     * ```\n     */\n    *getViews() {\n        function* search(def) {\n            if (def.children) {\n                for (const child of def.children) {\n                    if (isView(child)) {\n                        yield child;\n                    }\n                    else if (isTemplate(child)) {\n                        yield* search(child);\n                    }\n                }\n            }\n        }\n        yield* search(this);\n    }\n    /**\n     * An entry point to the interface which binds DOM nodes to\n     * {@link module:utils/observablemixin~Observable observables}.\n     * There are two types of bindings:\n     *\n     * * HTML element attributes or text `textContent` synchronized with attributes of an\n     * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n     * and {@link module:ui/template~BindChain#if}.\n     *\n     * ```ts\n     * const bind = Template.bind( observable, emitter );\n     *\n     * new Template( {\n     * \tattributes: {\n     * \t\t// Binds the element \"class\" attribute to observable#classAttribute.\n     * \t\tclass: bind.to( 'classAttribute' )\n     * \t}\n     * } ).render();\n     * ```\n     *\n     * * DOM events fired on HTML element propagated through\n     * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n     *\n     * ```ts\n     * const bind = Template.bind( observable, emitter );\n     *\n     * new Template( {\n     * \ton: {\n     * \t\t// Will be fired by the observable.\n     * \t\tclick: bind( 'elementClicked' )\n     * \t}\n     * } ).render();\n     * ```\n     *\n     * Also see {@link module:ui/view~View#bindTemplate}.\n     *\n     * @param observable An observable which provides boundable attributes.\n     * @param emitter An emitter that listens to observable attribute\n     * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n     */\n    static bind(observable, emitter) {\n        return {\n            to(eventNameOrFunctionOrAttribute, callback) {\n                return new TemplateToBinding({\n                    eventNameOrFunction: eventNameOrFunctionOrAttribute,\n                    attribute: eventNameOrFunctionOrAttribute,\n                    observable, emitter, callback\n                });\n            },\n            if(attribute, valueIfTrue, callback) {\n                return new TemplateIfBinding({\n                    observable, emitter, attribute, valueIfTrue, callback\n                });\n            }\n        };\n    }\n    /**\n     * Extends an existing {@link module:ui/template~Template} instance with some additional content\n     * from another {@link module:ui/template~TemplateDefinition}.\n     *\n     * ```ts\n     * const bind = Template.bind( observable, emitter );\n     *\n     * const template = new Template( {\n     * \ttag: 'p',\n     * \tattributes: {\n     * \t\tclass: 'a',\n     * \t\tdata-x: bind.to( 'foo' )\n     * \t},\n     * \tchildren: [\n     * \t\t{\n     * \t\t\ttag: 'span',\n     * \t\t\tattributes: {\n     * \t\t\t\tclass: 'b'\n     * \t\t\t},\n     * \t\t\tchildren: [\n     * \t\t\t\t'Span'\n     * \t\t\t]\n     * \t\t}\n     * \t]\n     *  } );\n     *\n     * // Instance-level extension.\n     * Template.extend( template, {\n     * \tattributes: {\n     * \t\tclass: 'b',\n     * \t\tdata-x: bind.to( 'bar' )\n     * \t},\n     * \tchildren: [\n     * \t\t{\n     * \t\t\tattributes: {\n     * \t\t\t\tclass: 'c'\n     * \t\t\t}\n     * \t\t}\n     * \t]\n     * } );\n     *\n     * // Child extension.\n     * Template.extend( template.children[ 0 ], {\n     * \tattributes: {\n     * \t\tclass: 'd'\n     * \t}\n     * } );\n     * ```\n     *\n     * the `outerHTML` of `template.render()` is:\n     *\n     * ```html\n     * <p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n     * \t<span class=\"b c d\">Span</span>\n     * </p>\n     * ```\n     *\n     * @param template An existing template instance to be extended.\n     * @param def Additional definition to be applied to a template.\n     */\n    static extend(template, def) {\n        if (template._isRendered) {\n            /**\n             * Extending a template after rendering may not work as expected. To make sure\n             * the {@link module:ui/template~Template.extend extending} works for an element,\n             * make sure it happens before {@link module:ui/template~Template#render} is called.\n             *\n             * @error template-extend-render\n             */\n            throw new CKEditorError('template-extend-render', [this, template]);\n        }\n        extendTemplate(template, normalize(clone(def)));\n    }\n    /**\n     * Renders a DOM Node (either an HTML element or text) out of the template.\n     *\n     * @param data Rendering data.\n     */\n    _renderNode(data) {\n        let isInvalid;\n        if (data.node) {\n            // When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n            isInvalid = this.tag && this.text;\n        }\n        else {\n            // When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n            isInvalid = this.tag ? this.text : !this.text;\n        }\n        if (isInvalid) {\n            /**\n             * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n             * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n             *\n             * @error ui-template-wrong-syntax\n             */\n            throw new CKEditorError('ui-template-wrong-syntax', this);\n        }\n        if (this.text) {\n            return this._renderText(data);\n        }\n        else {\n            return this._renderElement(data);\n        }\n    }\n    /**\n     * Renders an HTML element out of the template.\n     *\n     * @param data Rendering data.\n     */\n    _renderElement(data) {\n        let node = data.node;\n        if (!node) {\n            node = data.node = document.createElementNS(this.ns || xhtmlNs, this.tag);\n        }\n        this._renderAttributes(data);\n        this._renderElementChildren(data);\n        this._setUpListeners(data);\n        return node;\n    }\n    /**\n     * Renders a text node out of {@link module:ui/template~Template#text}.\n     *\n     * @param data Rendering data.\n     */\n    _renderText(data) {\n        let node = data.node;\n        // Save the original textContent to revert it in #revert().\n        if (node) {\n            data.revertData.text = node.textContent;\n        }\n        else {\n            node = data.node = document.createTextNode('');\n        }\n        // Check if this Text Node is bound to Observable. Cases:\n        //\n        //\t\ttext: [ Template.bind( ... ).to( ... ) ]\n        //\n        //\t\ttext: [\n        //\t\t\t'foo',\n        //\t\t\tTemplate.bind( ... ).to( ... ),\n        //\t\t\t...\n        //\t\t]\n        //\n        if (hasTemplateBinding(this.text)) {\n            this._bindToObservable({\n                schema: this.text,\n                updater: getTextUpdater(node),\n                data\n            });\n        }\n        // Simply set text. Cases:\n        //\n        //\t\ttext: [ 'all', 'are', 'static' ]\n        //\n        //\t\ttext: [ 'foo' ]\n        //\n        else {\n            node.textContent = this.text.join('');\n        }\n        return node;\n    }\n    /**\n     * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n     *\n     * @param data Rendering data.\n     */\n    _renderAttributes(data) {\n        if (!this.attributes) {\n            return;\n        }\n        const node = data.node;\n        const revertData = data.revertData;\n        for (const attrName in this.attributes) {\n            // Current attribute value in DOM.\n            const domAttrValue = node.getAttribute(attrName);\n            // The value to be set.\n            const attrValue = this.attributes[attrName];\n            // Save revert data.\n            if (revertData) {\n                revertData.attributes[attrName] = domAttrValue;\n            }\n            // Detect custom namespace:\n            //\n            //\t\tclass: {\n            //\t\t\tns: 'abc',\n            //\t\t\tvalue: Template.bind( ... ).to( ... )\n            //\t\t}\n            //\n            const attrNs = isNamespaced(attrValue) ? attrValue[0].ns : null;\n            // Activate binding if one is found. Cases:\n            //\n            //\t\tclass: [\n            //\t\t\tTemplate.bind( ... ).to( ... )\n            //\t\t]\n            //\n            //\t\tclass: [\n            //\t\t\t'bar',\n            //\t\t\tTemplate.bind( ... ).to( ... ),\n            //\t\t\t'baz'\n            //\t\t]\n            //\n            //\t\tclass: {\n            //\t\t\tns: 'abc',\n            //\t\t\tvalue: Template.bind( ... ).to( ... )\n            //\t\t}\n            //\n            if (hasTemplateBinding(attrValue)) {\n                // Normalize attributes with additional data like namespace:\n                //\n                //\t\tclass: {\n                //\t\t\tns: 'abc',\n                //\t\t\tvalue: [ ... ]\n                //\t\t}\n                //\n                const valueToBind = isNamespaced(attrValue) ? attrValue[0].value : attrValue;\n                // Extend the original value of attributes like \"style\" and \"class\",\n                // don't override them.\n                if (revertData && shouldExtend(attrName)) {\n                    valueToBind.unshift(domAttrValue);\n                }\n                this._bindToObservable({\n                    schema: valueToBind,\n                    updater: getAttributeUpdater(node, attrName, attrNs),\n                    data\n                });\n            }\n            // Style attribute could be an Object so it needs to be parsed in a specific way.\n            //\n            //\t\tstyle: {\n            //\t\t\twidth: '100px',\n            //\t\t\theight: Template.bind( ... ).to( ... )\n            //\t\t}\n            //\n            else if (attrName == 'style' && typeof attrValue[0] !== 'string') {\n                this._renderStyleAttribute(attrValue[0], data);\n            }\n            // Otherwise simply set the static attribute:\n            //\n            //\t\tclass: [ 'foo' ]\n            //\n            //\t\tclass: [ 'all', 'are', 'static' ]\n            //\n            //\t\tclass: [\n            //\t\t\t{\n            //\t\t\t\tns: 'abc',\n            //\t\t\t\tvalue: [ 'foo' ]\n            //\t\t\t}\n            //\t\t]\n            //\n            else {\n                // Extend the original value of attributes like \"style\" and \"class\",\n                // don't override them.\n                if (revertData && domAttrValue && shouldExtend(attrName)) {\n                    attrValue.unshift(domAttrValue);\n                }\n                const value = attrValue\n                    // Retrieve \"values\" from:\n                    //\n                    //\t\tclass: [\n                    //\t\t\t{\n                    //\t\t\t\tns: 'abc',\n                    //\t\t\t\tvalue: [ ... ]\n                    //\t\t\t}\n                    //\t\t]\n                    //\n                    .map((val) => val ? (val.value || val) : val)\n                    // Flatten the array.\n                    .reduce((prev, next) => prev.concat(next), [])\n                    // Convert into string.\n                    .reduce(arrayValueReducer, '');\n                if (!isFalsy(value)) {\n                    node.setAttributeNS(attrNs, attrName, value);\n                }\n            }\n        }\n    }\n    /**\n     * Renders the `style` attribute of an HTML element based on\n     * {@link module:ui/template~Template#attributes}.\n     *\n     * A style attribute is an object with static values:\n     *\n     * ```ts\n     * attributes: {\n     * \tstyle: {\n     * \t\tcolor: 'red'\n     * \t}\n     * }\n     * ```\n     *\n     * or values bound to {@link module:ui/model~Model} properties:\n     *\n     * ```ts\n     * attributes: {\n     * \tstyle: {\n     * \t\tcolor: bind.to( ... )\n     * \t}\n     * }\n     * ```\n     *\n     * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n     * needed.\n     *\n     * @param styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n     * @param data Rendering data.\n     */\n    _renderStyleAttribute(styles, data) {\n        const node = data.node;\n        for (const styleName in styles) {\n            const styleValue = styles[styleName];\n            // Cases:\n            //\n            //\t\tstyle: {\n            //\t\t\tcolor: bind.to( 'attribute' )\n            //\t\t}\n            //\n            if (hasTemplateBinding(styleValue)) {\n                this._bindToObservable({\n                    schema: [styleValue],\n                    updater: getStyleUpdater(node, styleName),\n                    data\n                });\n            }\n            // Cases:\n            //\n            //\t\tstyle: {\n            //\t\t\tcolor: 'red'\n            //\t\t}\n            //\n            else {\n                node.style[styleName] = styleValue;\n            }\n        }\n    }\n    /**\n     * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n     *\n     * @param data Rendering data.\n     */\n    _renderElementChildren(data) {\n        const node = data.node;\n        const container = data.intoFragment ? document.createDocumentFragment() : node;\n        const isApplying = data.isApplying;\n        let childIndex = 0;\n        for (const child of this.children) {\n            if (isViewCollection(child)) {\n                if (!isApplying) {\n                    child.setParent(node);\n                    // Note: ViewCollection renders its children.\n                    for (const view of child) {\n                        container.appendChild(view.element);\n                    }\n                }\n            }\n            else if (isView(child)) {\n                if (!isApplying) {\n                    if (!child.isRendered) {\n                        child.render();\n                    }\n                    container.appendChild(child.element);\n                }\n            }\n            else if (isNode(child)) {\n                container.appendChild(child);\n            }\n            else {\n                if (isApplying) {\n                    const revertData = data.revertData;\n                    const childRevertData = getEmptyRevertData();\n                    revertData.children.push(childRevertData);\n                    child._renderNode({\n                        intoFragment: false,\n                        node: container.childNodes[childIndex++],\n                        isApplying: true,\n                        revertData: childRevertData\n                    });\n                }\n                else {\n                    container.appendChild(child.render());\n                }\n            }\n        }\n        if (data.intoFragment) {\n            node.appendChild(container);\n        }\n    }\n    /**\n     * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n     * on an HTML element.\n     *\n     * @param data Rendering data.\n     */\n    _setUpListeners(data) {\n        if (!this.eventListeners) {\n            return;\n        }\n        for (const key in this.eventListeners) {\n            const revertBindings = this.eventListeners[key].map(schemaItem => {\n                const [domEvtName, domSelector] = key.split('@');\n                return schemaItem.activateDomEventListener(domEvtName, domSelector, data);\n            });\n            if (data.revertData) {\n                data.revertData.bindings.push(revertBindings);\n            }\n        }\n    }\n    /**\n     * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n     * activates the binding and sets its initial value.\n     *\n     * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n     * text node `textContent`.\n     *\n     * @param options Binding options.\n     * @param options.updater A function which updates the DOM (like attribute or text).\n     * @param options.data Rendering data.\n     */\n    _bindToObservable({ schema, updater, data }) {\n        const revertData = data.revertData;\n        // Set initial values.\n        syncValueSchemaValue(schema, updater, data);\n        const revertBindings = schema\n            // Filter \"falsy\" (false, undefined, null, '') value schema components out.\n            .filter(item => !isFalsy(item))\n            // Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n            .filter((item) => item.observable)\n            // Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n            // TODO: Reduce the number of listeners attached as many bindings may listen\n            // to the same observable attribute.\n            .map(templateBinding => templateBinding.activateAttributeListener(schema, updater, data));\n        if (revertData) {\n            revertData.bindings.push(revertBindings);\n        }\n    }\n    /**\n     * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n     * return it to the original state.\n     *\n     * @param node A node to be reverted.\n     * @param revertData An object that stores information about what changes have been made by\n     * {@link #apply} to the node. See {@link module:ui/template~RenderData#revertData} for more information.\n     */\n    _revertTemplateFromNode(node, revertData) {\n        for (const binding of revertData.bindings) {\n            // Each binding may consist of several observable+observable#attribute.\n            // like the following has 2:\n            //\n            //\t\tclass: [\n            //\t\t\t'x',\n            //\t\t\tbind.to( 'foo' ),\n            //\t\t\t'y',\n            //\t\t\tbind.to( 'bar' )\n            //\t\t]\n            //\n            for (const revertBinding of binding) {\n                revertBinding();\n            }\n        }\n        if (revertData.text) {\n            node.textContent = revertData.text;\n            return;\n        }\n        const element = node;\n        for (const attrName in revertData.attributes) {\n            const attrValue = revertData.attributes[attrName];\n            // When the attribute has **not** been set before #apply().\n            if (attrValue === null) {\n                element.removeAttribute(attrName);\n            }\n            else {\n                element.setAttribute(attrName, attrValue);\n            }\n        }\n        for (let i = 0; i < revertData.children.length; ++i) {\n            this._revertTemplateFromNode(element.childNodes[i], revertData.children[i]);\n        }\n    }\n}\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @internal\n */\nexport class TemplateBinding {\n    /**\n     * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n     *\n     * @param def The definition of the binding.\n     */\n    constructor(def) {\n        this.attribute = def.attribute;\n        this.observable = def.observable;\n        this.emitter = def.emitter;\n        this.callback = def.callback;\n    }\n    /**\n     * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n     * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n     *\n     * @param node A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n     * @returns The value of {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable}.\n     */\n    getValue(node) {\n        const value = this.observable[this.attribute];\n        return this.callback ? this.callback(value, node) : value;\n    }\n    /**\n     * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n     * value of {@link module:ui/template~TemplateValueSchema}.\n     *\n     * @param schema A full schema to generate an attribute or text in the DOM.\n     * @param updater A DOM updater function used to update the native DOM attribute or text.\n     * @param data Rendering data.\n     * @returns A function to sever the listener binding.\n     */\n    activateAttributeListener(schema, updater, data) {\n        const callback = () => syncValueSchemaValue(schema, updater, data);\n        this.emitter.listenTo(this.observable, `change:${this.attribute}`, callback);\n        // Allows revert of the listener.\n        return () => {\n            this.emitter.stopListening(this.observable, `change:${this.attribute}`, callback);\n        };\n    }\n}\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @internal\n */\nexport class TemplateToBinding extends TemplateBinding {\n    constructor(def) {\n        super(def);\n        this.eventNameOrFunction = def.eventNameOrFunction;\n    }\n    /**\n     * Activates the listener for the native DOM event, which when fired, is propagated by\n     * the {@link module:ui/template~TemplateBinding#emitter}.\n     *\n     * @param domEvtName The name of the native DOM event.\n     * @param domSelector The selector in the DOM to filter delegated events.\n     * @param data Rendering data.\n     * @returns A function to sever the listener binding.\n     */\n    activateDomEventListener(domEvtName, domSelector, data) {\n        const callback = (evt, domEvt) => {\n            if (!domSelector || domEvt.target.matches(domSelector)) {\n                if (typeof this.eventNameOrFunction == 'function') {\n                    this.eventNameOrFunction(domEvt);\n                }\n                else {\n                    this.observable.fire(this.eventNameOrFunction, domEvt);\n                }\n            }\n        };\n        this.emitter.listenTo(data.node, domEvtName, callback);\n        // Allows revert of the listener.\n        return () => {\n            this.emitter.stopListening(data.node, domEvtName, callback);\n        };\n    }\n}\n/**\n * Describes a binding to {@link module:utils/observablemixin~Observable} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @internal\n */\nexport class TemplateIfBinding extends TemplateBinding {\n    constructor(def) {\n        super(def);\n        this.valueIfTrue = def.valueIfTrue;\n    }\n    /**\n     * @inheritDoc\n     */\n    getValue(node) {\n        const value = super.getValue(node);\n        return isFalsy(value) ? false : (this.valueIfTrue || true);\n    }\n}\n/**\n * Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n * {@link module:ui/template~TemplateBinding}.\n */\nfunction hasTemplateBinding(schema) {\n    if (!schema) {\n        return false;\n    }\n    // Normalize attributes with additional data like namespace:\n    //\n    //\t\tclass: {\n    //\t\t\tns: 'abc',\n    //\t\t\tvalue: [ ... ]\n    //\t\t}\n    //\n    if (schema.value) {\n        schema = schema.value;\n    }\n    if (Array.isArray(schema)) {\n        return schema.some(hasTemplateBinding);\n    }\n    else if (schema instanceof TemplateBinding) {\n        return true;\n    }\n    return false;\n}\n/**\n * Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n * an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n * items.\n *\n * @param node DOM Node updated when {@link module:utils/observablemixin~Observable} changes.\n */\nfunction getValueSchemaValue(schema, node) {\n    return schema.map(schemaItem => {\n        // Process {@link module:ui/template~TemplateBinding} bindings.\n        if (schemaItem instanceof TemplateBinding) {\n            return schemaItem.getValue(node);\n        }\n        // All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n        return schemaItem;\n    });\n}\n/**\n * A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n * constructed from {@link module:ui/template~TemplateValueSchema}.\n *\n * @param updater A function which updates the DOM (like attribute or text).\n * @param node DOM Node updated when {@link module:utils/observablemixin~Observable} changes.\n */\nfunction syncValueSchemaValue(schema, updater, { node }) {\n    const values = getValueSchemaValue(schema, node);\n    let value;\n    // Check if schema is a single Template.bind.if, like:\n    //\n    //\t\tclass: Template.bind.if( 'foo' )\n    //\n    if (schema.length == 1 && schema[0] instanceof TemplateIfBinding) {\n        value = values[0];\n    }\n    else {\n        value = values.reduce(arrayValueReducer, '');\n    }\n    if (isFalsy(value)) {\n        updater.remove();\n    }\n    else {\n        updater.set(value);\n    }\n}\n/**\n * Returns an object consisting of `set` and `remove` functions, which\n * can be used in the context of DOM Node to set or reset `textContent`.\n * @see module:ui/view~View#_bindToObservable\n *\n * @param node DOM Node to be modified.\n */\nfunction getTextUpdater(node) {\n    return {\n        set(value) {\n            node.textContent = value;\n        },\n        remove() {\n            node.textContent = '';\n        }\n    };\n}\n/**\n * Returns an object consisting of `set` and `remove` functions, which\n * can be used in the context of DOM Node to set or reset an attribute.\n * @see module:ui/view~View#_bindToObservable\n *\n * @param el DOM Node to be modified.\n * @param attrName Name of the attribute to be modified.\n * @param ns Namespace to use.\n */\nfunction getAttributeUpdater(el, attrName, ns) {\n    return {\n        set(value) {\n            el.setAttributeNS(ns, attrName, value);\n        },\n        remove() {\n            el.removeAttributeNS(ns, attrName);\n        }\n    };\n}\n/**\n * Returns an object consisting of `set` and `remove` functions, which\n * can be used in the context of CSSStyleDeclaration to set or remove a style.\n * @see module:ui/view~View#_bindToObservable\n *\n * @param el DOM Node to be modified.\n * @param styleName Name of the style to be modified.\n */\nfunction getStyleUpdater(el, styleName) {\n    return {\n        set(value) {\n            el.style[styleName] = value;\n        },\n        remove() {\n            el.style[styleName] = null;\n        }\n    };\n}\n/**\n * Clones definition of the template.\n */\nfunction clone(def) {\n    const clone = cloneDeepWith(def, value => {\n        // Don't clone the `Template.bind`* bindings because of the references to Observable\n        // and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n        // cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n        // along with the definition.\n        //\n        // Don't clone Template instances if provided as a child. They're simply #render()ed\n        // and nothing should interfere.\n        //\n        // Also don't clone View instances if provided as a child of the Template. The template\n        // instance will be extracted from the View during the normalization and there's no need\n        // to clone it.\n        if (value && (value instanceof TemplateBinding || isTemplate(value) || isView(value) || isViewCollection(value))) {\n            return value;\n        }\n    });\n    return clone;\n}\n/**\n * Normalizes given {@link module:ui/template~TemplateDefinition}.\n *\n * See:\n *  * {@link normalizeAttributes}\n *  * {@link normalizeListeners}\n *  * {@link normalizePlainTextDefinition}\n *  * {@link normalizeTextDefinition}\n *\n * @param def A template definition.\n * @returns Normalized definition.\n */\nfunction normalize(def) {\n    if (typeof def == 'string') {\n        def = normalizePlainTextDefinition(def);\n    }\n    else if (def.text) {\n        normalizeTextDefinition(def);\n    }\n    if (def.on) {\n        def.eventListeners = normalizeListeners(def.on);\n        // Template mixes EmitterMixin, so delete #on to avoid collision.\n        delete def.on;\n    }\n    if (!def.text) {\n        if (def.attributes) {\n            normalizeAttributes(def.attributes);\n        }\n        const children = [];\n        if (def.children) {\n            if (isViewCollection(def.children)) {\n                children.push(def.children);\n            }\n            else {\n                for (const child of def.children) {\n                    if (isTemplate(child) || isView(child) || isNode(child)) {\n                        children.push(child);\n                    }\n                    else {\n                        children.push(new Template(child));\n                    }\n                }\n            }\n        }\n        def.children = children;\n    }\n    return def;\n}\n/**\n * Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * attributes: {\n * \ta: 'bar',\n * \tb: {@link module:ui/template~TemplateBinding},\n * \tc: {\n * \t\tvalue: 'bar'\n * \t}\n * }\n * ```\n *\n * becomes\n *\n * ```\n * attributes: {\n * \ta: [ 'bar' ],\n * \tb: [ {@link module:ui/template~TemplateBinding} ],\n * \tc: {\n * \t\tvalue: [ 'bar' ]\n * \t}\n * }\n * ```\n */\nfunction normalizeAttributes(attributes) {\n    for (const a in attributes) {\n        if (attributes[a].value) {\n            attributes[a].value = toArray(attributes[a].value);\n        }\n        arrayify(attributes, a);\n    }\n}\n/**\n * Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * on: {\n * \ta: 'bar',\n * \tb: {@link module:ui/template~TemplateBinding},\n * \tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n * }\n * ```\n *\n * becomes\n *\n * ```\n * on: {\n * \ta: [ 'bar' ],\n * \tb: [ {@link module:ui/template~TemplateBinding} ],\n * \tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n * }\n * ```\n *\n * @returns Object containing normalized listeners.\n */\nfunction normalizeListeners(listeners) {\n    for (const l in listeners) {\n        arrayify(listeners, l);\n    }\n    return listeners;\n}\n/**\n * Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * \"foo\"\n * ```\n *\n * becomes\n *\n * ```\n * { text: [ 'foo' ] },\n * ```\n *\n * @returns Normalized template definition.\n */\nfunction normalizePlainTextDefinition(def) {\n    return {\n        text: [def]\n    };\n}\n/**\n * Normalizes text {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * children: [\n * \t{ text: 'def' },\n * \t{ text: {@link module:ui/template~TemplateBinding} }\n * ]\n * ```\n *\n * becomes\n *\n * ```\n * children: [\n * \t{ text: [ 'def' ] },\n * \t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n * ]\n * ```\n */\nfunction normalizeTextDefinition(def) {\n    def.text = toArray(def.text);\n}\n/**\n * Wraps an entry in Object in an Array, if not already one.\n *\n * ```\n * {\n * \tx: 'y',\n * \ta: [ 'b' ]\n * }\n * ```\n *\n * becomes\n *\n * ```\n * {\n * \tx: [ 'y' ],\n * \ta: [ 'b' ]\n * }\n * ```\n */\nfunction arrayify(obj, key) {\n    obj[key] = toArray(obj[key]);\n}\n/**\n * A helper which concatenates the value avoiding unwanted\n * leading white spaces.\n */\nfunction arrayValueReducer(prev, cur) {\n    if (isFalsy(cur)) {\n        return prev;\n    }\n    else if (isFalsy(prev)) {\n        return cur;\n    }\n    else {\n        return `${prev} ${cur}`;\n    }\n}\n/**\n * Extends one object defined in the following format:\n *\n * ```\n * {\n * \tkey1: [Array1],\n * \tkey2: [Array2],\n * \t...\n * \tkeyN: [ArrayN]\n * }\n * ```\n *\n * with another object of the same data format.\n *\n * @param obj Base object.\n * @param ext Object extending base.\n */\nfunction extendObjectValueArray(obj, ext) {\n    for (const a in ext) {\n        if (obj[a]) {\n            obj[a].push(...ext[a]);\n        }\n        else {\n            obj[a] = ext[a];\n        }\n    }\n}\n/**\n * A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n * with content from {@link module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n *\n * @param def A template instance to be extended.\n * @param def A definition which is to extend the template instance.\n * @param Error context.\n */\nfunction extendTemplate(template, def) {\n    if (def.attributes) {\n        if (!template.attributes) {\n            template.attributes = {};\n        }\n        extendObjectValueArray(template.attributes, def.attributes);\n    }\n    if (def.eventListeners) {\n        if (!template.eventListeners) {\n            template.eventListeners = {};\n        }\n        extendObjectValueArray(template.eventListeners, def.eventListeners);\n    }\n    if (def.text) {\n        template.text.push(...def.text);\n    }\n    if (def.children && def.children.length) {\n        if (template.children.length != def.children.length) {\n            /**\n             * The number of children in extended definition does not match.\n             *\n             * @error ui-template-extend-children-mismatch\n             */\n            throw new CKEditorError('ui-template-extend-children-mismatch', template);\n        }\n        let childIndex = 0;\n        for (const childDef of def.children) {\n            extendTemplate(template.children[childIndex++], childDef);\n        }\n    }\n}\n/**\n * Checks if value is \"falsy\".\n * Note: 0 (Number) is not \"falsy\" in this context.\n *\n * @param value Value to be checked.\n */\nfunction isFalsy(value) {\n    return !value && value !== 0;\n}\n/**\n * Checks if the item is an instance of {@link module:ui/view~View}\n *\n * @param value Value to be checked.\n */\nfunction isView(item) {\n    return item instanceof View;\n}\n/**\n * Checks if the item is an instance of {@link module:ui/template~Template}\n *\n * @param value Value to be checked.\n */\nfunction isTemplate(item) {\n    return item instanceof Template;\n}\n/**\n * Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n *\n * @param value Value to be checked.\n */\nfunction isViewCollection(item) {\n    return item instanceof ViewCollection;\n}\n/**\n * Checks if value array contains the one with namespace.\n */\nfunction isNamespaced(attrValue) {\n    return isObject(attrValue[0]) && attrValue[0].ns;\n}\n/**\n * Creates an empty skeleton for {@link module:ui/template~Template#revert}\n * data.\n */\nfunction getEmptyRevertData() {\n    return {\n        children: [],\n        bindings: [],\n        attributes: {}\n    };\n}\n/**\n * Checks whether an attribute should be extended when\n * {@link module:ui/template~Template#apply} is called.\n *\n * @param attrName Attribute name to check.\n */\nfunction shouldExtend(attrName) {\n    return attrName == 'class' || attrName == 'style';\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable @typescript-eslint/no-invalid-void-type */\n/**\n * @module ui/view\n */\nimport ViewCollection from './viewcollection.js';\nimport Template from './template.js';\nimport { CKEditorError, Collection, DomEmitterMixin, ObservableMixin, isIterable } from '@ckeditor/ckeditor5-utils';\nimport '../theme/globals/globals.css';\n/**\n * The basic view class, which represents an HTML element created out of a\n * {@link module:ui/view~View#template}. Views are building blocks of the user interface and handle\n * interaction\n *\n * Views {@link module:ui/view~View#registerChild aggregate} children in\n * {@link module:ui/view~View#createCollection collections} and manage the life cycle of DOM\n * listeners e.g. by handling rendering and destruction.\n *\n * See the {@link module:ui/template~TemplateDefinition} syntax to learn more about shaping view\n * elements, attributes and listeners.\n *\n * ```ts\n * class SampleView extends View {\n * \tconstructor( locale ) {\n * \t\tsuper( locale );\n *\n * \t\tconst bind = this.bindTemplate;\n *\n * \t\t// Views define their interface (state) using observable attributes.\n * \t\tthis.set( 'elementClass', 'bar' );\n *\n * \t\tthis.setTemplate( {\n * \t\t\ttag: 'p',\n *\n * \t\t\t// The element of the view can be defined with its children.\n * \t\t\tchildren: [\n * \t\t\t\t'Hello',\n * \t\t\t\t{\n * \t\t\t\t\ttag: 'b',\n * \t\t\t\t\tchildren: [ 'world!' ]\n * \t\t\t\t}\n * \t\t\t],\n * \t\t\tattributes: {\n * \t\t\t\tclass: [\n * \t\t\t\t\t'foo',\n *\n * \t\t\t\t\t// Observable attributes control the state of the view in DOM.\n * \t\t\t\t\tbind.to( 'elementClass' )\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\ton: {\n * \t\t\t\t// Views listen to DOM events and propagate them.\n * \t\t\t\tclick: bind.to( 'clicked' )\n * \t\t\t}\n * \t\t} );\n * \t}\n * }\n *\n * const view = new SampleView( locale );\n *\n * view.render();\n *\n * // Append <p class=\"foo bar\">Hello<b>world</b></p> to the <body>\n * document.body.appendChild( view.element );\n *\n * // Change the class attribute to <p class=\"foo baz\">Hello<b>world</b></p>\n * view.elementClass = 'baz';\n *\n * // Respond to the \"click\" event in DOM by executing a custom action.\n * view.on( 'clicked', () => {\n * \tconsole.log( 'The view has been clicked!' );\n * } );\n * ```\n */\nexport default class View extends /* #__PURE__ */ DomEmitterMixin(/* #__PURE__ */ ObservableMixin()) {\n    /**\n     * Creates an instance of the {@link module:ui/view~View} class.\n     *\n     * Also see {@link #render}.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super();\n        this.element = null;\n        this.isRendered = false;\n        this.locale = locale;\n        this.t = locale && locale.t;\n        this._viewCollections = new Collection();\n        this._unboundChildren = this.createCollection();\n        // Pass parent locale to its children.\n        this._viewCollections.on('add', (evt, collection) => {\n            collection.locale = locale;\n            collection.t = locale && locale.t;\n        });\n        this.decorate('render');\n    }\n    /**\n     * Shorthand for {@link module:ui/template~Template.bind}, a binding\n     * {@link module:ui/template~BindChain interface} pre–configured for the view instance.\n     *\n     * It provides {@link module:ui/template~BindChain#to `to()`} and\n     * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with\n     * observable attributes and attach DOM listeners.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tconst bind = this.bindTemplate;\n     *\n     * \t\t// These {@link module:utils/observablemixin~Observable observable} attributes will control\n     * \t\t// the state of the view in DOM.\n     * \t\tthis.set( {\n     * \t\t\telementClass: 'foo',\n     * \t\t \tisEnabled: true\n     * \t\t } );\n     *\n     * \t\tthis.setTemplate( {\n     * \t\t\ttag: 'p',\n     *\n     * \t\t\tattributes: {\n     * \t\t\t\t// The class HTML attribute will follow elementClass\n     * \t\t\t\t// and isEnabled view attributes.\n     * \t\t\t\tclass: [\n     * \t\t\t\t\tbind.to( 'elementClass' )\n     * \t\t\t\t\tbind.if( 'isEnabled', 'present-when-enabled' )\n     * \t\t\t\t]\n     * \t\t\t},\n     *\n     * \t\t\ton: {\n     * \t\t\t\t// The view will fire the \"clicked\" event upon clicking <p> in DOM.\n     * \t\t\t\tclick: bind.to( 'clicked' )\n     * \t\t\t}\n     * \t\t} );\n     * \t}\n     * }\n     * ```\n     */\n    get bindTemplate() {\n        if (this._bindTemplate) {\n            return this._bindTemplate;\n        }\n        return (this._bindTemplate = Template.bind(this, this));\n    }\n    /**\n     * Creates a new collection of views, which can be used as\n     * {@link module:ui/template~Template#children} of this view.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tconst child = new ChildView( locale );\n     * \t\tthis.items = this.createCollection( [ child ] );\n     *\n     * \t\tthis.setTemplate( {\n     * \t\t\ttag: 'p',\n     *\n     * \t\t\t// `items` collection will render here.\n     * \t\t\tchildren: this.items\n     * \t\t} );\n     * \t}\n     * }\n     *\n     * const view = new SampleView( locale );\n     * view.render();\n     *\n     * // It will append <p><child#element></p> to the <body>.\n     * document.body.appendChild( view.element );\n     * ```\n     *\n     * @param views Initial views of the collection.\n     * @returns A new collection of view instances.\n     */\n    createCollection(views) {\n        const collection = new ViewCollection(views);\n        this._viewCollections.add(collection);\n        return collection;\n    }\n    /**\n     * Registers a new child view under the view instance. Once registered, a child\n     * view is managed by its parent, including {@link #render rendering}\n     * and {@link #destroy destruction}.\n     *\n     * To revert this, use {@link #deregisterChild}.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tthis.childA = new SomeChildView( locale );\n     * \t\tthis.childB = new SomeChildView( locale );\n     *\n     * \t\tthis.setTemplate( { tag: 'p' } );\n     *\n     * \t\t// Register the children.\n     * \t\tthis.registerChild( [ this.childA, this.childB ] );\n     * \t}\n     *\n     * \trender() {\n     * \t\tsuper.render();\n     *\n     * \t\tthis.element.appendChild( this.childA.element );\n     * \t\tthis.element.appendChild( this.childB.element );\n     * \t}\n     * }\n     *\n     * const view = new SampleView( locale );\n     *\n     * view.render();\n     *\n     * // Will append <p><childA#element><b></b><childB#element></p>.\n     * document.body.appendChild( view.element );\n     * ```\n     *\n     * **Note**: There's no need to add child views if they're already referenced in the\n     * {@link #template}:\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tthis.childA = new SomeChildView( locale );\n     * \t\tthis.childB = new SomeChildView( locale );\n     *\n     * \t\tthis.setTemplate( {\n     * \t\t\ttag: 'p',\n     *\n     * \t\t\t// These children will be added automatically. There's no\n     * \t\t\t// need to call {@link #registerChild} for any of them.\n     * \t\t\tchildren: [ this.childA, this.childB ]\n     * \t\t} );\n     * \t}\n     *\n     * \t// ...\n     * }\n     * ```\n     *\n     * @param children Children views to be registered.\n     */\n    registerChild(children) {\n        if (!isIterable(children)) {\n            children = [children];\n        }\n        for (const child of children) {\n            this._unboundChildren.add(child);\n        }\n    }\n    /**\n     * The opposite of {@link #registerChild}. Removes a child view from this view instance.\n     * Once removed, the child is no longer managed by its parent, e.g. it can safely\n     * become a child of another parent view.\n     *\n     * @see #registerChild\n     * @param children Child views to be removed.\n     */\n    deregisterChild(children) {\n        if (!isIterable(children)) {\n            children = [children];\n        }\n        for (const child of children) {\n            this._unboundChildren.remove(child);\n        }\n    }\n    /**\n     * Sets the {@link #template} of the view with with given definition.\n     *\n     * A shorthand for:\n     *\n     * ```ts\n     * view.setTemplate( definition );\n     * ```\n     *\n     * @param definition Definition of view's template.\n     */\n    setTemplate(definition) {\n        this.template = new Template(definition);\n    }\n    /**\n     * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with\n     * with given definition.\n     *\n     * A shorthand for:\n     *\n     * ```ts\n     * Template.extend( view.template, definition );\n     * ```\n     *\n     * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.\n     *\n     * @param definition Definition which extends the {@link #template}.\n     */\n    extendTemplate(definition) {\n        Template.extend(this.template, definition);\n    }\n    /**\n     * Recursively renders the view.\n     *\n     * Once the view is rendered:\n     * * the {@link #element} becomes an HTML element out of {@link #template},\n     * * the {@link #isRendered} flag is set `true`.\n     *\n     * **Note**: The children of the view:\n     * * defined directly in the {@link #template}\n     * * residing in collections created by the {@link #createCollection} method,\n     * * and added by {@link #registerChild}\n     * are also rendered in the process.\n     *\n     * In general, `render()` method is the right place to keep the code which refers to the\n     * {@link #element} and should be executed at the very beginning of the view's life cycle.\n     *\n     * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before\n     * the view is rendered. To allow an early customization of the view (e.g. by its parent),\n     * such references should be done in `render()`.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor() {\n     * \t\tthis.setTemplate( {\n     * \t\t\t// ...\n     * \t\t} );\n     * \t},\n     *\n     * \trender() {\n     * \t\t// View#element becomes available.\n     * \t\tsuper.render();\n     *\n     * \t\t// The \"scroll\" listener depends on #element.\n     * \t\tthis.listenTo( window, 'scroll', () => {\n     * \t\t\t// A reference to #element would render the #template and make it non-extendable.\n     * \t\t\tif ( window.scrollY > 0 ) {\n     * \t\t\t\tthis.element.scrollLeft = 100;\n     * \t\t\t} else {\n     * \t\t\t\tthis.element.scrollLeft = 0;\n     * \t\t\t}\n     * \t\t} );\n     * \t}\n     * }\n     *\n     * const view = new SampleView();\n     *\n     * // Let's customize the view before it gets rendered.\n     * view.extendTemplate( {\n     * \tattributes: {\n     * \t\tclass: [\n     * \t\t\t'additional-class'\n     * \t\t]\n     * \t}\n     * } );\n     *\n     * // Late rendering allows customization of the view.\n     * view.render();\n     * ```\n     */\n    render() {\n        if (this.isRendered) {\n            /**\n             * This View has already been rendered.\n             *\n             * @error ui-view-render-already-rendered\n             */\n            throw new CKEditorError('ui-view-render-already-rendered', this);\n        }\n        // Render #element of the view.\n        if (this.template) {\n            this.element = this.template.render();\n            // Auto–register view children from #template.\n            this.registerChild(this.template.getViews());\n        }\n        this.isRendered = true;\n    }\n    /**\n     * Recursively destroys the view instance and child views added by {@link #registerChild} and\n     * residing in collections created by the {@link #createCollection}.\n     *\n     * Destruction disables all event listeners:\n     * * created on the view, e.g. `view.on( 'event', () => {} )`,\n     * * defined in the {@link #template} for DOM events.\n     */\n    destroy() {\n        this.stopListening();\n        this._viewCollections.map(c => c.destroy());\n        // Template isn't obligatory for views.\n        if (this.template && this.template._revertData) {\n            this.template.revert(this.element);\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global DOMParser */\n/**\n * @module ui/icon/iconview\n */\nimport View from '../view.js';\nimport '../../theme/components/icon/icon.css';\n/**\n * The icon view class.\n */\nclass IconView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        const bind = this.bindTemplate;\n        this.set('content', '');\n        this.set('viewBox', '0 0 20 20');\n        this.set('fillColor', '');\n        this.set('isColorInherited', true);\n        this.set('isVisible', true);\n        this.setTemplate({\n            tag: 'svg',\n            ns: 'http://www.w3.org/2000/svg',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-icon',\n                    bind.if('isVisible', 'ck-hidden', value => !value),\n                    // Exclude icon internals from the CSS reset to allow rich (non-monochromatic) icons\n                    // (https://github.com/ckeditor/ckeditor5/issues/12599).\n                    'ck-reset_all-excluded',\n                    // The class to remove the dynamic color inheritance is toggleable\n                    // (https://github.com/ckeditor/ckeditor5/issues/12599).\n                    bind.if('isColorInherited', 'ck-icon_inherit-color')\n                ],\n                viewBox: bind.to('viewBox')\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this._updateXMLContent();\n        this._colorFillPaths();\n        // This is a hack for lack of innerHTML binding.\n        // See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n        this.on('change:content', () => {\n            this._updateXMLContent();\n            this._colorFillPaths();\n        });\n        this.on('change:fillColor', () => {\n            this._colorFillPaths();\n        });\n    }\n    /**\n     * Updates the {@link #element} with the value of {@link #content}.\n     */\n    _updateXMLContent() {\n        if (this.content) {\n            const parsed = new DOMParser().parseFromString(this.content.trim(), 'image/svg+xml');\n            const svg = parsed.querySelector('svg');\n            const viewBox = svg.getAttribute('viewBox');\n            if (viewBox) {\n                this.viewBox = viewBox;\n            }\n            // Preserve presentational attributes of the <svg> element from the source.\n            // They can affect rendering of the entire icon (https://github.com/ckeditor/ckeditor5/issues/12597).\n            for (const { name, value } of Array.from(svg.attributes)) {\n                if (IconView.presentationalAttributeNames.includes(name)) {\n                    this.element.setAttribute(name, value);\n                }\n            }\n            while (this.element.firstChild) {\n                this.element.removeChild(this.element.firstChild);\n            }\n            while (svg.childNodes.length > 0) {\n                this.element.appendChild(svg.childNodes[0]);\n            }\n        }\n    }\n    /**\n     * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n     */\n    _colorFillPaths() {\n        if (this.fillColor) {\n            this.element.querySelectorAll('.ck-icon__fill').forEach(path => {\n                path.style.fill = this.fillColor;\n            });\n        }\n    }\n}\n/**\n * A list of presentational attributes that can be set on the `<svg>` element and should be preserved\n * when the icon {@link module:ui/icon/iconview~IconView#content content} is loaded.\n *\n * See the [specification](https://www.w3.org/TR/SVG/styling.html#TermPresentationAttribute) to learn more.\n */\nIconView.presentationalAttributeNames = [\n    'alignment-baseline', 'baseline-shift', 'clip-path', 'clip-rule', 'color', 'color-interpolation',\n    'color-interpolation-filters', 'color-rendering', 'cursor', 'direction', 'display', 'dominant-baseline', 'fill', 'fill-opacity',\n    'fill-rule', 'filter', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style',\n    'font-variant', 'font-weight', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start',\n    'mask', 'opacity', 'overflow', 'paint-order', 'pointer-events', 'shape-rendering', 'stop-color', 'stop-opacity', 'stroke',\n    'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width',\n    'text-anchor', 'text-decoration', 'text-overflow', 'text-rendering', 'transform', 'unicode-bidi', 'vector-effect',\n    'visibility', 'white-space', 'word-spacing', 'writing-mode'\n];\nexport default IconView;\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/button/buttonlabelview\n */\nimport View from '../view.js';\n/**\n * A default implementation of the button view's label. It comes with a dynamic text support\n * via {@link module:ui/button/buttonlabelview~ButtonLabelView#text} property.\n */\nexport default class ButtonLabelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        this.set({\n            style: undefined,\n            text: undefined,\n            id: undefined\n        });\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button__label'\n                ],\n                style: bind.to('style'),\n                id: bind.to('id')\n            },\n            children: [\n                {\n                    text: bind.to('text')\n                }\n            ]\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/button/buttonview\n */\nimport View from '../view.js';\nimport IconView from '../icon/iconview.js';\nimport ButtonLabelView from './buttonlabelview.js';\nimport { env, getEnvKeystrokeText, uid, delay } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/button/button.css';\n/**\n * The button view class.\n *\n * ```ts\n * const view = new ButtonView();\n *\n * view.set( {\n * \tlabel: 'A button',\n * \tkeystroke: 'Ctrl+B',\n * \ttooltip: true,\n * \twithText: true\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n */\nexport default class ButtonView extends View {\n    /**\n     * Creates an instance of the button view class.\n     *\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param labelView The instance of the button's label. If not provided, an instance of\n     * {@link module:ui/button/buttonlabelview~ButtonLabelView} is used.\n     */\n    constructor(locale, labelView = new ButtonLabelView()) {\n        super(locale);\n        /**\n         * Delayed focus function for focus handling in Safari.\n         */\n        this._focusDelayed = null;\n        const bind = this.bindTemplate;\n        const ariaLabelUid = uid();\n        // Implement the Button interface.\n        this.set('_ariaPressed', false);\n        this.set('_ariaChecked', false);\n        this.set('ariaLabel', undefined);\n        this.set('ariaLabelledBy', `ck-editor__aria-label_${ariaLabelUid}`);\n        this.set('class', undefined);\n        this.set('labelStyle', undefined);\n        this.set('icon', undefined);\n        this.set('isEnabled', true);\n        this.set('isOn', false);\n        this.set('isVisible', true);\n        this.set('isToggleable', false);\n        this.set('keystroke', undefined);\n        this.set('label', undefined);\n        this.set('role', undefined);\n        this.set('tabindex', -1);\n        this.set('tooltip', false);\n        this.set('tooltipPosition', 's');\n        this.set('type', 'button');\n        this.set('withText', false);\n        this.set('withKeystroke', false);\n        this.children = this.createCollection();\n        this.labelView = this._setupLabelView(labelView);\n        this.iconView = new IconView();\n        this.iconView.extendTemplate({\n            attributes: {\n                class: 'ck-button__icon'\n            }\n        });\n        this.keystrokeView = this._createKeystrokeView();\n        this.bind('_tooltipString').to(this, 'tooltip', this, 'label', this, 'keystroke', this._getTooltipString.bind(this));\n        const template = {\n            tag: 'button',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button',\n                    bind.to('class'),\n                    bind.if('isEnabled', 'ck-disabled', value => !value),\n                    bind.if('isVisible', 'ck-hidden', value => !value),\n                    bind.to('isOn', value => value ? 'ck-on' : 'ck-off'),\n                    bind.if('withText', 'ck-button_with-text'),\n                    bind.if('withKeystroke', 'ck-button_with-keystroke')\n                ],\n                role: bind.to('role'),\n                type: bind.to('type', value => value ? value : 'button'),\n                tabindex: bind.to('tabindex'),\n                'aria-checked': bind.to('_ariaChecked'),\n                'aria-pressed': bind.to('_ariaPressed'),\n                'aria-label': bind.to('ariaLabel'),\n                'aria-labelledby': bind.to('ariaLabelledBy'),\n                'aria-disabled': bind.if('isEnabled', true, value => !value),\n                'data-cke-tooltip-text': bind.to('_tooltipString'),\n                'data-cke-tooltip-position': bind.to('tooltipPosition')\n            },\n            children: this.children,\n            on: {\n                click: bind.to(evt => {\n                    // We can't make the button disabled using the disabled attribute, because it won't be focusable.\n                    // Though, shouldn't this condition be moved to the button controller?\n                    if (this.isEnabled) {\n                        this.fire('execute');\n                    }\n                    else {\n                        // Prevent the default when button is disabled, to block e.g.\n                        // automatic form submitting. See ckeditor/ckeditor5-link#74.\n                        evt.preventDefault();\n                    }\n                })\n            }\n        };\n        this.bind('_ariaPressed').to(this, 'isOn', this, 'isToggleable', this, 'role', (isOn, isToggleable, role) => {\n            if (!isToggleable || isCheckableRole(role)) {\n                return false;\n            }\n            return String(!!isOn);\n        });\n        this.bind('_ariaChecked').to(this, 'isOn', this, 'isToggleable', this, 'role', (isOn, isToggleable, role) => {\n            if (!isToggleable || !isCheckableRole(role)) {\n                return false;\n            }\n            return String(!!isOn);\n        });\n        // On Safari we have to force the focus on a button on click as it's the only browser\n        // that doesn't do that automatically. See #12115.\n        if (env.isSafari) {\n            if (!this._focusDelayed) {\n                this._focusDelayed = delay(() => this.focus(), 0);\n            }\n            template.on.mousedown = bind.to(() => {\n                this._focusDelayed();\n            });\n            template.on.mouseup = bind.to(() => {\n                this._focusDelayed.cancel();\n            });\n        }\n        this.setTemplate(template);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        if (this.icon) {\n            this.iconView.bind('content').to(this, 'icon');\n            this.children.add(this.iconView);\n        }\n        this.children.add(this.labelView);\n        if (this.withKeystroke && this.keystroke) {\n            this.children.add(this.keystrokeView);\n        }\n    }\n    /**\n     * Focuses the {@link #element} of the button.\n     */\n    focus() {\n        this.element.focus();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        if (this._focusDelayed) {\n            this._focusDelayed.cancel();\n        }\n        super.destroy();\n    }\n    /**\n     * Binds the label view instance it with button attributes.\n     */\n    _setupLabelView(labelView) {\n        labelView.bind('text', 'style', 'id').to(this, 'label', 'labelStyle', 'ariaLabelledBy');\n        return labelView;\n    }\n    /**\n     * Creates a view that displays a keystroke next to a {@link #labelView label }\n     * and binds it with button attributes.\n     */\n    _createKeystrokeView() {\n        const keystrokeView = new View();\n        keystrokeView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button__keystroke'\n                ]\n            },\n            children: [\n                {\n                    text: this.bindTemplate.to('keystroke', text => getEnvKeystrokeText(text))\n                }\n            ]\n        });\n        return keystrokeView;\n    }\n    /**\n     * Gets the text for the tooltip from the combination of\n     * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n     *\n     * @see #tooltip\n     * @see #_tooltipString\n     * @param tooltip Button tooltip.\n     * @param label Button label.\n     * @param keystroke Button keystroke.\n     */\n    _getTooltipString(tooltip, label, keystroke) {\n        if (tooltip) {\n            if (typeof tooltip == 'string') {\n                return tooltip;\n            }\n            else {\n                if (keystroke) {\n                    keystroke = getEnvKeystrokeText(keystroke);\n                }\n                if (tooltip instanceof Function) {\n                    return tooltip(label, keystroke);\n                }\n                else {\n                    return `${label}${keystroke ? ` (${keystroke})` : ''}`;\n                }\n            }\n        }\n        return '';\n    }\n}\n/**\n * Checks if `aria-checkbox` can be used with specified role.\n */\nfunction isCheckableRole(role) {\n    switch (role) {\n        case 'radio':\n        case 'checkbox':\n        case 'option':\n        case 'switch':\n        case 'menuitemcheckbox':\n        case 'menuitemradio':\n            return true;\n        default:\n            return false;\n    }\n}\n"],
  "mappings": "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",
  "names": ["clone"]
}
