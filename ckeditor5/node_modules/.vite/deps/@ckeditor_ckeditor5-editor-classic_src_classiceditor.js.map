{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-editor-classic/src/classiceditorui.js", "../../@ckeditor/ckeditor5-editor-classic/src/classiceditoruiview.js", "../../@ckeditor/ckeditor5-editor-classic/src/classiceditor.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { EditorUI, DialogView, normalizeToolbarConfig } from 'ckeditor5/src/ui.js';\nimport { enablePlaceholder } from 'ckeditor5/src/engine.js';\nimport { ElementReplacer, Rect } from 'ckeditor5/src/utils.js';\n/**\n * The classic editor UI class.\n */\nexport default class ClassicEditorUI extends EditorUI {\n    /**\n     * Creates an instance of the classic editor UI class.\n     *\n     * @param editor The editor instance.\n     * @param view The view of the UI.\n     */\n    constructor(editor, view) {\n        super(editor);\n        this.view = view;\n        this._toolbarConfig = normalizeToolbarConfig(editor.config.get('toolbar'));\n        this._elementReplacer = new ElementReplacer();\n        this.listenTo(editor.editing.view, 'scrollToTheSelection', this._handleScrollToTheSelectionWithStickyPanel.bind(this));\n    }\n    /**\n     * @inheritDoc\n     */\n    get element() {\n        return this.view.element;\n    }\n    /**\n     * Initializes the UI.\n     *\n     * @param replacementElement The DOM element that will be the source for the created editor.\n     */\n    init(replacementElement) {\n        const editor = this.editor;\n        const view = this.view;\n        const editingView = editor.editing.view;\n        const editable = view.editable;\n        const editingRoot = editingView.document.getRoot();\n        // The editable UI and editing root should share the same name. Then name is used\n        // to recognize the particular editable, for instance in ARIA attributes.\n        editable.name = editingRoot.rootName;\n        view.render();\n        // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n        // But it can be available earlier if a DOM element has been passed to BalloonEditor.create().\n        const editableElement = editable.element;\n        // Register the editable UI view in the editor. A single editor instance can aggregate multiple\n        // editable areas (roots) but the classic editor has only one.\n        this.setEditableElement(editable.name, editableElement);\n        // Let the editable UI element respond to the changes in the global editor focus\n        // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n        // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n        // as they have focus, the editable should act like it is focused too (although technically\n        // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n        // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n        // toolbar gets focused.\n        view.editable.bind('isFocused').to(this.focusTracker);\n        // Bind the editable UI element to the editing view, making it an end– and entry–point\n        // of the editor's engine. This is where the engine meets the UI.\n        editingView.attachDomRoot(editableElement);\n        // If an element containing the initial data of the editor was provided, replace it with\n        // an editor instance's UI in DOM until the editor is destroyed. For instance, a <textarea>\n        // can be such element.\n        if (replacementElement) {\n            this._elementReplacer.replace(replacementElement, this.element);\n        }\n        this._initPlaceholder();\n        this._initToolbar();\n        if (view.menuBarView) {\n            this._initMenuBar(view.menuBarView);\n        }\n        this._initDialogPluginIntegration();\n        this._initContextualBalloonIntegration();\n        this.fire('ready');\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        const view = this.view;\n        const editingView = this.editor.editing.view;\n        this._elementReplacer.restore();\n        if (editingView.getDomRoot(view.editable.name)) {\n            editingView.detachDomRoot(view.editable.name);\n        }\n        view.destroy();\n    }\n    /**\n     * Initializes the editor toolbar.\n     */\n    _initToolbar() {\n        const view = this.view;\n        // Set–up the sticky panel with toolbar.\n        view.stickyPanel.bind('isActive').to(this.focusTracker, 'isFocused');\n        view.stickyPanel.limiterElement = view.element;\n        view.stickyPanel.bind('viewportTopOffset').to(this, 'viewportOffset', ({ top }) => top || 0);\n        view.toolbar.fillFromConfig(this._toolbarConfig, this.componentFactory);\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        this.addToolbar(view.toolbar);\n    }\n    /**\n     * Enable the placeholder text on the editing root.\n     */\n    _initPlaceholder() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const editingRoot = editingView.document.getRoot();\n        const sourceElement = editor.sourceElement;\n        let placeholderText;\n        const placeholder = editor.config.get('placeholder');\n        if (placeholder) {\n            placeholderText = typeof placeholder === 'string' ? placeholder : placeholder[this.view.editable.name];\n        }\n        if (!placeholderText && sourceElement && sourceElement.tagName.toLowerCase() === 'textarea') {\n            placeholderText = sourceElement.getAttribute('placeholder');\n        }\n        if (placeholderText) {\n            editingRoot.placeholder = placeholderText;\n        }\n        enablePlaceholder({\n            view: editingView,\n            element: editingRoot,\n            isDirectHost: false,\n            keepOnFocus: true\n        });\n    }\n    /**\n     * Provides an integration between the sticky toolbar and {@link module:ui/panel/balloon/contextualballoon contextual balloon plugin}.\n     * It allows the contextual balloon to consider the height of the\n     * {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#stickyPanel}. It prevents the balloon from overlapping\n     * the sticky toolbar by adjusting the balloon's position using viewport offset configuration.\n     */\n    _initContextualBalloonIntegration() {\n        if (!this.editor.plugins.has('ContextualBalloon')) {\n            return;\n        }\n        const { stickyPanel } = this.view;\n        const contextualBalloon = this.editor.plugins.get('ContextualBalloon');\n        contextualBalloon.on('getPositionOptions', evt => {\n            const position = evt.return;\n            if (!position || !stickyPanel.isSticky || !stickyPanel.element) {\n                return;\n            }\n            // Measure toolbar (and menu bar) height.\n            const stickyPanelHeight = new Rect(stickyPanel.element).height;\n            // Handle edge case when the target element is larger than the limiter.\n            // It's an issue because the contextual balloon can overlap top table cells when the table is larger than the viewport\n            // and it's placed at the top of the editor. It's better to overlap toolbar in that situation.\n            // Check this issue: https://github.com/ckeditor/ckeditor5/issues/15744\n            const target = typeof position.target === 'function' ? position.target() : position.target;\n            const limiter = typeof position.limiter === 'function' ? position.limiter() : position.limiter;\n            if (target && limiter && new Rect(target).height >= new Rect(limiter).height - stickyPanelHeight) {\n                return;\n            }\n            // Ensure that viewport offset is present, it can be undefined according to the typing.\n            const viewportOffsetConfig = { ...position.viewportOffsetConfig };\n            const newTopViewportOffset = (viewportOffsetConfig.top || 0) + stickyPanelHeight;\n            evt.return = {\n                ...position,\n                viewportOffsetConfig: {\n                    ...viewportOffsetConfig,\n                    top: newTopViewportOffset\n                }\n            };\n        }, { priority: 'low' });\n        // Update balloon position when the toolbar becomes sticky or when ui viewportOffset changes.\n        const updateBalloonPosition = () => {\n            if (contextualBalloon.visibleView) {\n                contextualBalloon.updatePosition();\n            }\n        };\n        this.listenTo(stickyPanel, 'change:isSticky', updateBalloonPosition);\n        this.listenTo(this.editor.ui, 'change:viewportOffset', updateBalloonPosition);\n    }\n    /**\n     * Provides an integration between the sticky toolbar and {@link module:utils/dom/scroll~scrollViewportToShowTarget}.\n     * It allows the UI-agnostic engine method to consider the geometry of the\n     * {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#stickyPanel} that pins to the\n     * edge of the viewport and can obscure the user caret after scrolling the window.\n     *\n     * @param evt The `scrollToTheSelection` event info.\n     * @param data The payload carried by the `scrollToTheSelection` event.\n     * @param originalArgs The original arguments passed to `scrollViewportToShowTarget()` method (see implementation to learn more).\n     */\n    _handleScrollToTheSelectionWithStickyPanel(evt, data, originalArgs) {\n        const stickyPanel = this.view.stickyPanel;\n        if (stickyPanel.isSticky) {\n            const stickyPanelHeight = new Rect(stickyPanel.element).height;\n            data.viewportOffset.top += stickyPanelHeight;\n        }\n        else {\n            const scrollViewportOnPanelGettingSticky = () => {\n                this.editor.editing.view.scrollToTheSelection(originalArgs);\n            };\n            this.listenTo(stickyPanel, 'change:isSticky', scrollViewportOnPanelGettingSticky);\n            // This works as a post-scroll-fixer because it's impossible predict whether the panel will be sticky after scrolling or not.\n            // Listen for a short period of time only and if the toolbar does not become sticky very soon, cancel the listener.\n            setTimeout(() => {\n                this.stopListening(stickyPanel, 'change:isSticky', scrollViewportOnPanelGettingSticky);\n            }, 20);\n        }\n    }\n    /**\n     * Provides an integration between the sticky toolbar and {@link module:ui/dialog/dialog the Dialog plugin}.\n     *\n     * It moves the dialog down to ensure that the\n     * {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#stickyPanel sticky panel}\n     * used by the editor UI will not get obscured by the dialog when the dialog uses one of its automatic positions.\n     */\n    _initDialogPluginIntegration() {\n        if (!this.editor.plugins.has('Dialog')) {\n            return;\n        }\n        const stickyPanel = this.view.stickyPanel;\n        const dialogPlugin = this.editor.plugins.get('Dialog');\n        dialogPlugin.on('show', () => {\n            const dialogView = dialogPlugin.view;\n            dialogView.on('moveTo', (evt, data) => {\n                // Engage only when the panel is sticky, and the dialog is using one of default positions.\n                // Ignore modals because they are displayed on top of the page (and overlay) and they do not collide with anything\n                // See (https://github.com/ckeditor/ckeditor5/issues/17339).\n                if (!stickyPanel.isSticky || dialogView.wasMoved || dialogView.isModal) {\n                    return;\n                }\n                const stickyPanelContentRect = new Rect(stickyPanel.contentPanelElement);\n                if (data[1] < stickyPanelContentRect.bottom + DialogView.defaultOffset) {\n                    data[1] = stickyPanelContentRect.bottom + DialogView.defaultOffset;\n                }\n            }, { priority: 'high' });\n        }, { priority: 'low' });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module editor-classic/classiceditoruiview\n */\nimport { BoxedEditorUIView, InlineEditableUIView, MenuBarView, StickyPanelView, ToolbarView } from 'ckeditor5/src/ui.js';\nimport '../theme/classiceditor.css';\n/**\n * Classic editor UI view. Uses an inline editable and a sticky toolbar, all\n * enclosed in a boxed UI view.\n */\nexport default class ClassicEditorUIView extends BoxedEditorUIView {\n    /**\n     * Creates an instance of the classic editor UI view.\n     *\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param editingView The editing view instance this view is related to.\n     * @param options Configuration options for the view instance.\n     * @param options.shouldToolbarGroupWhenFull When set `true` enables automatic items grouping\n     * in the main {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#toolbar toolbar}.\n     * See {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull} to learn more.\n     * @param options.label When set, this value will be used as an accessible `aria-label` of the\n     * {@link module:ui/editableui/editableuiview~EditableUIView editable view}.\n     */\n    constructor(locale, editingView, options = {}) {\n        super(locale);\n        this.stickyPanel = new StickyPanelView(locale);\n        this.toolbar = new ToolbarView(locale, {\n            shouldGroupWhenFull: options.shouldToolbarGroupWhenFull\n        });\n        if (options.useMenuBar) {\n            this.menuBarView = new MenuBarView(locale);\n        }\n        this.editable = new InlineEditableUIView(locale, editingView, undefined, {\n            label: options.label\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        if (this.menuBarView) {\n            // Set toolbar as a child of a stickyPanel and makes toolbar sticky.\n            this.stickyPanel.content.addMany([this.menuBarView, this.toolbar]);\n        }\n        else {\n            this.stickyPanel.content.add(this.toolbar);\n        }\n        this.top.add(this.stickyPanel);\n        this.main.add(this.editable);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module editor-classic/classiceditor\n */\nimport ClassicEditorUI from './classiceditorui.js';\nimport ClassicEditorUIView from './classiceditoruiview.js';\nimport { Editor, ElementApiMixin, attachToForm } from 'ckeditor5/src/core.js';\nimport { getDataFromElement, CKEditorError } from 'ckeditor5/src/utils.js';\nimport { isElement as _isElement } from 'lodash-es';\n/**\n * The classic editor implementation. It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\n * See the {@glink examples/builds/classic-editor demo}.\n *\n * In order to create a classic editor instance, use the static\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\n */\nexport default class ClassicEditor extends /* #__PURE__ */ ElementApiMixin(Editor) {\n    /**\n     * @inheritDoc\n     */\n    static get editorName() {\n        return 'ClassicEditor';\n    }\n    /**\n     * Creates an instance of the classic editor.\n     *\n     * **Note:** do not use the constructor to create editor instances. Use the static\n     * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\n     *\n     * @param sourceElementOrData The DOM element that will be the source for the created editor\n     * or the editor's initial data. For more information see\n     * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n     * @param config The editor configuration.\n     */\n    constructor(sourceElementOrData, config = {}) {\n        // If both `config.initialData` is set and initial data is passed as the constructor parameter, then throw.\n        if (!isElement(sourceElementOrData) && config.initialData !== undefined) {\n            // Documented in core/editor/editorconfig.jsdoc.\n            // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n            throw new CKEditorError('editor-create-initial-data', null);\n        }\n        super(config);\n        this.config.define('menuBar.isVisible', false);\n        if (this.config.get('initialData') === undefined) {\n            this.config.set('initialData', getInitialData(sourceElementOrData));\n        }\n        if (isElement(sourceElementOrData)) {\n            this.sourceElement = sourceElementOrData;\n        }\n        this.model.document.createRoot();\n        const shouldToolbarGroupWhenFull = !this.config.get('toolbar.shouldNotGroupWhenFull');\n        const menuBarConfig = this.config.get('menuBar');\n        const view = new ClassicEditorUIView(this.locale, this.editing.view, {\n            shouldToolbarGroupWhenFull,\n            useMenuBar: menuBarConfig.isVisible,\n            label: this.config.get('label')\n        });\n        this.ui = new ClassicEditorUI(this, view);\n        attachToForm(this);\n    }\n    /**\n     * Destroys the editor instance, releasing all resources used by it.\n     *\n     * Updates the original editor element with the data if the\n     * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy `updateSourceElementOnDestroy`}\n     * configuration option is set to `true`.\n     */\n    destroy() {\n        if (this.sourceElement) {\n            this.updateSourceElement();\n        }\n        this.ui.destroy();\n        return super.destroy();\n    }\n    /**\n     * Creates a new classic editor instance.\n     *\n     * There are three ways how the editor can be initialized.\n     *\n     * # Replacing a DOM element (and loading data from it)\n     *\n     * You can initialize the editor using an existing DOM element:\n     *\n     * ```ts\n     * ClassicEditor\n     * \t.create( document.querySelector( '#editor' ) )\n     * \t.then( editor => {\n     * \t\tconsole.log( 'Editor was initialized', editor );\n     * \t} )\n     * \t.catch( err => {\n     * \t\tconsole.error( err.stack );\n     * \t} );\n     * ```\n     *\n     * The element's content will be used as the editor data and the element will be replaced by the editor UI.\n     *\n     * # Creating a detached editor\n     *\n     * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n     * In this case, the editor will render an element that must be inserted into the DOM:\n     *\n     * ```ts\n     * ClassicEditor\n     * \t.create( '<p>Hello world!</p>' )\n     * \t.then( editor => {\n     * \t\tconsole.log( 'Editor was initialized', editor );\n     *\n     * \t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n     * \t\tdocument.body.appendChild( editor.ui.element );\n     * \t} )\n     * \t.catch( err => {\n     * \t\tconsole.error( err.stack );\n     * \t} );\n     * ```\n     *\n     * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n     * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n     *\n     * # Replacing a DOM element (and data provided in `config.initialData`)\n     *\n     * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n     *\n     * ```ts\n     * ClassicEditor\n     * \t.create( document.querySelector( '#editor' ), {\n     * \t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n     * \t} )\n     * \t.then( editor => {\n     * \t\tconsole.log( 'Editor was initialized', editor );\n     * \t} )\n     * \t.catch( err => {\n     * \t\tconsole.error( err.stack );\n     * \t} );\n     * ```\n     *\n     * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n     * makes it difficult to set the content of the source element.\n     *\n     * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n     *\n     * # Configuring the editor\n     *\n     * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n     * customizing plugins, toolbar and more.\n     *\n     * @param sourceElementOrData The DOM element that will be the source for the created editor\n     * or the editor's initial data.\n     *\n     * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization\n     * and the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element editor element} will replace the passed element\n     * in the DOM (the original one will be hidden and the editor will be injected next to it).\n     *\n     * If the {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy updateSourceElementOnDestroy}\n     * option is set to `true`, the editor data will be set back to the original element once the editor is destroyed and when a form,\n     * in which this element is contained, is submitted (if the original element is a `<textarea>`). This ensures seamless integration\n     * with native web forms.\n     *\n     * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n     * It is available under the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element `editor.ui.element`} property.\n     *\n     * @param config The editor configuration.\n     * @returns A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n     */\n    static create(sourceElementOrData, config = {}) {\n        return new Promise(resolve => {\n            const editor = new this(sourceElementOrData, config);\n            resolve(editor.initPlugins()\n                .then(() => editor.ui.init(isElement(sourceElementOrData) ? sourceElementOrData : null))\n                .then(() => editor.data.init(editor.config.get('initialData')))\n                .then(() => editor.fire('ready'))\n                .then(() => editor));\n        });\n    }\n}\nfunction getInitialData(sourceElementOrData) {\n    return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}\nfunction isElement(value) {\n    return _isElement(value);\n}\n"],
  "mappings": "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",
  "names": []
}
