import {
  Command,
  MenuBarMenuListItemButtonView
} from "./chunk-6E3JQ6U6.js";

// node_modules/@ckeditor/ckeditor5-basic-styles/src/attributecommand.js
var AttributeCommand = class extends Command {
  /**
   * @param attributeKey Attribute that will be set by the command.
   */
  constructor(editor, attributeKey) {
    super(editor);
    this.attributeKey = attributeKey;
  }
  /**
   * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.
   */
  refresh() {
    const model = this.editor.model;
    const doc = model.document;
    this.value = this._getValueFromFirstAllowedNode();
    this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);
  }
  /**
   * Executes the command &ndash; applies the attribute to the selection or removes it from the selection.
   *
   * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.
   *
   * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:
   *
   * * If the selection is on a range, the command applies the attribute to all nodes in that range
   * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).
   * * If the selection is collapsed in a non-empty node, the command applies the attribute to the
   * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).
   * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note
   * that the selection inherits all attributes from a node if it is in an empty node).
   *
   * @fires execute
   * @param options Command options.
   * @param options.forceValue If set, it will force the command behavior. If `true`,
   * the command will apply the attribute, otherwise the command will remove the attribute.
   * If not set, the command will look for its current value to decide what it should do.
   */
  execute(options = {}) {
    const model = this.editor.model;
    const doc = model.document;
    const selection = doc.selection;
    const value = options.forceValue === void 0 ? !this.value : options.forceValue;
    model.change((writer) => {
      if (selection.isCollapsed) {
        if (value) {
          writer.setSelectionAttribute(this.attributeKey, true);
        } else {
          writer.removeSelectionAttribute(this.attributeKey);
        }
      } else {
        const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);
        for (const range of ranges) {
          if (value) {
            writer.setAttribute(this.attributeKey, value, range);
          } else {
            writer.removeAttribute(this.attributeKey, range);
          }
        }
      }
    });
  }
  /**
   * Checks the attribute value of the first node in the selection that allows the attribute.
   * For the collapsed selection returns the selection attribute.
   *
   * @returns The attribute value.
   */
  _getValueFromFirstAllowedNode() {
    const model = this.editor.model;
    const schema = model.schema;
    const selection = model.document.selection;
    if (selection.isCollapsed) {
      return selection.hasAttribute(this.attributeKey);
    }
    for (const range of selection.getRanges()) {
      for (const item of range.getItems()) {
        if (schema.checkAttribute(item, this.attributeKey)) {
          return item.hasAttribute(this.attributeKey);
        }
      }
    }
    return false;
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/utils.js
function getButtonCreator({ editor, commandName, plugin, icon, label, keystroke }) {
  return (ButtonClass) => {
    const command = editor.commands.get(commandName);
    const view = new ButtonClass(editor.locale);
    view.set({
      label,
      icon,
      keystroke,
      isToggleable: true
    });
    view.bind("isEnabled").to(command, "isEnabled");
    view.bind("isOn").to(command, "value");
    if (view instanceof MenuBarMenuListItemButtonView) {
      view.set({
        role: "menuitemcheckbox"
      });
    } else {
      view.set({
        tooltip: true
      });
    }
    plugin.listenTo(view, "execute", () => {
      editor.execute(commandName);
      editor.editing.view.focus();
    });
    return view;
  };
}

export {
  AttributeCommand,
  getButtonCreator
};
/*! Bundled license information:

@ckeditor/ckeditor5-basic-styles/src/attributecommand.js:
  (**
   * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/utils.js:
  (**
   * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)
*/
//# sourceMappingURL=chunk-PX6SUTZ4.js.map
